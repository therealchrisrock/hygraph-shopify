import { GraphQLClient, RequestOptions } from 'graphql-request';
import gql from 'graphql-tag';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
type GraphQLClientRequestHeaders = RequestOptions['requestHeaders'];
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  Date: { input: any; output: any; }
  DateTime: { input: any; output: any; }
  Hex: { input: any; output: any; }
  Json: { input: any; output: any; }
  Long: { input: any; output: any; }
  RGBAHue: { input: any; output: any; }
  RGBATransparency: { input: any; output: any; }
  RichTextAST: { input: any; output: any; }
  Shopify_ARN: { input: any; output: any; }
  Shopify_Color: { input: any; output: any; }
  Shopify_Decimal: { input: any; output: any; }
  Shopify_FormattedString: { input: any; output: any; }
  Shopify_HTML: { input: any; output: any; }
  Shopify_JSON: { input: any; output: any; }
  Shopify_Money: { input: any; output: any; }
  Shopify_StorefrontID: { input: any; output: any; }
  Shopify_URL: { input: any; output: any; }
  Shopify_UnsignedInt64: { input: any; output: any; }
};

export type Aggregate = {
  __typename?: 'Aggregate';
  count: Scalars['Int']['output'];
};

export enum AlternateSectionLayout {
  Duplex = 'duplex'
}

export type Archive = Entity & Node & {
  __typename?: 'Archive';
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Archive>;
  entries: Array<ArchiveEntries>;
  /** List of Archive versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  layouts: Array<Layout>;
  media: Array<Asset>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  slug: Scalars['String']['output'];
  /** System stage field */
  stage: Stage;
  title?: Maybe<Scalars['String']['output']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type ArchiveCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ArchiveDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type ArchiveEntriesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
};


export type ArchiveHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type ArchiveLayoutsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LayoutWhereInput>;
};


export type ArchiveMediaArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<AssetWhereInput>;
};


export type ArchivePublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ArchiveScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type ArchiveUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ArchiveConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ArchiveWhereUniqueInput;
};

/** A connection to a list of items. */
export type ArchiveConnection = {
  __typename?: 'ArchiveConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ArchiveEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ArchiveCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  entries?: InputMaybe<ArchiveEntriesCreateManyInlineInput>;
  layouts?: InputMaybe<LayoutCreateManyInlineInput>;
  media?: InputMaybe<AssetCreateManyInlineInput>;
  slug: Scalars['String']['input'];
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type ArchiveCreateManyInlineInput = {
  /** Connect multiple existing Archive documents */
  connect?: InputMaybe<Array<ArchiveWhereUniqueInput>>;
  /** Create and connect multiple existing Archive documents */
  create?: InputMaybe<Array<ArchiveCreateInput>>;
};

export type ArchiveCreateOneInlineInput = {
  /** Connect one existing Archive document */
  connect?: InputMaybe<ArchiveWhereUniqueInput>;
  /** Create and connect one Archive document */
  create?: InputMaybe<ArchiveCreateInput>;
};

/** An edge in a connection. */
export type ArchiveEdge = {
  __typename?: 'ArchiveEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Archive;
};

/** Identifies documents */
export type ArchiveManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ArchiveWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ArchiveWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ArchiveWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ArchiveWhereStageInput>;
  documentInStages_none?: InputMaybe<ArchiveWhereStageInput>;
  documentInStages_some?: InputMaybe<ArchiveWhereStageInput>;
  /** All values in which the union is empty */
  entries_empty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Matches if the union contains at least one connection to the provided item to the filter */
  entries_some?: InputMaybe<ArchiveEntriesWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  layouts_every?: InputMaybe<LayoutWhereInput>;
  layouts_none?: InputMaybe<LayoutWhereInput>;
  layouts_some?: InputMaybe<LayoutWhereInput>;
  media_every?: InputMaybe<AssetWhereInput>;
  media_none?: InputMaybe<AssetWhereInput>;
  media_some?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ArchiveOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type ArchiveUpdateInput = {
  entries?: InputMaybe<ArchiveEntriesUpdateManyInlineInput>;
  layouts?: InputMaybe<LayoutUpdateManyInlineInput>;
  media?: InputMaybe<AssetUpdateManyInlineInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type ArchiveUpdateManyInlineInput = {
  /** Connect multiple existing Archive documents */
  connect?: InputMaybe<Array<ArchiveConnectInput>>;
  /** Create and connect multiple Archive documents */
  create?: InputMaybe<Array<ArchiveCreateInput>>;
  /** Delete multiple Archive documents */
  delete?: InputMaybe<Array<ArchiveWhereUniqueInput>>;
  /** Disconnect multiple Archive documents */
  disconnect?: InputMaybe<Array<ArchiveWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Archive documents */
  set?: InputMaybe<Array<ArchiveWhereUniqueInput>>;
  /** Update multiple Archive documents */
  update?: InputMaybe<Array<ArchiveUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Archive documents */
  upsert?: InputMaybe<Array<ArchiveUpsertWithNestedWhereUniqueInput>>;
};

export type ArchiveUpdateManyInput = {
  title?: InputMaybe<Scalars['String']['input']>;
};

export type ArchiveUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ArchiveUpdateManyInput;
  /** Document search */
  where: ArchiveWhereInput;
};

export type ArchiveUpdateOneInlineInput = {
  /** Connect existing Archive document */
  connect?: InputMaybe<ArchiveWhereUniqueInput>;
  /** Create and connect one Archive document */
  create?: InputMaybe<ArchiveCreateInput>;
  /** Delete currently connected Archive document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected Archive document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Archive document */
  update?: InputMaybe<ArchiveUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Archive document */
  upsert?: InputMaybe<ArchiveUpsertWithNestedWhereUniqueInput>;
};

export type ArchiveUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ArchiveUpdateInput;
  /** Unique document search */
  where: ArchiveWhereUniqueInput;
};

export type ArchiveUpsertInput = {
  /** Create document if it didn't exist */
  create: ArchiveCreateInput;
  /** Update document if it exists */
  update: ArchiveUpdateInput;
};

export type ArchiveUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ArchiveUpsertInput;
  /** Unique document search */
  where: ArchiveWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type ArchiveWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type ArchiveWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ArchiveWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ArchiveWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ArchiveWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ArchiveWhereStageInput>;
  documentInStages_none?: InputMaybe<ArchiveWhereStageInput>;
  documentInStages_some?: InputMaybe<ArchiveWhereStageInput>;
  /** All values in which the union is empty */
  entries_empty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Matches if the union contains at least one connection to the provided item to the filter */
  entries_some?: InputMaybe<ArchiveEntriesWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  layouts_every?: InputMaybe<LayoutWhereInput>;
  layouts_none?: InputMaybe<LayoutWhereInput>;
  layouts_some?: InputMaybe<LayoutWhereInput>;
  media_every?: InputMaybe<AssetWhereInput>;
  media_none?: InputMaybe<AssetWhereInput>;
  media_some?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type ArchiveWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ArchiveWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ArchiveWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ArchiveWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<ArchiveWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Archive record uniquely */
export type ArchiveWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** Asset system model */
export type Asset = Entity & Node & {
  __typename?: 'Asset';
  /** Recommended max. length is 125 characters */
  alt?: Maybe<Scalars['String']['output']>;
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Asset>;
  fallbackLock: Array<Lock>;
  featuredImageEditorial: Array<Editorial>;
  featuredImageEvent: Array<Event>;
  featuredImagePage: Array<Page>;
  /** The file name */
  fileName: Scalars['String']['output'];
  /** The file handle */
  handle: Scalars['String']['output'];
  /** The height of the file */
  height?: Maybe<Scalars['Float']['output']>;
  /** List of Asset versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  imageSeo: Array<Seo>;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Asset>;
  mediaArchive: Array<Archive>;
  mediaCombinedListing: Array<CombinedListing>;
  mediaEvent: Array<Event>;
  mediaGallery: Array<Gallery>;
  mediaMixedMedia: Array<MixedMedia>;
  /** The mime type of the file */
  mimeType?: Maybe<Scalars['String']['output']>;
  /** Optional. Include a "portrait" asset to render on select components when the user's device orientation is "portrait" */
  portrait?: Maybe<Asset>;
  portraitAsset: Array<Asset>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** The file size */
  size?: Maybe<Scalars['Float']['output']>;
  /** System stage field */
  stage: Stage;
  title?: Maybe<Scalars['String']['output']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** Returns information you need to upload the asset. The type of upload is dependant on what you pass into asset creations as upload type. */
  upload?: Maybe<AssetUpload>;
  /** Get the url for the asset with provided transformations applied. */
  url: Scalars['String']['output'];
  /** The file width */
  width?: Maybe<Scalars['Float']['output']>;
};


/** Asset system model */
export type AssetCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Asset system model */
export type AssetCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


/** Asset system model */
export type AssetFallbackLockArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<LockOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LockWhereInput>;
};


/** Asset system model */
export type AssetFeaturedImageEditorialArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<EditorialOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<EditorialWhereInput>;
};


/** Asset system model */
export type AssetFeaturedImageEventArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<EventOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<EventWhereInput>;
};


/** Asset system model */
export type AssetFeaturedImagePageArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PageWhereInput>;
};


/** Asset system model */
export type AssetHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


/** Asset system model */
export type AssetImageSeoArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<SeoOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<SeoWhereInput>;
};


/** Asset system model */
export type AssetLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  locales?: Array<Locale>;
};


/** Asset system model */
export type AssetMediaArchiveArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ArchiveOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ArchiveWhereInput>;
};


/** Asset system model */
export type AssetMediaCombinedListingArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<CombinedListingOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CombinedListingWhereInput>;
};


/** Asset system model */
export type AssetMediaEventArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<EventOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<EventWhereInput>;
};


/** Asset system model */
export type AssetMediaGalleryArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<GalleryOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GalleryWhereInput>;
};


/** Asset system model */
export type AssetMediaMixedMediaArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<MixedMediaOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<MixedMediaWhereInput>;
};


/** Asset system model */
export type AssetPortraitArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  where?: InputMaybe<AssetSingleRelationWhereInput>;
};


/** Asset system model */
export type AssetPortraitAssetArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<AssetWhereInput>;
};


/** Asset system model */
export type AssetPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Asset system model */
export type AssetPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


/** Asset system model */
export type AssetUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Asset system model */
export type AssetUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetUrlArgs = {
  transformation?: InputMaybe<AssetTransformationInput>;
};

export type AssetConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: AssetWhereUniqueInput;
};

/** A connection to a list of items. */
export type AssetConnection = {
  __typename?: 'AssetConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<AssetEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type AssetCreateInput = {
  /** alt input for default locale (en) */
  alt?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  fallbackLock?: InputMaybe<LockCreateManyInlineInput>;
  featuredImageEditorial?: InputMaybe<EditorialCreateManyInlineInput>;
  featuredImageEvent?: InputMaybe<EventCreateManyInlineInput>;
  featuredImagePage?: InputMaybe<PageCreateManyInlineInput>;
  fileName?: InputMaybe<Scalars['String']['input']>;
  imageSeo?: InputMaybe<SeoCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<AssetCreateLocalizationsInput>;
  mediaArchive?: InputMaybe<ArchiveCreateManyInlineInput>;
  mediaCombinedListing?: InputMaybe<CombinedListingCreateManyInlineInput>;
  mediaEvent?: InputMaybe<EventCreateManyInlineInput>;
  mediaGallery?: InputMaybe<GalleryCreateManyInlineInput>;
  mediaMixedMedia?: InputMaybe<MixedMediaCreateManyInlineInput>;
  portrait?: InputMaybe<AssetCreateOneInlineInput>;
  portraitAsset?: InputMaybe<AssetCreateManyInlineInput>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** Optionally the system can upload a file for you, for that you need to provide a publicly accessible url */
  uploadUrl?: InputMaybe<Scalars['String']['input']>;
};

export type AssetCreateLocalizationDataInput = {
  alt?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  fileName?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** Optionally the system can upload a file for you, for that you need to provide a publicly accessible url */
  uploadUrl?: InputMaybe<Scalars['String']['input']>;
};

export type AssetCreateLocalizationInput = {
  /** Localization input */
  data: AssetCreateLocalizationDataInput;
  locale: Locale;
};

export type AssetCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<AssetCreateLocalizationInput>>;
};

export type AssetCreateManyInlineInput = {
  /** Connect multiple existing Asset documents */
  connect?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Create and connect multiple existing Asset documents */
  create?: InputMaybe<Array<AssetCreateInput>>;
};

export type AssetCreateOneInlineInput = {
  /** Connect one existing Asset document */
  connect?: InputMaybe<AssetWhereUniqueInput>;
  /** Create and connect one Asset document */
  create?: InputMaybe<AssetCreateInput>;
};

/** An edge in a connection. */
export type AssetEdge = {
  __typename?: 'AssetEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Asset;
};

/** Identifies documents */
export type AssetManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AssetWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<AssetWhereStageInput>;
  documentInStages_none?: InputMaybe<AssetWhereStageInput>;
  documentInStages_some?: InputMaybe<AssetWhereStageInput>;
  fallbackLock_every?: InputMaybe<LockWhereInput>;
  fallbackLock_none?: InputMaybe<LockWhereInput>;
  fallbackLock_some?: InputMaybe<LockWhereInput>;
  featuredImageEditorial_every?: InputMaybe<EditorialWhereInput>;
  featuredImageEditorial_none?: InputMaybe<EditorialWhereInput>;
  featuredImageEditorial_some?: InputMaybe<EditorialWhereInput>;
  featuredImageEvent_every?: InputMaybe<EventWhereInput>;
  featuredImageEvent_none?: InputMaybe<EventWhereInput>;
  featuredImageEvent_some?: InputMaybe<EventWhereInput>;
  featuredImagePage_every?: InputMaybe<PageWhereInput>;
  featuredImagePage_none?: InputMaybe<PageWhereInput>;
  featuredImagePage_some?: InputMaybe<PageWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  imageSeo_every?: InputMaybe<SeoWhereInput>;
  imageSeo_none?: InputMaybe<SeoWhereInput>;
  imageSeo_some?: InputMaybe<SeoWhereInput>;
  mediaArchive_every?: InputMaybe<ArchiveWhereInput>;
  mediaArchive_none?: InputMaybe<ArchiveWhereInput>;
  mediaArchive_some?: InputMaybe<ArchiveWhereInput>;
  mediaCombinedListing_every?: InputMaybe<CombinedListingWhereInput>;
  mediaCombinedListing_none?: InputMaybe<CombinedListingWhereInput>;
  mediaCombinedListing_some?: InputMaybe<CombinedListingWhereInput>;
  mediaEvent_every?: InputMaybe<EventWhereInput>;
  mediaEvent_none?: InputMaybe<EventWhereInput>;
  mediaEvent_some?: InputMaybe<EventWhereInput>;
  mediaGallery_every?: InputMaybe<GalleryWhereInput>;
  mediaGallery_none?: InputMaybe<GalleryWhereInput>;
  mediaGallery_some?: InputMaybe<GalleryWhereInput>;
  mediaMixedMedia_every?: InputMaybe<MixedMediaWhereInput>;
  mediaMixedMedia_none?: InputMaybe<MixedMediaWhereInput>;
  mediaMixedMedia_some?: InputMaybe<MixedMediaWhereInput>;
  portrait?: InputMaybe<AssetWhereInput>;
  portraitAsset_every?: InputMaybe<AssetWhereInput>;
  portraitAsset_none?: InputMaybe<AssetWhereInput>;
  portraitAsset_some?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  upload?: InputMaybe<AssetUploadWhereInput>;
};

export enum AssetOrderByInput {
  AltAsc = 'alt_ASC',
  AltDesc = 'alt_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  FileNameAsc = 'fileName_ASC',
  FileNameDesc = 'fileName_DESC',
  HandleAsc = 'handle_ASC',
  HandleDesc = 'handle_DESC',
  HeightAsc = 'height_ASC',
  HeightDesc = 'height_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  MimeTypeAsc = 'mimeType_ASC',
  MimeTypeDesc = 'mimeType_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SizeAsc = 'size_ASC',
  SizeDesc = 'size_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WidthAsc = 'width_ASC',
  WidthDesc = 'width_DESC'
}

/** Identifies documents */
export type AssetSingleRelationWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AssetSingleRelationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AssetSingleRelationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AssetSingleRelationWhereInput>>;
  upload?: InputMaybe<AssetUploadWhereInput>;
};

/** Transformations for Assets */
export type AssetTransformationInput = {
  document?: InputMaybe<DocumentTransformationInput>;
  image?: InputMaybe<ImageTransformationInput>;
  /** Pass true if you want to validate the passed transformation parameters */
  validateOptions?: InputMaybe<Scalars['Boolean']['input']>;
};

export type AssetUpdateInput = {
  /** alt input for default locale (en) */
  alt?: InputMaybe<Scalars['String']['input']>;
  fallbackLock?: InputMaybe<LockUpdateManyInlineInput>;
  featuredImageEditorial?: InputMaybe<EditorialUpdateManyInlineInput>;
  featuredImageEvent?: InputMaybe<EventUpdateManyInlineInput>;
  featuredImagePage?: InputMaybe<PageUpdateManyInlineInput>;
  fileName?: InputMaybe<Scalars['String']['input']>;
  imageSeo?: InputMaybe<SeoUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<AssetUpdateLocalizationsInput>;
  mediaArchive?: InputMaybe<ArchiveUpdateManyInlineInput>;
  mediaCombinedListing?: InputMaybe<CombinedListingUpdateManyInlineInput>;
  mediaEvent?: InputMaybe<EventUpdateManyInlineInput>;
  mediaGallery?: InputMaybe<GalleryUpdateManyInlineInput>;
  mediaMixedMedia?: InputMaybe<MixedMediaUpdateManyInlineInput>;
  portrait?: InputMaybe<AssetUpdateOneInlineInput>;
  portraitAsset?: InputMaybe<AssetUpdateManyInlineInput>;
  /** Use this to define if its a reupload for the asset */
  reUpload?: InputMaybe<Scalars['Boolean']['input']>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']['input']>;
  /** Optionally the system can upload a file for you, for that you need to provide a publicly accessible url */
  uploadUrl?: InputMaybe<Scalars['String']['input']>;
};

export type AssetUpdateLocalizationDataInput = {
  alt?: InputMaybe<Scalars['String']['input']>;
  fileName?: InputMaybe<Scalars['String']['input']>;
  /** Use this to define if its a reupload for the asset */
  reUpload?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** Optionally the system can upload a file for you, for that you need to provide a publicly accessible url */
  uploadUrl?: InputMaybe<Scalars['String']['input']>;
};

export type AssetUpdateLocalizationInput = {
  data: AssetUpdateLocalizationDataInput;
  locale: Locale;
};

export type AssetUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<AssetCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<AssetUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<AssetUpsertLocalizationInput>>;
};

export type AssetUpdateManyInlineInput = {
  /** Connect multiple existing Asset documents */
  connect?: InputMaybe<Array<AssetConnectInput>>;
  /** Create and connect multiple Asset documents */
  create?: InputMaybe<Array<AssetCreateInput>>;
  /** Delete multiple Asset documents */
  delete?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Disconnect multiple Asset documents */
  disconnect?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Asset documents */
  set?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Update multiple Asset documents */
  update?: InputMaybe<Array<AssetUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Asset documents */
  upsert?: InputMaybe<Array<AssetUpsertWithNestedWhereUniqueInput>>;
};

export type AssetUpdateManyInput = {
  /** alt input for default locale (en) */
  alt?: InputMaybe<Scalars['String']['input']>;
  fileName?: InputMaybe<Scalars['String']['input']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<AssetUpdateManyLocalizationsInput>;
  /** Use this to define if its a reupload for the asset */
  reUpload?: InputMaybe<Scalars['Boolean']['input']>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']['input']>;
  /** Optionally the system can upload a file for you, for that you need to provide a publicly accessible url */
  uploadUrl?: InputMaybe<Scalars['String']['input']>;
};

export type AssetUpdateManyLocalizationDataInput = {
  alt?: InputMaybe<Scalars['String']['input']>;
  fileName?: InputMaybe<Scalars['String']['input']>;
  /** Use this to define if its a reupload for the asset */
  reUpload?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** Optionally the system can upload a file for you, for that you need to provide a publicly accessible url */
  uploadUrl?: InputMaybe<Scalars['String']['input']>;
};

export type AssetUpdateManyLocalizationInput = {
  data: AssetUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type AssetUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<AssetUpdateManyLocalizationInput>>;
};

export type AssetUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: AssetUpdateManyInput;
  /** Document search */
  where: AssetWhereInput;
};

export type AssetUpdateOneInlineInput = {
  /** Connect existing Asset document */
  connect?: InputMaybe<AssetWhereUniqueInput>;
  /** Create and connect one Asset document */
  create?: InputMaybe<AssetCreateInput>;
  /** Delete currently connected Asset document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected Asset document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Asset document */
  update?: InputMaybe<AssetUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Asset document */
  upsert?: InputMaybe<AssetUpsertWithNestedWhereUniqueInput>;
};

export type AssetUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: AssetUpdateInput;
  /** Unique document search */
  where: AssetWhereUniqueInput;
};

/** Asset Upload */
export type AssetUpload = {
  __typename?: 'AssetUpload';
  /** Asset Upload Error */
  error?: Maybe<AssetUploadError>;
  /** Expiry Timestamp */
  expiresAt?: Maybe<Scalars['DateTime']['output']>;
  /** Asset Request Data for upload */
  requestPostData?: Maybe<AssetUploadRequestPostData>;
  /** Asset Request Data for upload */
  status?: Maybe<AssetUploadStatus>;
};

/** Represents asset upload error */
export type AssetUploadError = {
  __typename?: 'AssetUploadError';
  code: Scalars['String']['output'];
  message: Scalars['String']['output'];
};

/** Asset Upload Request Post Data */
export type AssetUploadRequestPostData = {
  __typename?: 'AssetUploadRequestPostData';
  /** The algorithm to use in the form field. This value should be passed in the `X-Amz-Algorithm` form field. */
  algorithm: Scalars['String']['output'];
  /** The credential to use in the form field. This value should be passed in the `X-Amz-Credential` form field. */
  credential: Scalars['String']['output'];
  /** The date the request was signed, formatted as YYYYMMDDTHHMMSSZ. This value should be passed in the `X-Amz-Date` header. */
  date: Scalars['String']['output'];
  /** The key to use in the form field. This value should be passed in the `Key` form field. */
  key: Scalars['String']['output'];
  /** The policy to use in the form field. This value should be passed in the `Policy` form field. */
  policy: Scalars['String']['output'];
  /** The security token to use in the form field. This field is optional only pass it if its not null. This value should be passed in the `X-Amz-Security-Token` form field if not null. */
  securityToken?: Maybe<Scalars['String']['output']>;
  /** The signature to use in the form field. This value should be passed in the `X-Amz-Signature` form field. */
  signature: Scalars['String']['output'];
  /** The URL to which the file should be uploaded with a POST request. */
  url: Scalars['String']['output'];
};

/** System Asset Upload Status */
export enum AssetUploadStatus {
  AssetCreatePending = 'ASSET_CREATE_PENDING',
  AssetErrorUpload = 'ASSET_ERROR_UPLOAD',
  AssetUpdatePending = 'ASSET_UPDATE_PENDING',
  AssetUploadComplete = 'ASSET_UPLOAD_COMPLETE'
}

/** Identifies documents */
export type AssetUploadWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AssetUploadWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AssetUploadWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AssetUploadWhereInput>>;
  expiresAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  expiresAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  expiresAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  expiresAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  expiresAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  expiresAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  expiresAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  expiresAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  status?: InputMaybe<AssetUploadStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<InputMaybe<AssetUploadStatus>>>;
  /** Any other value that exists and is not equal to the given value. */
  status_not?: InputMaybe<AssetUploadStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<InputMaybe<AssetUploadStatus>>>;
};

/** Identifies documents */
export type AssetUploadWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AssetUploadWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AssetUploadWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AssetUploadWhereInput>>;
  expiresAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  expiresAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  expiresAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  expiresAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  expiresAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  expiresAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  expiresAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  expiresAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  status?: InputMaybe<AssetUploadStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<InputMaybe<AssetUploadStatus>>>;
  /** Any other value that exists and is not equal to the given value. */
  status_not?: InputMaybe<AssetUploadStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<InputMaybe<AssetUploadStatus>>>;
};

export type AssetUpsertInput = {
  /** Create document if it didn't exist */
  create: AssetCreateInput;
  /** Update document if it exists */
  update: AssetUpdateInput;
};

export type AssetUpsertLocalizationInput = {
  create: AssetCreateLocalizationDataInput;
  locale: Locale;
  update: AssetUpdateLocalizationDataInput;
};

export type AssetUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: AssetUpsertInput;
  /** Unique document search */
  where: AssetWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type AssetWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type AssetWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AssetWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  alt?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  alt_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  alt_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  alt_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  alt_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  alt_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  alt_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  alt_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  alt_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  alt_starts_with?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<AssetWhereStageInput>;
  documentInStages_none?: InputMaybe<AssetWhereStageInput>;
  documentInStages_some?: InputMaybe<AssetWhereStageInput>;
  fallbackLock_every?: InputMaybe<LockWhereInput>;
  fallbackLock_none?: InputMaybe<LockWhereInput>;
  fallbackLock_some?: InputMaybe<LockWhereInput>;
  featuredImageEditorial_every?: InputMaybe<EditorialWhereInput>;
  featuredImageEditorial_none?: InputMaybe<EditorialWhereInput>;
  featuredImageEditorial_some?: InputMaybe<EditorialWhereInput>;
  featuredImageEvent_every?: InputMaybe<EventWhereInput>;
  featuredImageEvent_none?: InputMaybe<EventWhereInput>;
  featuredImageEvent_some?: InputMaybe<EventWhereInput>;
  featuredImagePage_every?: InputMaybe<PageWhereInput>;
  featuredImagePage_none?: InputMaybe<PageWhereInput>;
  featuredImagePage_some?: InputMaybe<PageWhereInput>;
  fileName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  fileName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  fileName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  fileName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  fileName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  fileName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  fileName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  fileName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  fileName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  fileName_starts_with?: InputMaybe<Scalars['String']['input']>;
  handle?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  handle_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  handle_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  handle_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  handle_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  handle_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  handle_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  handle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  handle_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  handle_starts_with?: InputMaybe<Scalars['String']['input']>;
  height?: InputMaybe<Scalars['Float']['input']>;
  /** All values greater than the given value. */
  height_gt?: InputMaybe<Scalars['Float']['input']>;
  /** All values greater than or equal the given value. */
  height_gte?: InputMaybe<Scalars['Float']['input']>;
  /** All values that are contained in given list. */
  height_in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
  /** All values less than the given value. */
  height_lt?: InputMaybe<Scalars['Float']['input']>;
  /** All values less than or equal the given value. */
  height_lte?: InputMaybe<Scalars['Float']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  height_not?: InputMaybe<Scalars['Float']['input']>;
  /** All values that are not contained in given list. */
  height_not_in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  imageSeo_every?: InputMaybe<SeoWhereInput>;
  imageSeo_none?: InputMaybe<SeoWhereInput>;
  imageSeo_some?: InputMaybe<SeoWhereInput>;
  mediaArchive_every?: InputMaybe<ArchiveWhereInput>;
  mediaArchive_none?: InputMaybe<ArchiveWhereInput>;
  mediaArchive_some?: InputMaybe<ArchiveWhereInput>;
  mediaCombinedListing_every?: InputMaybe<CombinedListingWhereInput>;
  mediaCombinedListing_none?: InputMaybe<CombinedListingWhereInput>;
  mediaCombinedListing_some?: InputMaybe<CombinedListingWhereInput>;
  mediaEvent_every?: InputMaybe<EventWhereInput>;
  mediaEvent_none?: InputMaybe<EventWhereInput>;
  mediaEvent_some?: InputMaybe<EventWhereInput>;
  mediaGallery_every?: InputMaybe<GalleryWhereInput>;
  mediaGallery_none?: InputMaybe<GalleryWhereInput>;
  mediaGallery_some?: InputMaybe<GalleryWhereInput>;
  mediaMixedMedia_every?: InputMaybe<MixedMediaWhereInput>;
  mediaMixedMedia_none?: InputMaybe<MixedMediaWhereInput>;
  mediaMixedMedia_some?: InputMaybe<MixedMediaWhereInput>;
  mimeType?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  mimeType_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  mimeType_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  mimeType_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  mimeType_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  mimeType_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  mimeType_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  mimeType_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  mimeType_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  mimeType_starts_with?: InputMaybe<Scalars['String']['input']>;
  portrait?: InputMaybe<AssetWhereInput>;
  portraitAsset_every?: InputMaybe<AssetWhereInput>;
  portraitAsset_none?: InputMaybe<AssetWhereInput>;
  portraitAsset_some?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  size?: InputMaybe<Scalars['Float']['input']>;
  /** All values greater than the given value. */
  size_gt?: InputMaybe<Scalars['Float']['input']>;
  /** All values greater than or equal the given value. */
  size_gte?: InputMaybe<Scalars['Float']['input']>;
  /** All values that are contained in given list. */
  size_in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
  /** All values less than the given value. */
  size_lt?: InputMaybe<Scalars['Float']['input']>;
  /** All values less than or equal the given value. */
  size_lte?: InputMaybe<Scalars['Float']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  size_not?: InputMaybe<Scalars['Float']['input']>;
  /** All values that are not contained in given list. */
  size_not_in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  upload?: InputMaybe<AssetUploadWhereInput>;
  width?: InputMaybe<Scalars['Float']['input']>;
  /** All values greater than the given value. */
  width_gt?: InputMaybe<Scalars['Float']['input']>;
  /** All values greater than or equal the given value. */
  width_gte?: InputMaybe<Scalars['Float']['input']>;
  /** All values that are contained in given list. */
  width_in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
  /** All values less than the given value. */
  width_lt?: InputMaybe<Scalars['Float']['input']>;
  /** All values less than or equal the given value. */
  width_lte?: InputMaybe<Scalars['Float']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  width_not?: InputMaybe<Scalars['Float']['input']>;
  /** All values that are not contained in given list. */
  width_not_in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type AssetWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AssetWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AssetWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AssetWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<AssetWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Asset record uniquely */
export type AssetWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type BatchPayload = {
  __typename?: 'BatchPayload';
  /** The number of nodes that have been affected by the Batch operation. */
  count: Scalars['Long']['output'];
};

export type Block = Entity & {
  __typename?: 'Block';
  content?: Maybe<ContentContent>;
  contentStyle?: Maybe<ContentStyle>;
  /** Customize the colors and spacing for this block. Overrides the default (global) options, and the page (layout) options */
  displayOptions?: Maybe<DisplayOption>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  internalName?: Maybe<Scalars['String']['output']>;
  /** System stage field */
  stage: Stage;
};


export type BlockContentArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type BlockDisplayOptionsArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type BlockConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: BlockWhereUniqueInput;
};

/** A connection to a list of items. */
export type BlockConnection = {
  __typename?: 'BlockConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<BlockEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type BlockCreateInput = {
  content?: InputMaybe<ContentContentCreateOneInlineInput>;
  contentStyle?: InputMaybe<ContentStyle>;
  displayOptions?: InputMaybe<DisplayOptionCreateOneInlineInput>;
  internalName?: InputMaybe<Scalars['String']['input']>;
};

export type BlockCreateManyInlineInput = {
  /** Create and connect multiple existing Block documents */
  create?: InputMaybe<Array<BlockCreateInput>>;
};

export type BlockCreateOneInlineInput = {
  /** Create and connect one Block document */
  create?: InputMaybe<BlockCreateInput>;
};

export type BlockCreateWithPositionInput = {
  /** Document to create */
  data: BlockCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type BlockEdge = {
  __typename?: 'BlockEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Block;
};

/** Identifies documents */
export type BlockManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BlockWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BlockWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BlockWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  /** All values in which the union is connected to the given models */
  content?: InputMaybe<ContentContentWhereInput>;
  contentStyle?: InputMaybe<ContentStyle>;
  /** All values that are contained in given list. */
  contentStyle_in?: InputMaybe<Array<InputMaybe<ContentStyle>>>;
  /** Any other value that exists and is not equal to the given value. */
  contentStyle_not?: InputMaybe<ContentStyle>;
  /** All values that are not contained in given list. */
  contentStyle_not_in?: InputMaybe<Array<InputMaybe<ContentStyle>>>;
  /** All values in which the union is empty */
  content_empty?: InputMaybe<Scalars['Boolean']['input']>;
  displayOptions?: InputMaybe<DisplayOptionWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  internalName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  internalName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  internalName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  internalName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  internalName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  internalName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  internalName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  internalName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  internalName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  internalName_starts_with?: InputMaybe<Scalars['String']['input']>;
};

export enum BlockOrderByInput {
  ContentStyleAsc = 'contentStyle_ASC',
  ContentStyleDesc = 'contentStyle_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  InternalNameAsc = 'internalName_ASC',
  InternalNameDesc = 'internalName_DESC'
}

export type BlockParent = LockedSection;

export type BlockParentConnectInput = {
  LockedSection?: InputMaybe<LockedSectionConnectInput>;
};

export type BlockParentCreateInput = {
  LockedSection?: InputMaybe<LockedSectionCreateInput>;
};

export type BlockParentCreateManyInlineInput = {
  /** Create and connect multiple existing BlockParent documents */
  create?: InputMaybe<Array<BlockParentCreateInput>>;
};

export type BlockParentCreateOneInlineInput = {
  /** Create and connect one BlockParent document */
  create?: InputMaybe<BlockParentCreateInput>;
};

export type BlockParentCreateWithPositionInput = {
  LockedSection?: InputMaybe<LockedSectionCreateWithPositionInput>;
};

export type BlockParentUpdateInput = {
  LockedSection?: InputMaybe<LockedSectionUpdateInput>;
};

export type BlockParentUpdateManyInlineInput = {
  /** Create and connect multiple BlockParent component instances */
  create?: InputMaybe<Array<BlockParentCreateWithPositionInput>>;
  /** Delete multiple BlockParent documents */
  delete?: InputMaybe<Array<BlockParentWhereUniqueInput>>;
  /** Update multiple BlockParent component instances */
  update?: InputMaybe<Array<BlockParentUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple BlockParent component instances */
  upsert?: InputMaybe<Array<BlockParentUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type BlockParentUpdateManyWithNestedWhereInput = {
  LockedSection?: InputMaybe<LockedSectionUpdateManyWithNestedWhereInput>;
};

export type BlockParentUpdateOneInlineInput = {
  /** Create and connect one BlockParent document */
  create?: InputMaybe<BlockParentCreateInput>;
  /** Delete currently connected BlockParent document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single BlockParent document */
  update?: InputMaybe<BlockParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single BlockParent document */
  upsert?: InputMaybe<BlockParentUpsertWithNestedWhereUniqueInput>;
};

export type BlockParentUpdateWithNestedWhereUniqueAndPositionInput = {
  LockedSection?: InputMaybe<LockedSectionUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type BlockParentUpdateWithNestedWhereUniqueInput = {
  LockedSection?: InputMaybe<LockedSectionUpdateWithNestedWhereUniqueInput>;
};

export type BlockParentUpsertWithNestedWhereUniqueAndPositionInput = {
  LockedSection?: InputMaybe<LockedSectionUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type BlockParentUpsertWithNestedWhereUniqueInput = {
  LockedSection?: InputMaybe<LockedSectionUpsertWithNestedWhereUniqueInput>;
};

export type BlockParentWhereInput = {
  LockedSection?: InputMaybe<LockedSectionWhereInput>;
};

export type BlockParentWhereUniqueInput = {
  LockedSection?: InputMaybe<LockedSectionWhereUniqueInput>;
};

export type BlockUpdateInput = {
  content?: InputMaybe<ContentContentUpdateOneInlineInput>;
  contentStyle?: InputMaybe<ContentStyle>;
  displayOptions?: InputMaybe<DisplayOptionUpdateOneInlineInput>;
  internalName?: InputMaybe<Scalars['String']['input']>;
};

export type BlockUpdateManyInlineInput = {
  /** Create and connect multiple Block component instances */
  create?: InputMaybe<Array<BlockCreateWithPositionInput>>;
  /** Delete multiple Block documents */
  delete?: InputMaybe<Array<BlockWhereUniqueInput>>;
  /** Update multiple Block component instances */
  update?: InputMaybe<Array<BlockUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple Block component instances */
  upsert?: InputMaybe<Array<BlockUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type BlockUpdateManyInput = {
  contentStyle?: InputMaybe<ContentStyle>;
  internalName?: InputMaybe<Scalars['String']['input']>;
};

export type BlockUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: BlockUpdateManyInput;
  /** Document search */
  where: BlockWhereInput;
};

export type BlockUpdateOneInlineInput = {
  /** Create and connect one Block document */
  create?: InputMaybe<BlockCreateInput>;
  /** Delete currently connected Block document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Block document */
  update?: InputMaybe<BlockUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Block document */
  upsert?: InputMaybe<BlockUpsertWithNestedWhereUniqueInput>;
};

export type BlockUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<BlockUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: BlockWhereUniqueInput;
};

export type BlockUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: BlockUpdateInput;
  /** Unique document search */
  where: BlockWhereUniqueInput;
};

export type BlockUpsertInput = {
  /** Create document if it didn't exist */
  create: BlockCreateInput;
  /** Update document if it exists */
  update: BlockUpdateInput;
};

export type BlockUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<BlockUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: BlockWhereUniqueInput;
};

export type BlockUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: BlockUpsertInput;
  /** Unique document search */
  where: BlockWhereUniqueInput;
};

/** Identifies documents */
export type BlockWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BlockWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BlockWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BlockWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  /** All values in which the union is connected to the given models */
  content?: InputMaybe<ContentContentWhereInput>;
  contentStyle?: InputMaybe<ContentStyle>;
  /** All values that are contained in given list. */
  contentStyle_in?: InputMaybe<Array<InputMaybe<ContentStyle>>>;
  /** Any other value that exists and is not equal to the given value. */
  contentStyle_not?: InputMaybe<ContentStyle>;
  /** All values that are not contained in given list. */
  contentStyle_not_in?: InputMaybe<Array<InputMaybe<ContentStyle>>>;
  /** All values in which the union is empty */
  content_empty?: InputMaybe<Scalars['Boolean']['input']>;
  displayOptions?: InputMaybe<DisplayOptionWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  internalName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  internalName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  internalName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  internalName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  internalName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  internalName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  internalName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  internalName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  internalName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  internalName_starts_with?: InputMaybe<Scalars['String']['input']>;
};

/** References Block record uniquely */
export type BlockWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export enum ButtonStyle {
  Inline = 'inline',
  Inverted = 'inverted',
  Primary = 'primary'
}

export type Collection = Entity & Node & {
  __typename?: 'Collection';
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  customSection?: Maybe<CustomizedSection>;
  /** Get the document in other stages */
  documentInStages: Array<Collection>;
  gid: Scalars['String']['output'];
  heroes: Array<Layout>;
  /** List of Collection versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  layouts: Array<Layout>;
  legacyResourceId: Scalars['String']['output'];
  lock?: Maybe<Lock>;
  lockExemption?: Maybe<Lock>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  slug: Scalars['String']['output'];
  /** System stage field */
  stage: Stage;
  title: Scalars['String']['output'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type CollectionCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type CollectionCustomSectionArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type CollectionDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type CollectionHeroesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LayoutWhereInput>;
};


export type CollectionHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type CollectionLayoutsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LayoutWhereInput>;
};


export type CollectionLockArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type CollectionLockExemptionArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type CollectionPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type CollectionScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type CollectionUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type CollectionConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: CollectionWhereUniqueInput;
};

/** A connection to a list of items. */
export type CollectionConnection = {
  __typename?: 'CollectionConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<CollectionEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CollectionCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  customSection?: InputMaybe<CustomizedSectionCreateOneInlineInput>;
  gid: Scalars['String']['input'];
  heroes?: InputMaybe<LayoutCreateManyInlineInput>;
  layouts?: InputMaybe<LayoutCreateManyInlineInput>;
  legacyResourceId: Scalars['String']['input'];
  lock?: InputMaybe<LockCreateOneInlineInput>;
  lockExemption?: InputMaybe<LockCreateOneInlineInput>;
  slug: Scalars['String']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type CollectionCreateManyInlineInput = {
  /** Connect multiple existing Collection documents */
  connect?: InputMaybe<Array<CollectionWhereUniqueInput>>;
  /** Create and connect multiple existing Collection documents */
  create?: InputMaybe<Array<CollectionCreateInput>>;
};

export type CollectionCreateOneInlineInput = {
  /** Connect one existing Collection document */
  connect?: InputMaybe<CollectionWhereUniqueInput>;
  /** Create and connect one Collection document */
  create?: InputMaybe<CollectionCreateInput>;
};

/** An edge in a connection. */
export type CollectionEdge = {
  __typename?: 'CollectionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Collection;
};

/** Identifies documents */
export type CollectionManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CollectionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CollectionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CollectionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  customSection?: InputMaybe<CustomizedSectionWhereInput>;
  documentInStages_every?: InputMaybe<CollectionWhereStageInput>;
  documentInStages_none?: InputMaybe<CollectionWhereStageInput>;
  documentInStages_some?: InputMaybe<CollectionWhereStageInput>;
  gid?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  gid_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  gid_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  gid_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  gid_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  gid_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  gid_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  gid_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  gid_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  gid_starts_with?: InputMaybe<Scalars['String']['input']>;
  heroes_every?: InputMaybe<LayoutWhereInput>;
  heroes_none?: InputMaybe<LayoutWhereInput>;
  heroes_some?: InputMaybe<LayoutWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  layouts_every?: InputMaybe<LayoutWhereInput>;
  layouts_none?: InputMaybe<LayoutWhereInput>;
  layouts_some?: InputMaybe<LayoutWhereInput>;
  legacyResourceId?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  legacyResourceId_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  legacyResourceId_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  legacyResourceId_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  legacyResourceId_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  legacyResourceId_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  legacyResourceId_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  legacyResourceId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  legacyResourceId_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  legacyResourceId_starts_with?: InputMaybe<Scalars['String']['input']>;
  lock?: InputMaybe<LockWhereInput>;
  lockExemption?: InputMaybe<LockWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum CollectionOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  GidAsc = 'gid_ASC',
  GidDesc = 'gid_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LegacyResourceIdAsc = 'legacyResourceId_ASC',
  LegacyResourceIdDesc = 'legacyResourceId_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type CollectionUpdateInput = {
  customSection?: InputMaybe<CustomizedSectionUpdateOneInlineInput>;
  gid?: InputMaybe<Scalars['String']['input']>;
  heroes?: InputMaybe<LayoutUpdateManyInlineInput>;
  layouts?: InputMaybe<LayoutUpdateManyInlineInput>;
  legacyResourceId?: InputMaybe<Scalars['String']['input']>;
  lock?: InputMaybe<LockUpdateOneInlineInput>;
  lockExemption?: InputMaybe<LockUpdateOneInlineInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type CollectionUpdateManyInlineInput = {
  /** Connect multiple existing Collection documents */
  connect?: InputMaybe<Array<CollectionConnectInput>>;
  /** Create and connect multiple Collection documents */
  create?: InputMaybe<Array<CollectionCreateInput>>;
  /** Delete multiple Collection documents */
  delete?: InputMaybe<Array<CollectionWhereUniqueInput>>;
  /** Disconnect multiple Collection documents */
  disconnect?: InputMaybe<Array<CollectionWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Collection documents */
  set?: InputMaybe<Array<CollectionWhereUniqueInput>>;
  /** Update multiple Collection documents */
  update?: InputMaybe<Array<CollectionUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Collection documents */
  upsert?: InputMaybe<Array<CollectionUpsertWithNestedWhereUniqueInput>>;
};

export type CollectionUpdateManyInput = {
  legacyResourceId?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type CollectionUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: CollectionUpdateManyInput;
  /** Document search */
  where: CollectionWhereInput;
};

export type CollectionUpdateOneInlineInput = {
  /** Connect existing Collection document */
  connect?: InputMaybe<CollectionWhereUniqueInput>;
  /** Create and connect one Collection document */
  create?: InputMaybe<CollectionCreateInput>;
  /** Delete currently connected Collection document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected Collection document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Collection document */
  update?: InputMaybe<CollectionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Collection document */
  upsert?: InputMaybe<CollectionUpsertWithNestedWhereUniqueInput>;
};

export type CollectionUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: CollectionUpdateInput;
  /** Unique document search */
  where: CollectionWhereUniqueInput;
};

export type CollectionUpsertInput = {
  /** Create document if it didn't exist */
  create: CollectionCreateInput;
  /** Update document if it exists */
  update: CollectionUpdateInput;
};

export type CollectionUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: CollectionUpsertInput;
  /** Unique document search */
  where: CollectionWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type CollectionWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type CollectionWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CollectionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CollectionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CollectionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  customSection?: InputMaybe<CustomizedSectionWhereInput>;
  documentInStages_every?: InputMaybe<CollectionWhereStageInput>;
  documentInStages_none?: InputMaybe<CollectionWhereStageInput>;
  documentInStages_some?: InputMaybe<CollectionWhereStageInput>;
  gid?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  gid_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  gid_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  gid_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  gid_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  gid_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  gid_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  gid_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  gid_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  gid_starts_with?: InputMaybe<Scalars['String']['input']>;
  heroes_every?: InputMaybe<LayoutWhereInput>;
  heroes_none?: InputMaybe<LayoutWhereInput>;
  heroes_some?: InputMaybe<LayoutWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  layouts_every?: InputMaybe<LayoutWhereInput>;
  layouts_none?: InputMaybe<LayoutWhereInput>;
  layouts_some?: InputMaybe<LayoutWhereInput>;
  legacyResourceId?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  legacyResourceId_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  legacyResourceId_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  legacyResourceId_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  legacyResourceId_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  legacyResourceId_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  legacyResourceId_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  legacyResourceId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  legacyResourceId_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  legacyResourceId_starts_with?: InputMaybe<Scalars['String']['input']>;
  lock?: InputMaybe<LockWhereInput>;
  lockExemption?: InputMaybe<LockWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type CollectionWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CollectionWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CollectionWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CollectionWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<CollectionWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Collection record uniquely */
export type CollectionWhereUniqueInput = {
  gid?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** Representing a color value comprising of HEX, RGBA and css color values */
export type Color = {
  __typename?: 'Color';
  css: Scalars['String']['output'];
  hex: Scalars['Hex']['output'];
  rgba: Rgba;
};

/** Accepts either HEX or RGBA color value. At least one of hex or rgba value should be passed. If both are passed RGBA is used. */
export type ColorInput = {
  hex?: InputMaybe<Scalars['Hex']['input']>;
  rgba?: InputMaybe<RgbaInput>;
};

export type CombinedListing = Entity & Node & {
  __typename?: 'CombinedListing';
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  description?: Maybe<RichText>;
  /** Get the document in other stages */
  documentInStages: Array<CombinedListing>;
  editorial?: Maybe<Editorial>;
  event: Array<Event>;
  /** List of CombinedListing versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  media: Array<Asset>;
  products: Array<Product>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  slug: Scalars['String']['output'];
  /** System stage field */
  stage: Stage;
  title?: Maybe<Scalars['String']['output']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type CombinedListingCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type CombinedListingDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type CombinedListingEditorialArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type CombinedListingEventArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<EventWhereInput>;
};


export type CombinedListingHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type CombinedListingMediaArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<AssetWhereInput>;
};


export type CombinedListingProductsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ProductOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProductWhereInput>;
};


export type CombinedListingPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type CombinedListingScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type CombinedListingUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type CombinedListingConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: CombinedListingWhereUniqueInput;
};

/** A connection to a list of items. */
export type CombinedListingConnection = {
  __typename?: 'CombinedListingConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<CombinedListingEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CombinedListingCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['RichTextAST']['input']>;
  editorial?: InputMaybe<EditorialCreateOneInlineInput>;
  event?: InputMaybe<EventCreateManyInlineInput>;
  media?: InputMaybe<AssetCreateManyInlineInput>;
  products?: InputMaybe<ProductCreateManyInlineInput>;
  slug: Scalars['String']['input'];
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type CombinedListingCreateManyInlineInput = {
  /** Connect multiple existing CombinedListing documents */
  connect?: InputMaybe<Array<CombinedListingWhereUniqueInput>>;
  /** Create and connect multiple existing CombinedListing documents */
  create?: InputMaybe<Array<CombinedListingCreateInput>>;
};

export type CombinedListingCreateOneInlineInput = {
  /** Connect one existing CombinedListing document */
  connect?: InputMaybe<CombinedListingWhereUniqueInput>;
  /** Create and connect one CombinedListing document */
  create?: InputMaybe<CombinedListingCreateInput>;
};

/** An edge in a connection. */
export type CombinedListingEdge = {
  __typename?: 'CombinedListingEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: CombinedListing;
};

/** Identifies documents */
export type CombinedListingManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CombinedListingWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CombinedListingWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CombinedListingWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<CombinedListingWhereStageInput>;
  documentInStages_none?: InputMaybe<CombinedListingWhereStageInput>;
  documentInStages_some?: InputMaybe<CombinedListingWhereStageInput>;
  editorial?: InputMaybe<EditorialWhereInput>;
  event_every?: InputMaybe<EventWhereInput>;
  event_none?: InputMaybe<EventWhereInput>;
  event_some?: InputMaybe<EventWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  media_every?: InputMaybe<AssetWhereInput>;
  media_none?: InputMaybe<AssetWhereInput>;
  media_some?: InputMaybe<AssetWhereInput>;
  products_every?: InputMaybe<ProductWhereInput>;
  products_none?: InputMaybe<ProductWhereInput>;
  products_some?: InputMaybe<ProductWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum CombinedListingOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type CombinedListingUpdateInput = {
  description?: InputMaybe<Scalars['RichTextAST']['input']>;
  editorial?: InputMaybe<EditorialUpdateOneInlineInput>;
  event?: InputMaybe<EventUpdateManyInlineInput>;
  media?: InputMaybe<AssetUpdateManyInlineInput>;
  products?: InputMaybe<ProductUpdateManyInlineInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type CombinedListingUpdateManyInlineInput = {
  /** Connect multiple existing CombinedListing documents */
  connect?: InputMaybe<Array<CombinedListingConnectInput>>;
  /** Create and connect multiple CombinedListing documents */
  create?: InputMaybe<Array<CombinedListingCreateInput>>;
  /** Delete multiple CombinedListing documents */
  delete?: InputMaybe<Array<CombinedListingWhereUniqueInput>>;
  /** Disconnect multiple CombinedListing documents */
  disconnect?: InputMaybe<Array<CombinedListingWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing CombinedListing documents */
  set?: InputMaybe<Array<CombinedListingWhereUniqueInput>>;
  /** Update multiple CombinedListing documents */
  update?: InputMaybe<Array<CombinedListingUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple CombinedListing documents */
  upsert?: InputMaybe<Array<CombinedListingUpsertWithNestedWhereUniqueInput>>;
};

export type CombinedListingUpdateManyInput = {
  description?: InputMaybe<Scalars['RichTextAST']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type CombinedListingUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: CombinedListingUpdateManyInput;
  /** Document search */
  where: CombinedListingWhereInput;
};

export type CombinedListingUpdateOneInlineInput = {
  /** Connect existing CombinedListing document */
  connect?: InputMaybe<CombinedListingWhereUniqueInput>;
  /** Create and connect one CombinedListing document */
  create?: InputMaybe<CombinedListingCreateInput>;
  /** Delete currently connected CombinedListing document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected CombinedListing document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single CombinedListing document */
  update?: InputMaybe<CombinedListingUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CombinedListing document */
  upsert?: InputMaybe<CombinedListingUpsertWithNestedWhereUniqueInput>;
};

export type CombinedListingUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: CombinedListingUpdateInput;
  /** Unique document search */
  where: CombinedListingWhereUniqueInput;
};

export type CombinedListingUpsertInput = {
  /** Create document if it didn't exist */
  create: CombinedListingCreateInput;
  /** Update document if it exists */
  update: CombinedListingUpdateInput;
};

export type CombinedListingUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: CombinedListingUpsertInput;
  /** Unique document search */
  where: CombinedListingWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type CombinedListingWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type CombinedListingWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CombinedListingWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CombinedListingWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CombinedListingWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<CombinedListingWhereStageInput>;
  documentInStages_none?: InputMaybe<CombinedListingWhereStageInput>;
  documentInStages_some?: InputMaybe<CombinedListingWhereStageInput>;
  editorial?: InputMaybe<EditorialWhereInput>;
  event_every?: InputMaybe<EventWhereInput>;
  event_none?: InputMaybe<EventWhereInput>;
  event_some?: InputMaybe<EventWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  media_every?: InputMaybe<AssetWhereInput>;
  media_none?: InputMaybe<AssetWhereInput>;
  media_some?: InputMaybe<AssetWhereInput>;
  products_every?: InputMaybe<ProductWhereInput>;
  products_none?: InputMaybe<ProductWhereInput>;
  products_some?: InputMaybe<ProductWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type CombinedListingWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CombinedListingWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CombinedListingWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CombinedListingWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<CombinedListingWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References CombinedListing record uniquely */
export type CombinedListingWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type ConnectPositionInput = {
  /** Connect document after specified document */
  after?: InputMaybe<Scalars['ID']['input']>;
  /** Connect document before specified document */
  before?: InputMaybe<Scalars['ID']['input']>;
  /** Connect document at last position */
  end?: InputMaybe<Scalars['Boolean']['input']>;
  /** Connect document at first position */
  start?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * - (Collections) List View => Render Collection items in a list
 * - (Collection) Feed => Basic Grid of Product Cards; Default for collections
 * - (Collection) Quick Buy => Render a Collection of "Enriched Products" as a duplex with a product selector and add to cart button.
 */
export enum ContentStyle {
  Cards = 'Cards',
  Carousel = 'Carousel',
  Duplex = 'Duplex',
  Gallery = 'Gallery',
  Grid = 'Grid',
  Hero = 'Hero',
  List = 'List',
  QuickBuy = 'QuickBuy',
  Sticky = 'Sticky',
  Swimlane = 'Swimlane',
  Tiles = 'Tiles'
}

export type CountdownComponent = Entity & {
  __typename?: 'CountdownComponent';
  countdown?: Maybe<Lock>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  preview?: Maybe<CountdownConfigurationPreview>;
  /** System stage field */
  stage: Stage;
};


export type CountdownComponentCountdownArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type CountdownComponentPreviewArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type CountdownComponentConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: CountdownComponentWhereUniqueInput;
};

/** A connection to a list of items. */
export type CountdownComponentConnection = {
  __typename?: 'CountdownComponentConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<CountdownComponentEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CountdownComponentCreateInput = {
  countdown?: InputMaybe<LockCreateOneInlineInput>;
  preview?: InputMaybe<CountdownConfigurationPreviewCreateOneInlineInput>;
};

export type CountdownComponentCreateManyInlineInput = {
  /** Create and connect multiple existing CountdownComponent documents */
  create?: InputMaybe<Array<CountdownComponentCreateInput>>;
};

export type CountdownComponentCreateOneInlineInput = {
  /** Create and connect one CountdownComponent document */
  create?: InputMaybe<CountdownComponentCreateInput>;
};

export type CountdownComponentCreateWithPositionInput = {
  /** Document to create */
  data: CountdownComponentCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type CountdownComponentEdge = {
  __typename?: 'CountdownComponentEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: CountdownComponent;
};

/** Identifies documents */
export type CountdownComponentManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CountdownComponentWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CountdownComponentWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CountdownComponentWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  countdown?: InputMaybe<LockWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values in which the union is connected to the given models */
  preview?: InputMaybe<CountdownConfigurationPreviewWhereInput>;
  /** All values in which the union is empty */
  preview_empty?: InputMaybe<Scalars['Boolean']['input']>;
};

export enum CountdownComponentOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type CountdownComponentUpdateInput = {
  countdown?: InputMaybe<LockUpdateOneInlineInput>;
  preview?: InputMaybe<CountdownConfigurationPreviewUpdateOneInlineInput>;
};

export type CountdownComponentUpdateManyInlineInput = {
  /** Create and connect multiple CountdownComponent component instances */
  create?: InputMaybe<Array<CountdownComponentCreateWithPositionInput>>;
  /** Delete multiple CountdownComponent documents */
  delete?: InputMaybe<Array<CountdownComponentWhereUniqueInput>>;
  /** Update multiple CountdownComponent component instances */
  update?: InputMaybe<Array<CountdownComponentUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple CountdownComponent component instances */
  upsert?: InputMaybe<Array<CountdownComponentUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type CountdownComponentUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: InputMaybe<Scalars['String']['input']>;
};

export type CountdownComponentUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: CountdownComponentUpdateManyInput;
  /** Document search */
  where: CountdownComponentWhereInput;
};

export type CountdownComponentUpdateOneInlineInput = {
  /** Create and connect one CountdownComponent document */
  create?: InputMaybe<CountdownComponentCreateInput>;
  /** Delete currently connected CountdownComponent document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single CountdownComponent document */
  update?: InputMaybe<CountdownComponentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CountdownComponent document */
  upsert?: InputMaybe<CountdownComponentUpsertWithNestedWhereUniqueInput>;
};

export type CountdownComponentUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<CountdownComponentUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CountdownComponentWhereUniqueInput;
};

export type CountdownComponentUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: CountdownComponentUpdateInput;
  /** Unique document search */
  where: CountdownComponentWhereUniqueInput;
};

export type CountdownComponentUpsertInput = {
  /** Create document if it didn't exist */
  create: CountdownComponentCreateInput;
  /** Update document if it exists */
  update: CountdownComponentUpdateInput;
};

export type CountdownComponentUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<CountdownComponentUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CountdownComponentWhereUniqueInput;
};

export type CountdownComponentUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: CountdownComponentUpsertInput;
  /** Unique document search */
  where: CountdownComponentWhereUniqueInput;
};

/** Identifies documents */
export type CountdownComponentWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CountdownComponentWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CountdownComponentWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CountdownComponentWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  countdown?: InputMaybe<LockWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values in which the union is connected to the given models */
  preview?: InputMaybe<CountdownConfigurationPreviewWhereInput>;
  /** All values in which the union is empty */
  preview_empty?: InputMaybe<Scalars['Boolean']['input']>;
};

/** References CountdownComponent record uniquely */
export type CountdownComponentWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

/** Override the default appearance of a section using the available options */
export type CustomizedSection = Entity & Node & {
  __typename?: 'CustomizedSection';
  /** Assign an alternate layout to this section. Only some options work for specific content types, which are outlined in the brackets. */
  alternateLayout?: Maybe<AlternateSectionLayout>;
  content?: Maybe<CustomSectionSection>;
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<CustomizedSection>;
  /** List of CustomizedSection versions */
  history: Array<Version>;
  /** Uses a suitable default if no option is provided. */
  horizontalPadding?: Maybe<Sizes>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  layouts: Array<Layout>;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<CustomizedSection>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  /** Where applicable, enable this option to switch the order that elements appear on the page. */
  reverseLayout?: Maybe<Scalars['Boolean']['output']>;
  scheduledIn: Array<ScheduledOperation>;
  slug: Scalars['String']['output'];
  /** System stage field */
  stage: Stage;
  theme?: Maybe<Theme>;
  title?: Maybe<Scalars['String']['output']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** Override the default padding above and below the section using this option. */
  verticalPadding?: Maybe<Sizes>;
};


/** Override the default appearance of a section using the available options */
export type CustomizedSectionContentArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Override the default appearance of a section using the available options */
export type CustomizedSectionCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Override the default appearance of a section using the available options */
export type CustomizedSectionCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Override the default appearance of a section using the available options */
export type CustomizedSectionDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


/** Override the default appearance of a section using the available options */
export type CustomizedSectionHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


/** Override the default appearance of a section using the available options */
export type CustomizedSectionLayoutsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LayoutWhereInput>;
};


/** Override the default appearance of a section using the available options */
export type CustomizedSectionLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  locales?: Array<Locale>;
};


/** Override the default appearance of a section using the available options */
export type CustomizedSectionPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Override the default appearance of a section using the available options */
export type CustomizedSectionPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Override the default appearance of a section using the available options */
export type CustomizedSectionScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


/** Override the default appearance of a section using the available options */
export type CustomizedSectionThemeArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Override the default appearance of a section using the available options */
export type CustomizedSectionUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Override the default appearance of a section using the available options */
export type CustomizedSectionUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type CustomizedSectionConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: CustomizedSectionWhereUniqueInput;
};

/** A connection to a list of items. */
export type CustomizedSectionConnection = {
  __typename?: 'CustomizedSectionConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<CustomizedSectionEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CustomizedSectionCreateInput = {
  alternateLayout?: InputMaybe<AlternateSectionLayout>;
  content?: InputMaybe<CustomSectionSectionCreateOneInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  horizontalPadding?: InputMaybe<Sizes>;
  layouts?: InputMaybe<LayoutCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<CustomizedSectionCreateLocalizationsInput>;
  reverseLayout?: InputMaybe<Scalars['Boolean']['input']>;
  slug: Scalars['String']['input'];
  theme?: InputMaybe<ThemeCreateOneInlineInput>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  verticalPadding?: InputMaybe<Sizes>;
};

export type CustomizedSectionCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type CustomizedSectionCreateLocalizationInput = {
  /** Localization input */
  data: CustomizedSectionCreateLocalizationDataInput;
  locale: Locale;
};

export type CustomizedSectionCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<CustomizedSectionCreateLocalizationInput>>;
};

export type CustomizedSectionCreateManyInlineInput = {
  /** Connect multiple existing CustomizedSection documents */
  connect?: InputMaybe<Array<CustomizedSectionWhereUniqueInput>>;
  /** Create and connect multiple existing CustomizedSection documents */
  create?: InputMaybe<Array<CustomizedSectionCreateInput>>;
};

export type CustomizedSectionCreateOneInlineInput = {
  /** Connect one existing CustomizedSection document */
  connect?: InputMaybe<CustomizedSectionWhereUniqueInput>;
  /** Create and connect one CustomizedSection document */
  create?: InputMaybe<CustomizedSectionCreateInput>;
};

/** An edge in a connection. */
export type CustomizedSectionEdge = {
  __typename?: 'CustomizedSectionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: CustomizedSection;
};

/** Identifies documents */
export type CustomizedSectionManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CustomizedSectionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CustomizedSectionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CustomizedSectionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  alternateLayout?: InputMaybe<AlternateSectionLayout>;
  /** All values that are contained in given list. */
  alternateLayout_in?: InputMaybe<Array<InputMaybe<AlternateSectionLayout>>>;
  /** Any other value that exists and is not equal to the given value. */
  alternateLayout_not?: InputMaybe<AlternateSectionLayout>;
  /** All values that are not contained in given list. */
  alternateLayout_not_in?: InputMaybe<Array<InputMaybe<AlternateSectionLayout>>>;
  /** All values in which the union is connected to the given models */
  content?: InputMaybe<CustomSectionSectionWhereInput>;
  /** All values in which the union is empty */
  content_empty?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<CustomizedSectionWhereStageInput>;
  documentInStages_none?: InputMaybe<CustomizedSectionWhereStageInput>;
  documentInStages_some?: InputMaybe<CustomizedSectionWhereStageInput>;
  horizontalPadding?: InputMaybe<Sizes>;
  /** All values that are contained in given list. */
  horizontalPadding_in?: InputMaybe<Array<InputMaybe<Sizes>>>;
  /** Any other value that exists and is not equal to the given value. */
  horizontalPadding_not?: InputMaybe<Sizes>;
  /** All values that are not contained in given list. */
  horizontalPadding_not_in?: InputMaybe<Array<InputMaybe<Sizes>>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  layouts_every?: InputMaybe<LayoutWhereInput>;
  layouts_none?: InputMaybe<LayoutWhereInput>;
  layouts_some?: InputMaybe<LayoutWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  reverseLayout?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  reverseLayout_not?: InputMaybe<Scalars['Boolean']['input']>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  theme?: InputMaybe<ThemeWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  verticalPadding?: InputMaybe<Sizes>;
  /** All values that are contained in given list. */
  verticalPadding_in?: InputMaybe<Array<InputMaybe<Sizes>>>;
  /** Any other value that exists and is not equal to the given value. */
  verticalPadding_not?: InputMaybe<Sizes>;
  /** All values that are not contained in given list. */
  verticalPadding_not_in?: InputMaybe<Array<InputMaybe<Sizes>>>;
};

export enum CustomizedSectionOrderByInput {
  AlternateLayoutAsc = 'alternateLayout_ASC',
  AlternateLayoutDesc = 'alternateLayout_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  HorizontalPaddingAsc = 'horizontalPadding_ASC',
  HorizontalPaddingDesc = 'horizontalPadding_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  ReverseLayoutAsc = 'reverseLayout_ASC',
  ReverseLayoutDesc = 'reverseLayout_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VerticalPaddingAsc = 'verticalPadding_ASC',
  VerticalPaddingDesc = 'verticalPadding_DESC'
}

export type CustomizedSectionUpdateInput = {
  alternateLayout?: InputMaybe<AlternateSectionLayout>;
  content?: InputMaybe<CustomSectionSectionUpdateOneInlineInput>;
  horizontalPadding?: InputMaybe<Sizes>;
  layouts?: InputMaybe<LayoutUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<CustomizedSectionUpdateLocalizationsInput>;
  reverseLayout?: InputMaybe<Scalars['Boolean']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  theme?: InputMaybe<ThemeUpdateOneInlineInput>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']['input']>;
  verticalPadding?: InputMaybe<Sizes>;
};

export type CustomizedSectionUpdateLocalizationDataInput = {
  title?: InputMaybe<Scalars['String']['input']>;
};

export type CustomizedSectionUpdateLocalizationInput = {
  data: CustomizedSectionUpdateLocalizationDataInput;
  locale: Locale;
};

export type CustomizedSectionUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<CustomizedSectionCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<CustomizedSectionUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<CustomizedSectionUpsertLocalizationInput>>;
};

export type CustomizedSectionUpdateManyInlineInput = {
  /** Connect multiple existing CustomizedSection documents */
  connect?: InputMaybe<Array<CustomizedSectionConnectInput>>;
  /** Create and connect multiple CustomizedSection documents */
  create?: InputMaybe<Array<CustomizedSectionCreateInput>>;
  /** Delete multiple CustomizedSection documents */
  delete?: InputMaybe<Array<CustomizedSectionWhereUniqueInput>>;
  /** Disconnect multiple CustomizedSection documents */
  disconnect?: InputMaybe<Array<CustomizedSectionWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing CustomizedSection documents */
  set?: InputMaybe<Array<CustomizedSectionWhereUniqueInput>>;
  /** Update multiple CustomizedSection documents */
  update?: InputMaybe<Array<CustomizedSectionUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple CustomizedSection documents */
  upsert?: InputMaybe<Array<CustomizedSectionUpsertWithNestedWhereUniqueInput>>;
};

export type CustomizedSectionUpdateManyInput = {
  alternateLayout?: InputMaybe<AlternateSectionLayout>;
  horizontalPadding?: InputMaybe<Sizes>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<CustomizedSectionUpdateManyLocalizationsInput>;
  reverseLayout?: InputMaybe<Scalars['Boolean']['input']>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']['input']>;
  verticalPadding?: InputMaybe<Sizes>;
};

export type CustomizedSectionUpdateManyLocalizationDataInput = {
  title?: InputMaybe<Scalars['String']['input']>;
};

export type CustomizedSectionUpdateManyLocalizationInput = {
  data: CustomizedSectionUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type CustomizedSectionUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<CustomizedSectionUpdateManyLocalizationInput>>;
};

export type CustomizedSectionUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: CustomizedSectionUpdateManyInput;
  /** Document search */
  where: CustomizedSectionWhereInput;
};

export type CustomizedSectionUpdateOneInlineInput = {
  /** Connect existing CustomizedSection document */
  connect?: InputMaybe<CustomizedSectionWhereUniqueInput>;
  /** Create and connect one CustomizedSection document */
  create?: InputMaybe<CustomizedSectionCreateInput>;
  /** Delete currently connected CustomizedSection document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected CustomizedSection document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single CustomizedSection document */
  update?: InputMaybe<CustomizedSectionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CustomizedSection document */
  upsert?: InputMaybe<CustomizedSectionUpsertWithNestedWhereUniqueInput>;
};

export type CustomizedSectionUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: CustomizedSectionUpdateInput;
  /** Unique document search */
  where: CustomizedSectionWhereUniqueInput;
};

export type CustomizedSectionUpsertInput = {
  /** Create document if it didn't exist */
  create: CustomizedSectionCreateInput;
  /** Update document if it exists */
  update: CustomizedSectionUpdateInput;
};

export type CustomizedSectionUpsertLocalizationInput = {
  create: CustomizedSectionCreateLocalizationDataInput;
  locale: Locale;
  update: CustomizedSectionUpdateLocalizationDataInput;
};

export type CustomizedSectionUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: CustomizedSectionUpsertInput;
  /** Unique document search */
  where: CustomizedSectionWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type CustomizedSectionWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type CustomizedSectionWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CustomizedSectionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CustomizedSectionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CustomizedSectionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  alternateLayout?: InputMaybe<AlternateSectionLayout>;
  /** All values that are contained in given list. */
  alternateLayout_in?: InputMaybe<Array<InputMaybe<AlternateSectionLayout>>>;
  /** Any other value that exists and is not equal to the given value. */
  alternateLayout_not?: InputMaybe<AlternateSectionLayout>;
  /** All values that are not contained in given list. */
  alternateLayout_not_in?: InputMaybe<Array<InputMaybe<AlternateSectionLayout>>>;
  /** All values in which the union is connected to the given models */
  content?: InputMaybe<CustomSectionSectionWhereInput>;
  /** All values in which the union is empty */
  content_empty?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<CustomizedSectionWhereStageInput>;
  documentInStages_none?: InputMaybe<CustomizedSectionWhereStageInput>;
  documentInStages_some?: InputMaybe<CustomizedSectionWhereStageInput>;
  horizontalPadding?: InputMaybe<Sizes>;
  /** All values that are contained in given list. */
  horizontalPadding_in?: InputMaybe<Array<InputMaybe<Sizes>>>;
  /** Any other value that exists and is not equal to the given value. */
  horizontalPadding_not?: InputMaybe<Sizes>;
  /** All values that are not contained in given list. */
  horizontalPadding_not_in?: InputMaybe<Array<InputMaybe<Sizes>>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  layouts_every?: InputMaybe<LayoutWhereInput>;
  layouts_none?: InputMaybe<LayoutWhereInput>;
  layouts_some?: InputMaybe<LayoutWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  reverseLayout?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  reverseLayout_not?: InputMaybe<Scalars['Boolean']['input']>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  theme?: InputMaybe<ThemeWhereInput>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  verticalPadding?: InputMaybe<Sizes>;
  /** All values that are contained in given list. */
  verticalPadding_in?: InputMaybe<Array<InputMaybe<Sizes>>>;
  /** Any other value that exists and is not equal to the given value. */
  verticalPadding_not?: InputMaybe<Sizes>;
  /** All values that are not contained in given list. */
  verticalPadding_not_in?: InputMaybe<Array<InputMaybe<Sizes>>>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type CustomizedSectionWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CustomizedSectionWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CustomizedSectionWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CustomizedSectionWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<CustomizedSectionWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References CustomizedSection record uniquely */
export type CustomizedSectionWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type DisplayOption = Entity & {
  __typename?: 'DisplayOption';
  /** The unique identifier */
  id: Scalars['ID']['output'];
  /** System stage field */
  stage: Stage;
  theme?: Maybe<Theme>;
};


export type DisplayOptionThemeArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type DisplayOptionConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: DisplayOptionWhereUniqueInput;
};

/** A connection to a list of items. */
export type DisplayOptionConnection = {
  __typename?: 'DisplayOptionConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<DisplayOptionEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type DisplayOptionCreateInput = {
  theme?: InputMaybe<ThemeCreateOneInlineInput>;
};

export type DisplayOptionCreateManyInlineInput = {
  /** Create and connect multiple existing DisplayOption documents */
  create?: InputMaybe<Array<DisplayOptionCreateInput>>;
};

export type DisplayOptionCreateOneInlineInput = {
  /** Create and connect one DisplayOption document */
  create?: InputMaybe<DisplayOptionCreateInput>;
};

export type DisplayOptionCreateWithPositionInput = {
  /** Document to create */
  data: DisplayOptionCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type DisplayOptionEdge = {
  __typename?: 'DisplayOptionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: DisplayOption;
};

/** Identifies documents */
export type DisplayOptionManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<DisplayOptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<DisplayOptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<DisplayOptionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  theme?: InputMaybe<ThemeWhereInput>;
};

export enum DisplayOptionOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type DisplayOptionParent = Block;

export type DisplayOptionParentConnectInput = {
  Block?: InputMaybe<BlockConnectInput>;
};

export type DisplayOptionParentCreateInput = {
  Block?: InputMaybe<BlockCreateInput>;
};

export type DisplayOptionParentCreateManyInlineInput = {
  /** Create and connect multiple existing DisplayOptionParent documents */
  create?: InputMaybe<Array<DisplayOptionParentCreateInput>>;
};

export type DisplayOptionParentCreateOneInlineInput = {
  /** Create and connect one DisplayOptionParent document */
  create?: InputMaybe<DisplayOptionParentCreateInput>;
};

export type DisplayOptionParentCreateWithPositionInput = {
  Block?: InputMaybe<BlockCreateWithPositionInput>;
};

export type DisplayOptionParentUpdateInput = {
  Block?: InputMaybe<BlockUpdateInput>;
};

export type DisplayOptionParentUpdateManyInlineInput = {
  /** Create and connect multiple DisplayOptionParent component instances */
  create?: InputMaybe<Array<DisplayOptionParentCreateWithPositionInput>>;
  /** Delete multiple DisplayOptionParent documents */
  delete?: InputMaybe<Array<DisplayOptionParentWhereUniqueInput>>;
  /** Update multiple DisplayOptionParent component instances */
  update?: InputMaybe<Array<DisplayOptionParentUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple DisplayOptionParent component instances */
  upsert?: InputMaybe<Array<DisplayOptionParentUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type DisplayOptionParentUpdateManyWithNestedWhereInput = {
  Block?: InputMaybe<BlockUpdateManyWithNestedWhereInput>;
};

export type DisplayOptionParentUpdateOneInlineInput = {
  /** Create and connect one DisplayOptionParent document */
  create?: InputMaybe<DisplayOptionParentCreateInput>;
  /** Delete currently connected DisplayOptionParent document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single DisplayOptionParent document */
  update?: InputMaybe<DisplayOptionParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single DisplayOptionParent document */
  upsert?: InputMaybe<DisplayOptionParentUpsertWithNestedWhereUniqueInput>;
};

export type DisplayOptionParentUpdateWithNestedWhereUniqueAndPositionInput = {
  Block?: InputMaybe<BlockUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type DisplayOptionParentUpdateWithNestedWhereUniqueInput = {
  Block?: InputMaybe<BlockUpdateWithNestedWhereUniqueInput>;
};

export type DisplayOptionParentUpsertWithNestedWhereUniqueAndPositionInput = {
  Block?: InputMaybe<BlockUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type DisplayOptionParentUpsertWithNestedWhereUniqueInput = {
  Block?: InputMaybe<BlockUpsertWithNestedWhereUniqueInput>;
};

export type DisplayOptionParentWhereInput = {
  Block?: InputMaybe<BlockWhereInput>;
};

export type DisplayOptionParentWhereUniqueInput = {
  Block?: InputMaybe<BlockWhereUniqueInput>;
};

export type DisplayOptionUpdateInput = {
  theme?: InputMaybe<ThemeUpdateOneInlineInput>;
};

export type DisplayOptionUpdateManyInlineInput = {
  /** Create and connect multiple DisplayOption component instances */
  create?: InputMaybe<Array<DisplayOptionCreateWithPositionInput>>;
  /** Delete multiple DisplayOption documents */
  delete?: InputMaybe<Array<DisplayOptionWhereUniqueInput>>;
  /** Update multiple DisplayOption component instances */
  update?: InputMaybe<Array<DisplayOptionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple DisplayOption component instances */
  upsert?: InputMaybe<Array<DisplayOptionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type DisplayOptionUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: InputMaybe<Scalars['String']['input']>;
};

export type DisplayOptionUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: DisplayOptionUpdateManyInput;
  /** Document search */
  where: DisplayOptionWhereInput;
};

export type DisplayOptionUpdateOneInlineInput = {
  /** Create and connect one DisplayOption document */
  create?: InputMaybe<DisplayOptionCreateInput>;
  /** Delete currently connected DisplayOption document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single DisplayOption document */
  update?: InputMaybe<DisplayOptionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single DisplayOption document */
  upsert?: InputMaybe<DisplayOptionUpsertWithNestedWhereUniqueInput>;
};

export type DisplayOptionUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<DisplayOptionUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: DisplayOptionWhereUniqueInput;
};

export type DisplayOptionUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: DisplayOptionUpdateInput;
  /** Unique document search */
  where: DisplayOptionWhereUniqueInput;
};

export type DisplayOptionUpsertInput = {
  /** Create document if it didn't exist */
  create: DisplayOptionCreateInput;
  /** Update document if it exists */
  update: DisplayOptionUpdateInput;
};

export type DisplayOptionUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<DisplayOptionUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: DisplayOptionWhereUniqueInput;
};

export type DisplayOptionUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: DisplayOptionUpsertInput;
  /** Unique document search */
  where: DisplayOptionWhereUniqueInput;
};

/** Identifies documents */
export type DisplayOptionWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<DisplayOptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<DisplayOptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<DisplayOptionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  theme?: InputMaybe<ThemeWhereInput>;
};

/** References DisplayOption record uniquely */
export type DisplayOptionWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export enum DocumentFileTypes {
  /** Automatically selects the best format for the image based on the browser's capabilities. */
  AutoImage = 'autoImage',
  Avif = 'avif',
  Bmp = 'bmp',
  Gif = 'gif',
  Heic = 'heic',
  Jpg = 'jpg',
  Png = 'png',
  Svg = 'svg',
  Tiff = 'tiff',
  Webp = 'webp'
}

export type DocumentOutputInput = {
  /**
   * Transforms a document into a desired file type.
   * See this matrix for format support:
   *
   * JPG:	autoImage, bmp, gif, jpg, png, webp, tiff
   * PNG:	autoImage, bmp, gif, jpg, png, webp, tiff, svg
   * SVG:	autoImage, bmp, gif, jpg, png, webp, tiff
   * WEBP:	autoImage, bmp, gif, jpg, png, webp, tiff, svg
   * GIF:	autoImage, bmp, gif, jpg, png, webp, tiff, svg
   * TIFF:	autoImage, bmp, gif, jpg, png, webp, tiff, svg
   * AVIF:	autoImage, bmp, gif, jpg, png, webp, tiff, svg
   * PDF: 	autoImage, gif, jpg, png, webp, tiff
   *
   */
  format?: InputMaybe<DocumentFileTypes>;
};

/** Transformations for Documents */
export type DocumentTransformationInput = {
  /** Changes the output for the file. */
  output?: InputMaybe<DocumentOutputInput>;
};

export type DocumentVersion = {
  __typename?: 'DocumentVersion';
  createdAt: Scalars['DateTime']['output'];
  data?: Maybe<Scalars['Json']['output']>;
  id: Scalars['ID']['output'];
  revision: Scalars['Int']['output'];
  stage: Stage;
};

export type Editorial = Entity & Node & {
  __typename?: 'Editorial';
  archive: Array<Archive>;
  artistStatement?: Maybe<EditorialArtistStatementRichText>;
  combinedListings: Array<CombinedListing>;
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  credits: Array<Person>;
  /** Get the document in other stages */
  documentInStages: Array<Editorial>;
  event?: Maybe<Event>;
  /** Used as preview text on CTAs. */
  excerpt?: Maybe<RichText>;
  /** Image or Video */
  featuredMedia?: Maybe<Asset>;
  heroes: Array<Layout>;
  /** List of Editorial versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Editorial>;
  lock?: Maybe<Lock>;
  lockExemption?: Maybe<Lock>;
  mainContent?: Maybe<EditorialMainContentRichText>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  seo?: Maybe<Seo>;
  slug: Scalars['String']['output'];
  /** System stage field */
  stage: Stage;
  title?: Maybe<Scalars['String']['output']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type EditorialArchiveArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ArchiveWhereInput>;
};


export type EditorialCombinedListingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<CombinedListingOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CombinedListingWhereInput>;
};


export type EditorialCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type EditorialCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type EditorialCreditsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<PersonOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PersonWhereInput>;
};


export type EditorialDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type EditorialEventArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type EditorialFeaturedMediaArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  where?: InputMaybe<AssetSingleRelationWhereInput>;
};


export type EditorialHeroesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LayoutWhereInput>;
};


export type EditorialHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type EditorialLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  locales?: Array<Locale>;
};


export type EditorialLockArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type EditorialLockExemptionArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type EditorialPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type EditorialPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type EditorialScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type EditorialSeoArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type EditorialUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type EditorialUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type EditorialArtistStatementRichText = {
  __typename?: 'EditorialArtistStatementRichText';
  /** Returns HTMl representation */
  html: Scalars['String']['output'];
  json: Scalars['RichTextAST']['output'];
  /** Returns Markdown representation */
  markdown: Scalars['String']['output'];
  /** @deprecated Please use the 'json' field */
  raw: Scalars['RichTextAST']['output'];
  references: Array<EditorialArtistStatementRichTextEmbeddedTypes>;
  /** Returns plain-text contents of RichText */
  text: Scalars['String']['output'];
};


export type EditorialArtistStatementRichTextReferencesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
};

export type EditorialArtistStatementRichTextEmbeddedTypes = Asset | Gallery;

export type EditorialConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: EditorialWhereUniqueInput;
};

/** A connection to a list of items. */
export type EditorialConnection = {
  __typename?: 'EditorialConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<EditorialEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type EditorialCreateInput = {
  archive?: InputMaybe<ArchiveCreateManyInlineInput>;
  artistStatement?: InputMaybe<Scalars['RichTextAST']['input']>;
  combinedListings?: InputMaybe<CombinedListingCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  credits?: InputMaybe<PersonCreateManyInlineInput>;
  event?: InputMaybe<EventCreateOneInlineInput>;
  /** excerpt input for default locale (en) */
  excerpt?: InputMaybe<Scalars['RichTextAST']['input']>;
  featuredMedia?: InputMaybe<AssetCreateOneInlineInput>;
  heroes?: InputMaybe<LayoutCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<EditorialCreateLocalizationsInput>;
  lock?: InputMaybe<LockCreateOneInlineInput>;
  lockExemption?: InputMaybe<LockCreateOneInlineInput>;
  /** mainContent input for default locale (en) */
  mainContent?: InputMaybe<Scalars['RichTextAST']['input']>;
  seo?: InputMaybe<SeoCreateOneInlineInput>;
  slug: Scalars['String']['input'];
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type EditorialCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  excerpt?: InputMaybe<Scalars['RichTextAST']['input']>;
  mainContent?: InputMaybe<Scalars['RichTextAST']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type EditorialCreateLocalizationInput = {
  /** Localization input */
  data: EditorialCreateLocalizationDataInput;
  locale: Locale;
};

export type EditorialCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<EditorialCreateLocalizationInput>>;
};

export type EditorialCreateManyInlineInput = {
  /** Connect multiple existing Editorial documents */
  connect?: InputMaybe<Array<EditorialWhereUniqueInput>>;
  /** Create and connect multiple existing Editorial documents */
  create?: InputMaybe<Array<EditorialCreateInput>>;
};

export type EditorialCreateOneInlineInput = {
  /** Connect one existing Editorial document */
  connect?: InputMaybe<EditorialWhereUniqueInput>;
  /** Create and connect one Editorial document */
  create?: InputMaybe<EditorialCreateInput>;
};

/** An edge in a connection. */
export type EditorialEdge = {
  __typename?: 'EditorialEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Editorial;
};

export type EditorialMainContentRichText = {
  __typename?: 'EditorialMainContentRichText';
  /** Returns HTMl representation */
  html: Scalars['String']['output'];
  json: Scalars['RichTextAST']['output'];
  /** Returns Markdown representation */
  markdown: Scalars['String']['output'];
  /** @deprecated Please use the 'json' field */
  raw: Scalars['RichTextAST']['output'];
  references: Array<EditorialMainContentRichTextEmbeddedTypes>;
  /** Returns plain-text contents of RichText */
  text: Scalars['String']['output'];
};


export type EditorialMainContentRichTextReferencesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
};

export type EditorialMainContentRichTextEmbeddedTypes = Archive | Asset;

/** Identifies documents */
export type EditorialManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<EditorialWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<EditorialWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<EditorialWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  archive_every?: InputMaybe<ArchiveWhereInput>;
  archive_none?: InputMaybe<ArchiveWhereInput>;
  archive_some?: InputMaybe<ArchiveWhereInput>;
  combinedListings_every?: InputMaybe<CombinedListingWhereInput>;
  combinedListings_none?: InputMaybe<CombinedListingWhereInput>;
  combinedListings_some?: InputMaybe<CombinedListingWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  credits_every?: InputMaybe<PersonWhereInput>;
  credits_none?: InputMaybe<PersonWhereInput>;
  credits_some?: InputMaybe<PersonWhereInput>;
  documentInStages_every?: InputMaybe<EditorialWhereStageInput>;
  documentInStages_none?: InputMaybe<EditorialWhereStageInput>;
  documentInStages_some?: InputMaybe<EditorialWhereStageInput>;
  event?: InputMaybe<EventWhereInput>;
  featuredMedia?: InputMaybe<AssetWhereInput>;
  heroes_every?: InputMaybe<LayoutWhereInput>;
  heroes_none?: InputMaybe<LayoutWhereInput>;
  heroes_some?: InputMaybe<LayoutWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  lock?: InputMaybe<LockWhereInput>;
  lockExemption?: InputMaybe<LockWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  seo?: InputMaybe<SeoWhereInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum EditorialOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type EditorialUpdateInput = {
  archive?: InputMaybe<ArchiveUpdateManyInlineInput>;
  artistStatement?: InputMaybe<Scalars['RichTextAST']['input']>;
  combinedListings?: InputMaybe<CombinedListingUpdateManyInlineInput>;
  credits?: InputMaybe<PersonUpdateManyInlineInput>;
  event?: InputMaybe<EventUpdateOneInlineInput>;
  /** excerpt input for default locale (en) */
  excerpt?: InputMaybe<Scalars['RichTextAST']['input']>;
  featuredMedia?: InputMaybe<AssetUpdateOneInlineInput>;
  heroes?: InputMaybe<LayoutUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<EditorialUpdateLocalizationsInput>;
  lock?: InputMaybe<LockUpdateOneInlineInput>;
  lockExemption?: InputMaybe<LockUpdateOneInlineInput>;
  /** mainContent input for default locale (en) */
  mainContent?: InputMaybe<Scalars['RichTextAST']['input']>;
  seo?: InputMaybe<SeoUpdateOneInlineInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']['input']>;
};

export type EditorialUpdateLocalizationDataInput = {
  excerpt?: InputMaybe<Scalars['RichTextAST']['input']>;
  mainContent?: InputMaybe<Scalars['RichTextAST']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type EditorialUpdateLocalizationInput = {
  data: EditorialUpdateLocalizationDataInput;
  locale: Locale;
};

export type EditorialUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<EditorialCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<EditorialUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<EditorialUpsertLocalizationInput>>;
};

export type EditorialUpdateManyInlineInput = {
  /** Connect multiple existing Editorial documents */
  connect?: InputMaybe<Array<EditorialConnectInput>>;
  /** Create and connect multiple Editorial documents */
  create?: InputMaybe<Array<EditorialCreateInput>>;
  /** Delete multiple Editorial documents */
  delete?: InputMaybe<Array<EditorialWhereUniqueInput>>;
  /** Disconnect multiple Editorial documents */
  disconnect?: InputMaybe<Array<EditorialWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Editorial documents */
  set?: InputMaybe<Array<EditorialWhereUniqueInput>>;
  /** Update multiple Editorial documents */
  update?: InputMaybe<Array<EditorialUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Editorial documents */
  upsert?: InputMaybe<Array<EditorialUpsertWithNestedWhereUniqueInput>>;
};

export type EditorialUpdateManyInput = {
  artistStatement?: InputMaybe<Scalars['RichTextAST']['input']>;
  /** excerpt input for default locale (en) */
  excerpt?: InputMaybe<Scalars['RichTextAST']['input']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<EditorialUpdateManyLocalizationsInput>;
  /** mainContent input for default locale (en) */
  mainContent?: InputMaybe<Scalars['RichTextAST']['input']>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']['input']>;
};

export type EditorialUpdateManyLocalizationDataInput = {
  excerpt?: InputMaybe<Scalars['RichTextAST']['input']>;
  mainContent?: InputMaybe<Scalars['RichTextAST']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type EditorialUpdateManyLocalizationInput = {
  data: EditorialUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type EditorialUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<EditorialUpdateManyLocalizationInput>>;
};

export type EditorialUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: EditorialUpdateManyInput;
  /** Document search */
  where: EditorialWhereInput;
};

export type EditorialUpdateOneInlineInput = {
  /** Connect existing Editorial document */
  connect?: InputMaybe<EditorialWhereUniqueInput>;
  /** Create and connect one Editorial document */
  create?: InputMaybe<EditorialCreateInput>;
  /** Delete currently connected Editorial document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected Editorial document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Editorial document */
  update?: InputMaybe<EditorialUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Editorial document */
  upsert?: InputMaybe<EditorialUpsertWithNestedWhereUniqueInput>;
};

export type EditorialUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: EditorialUpdateInput;
  /** Unique document search */
  where: EditorialWhereUniqueInput;
};

export type EditorialUpsertInput = {
  /** Create document if it didn't exist */
  create: EditorialCreateInput;
  /** Update document if it exists */
  update: EditorialUpdateInput;
};

export type EditorialUpsertLocalizationInput = {
  create: EditorialCreateLocalizationDataInput;
  locale: Locale;
  update: EditorialUpdateLocalizationDataInput;
};

export type EditorialUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: EditorialUpsertInput;
  /** Unique document search */
  where: EditorialWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type EditorialWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type EditorialWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<EditorialWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<EditorialWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<EditorialWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  archive_every?: InputMaybe<ArchiveWhereInput>;
  archive_none?: InputMaybe<ArchiveWhereInput>;
  archive_some?: InputMaybe<ArchiveWhereInput>;
  combinedListings_every?: InputMaybe<CombinedListingWhereInput>;
  combinedListings_none?: InputMaybe<CombinedListingWhereInput>;
  combinedListings_some?: InputMaybe<CombinedListingWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  credits_every?: InputMaybe<PersonWhereInput>;
  credits_none?: InputMaybe<PersonWhereInput>;
  credits_some?: InputMaybe<PersonWhereInput>;
  documentInStages_every?: InputMaybe<EditorialWhereStageInput>;
  documentInStages_none?: InputMaybe<EditorialWhereStageInput>;
  documentInStages_some?: InputMaybe<EditorialWhereStageInput>;
  event?: InputMaybe<EventWhereInput>;
  featuredMedia?: InputMaybe<AssetWhereInput>;
  heroes_every?: InputMaybe<LayoutWhereInput>;
  heroes_none?: InputMaybe<LayoutWhereInput>;
  heroes_some?: InputMaybe<LayoutWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  lock?: InputMaybe<LockWhereInput>;
  lockExemption?: InputMaybe<LockWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  seo?: InputMaybe<SeoWhereInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type EditorialWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<EditorialWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<EditorialWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<EditorialWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<EditorialWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Editorial record uniquely */
export type EditorialWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** An object with an ID */
export type Entity = {
  /** The id of the object. */
  id: Scalars['ID']['output'];
  /** The Stage of an object */
  stage: Stage;
};

/** This enumeration holds all typenames that implement the Entity interface. Components and models implement the Entity interface. */
export enum EntityTypeName {
  Archive = 'Archive',
  /** Asset system model */
  Asset = 'Asset',
  Block = 'Block',
  Collection = 'Collection',
  CombinedListing = 'CombinedListing',
  CountdownComponent = 'CountdownComponent',
  /** Override the default appearance of a section using the available options */
  CustomizedSection = 'CustomizedSection',
  DisplayOption = 'DisplayOption',
  Editorial = 'Editorial',
  Event = 'Event',
  Form = 'Form',
  Gallery = 'Gallery',
  Grid = 'Grid',
  Layout = 'Layout',
  Link = 'Link',
  Lock = 'Lock',
  LockedSection = 'LockedSection',
  MixedMedia = 'MixedMedia',
  Navigation = 'Navigation',
  Page = 'Page',
  Person = 'Person',
  Product = 'Product',
  /** Scheduled Operation system model */
  ScheduledOperation = 'ScheduledOperation',
  /** Scheduled Release system model */
  ScheduledRelease = 'ScheduledRelease',
  Seo = 'Seo',
  Theme = 'Theme',
  /** User system model */
  User = 'User'
}

/** Allows to specify input to query models and components directly */
export type EntityWhereInput = {
  /** The ID of an object */
  id: Scalars['ID']['input'];
  locale?: InputMaybe<Locale>;
  stage: Stage;
  /** The Type name of an object */
  typename: EntityTypeName;
};

export type Event = Entity & Node & {
  __typename?: 'Event';
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  date?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<RichText>;
  /** Get the document in other stages */
  documentInStages: Array<Event>;
  editorial?: Maybe<Editorial>;
  /** Used as preview text on CTAs. */
  excerpt?: Maybe<RichText>;
  /** Image/video for Hero Banner */
  featuredMedia?: Maybe<Asset>;
  hasReleasePage: Scalars['Boolean']['output'];
  heroes: Array<Layout>;
  /** List of Event versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  layouts: Array<Layout>;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Event>;
  lock?: Maybe<Lock>;
  media: Array<Asset>;
  products: Array<EventProducts>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** A unique Identifier for this event */
  slug: Scalars['String']['output'];
  /** System stage field */
  stage: Stage;
  title?: Maybe<Scalars['String']['output']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type EventCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type EventCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type EventDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type EventEditorialArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type EventFeaturedMediaArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  where?: InputMaybe<AssetSingleRelationWhereInput>;
};


export type EventHeroesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LayoutWhereInput>;
};


export type EventHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type EventLayoutsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LayoutWhereInput>;
};


export type EventLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  locales?: Array<Locale>;
};


export type EventLockArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type EventMediaArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<AssetWhereInput>;
};


export type EventProductsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
};


export type EventPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type EventPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type EventScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type EventUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type EventUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type EventConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: EventWhereUniqueInput;
};

/** A connection to a list of items. */
export type EventConnection = {
  __typename?: 'EventConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<EventEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type EventCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  date?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['RichTextAST']['input']>;
  editorial?: InputMaybe<EditorialCreateOneInlineInput>;
  /** excerpt input for default locale (en) */
  excerpt?: InputMaybe<Scalars['RichTextAST']['input']>;
  featuredMedia?: InputMaybe<AssetCreateOneInlineInput>;
  hasReleasePage: Scalars['Boolean']['input'];
  heroes?: InputMaybe<LayoutCreateManyInlineInput>;
  layouts?: InputMaybe<LayoutCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<EventCreateLocalizationsInput>;
  lock?: InputMaybe<LockCreateOneInlineInput>;
  media?: InputMaybe<AssetCreateManyInlineInput>;
  products?: InputMaybe<EventProductsCreateManyInlineInput>;
  slug: Scalars['String']['input'];
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type EventCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  excerpt?: InputMaybe<Scalars['RichTextAST']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type EventCreateLocalizationInput = {
  /** Localization input */
  data: EventCreateLocalizationDataInput;
  locale: Locale;
};

export type EventCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<EventCreateLocalizationInput>>;
};

export type EventCreateManyInlineInput = {
  /** Connect multiple existing Event documents */
  connect?: InputMaybe<Array<EventWhereUniqueInput>>;
  /** Create and connect multiple existing Event documents */
  create?: InputMaybe<Array<EventCreateInput>>;
};

export type EventCreateOneInlineInput = {
  /** Connect one existing Event document */
  connect?: InputMaybe<EventWhereUniqueInput>;
  /** Create and connect one Event document */
  create?: InputMaybe<EventCreateInput>;
};

/** An edge in a connection. */
export type EventEdge = {
  __typename?: 'EventEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Event;
};

/** Identifies documents */
export type EventManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<EventWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<EventWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<EventWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  date?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  date_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  date_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  date_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  date_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  date_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  date_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  date_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  documentInStages_every?: InputMaybe<EventWhereStageInput>;
  documentInStages_none?: InputMaybe<EventWhereStageInput>;
  documentInStages_some?: InputMaybe<EventWhereStageInput>;
  editorial?: InputMaybe<EditorialWhereInput>;
  featuredMedia?: InputMaybe<AssetWhereInput>;
  hasReleasePage?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  hasReleasePage_not?: InputMaybe<Scalars['Boolean']['input']>;
  heroes_every?: InputMaybe<LayoutWhereInput>;
  heroes_none?: InputMaybe<LayoutWhereInput>;
  heroes_some?: InputMaybe<LayoutWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  layouts_every?: InputMaybe<LayoutWhereInput>;
  layouts_none?: InputMaybe<LayoutWhereInput>;
  layouts_some?: InputMaybe<LayoutWhereInput>;
  lock?: InputMaybe<LockWhereInput>;
  media_every?: InputMaybe<AssetWhereInput>;
  media_none?: InputMaybe<AssetWhereInput>;
  media_some?: InputMaybe<AssetWhereInput>;
  /** All values in which the union is empty */
  products_empty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Matches if the union contains at least one connection to the provided item to the filter */
  products_some?: InputMaybe<EventProductsWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum EventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DateAsc = 'date_ASC',
  DateDesc = 'date_DESC',
  HasReleasePageAsc = 'hasReleasePage_ASC',
  HasReleasePageDesc = 'hasReleasePage_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type EventUpdateInput = {
  date?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['RichTextAST']['input']>;
  editorial?: InputMaybe<EditorialUpdateOneInlineInput>;
  /** excerpt input for default locale (en) */
  excerpt?: InputMaybe<Scalars['RichTextAST']['input']>;
  featuredMedia?: InputMaybe<AssetUpdateOneInlineInput>;
  hasReleasePage?: InputMaybe<Scalars['Boolean']['input']>;
  heroes?: InputMaybe<LayoutUpdateManyInlineInput>;
  layouts?: InputMaybe<LayoutUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<EventUpdateLocalizationsInput>;
  lock?: InputMaybe<LockUpdateOneInlineInput>;
  media?: InputMaybe<AssetUpdateManyInlineInput>;
  products?: InputMaybe<EventProductsUpdateManyInlineInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']['input']>;
};

export type EventUpdateLocalizationDataInput = {
  excerpt?: InputMaybe<Scalars['RichTextAST']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type EventUpdateLocalizationInput = {
  data: EventUpdateLocalizationDataInput;
  locale: Locale;
};

export type EventUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<EventCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<EventUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<EventUpsertLocalizationInput>>;
};

export type EventUpdateManyInlineInput = {
  /** Connect multiple existing Event documents */
  connect?: InputMaybe<Array<EventConnectInput>>;
  /** Create and connect multiple Event documents */
  create?: InputMaybe<Array<EventCreateInput>>;
  /** Delete multiple Event documents */
  delete?: InputMaybe<Array<EventWhereUniqueInput>>;
  /** Disconnect multiple Event documents */
  disconnect?: InputMaybe<Array<EventWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Event documents */
  set?: InputMaybe<Array<EventWhereUniqueInput>>;
  /** Update multiple Event documents */
  update?: InputMaybe<Array<EventUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Event documents */
  upsert?: InputMaybe<Array<EventUpsertWithNestedWhereUniqueInput>>;
};

export type EventUpdateManyInput = {
  date?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['RichTextAST']['input']>;
  /** excerpt input for default locale (en) */
  excerpt?: InputMaybe<Scalars['RichTextAST']['input']>;
  hasReleasePage?: InputMaybe<Scalars['Boolean']['input']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<EventUpdateManyLocalizationsInput>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']['input']>;
};

export type EventUpdateManyLocalizationDataInput = {
  excerpt?: InputMaybe<Scalars['RichTextAST']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type EventUpdateManyLocalizationInput = {
  data: EventUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type EventUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<EventUpdateManyLocalizationInput>>;
};

export type EventUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: EventUpdateManyInput;
  /** Document search */
  where: EventWhereInput;
};

export type EventUpdateOneInlineInput = {
  /** Connect existing Event document */
  connect?: InputMaybe<EventWhereUniqueInput>;
  /** Create and connect one Event document */
  create?: InputMaybe<EventCreateInput>;
  /** Delete currently connected Event document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected Event document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Event document */
  update?: InputMaybe<EventUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Event document */
  upsert?: InputMaybe<EventUpsertWithNestedWhereUniqueInput>;
};

export type EventUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: EventUpdateInput;
  /** Unique document search */
  where: EventWhereUniqueInput;
};

export type EventUpsertInput = {
  /** Create document if it didn't exist */
  create: EventCreateInput;
  /** Update document if it exists */
  update: EventUpdateInput;
};

export type EventUpsertLocalizationInput = {
  create: EventCreateLocalizationDataInput;
  locale: Locale;
  update: EventUpdateLocalizationDataInput;
};

export type EventUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: EventUpsertInput;
  /** Unique document search */
  where: EventWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type EventWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type EventWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<EventWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<EventWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<EventWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  date?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  date_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  date_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  date_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  date_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  date_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  date_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  date_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  documentInStages_every?: InputMaybe<EventWhereStageInput>;
  documentInStages_none?: InputMaybe<EventWhereStageInput>;
  documentInStages_some?: InputMaybe<EventWhereStageInput>;
  editorial?: InputMaybe<EditorialWhereInput>;
  featuredMedia?: InputMaybe<AssetWhereInput>;
  hasReleasePage?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  hasReleasePage_not?: InputMaybe<Scalars['Boolean']['input']>;
  heroes_every?: InputMaybe<LayoutWhereInput>;
  heroes_none?: InputMaybe<LayoutWhereInput>;
  heroes_some?: InputMaybe<LayoutWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  layouts_every?: InputMaybe<LayoutWhereInput>;
  layouts_none?: InputMaybe<LayoutWhereInput>;
  layouts_some?: InputMaybe<LayoutWhereInput>;
  lock?: InputMaybe<LockWhereInput>;
  media_every?: InputMaybe<AssetWhereInput>;
  media_none?: InputMaybe<AssetWhereInput>;
  media_some?: InputMaybe<AssetWhereInput>;
  /** All values in which the union is empty */
  products_empty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Matches if the union contains at least one connection to the provided item to the filter */
  products_some?: InputMaybe<EventProductsWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type EventWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<EventWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<EventWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<EventWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<EventWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Event record uniquely */
export type EventWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** Customize the behaviour of the footer. Defaults to "Full" if no option is provided. */
export enum FooterStyle {
  Full = 'Full',
  Minimal = 'minimal'
}

export type Form = Entity & Node & {
  __typename?: 'Form';
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Form>;
  /** List of Form versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  /** used internally for identification purposes. */
  internalName?: Maybe<Scalars['String']['output']>;
  layouts: Array<Layout>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  type?: Maybe<FormTypes>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type FormCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type FormDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type FormHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type FormLayoutsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LayoutWhereInput>;
};


export type FormPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type FormScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type FormUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type FormConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: FormWhereUniqueInput;
};

/** A connection to a list of items. */
export type FormConnection = {
  __typename?: 'FormConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<FormEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type FormCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  internalName?: InputMaybe<Scalars['String']['input']>;
  layouts?: InputMaybe<LayoutCreateManyInlineInput>;
  type?: InputMaybe<FormTypes>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type FormCreateManyInlineInput = {
  /** Connect multiple existing Form documents */
  connect?: InputMaybe<Array<FormWhereUniqueInput>>;
  /** Create and connect multiple existing Form documents */
  create?: InputMaybe<Array<FormCreateInput>>;
};

export type FormCreateOneInlineInput = {
  /** Connect one existing Form document */
  connect?: InputMaybe<FormWhereUniqueInput>;
  /** Create and connect one Form document */
  create?: InputMaybe<FormCreateInput>;
};

/** An edge in a connection. */
export type FormEdge = {
  __typename?: 'FormEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Form;
};

/** Identifies documents */
export type FormManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<FormWhereStageInput>;
  documentInStages_none?: InputMaybe<FormWhereStageInput>;
  documentInStages_some?: InputMaybe<FormWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  internalName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  internalName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  internalName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  internalName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  internalName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  internalName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  internalName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  internalName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  internalName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  internalName_starts_with?: InputMaybe<Scalars['String']['input']>;
  layouts_every?: InputMaybe<LayoutWhereInput>;
  layouts_none?: InputMaybe<LayoutWhereInput>;
  layouts_some?: InputMaybe<LayoutWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  type?: InputMaybe<FormTypes>;
  /** All values that are contained in given list. */
  type_in?: InputMaybe<Array<InputMaybe<FormTypes>>>;
  /** Any other value that exists and is not equal to the given value. */
  type_not?: InputMaybe<FormTypes>;
  /** All values that are not contained in given list. */
  type_not_in?: InputMaybe<Array<InputMaybe<FormTypes>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum FormOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  InternalNameAsc = 'internalName_ASC',
  InternalNameDesc = 'internalName_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export enum FormTypes {
  Appointments = 'appointments',
  Contact = 'contact',
  Newsletter = 'newsletter'
}

export type FormUpdateInput = {
  internalName?: InputMaybe<Scalars['String']['input']>;
  layouts?: InputMaybe<LayoutUpdateManyInlineInput>;
  type?: InputMaybe<FormTypes>;
};

export type FormUpdateManyInlineInput = {
  /** Connect multiple existing Form documents */
  connect?: InputMaybe<Array<FormConnectInput>>;
  /** Create and connect multiple Form documents */
  create?: InputMaybe<Array<FormCreateInput>>;
  /** Delete multiple Form documents */
  delete?: InputMaybe<Array<FormWhereUniqueInput>>;
  /** Disconnect multiple Form documents */
  disconnect?: InputMaybe<Array<FormWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Form documents */
  set?: InputMaybe<Array<FormWhereUniqueInput>>;
  /** Update multiple Form documents */
  update?: InputMaybe<Array<FormUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Form documents */
  upsert?: InputMaybe<Array<FormUpsertWithNestedWhereUniqueInput>>;
};

export type FormUpdateManyInput = {
  type?: InputMaybe<FormTypes>;
};

export type FormUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: FormUpdateManyInput;
  /** Document search */
  where: FormWhereInput;
};

export type FormUpdateOneInlineInput = {
  /** Connect existing Form document */
  connect?: InputMaybe<FormWhereUniqueInput>;
  /** Create and connect one Form document */
  create?: InputMaybe<FormCreateInput>;
  /** Delete currently connected Form document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected Form document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Form document */
  update?: InputMaybe<FormUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Form document */
  upsert?: InputMaybe<FormUpsertWithNestedWhereUniqueInput>;
};

export type FormUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: FormUpdateInput;
  /** Unique document search */
  where: FormWhereUniqueInput;
};

export type FormUpsertInput = {
  /** Create document if it didn't exist */
  create: FormCreateInput;
  /** Update document if it exists */
  update: FormUpdateInput;
};

export type FormUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: FormUpsertInput;
  /** Unique document search */
  where: FormWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type FormWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type FormWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<FormWhereStageInput>;
  documentInStages_none?: InputMaybe<FormWhereStageInput>;
  documentInStages_some?: InputMaybe<FormWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  internalName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  internalName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  internalName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  internalName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  internalName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  internalName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  internalName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  internalName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  internalName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  internalName_starts_with?: InputMaybe<Scalars['String']['input']>;
  layouts_every?: InputMaybe<LayoutWhereInput>;
  layouts_none?: InputMaybe<LayoutWhereInput>;
  layouts_some?: InputMaybe<LayoutWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  type?: InputMaybe<FormTypes>;
  /** All values that are contained in given list. */
  type_in?: InputMaybe<Array<InputMaybe<FormTypes>>>;
  /** Any other value that exists and is not equal to the given value. */
  type_not?: InputMaybe<FormTypes>;
  /** All values that are not contained in given list. */
  type_not_in?: InputMaybe<Array<InputMaybe<FormTypes>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type FormWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<FormWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Form record uniquely */
export type FormWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  internalName?: InputMaybe<Scalars['String']['input']>;
};

export type Gallery = Entity & Node & {
  __typename?: 'Gallery';
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Gallery>;
  /** List of Gallery versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  internalName?: Maybe<Scalars['String']['output']>;
  media: Array<Asset>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type GalleryCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type GalleryDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type GalleryHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type GalleryMediaArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<AssetWhereInput>;
};


export type GalleryPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type GalleryScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type GalleryUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type GalleryConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: GalleryWhereUniqueInput;
};

/** A connection to a list of items. */
export type GalleryConnection = {
  __typename?: 'GalleryConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<GalleryEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type GalleryCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  internalName?: InputMaybe<Scalars['String']['input']>;
  media?: InputMaybe<AssetCreateManyInlineInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type GalleryCreateManyInlineInput = {
  /** Connect multiple existing Gallery documents */
  connect?: InputMaybe<Array<GalleryWhereUniqueInput>>;
  /** Create and connect multiple existing Gallery documents */
  create?: InputMaybe<Array<GalleryCreateInput>>;
};

export type GalleryCreateOneInlineInput = {
  /** Connect one existing Gallery document */
  connect?: InputMaybe<GalleryWhereUniqueInput>;
  /** Create and connect one Gallery document */
  create?: InputMaybe<GalleryCreateInput>;
};

/** An edge in a connection. */
export type GalleryEdge = {
  __typename?: 'GalleryEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Gallery;
};

/** Identifies documents */
export type GalleryManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<GalleryWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<GalleryWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<GalleryWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<GalleryWhereStageInput>;
  documentInStages_none?: InputMaybe<GalleryWhereStageInput>;
  documentInStages_some?: InputMaybe<GalleryWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  internalName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  internalName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  internalName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  internalName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  internalName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  internalName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  internalName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  internalName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  internalName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  internalName_starts_with?: InputMaybe<Scalars['String']['input']>;
  media_every?: InputMaybe<AssetWhereInput>;
  media_none?: InputMaybe<AssetWhereInput>;
  media_some?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum GalleryOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  InternalNameAsc = 'internalName_ASC',
  InternalNameDesc = 'internalName_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type GalleryUpdateInput = {
  internalName?: InputMaybe<Scalars['String']['input']>;
  media?: InputMaybe<AssetUpdateManyInlineInput>;
};

export type GalleryUpdateManyInlineInput = {
  /** Connect multiple existing Gallery documents */
  connect?: InputMaybe<Array<GalleryConnectInput>>;
  /** Create and connect multiple Gallery documents */
  create?: InputMaybe<Array<GalleryCreateInput>>;
  /** Delete multiple Gallery documents */
  delete?: InputMaybe<Array<GalleryWhereUniqueInput>>;
  /** Disconnect multiple Gallery documents */
  disconnect?: InputMaybe<Array<GalleryWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Gallery documents */
  set?: InputMaybe<Array<GalleryWhereUniqueInput>>;
  /** Update multiple Gallery documents */
  update?: InputMaybe<Array<GalleryUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Gallery documents */
  upsert?: InputMaybe<Array<GalleryUpsertWithNestedWhereUniqueInput>>;
};

export type GalleryUpdateManyInput = {
  internalName?: InputMaybe<Scalars['String']['input']>;
};

export type GalleryUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: GalleryUpdateManyInput;
  /** Document search */
  where: GalleryWhereInput;
};

export type GalleryUpdateOneInlineInput = {
  /** Connect existing Gallery document */
  connect?: InputMaybe<GalleryWhereUniqueInput>;
  /** Create and connect one Gallery document */
  create?: InputMaybe<GalleryCreateInput>;
  /** Delete currently connected Gallery document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected Gallery document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Gallery document */
  update?: InputMaybe<GalleryUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Gallery document */
  upsert?: InputMaybe<GalleryUpsertWithNestedWhereUniqueInput>;
};

export type GalleryUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: GalleryUpdateInput;
  /** Unique document search */
  where: GalleryWhereUniqueInput;
};

export type GalleryUpsertInput = {
  /** Create document if it didn't exist */
  create: GalleryCreateInput;
  /** Update document if it exists */
  update: GalleryUpdateInput;
};

export type GalleryUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: GalleryUpsertInput;
  /** Unique document search */
  where: GalleryWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type GalleryWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type GalleryWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<GalleryWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<GalleryWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<GalleryWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<GalleryWhereStageInput>;
  documentInStages_none?: InputMaybe<GalleryWhereStageInput>;
  documentInStages_some?: InputMaybe<GalleryWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  internalName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  internalName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  internalName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  internalName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  internalName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  internalName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  internalName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  internalName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  internalName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  internalName_starts_with?: InputMaybe<Scalars['String']['input']>;
  media_every?: InputMaybe<AssetWhereInput>;
  media_none?: InputMaybe<AssetWhereInput>;
  media_some?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type GalleryWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<GalleryWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<GalleryWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<GalleryWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<GalleryWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Gallery record uniquely */
export type GalleryWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export enum Global {
  Global = 'global'
}

export type Grid = Entity & Node & {
  __typename?: 'Grid';
  /** Sets the number of columns in the grid. Between 1 - 4 */
  columns: Scalars['Int']['output'];
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Grid>;
  /** List of Grid versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  internalName?: Maybe<Scalars['String']['output']>;
  /** Defines how the grid is presented in the UI. Defaults to "sticky" */
  presentation?: Maybe<GridTypes>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type GridCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type GridDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type GridHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type GridPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type GridScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type GridUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type GridConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: GridWhereUniqueInput;
};

/** A connection to a list of items. */
export type GridConnection = {
  __typename?: 'GridConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<GridEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type GridCreateInput = {
  columns: Scalars['Int']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  internalName?: InputMaybe<Scalars['String']['input']>;
  presentation?: InputMaybe<GridTypes>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type GridCreateManyInlineInput = {
  /** Connect multiple existing Grid documents */
  connect?: InputMaybe<Array<GridWhereUniqueInput>>;
  /** Create and connect multiple existing Grid documents */
  create?: InputMaybe<Array<GridCreateInput>>;
};

export type GridCreateOneInlineInput = {
  /** Connect one existing Grid document */
  connect?: InputMaybe<GridWhereUniqueInput>;
  /** Create and connect one Grid document */
  create?: InputMaybe<GridCreateInput>;
};

/** An edge in a connection. */
export type GridEdge = {
  __typename?: 'GridEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Grid;
};

/** Identifies documents */
export type GridManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<GridWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<GridWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<GridWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  columns?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  columns_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  columns_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  columns_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  columns_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  columns_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  columns_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  columns_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<GridWhereStageInput>;
  documentInStages_none?: InputMaybe<GridWhereStageInput>;
  documentInStages_some?: InputMaybe<GridWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  internalName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  internalName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  internalName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  internalName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  internalName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  internalName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  internalName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  internalName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  internalName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  internalName_starts_with?: InputMaybe<Scalars['String']['input']>;
  presentation?: InputMaybe<GridTypes>;
  /** All values that are contained in given list. */
  presentation_in?: InputMaybe<Array<InputMaybe<GridTypes>>>;
  /** Any other value that exists and is not equal to the given value. */
  presentation_not?: InputMaybe<GridTypes>;
  /** All values that are not contained in given list. */
  presentation_not_in?: InputMaybe<Array<InputMaybe<GridTypes>>>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum GridOrderByInput {
  ColumnsAsc = 'columns_ASC',
  ColumnsDesc = 'columns_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  InternalNameAsc = 'internalName_ASC',
  InternalNameDesc = 'internalName_DESC',
  PresentationAsc = 'presentation_ASC',
  PresentationDesc = 'presentation_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export enum GridTypes {
  Spaced = 'spaced',
  Sticky = 'sticky',
  Tiles = 'tiles'
}

export type GridUpdateInput = {
  columns?: InputMaybe<Scalars['Int']['input']>;
  internalName?: InputMaybe<Scalars['String']['input']>;
  presentation?: InputMaybe<GridTypes>;
};

export type GridUpdateManyInlineInput = {
  /** Connect multiple existing Grid documents */
  connect?: InputMaybe<Array<GridConnectInput>>;
  /** Create and connect multiple Grid documents */
  create?: InputMaybe<Array<GridCreateInput>>;
  /** Delete multiple Grid documents */
  delete?: InputMaybe<Array<GridWhereUniqueInput>>;
  /** Disconnect multiple Grid documents */
  disconnect?: InputMaybe<Array<GridWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Grid documents */
  set?: InputMaybe<Array<GridWhereUniqueInput>>;
  /** Update multiple Grid documents */
  update?: InputMaybe<Array<GridUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Grid documents */
  upsert?: InputMaybe<Array<GridUpsertWithNestedWhereUniqueInput>>;
};

export type GridUpdateManyInput = {
  columns?: InputMaybe<Scalars['Int']['input']>;
  internalName?: InputMaybe<Scalars['String']['input']>;
  presentation?: InputMaybe<GridTypes>;
};

export type GridUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: GridUpdateManyInput;
  /** Document search */
  where: GridWhereInput;
};

export type GridUpdateOneInlineInput = {
  /** Connect existing Grid document */
  connect?: InputMaybe<GridWhereUniqueInput>;
  /** Create and connect one Grid document */
  create?: InputMaybe<GridCreateInput>;
  /** Delete currently connected Grid document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected Grid document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Grid document */
  update?: InputMaybe<GridUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Grid document */
  upsert?: InputMaybe<GridUpsertWithNestedWhereUniqueInput>;
};

export type GridUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: GridUpdateInput;
  /** Unique document search */
  where: GridWhereUniqueInput;
};

export type GridUpsertInput = {
  /** Create document if it didn't exist */
  create: GridCreateInput;
  /** Update document if it exists */
  update: GridUpdateInput;
};

export type GridUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: GridUpsertInput;
  /** Unique document search */
  where: GridWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type GridWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type GridWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<GridWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<GridWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<GridWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  columns?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  columns_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  columns_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  columns_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  columns_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  columns_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  columns_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  columns_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<GridWhereStageInput>;
  documentInStages_none?: InputMaybe<GridWhereStageInput>;
  documentInStages_some?: InputMaybe<GridWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  internalName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  internalName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  internalName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  internalName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  internalName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  internalName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  internalName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  internalName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  internalName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  internalName_starts_with?: InputMaybe<Scalars['String']['input']>;
  presentation?: InputMaybe<GridTypes>;
  /** All values that are contained in given list. */
  presentation_in?: InputMaybe<Array<InputMaybe<GridTypes>>>;
  /** Any other value that exists and is not equal to the given value. */
  presentation_not?: InputMaybe<GridTypes>;
  /** All values that are not contained in given list. */
  presentation_not_in?: InputMaybe<Array<InputMaybe<GridTypes>>>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type GridWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<GridWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<GridWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<GridWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<GridWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Grid record uniquely */
export type GridWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

/** Customize the behaviour of the header. Defaults to "Sticky" if no option is provided */
export enum HeaderStyle {
  Fixed = 'Fixed',
  Sticky = 'Sticky',
  Minimal = 'minimal',
  MinimalNewsletterCta = 'minimalNewsletterCta'
}

export type ImageBlurInput = {
  /** The amount of blurring to apply to the image. The value must be an integer from 1 to 20. */
  amount: Scalars['Int']['input'];
};

/** Adds a border to the image. */
export type ImageBorderInput = {
  /** The background color of the border. The value must be a valid hex color code. Or one of the supported color names. */
  background: Scalars['String']['input'];
  /** The color of the border. The value must be a valid hex color code. Or one of the supported color names. */
  color: Scalars['String']['input'];
  /** The width of the border in pixels. The value must be an integer from 1 to 1000. */
  width: Scalars['Int']['input'];
};

export type ImageCompressInput = {
  /** Preserves the metadata of the image. */
  metadata: Scalars['Boolean']['input'];
};

/**
 * Crops the image to the specified dimensions.
 * The starting points for X and Y coordinates are [0,0], aligning with the top-left corner of the image.
 * The width and height parameters determine the size in pixels of the cropping rectangle.
 * The output will include only the portion of the image within the designated crop area.
 */
export type ImageCropInput = {
  /** The height in pixels to resize the image to. The value must be an integer from 1 to 10000. */
  height: Scalars['Int']['input'];
  /** The width in pixels to resize the image to. The value must be an integer from 1 to 10000. */
  width: Scalars['Int']['input'];
  /** The x coordinate of the image. The value must be an integer from 0 to 10000. */
  x: Scalars['Int']['input'];
  /** The y coordinate of the image. The value must be an integer from 0 to 10000. */
  y: Scalars['Int']['input'];
};

export enum ImageFit {
  /** Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio. */
  Clip = 'clip',
  /** Resizes the image to fit the specified parameters exactly by removing any parts of the image that don't fit within the boundaries. */
  Crop = 'crop',
  /** Resizes the image to fit within the parameters, but as opposed to 'fit:clip' will not scale the image if the image is smaller than the output size. */
  Max = 'max',
  /** Resizes the image to fit the specified parameters exactly by scaling the image to the desired size. The aspect ratio of the image is not respected and the image can be distorted using this method. */
  Scale = 'scale'
}

export type ImageQualityInput = {
  /** The quality of the image. The value must be an integer from 1 to 100. */
  value: Scalars['Int']['input'];
};

export type ImageResizeInput = {
  /** The default value for the fit parameter is fit:clip. */
  fit?: InputMaybe<ImageFit>;
  /** The height in pixels to resize the image to. The value must be an integer from 1 to 10000. */
  height?: InputMaybe<Scalars['Int']['input']>;
  /** The width in pixels to resize the image to. The value must be an integer from 1 to 10000. */
  width?: InputMaybe<Scalars['Int']['input']>;
};

export type ImageSharpenInput = {
  /** The amount of sharpening to apply to the image. The value must be an integer from 1 to 20. */
  amount: Scalars['Int']['input'];
};

/** Transformations for Images */
export type ImageTransformationInput = {
  /** Blurs the image. */
  blur?: InputMaybe<ImageBlurInput>;
  /** Adds a border to the image. */
  border?: InputMaybe<ImageBorderInput>;
  /** Compresses the image. */
  compress?: InputMaybe<ImageCompressInput>;
  /** Crops the image to the specified dimensions. */
  crop?: InputMaybe<ImageCropInput>;
  /**
   * Changes the quality of the image. The value must be an integer from 1 to 100.
   * Only supported for the following formats jpeg, jpg, webp, gif, heif, tiff, avif.
   */
  quality?: InputMaybe<ImageQualityInput>;
  /** Resizes the image */
  resize?: InputMaybe<ImageResizeInput>;
  /** Sharpens the image. */
  sharpen?: InputMaybe<ImageSharpenInput>;
};

export type Layout = Entity & Node & {
  __typename?: 'Layout';
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Layout>;
  /** Customize the behaviour of the footer. Defaults to "Full" if no option is provided. */
  footerStyle?: Maybe<FooterStyle>;
  /** Customize the behaviour of the header. Defaults to "Sticky" if no option is provided. */
  headerStyle?: Maybe<HeaderStyle>;
  heroes: Array<LayoutHero>;
  /** List of Layout versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Layout>;
  /** Where this page layout is being used as a lock screen */
  locks: Array<Lock>;
  /** The following pages use this as their layout */
  pages: Array<Page>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  sections: Array<LayoutSections>;
  /** System stage field */
  stage: Stage;
  theme?: Maybe<Theme>;
  title?: Maybe<Scalars['String']['output']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type LayoutCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type LayoutCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type LayoutDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type LayoutHeroesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
};


export type LayoutHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type LayoutLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  locales?: Array<Locale>;
};


export type LayoutLocksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<LockOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LockWhereInput>;
};


export type LayoutPagesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PageWhereInput>;
};


export type LayoutPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type LayoutPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type LayoutScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type LayoutSectionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
};


export type LayoutThemeArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type LayoutUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type LayoutUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type LayoutConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: LayoutWhereUniqueInput;
};

/** A connection to a list of items. */
export type LayoutConnection = {
  __typename?: 'LayoutConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<LayoutEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type LayoutCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  footerStyle?: InputMaybe<FooterStyle>;
  headerStyle?: InputMaybe<HeaderStyle>;
  heroes?: InputMaybe<LayoutHeroCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<LayoutCreateLocalizationsInput>;
  locks?: InputMaybe<LockCreateManyInlineInput>;
  pages?: InputMaybe<PageCreateManyInlineInput>;
  sections?: InputMaybe<LayoutSectionsCreateManyInlineInput>;
  theme?: InputMaybe<ThemeCreateOneInlineInput>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type LayoutCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type LayoutCreateLocalizationInput = {
  /** Localization input */
  data: LayoutCreateLocalizationDataInput;
  locale: Locale;
};

export type LayoutCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<LayoutCreateLocalizationInput>>;
};

export type LayoutCreateManyInlineInput = {
  /** Connect multiple existing Layout documents */
  connect?: InputMaybe<Array<LayoutWhereUniqueInput>>;
  /** Create and connect multiple existing Layout documents */
  create?: InputMaybe<Array<LayoutCreateInput>>;
};

export type LayoutCreateOneInlineInput = {
  /** Connect one existing Layout document */
  connect?: InputMaybe<LayoutWhereUniqueInput>;
  /** Create and connect one Layout document */
  create?: InputMaybe<LayoutCreateInput>;
};

/** An edge in a connection. */
export type LayoutEdge = {
  __typename?: 'LayoutEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Layout;
};

export type LayoutHero = Collection | Editorial | Event | MixedMedia | Product;

export type LayoutHeroConnectInput = {
  Collection?: InputMaybe<CollectionConnectInput>;
  Editorial?: InputMaybe<EditorialConnectInput>;
  Event?: InputMaybe<EventConnectInput>;
  MixedMedia?: InputMaybe<MixedMediaConnectInput>;
  Product?: InputMaybe<ProductConnectInput>;
};

export type LayoutHeroCreateInput = {
  Collection?: InputMaybe<CollectionCreateInput>;
  Editorial?: InputMaybe<EditorialCreateInput>;
  Event?: InputMaybe<EventCreateInput>;
  MixedMedia?: InputMaybe<MixedMediaCreateInput>;
  Product?: InputMaybe<ProductCreateInput>;
};

export type LayoutHeroCreateManyInlineInput = {
  /** Connect multiple existing LayoutHero documents */
  connect?: InputMaybe<Array<LayoutHeroWhereUniqueInput>>;
  /** Create and connect multiple existing LayoutHero documents */
  create?: InputMaybe<Array<LayoutHeroCreateInput>>;
};

export type LayoutHeroCreateOneInlineInput = {
  /** Connect one existing LayoutHero document */
  connect?: InputMaybe<LayoutHeroWhereUniqueInput>;
  /** Create and connect one LayoutHero document */
  create?: InputMaybe<LayoutHeroCreateInput>;
};

export type LayoutHeroUpdateInput = {
  Collection?: InputMaybe<CollectionUpdateInput>;
  Editorial?: InputMaybe<EditorialUpdateInput>;
  Event?: InputMaybe<EventUpdateInput>;
  MixedMedia?: InputMaybe<MixedMediaUpdateInput>;
  Product?: InputMaybe<ProductUpdateInput>;
};

export type LayoutHeroUpdateManyInlineInput = {
  /** Connect multiple existing LayoutHero documents */
  connect?: InputMaybe<Array<LayoutHeroConnectInput>>;
  /** Create and connect multiple LayoutHero documents */
  create?: InputMaybe<Array<LayoutHeroCreateInput>>;
  /** Delete multiple LayoutHero documents */
  delete?: InputMaybe<Array<LayoutHeroWhereUniqueInput>>;
  /** Disconnect multiple LayoutHero documents */
  disconnect?: InputMaybe<Array<LayoutHeroWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing LayoutHero documents */
  set?: InputMaybe<Array<LayoutHeroWhereUniqueInput>>;
  /** Update multiple LayoutHero documents */
  update?: InputMaybe<Array<LayoutHeroUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple LayoutHero documents */
  upsert?: InputMaybe<Array<LayoutHeroUpsertWithNestedWhereUniqueInput>>;
};

export type LayoutHeroUpdateManyWithNestedWhereInput = {
  Collection?: InputMaybe<CollectionUpdateManyWithNestedWhereInput>;
  Editorial?: InputMaybe<EditorialUpdateManyWithNestedWhereInput>;
  Event?: InputMaybe<EventUpdateManyWithNestedWhereInput>;
  MixedMedia?: InputMaybe<MixedMediaUpdateManyWithNestedWhereInput>;
  Product?: InputMaybe<ProductUpdateManyWithNestedWhereInput>;
};

export type LayoutHeroUpdateOneInlineInput = {
  /** Connect existing LayoutHero document */
  connect?: InputMaybe<LayoutHeroWhereUniqueInput>;
  /** Create and connect one LayoutHero document */
  create?: InputMaybe<LayoutHeroCreateInput>;
  /** Delete currently connected LayoutHero document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected LayoutHero document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single LayoutHero document */
  update?: InputMaybe<LayoutHeroUpdateWithNestedWhereUniqueInput>;
  /** Upsert single LayoutHero document */
  upsert?: InputMaybe<LayoutHeroUpsertWithNestedWhereUniqueInput>;
};

export type LayoutHeroUpdateWithNestedWhereUniqueInput = {
  Collection?: InputMaybe<CollectionUpdateWithNestedWhereUniqueInput>;
  Editorial?: InputMaybe<EditorialUpdateWithNestedWhereUniqueInput>;
  Event?: InputMaybe<EventUpdateWithNestedWhereUniqueInput>;
  MixedMedia?: InputMaybe<MixedMediaUpdateWithNestedWhereUniqueInput>;
  Product?: InputMaybe<ProductUpdateWithNestedWhereUniqueInput>;
};

export type LayoutHeroUpsertWithNestedWhereUniqueInput = {
  Collection?: InputMaybe<CollectionUpsertWithNestedWhereUniqueInput>;
  Editorial?: InputMaybe<EditorialUpsertWithNestedWhereUniqueInput>;
  Event?: InputMaybe<EventUpsertWithNestedWhereUniqueInput>;
  MixedMedia?: InputMaybe<MixedMediaUpsertWithNestedWhereUniqueInput>;
  Product?: InputMaybe<ProductUpsertWithNestedWhereUniqueInput>;
};

export type LayoutHeroWhereInput = {
  Collection?: InputMaybe<CollectionWhereInput>;
  Editorial?: InputMaybe<EditorialWhereInput>;
  Event?: InputMaybe<EventWhereInput>;
  MixedMedia?: InputMaybe<MixedMediaWhereInput>;
  Product?: InputMaybe<ProductWhereInput>;
};

export type LayoutHeroWhereUniqueInput = {
  Collection?: InputMaybe<CollectionWhereUniqueInput>;
  Editorial?: InputMaybe<EditorialWhereUniqueInput>;
  Event?: InputMaybe<EventWhereUniqueInput>;
  MixedMedia?: InputMaybe<MixedMediaWhereUniqueInput>;
  Product?: InputMaybe<ProductWhereUniqueInput>;
};

/** Identifies documents */
export type LayoutManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LayoutWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LayoutWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LayoutWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<LayoutWhereStageInput>;
  documentInStages_none?: InputMaybe<LayoutWhereStageInput>;
  documentInStages_some?: InputMaybe<LayoutWhereStageInput>;
  footerStyle?: InputMaybe<FooterStyle>;
  /** All values that are contained in given list. */
  footerStyle_in?: InputMaybe<Array<InputMaybe<FooterStyle>>>;
  /** Any other value that exists and is not equal to the given value. */
  footerStyle_not?: InputMaybe<FooterStyle>;
  /** All values that are not contained in given list. */
  footerStyle_not_in?: InputMaybe<Array<InputMaybe<FooterStyle>>>;
  headerStyle?: InputMaybe<HeaderStyle>;
  /** All values that are contained in given list. */
  headerStyle_in?: InputMaybe<Array<InputMaybe<HeaderStyle>>>;
  /** Any other value that exists and is not equal to the given value. */
  headerStyle_not?: InputMaybe<HeaderStyle>;
  /** All values that are not contained in given list. */
  headerStyle_not_in?: InputMaybe<Array<InputMaybe<HeaderStyle>>>;
  /** All values in which the union is empty */
  heroes_empty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Matches if the union contains at least one connection to the provided item to the filter */
  heroes_some?: InputMaybe<LayoutHeroWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  locks_every?: InputMaybe<LockWhereInput>;
  locks_none?: InputMaybe<LockWhereInput>;
  locks_some?: InputMaybe<LockWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  /** All values in which the union is empty */
  sections_empty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Matches if the union contains at least one connection to the provided item to the filter */
  sections_some?: InputMaybe<LayoutSectionsWhereInput>;
  theme?: InputMaybe<ThemeWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum LayoutOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  FooterStyleAsc = 'footerStyle_ASC',
  FooterStyleDesc = 'footerStyle_DESC',
  HeaderStyleAsc = 'headerStyle_ASC',
  HeaderStyleDesc = 'headerStyle_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type LayoutSections = Archive | Collection | CustomizedSection | Event | Form | Lock | MixedMedia | Product;

export type LayoutSectionsConnectInput = {
  Archive?: InputMaybe<ArchiveConnectInput>;
  Collection?: InputMaybe<CollectionConnectInput>;
  CustomizedSection?: InputMaybe<CustomizedSectionConnectInput>;
  Event?: InputMaybe<EventConnectInput>;
  Form?: InputMaybe<FormConnectInput>;
  Lock?: InputMaybe<LockConnectInput>;
  MixedMedia?: InputMaybe<MixedMediaConnectInput>;
  Product?: InputMaybe<ProductConnectInput>;
};

export type LayoutSectionsCreateInput = {
  Archive?: InputMaybe<ArchiveCreateInput>;
  Collection?: InputMaybe<CollectionCreateInput>;
  CustomizedSection?: InputMaybe<CustomizedSectionCreateInput>;
  Event?: InputMaybe<EventCreateInput>;
  Form?: InputMaybe<FormCreateInput>;
  Lock?: InputMaybe<LockCreateInput>;
  MixedMedia?: InputMaybe<MixedMediaCreateInput>;
  Product?: InputMaybe<ProductCreateInput>;
};

export type LayoutSectionsCreateManyInlineInput = {
  /** Connect multiple existing LayoutSections documents */
  connect?: InputMaybe<Array<LayoutSectionsWhereUniqueInput>>;
  /** Create and connect multiple existing LayoutSections documents */
  create?: InputMaybe<Array<LayoutSectionsCreateInput>>;
};

export type LayoutSectionsCreateOneInlineInput = {
  /** Connect one existing LayoutSections document */
  connect?: InputMaybe<LayoutSectionsWhereUniqueInput>;
  /** Create and connect one LayoutSections document */
  create?: InputMaybe<LayoutSectionsCreateInput>;
};

export type LayoutSectionsUpdateInput = {
  Archive?: InputMaybe<ArchiveUpdateInput>;
  Collection?: InputMaybe<CollectionUpdateInput>;
  CustomizedSection?: InputMaybe<CustomizedSectionUpdateInput>;
  Event?: InputMaybe<EventUpdateInput>;
  Form?: InputMaybe<FormUpdateInput>;
  Lock?: InputMaybe<LockUpdateInput>;
  MixedMedia?: InputMaybe<MixedMediaUpdateInput>;
  Product?: InputMaybe<ProductUpdateInput>;
};

export type LayoutSectionsUpdateManyInlineInput = {
  /** Connect multiple existing LayoutSections documents */
  connect?: InputMaybe<Array<LayoutSectionsConnectInput>>;
  /** Create and connect multiple LayoutSections documents */
  create?: InputMaybe<Array<LayoutSectionsCreateInput>>;
  /** Delete multiple LayoutSections documents */
  delete?: InputMaybe<Array<LayoutSectionsWhereUniqueInput>>;
  /** Disconnect multiple LayoutSections documents */
  disconnect?: InputMaybe<Array<LayoutSectionsWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing LayoutSections documents */
  set?: InputMaybe<Array<LayoutSectionsWhereUniqueInput>>;
  /** Update multiple LayoutSections documents */
  update?: InputMaybe<Array<LayoutSectionsUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple LayoutSections documents */
  upsert?: InputMaybe<Array<LayoutSectionsUpsertWithNestedWhereUniqueInput>>;
};

export type LayoutSectionsUpdateManyWithNestedWhereInput = {
  Archive?: InputMaybe<ArchiveUpdateManyWithNestedWhereInput>;
  Collection?: InputMaybe<CollectionUpdateManyWithNestedWhereInput>;
  CustomizedSection?: InputMaybe<CustomizedSectionUpdateManyWithNestedWhereInput>;
  Event?: InputMaybe<EventUpdateManyWithNestedWhereInput>;
  Form?: InputMaybe<FormUpdateManyWithNestedWhereInput>;
  Lock?: InputMaybe<LockUpdateManyWithNestedWhereInput>;
  MixedMedia?: InputMaybe<MixedMediaUpdateManyWithNestedWhereInput>;
  Product?: InputMaybe<ProductUpdateManyWithNestedWhereInput>;
};

export type LayoutSectionsUpdateOneInlineInput = {
  /** Connect existing LayoutSections document */
  connect?: InputMaybe<LayoutSectionsWhereUniqueInput>;
  /** Create and connect one LayoutSections document */
  create?: InputMaybe<LayoutSectionsCreateInput>;
  /** Delete currently connected LayoutSections document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected LayoutSections document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single LayoutSections document */
  update?: InputMaybe<LayoutSectionsUpdateWithNestedWhereUniqueInput>;
  /** Upsert single LayoutSections document */
  upsert?: InputMaybe<LayoutSectionsUpsertWithNestedWhereUniqueInput>;
};

export type LayoutSectionsUpdateWithNestedWhereUniqueInput = {
  Archive?: InputMaybe<ArchiveUpdateWithNestedWhereUniqueInput>;
  Collection?: InputMaybe<CollectionUpdateWithNestedWhereUniqueInput>;
  CustomizedSection?: InputMaybe<CustomizedSectionUpdateWithNestedWhereUniqueInput>;
  Event?: InputMaybe<EventUpdateWithNestedWhereUniqueInput>;
  Form?: InputMaybe<FormUpdateWithNestedWhereUniqueInput>;
  Lock?: InputMaybe<LockUpdateWithNestedWhereUniqueInput>;
  MixedMedia?: InputMaybe<MixedMediaUpdateWithNestedWhereUniqueInput>;
  Product?: InputMaybe<ProductUpdateWithNestedWhereUniqueInput>;
};

export type LayoutSectionsUpsertWithNestedWhereUniqueInput = {
  Archive?: InputMaybe<ArchiveUpsertWithNestedWhereUniqueInput>;
  Collection?: InputMaybe<CollectionUpsertWithNestedWhereUniqueInput>;
  CustomizedSection?: InputMaybe<CustomizedSectionUpsertWithNestedWhereUniqueInput>;
  Event?: InputMaybe<EventUpsertWithNestedWhereUniqueInput>;
  Form?: InputMaybe<FormUpsertWithNestedWhereUniqueInput>;
  Lock?: InputMaybe<LockUpsertWithNestedWhereUniqueInput>;
  MixedMedia?: InputMaybe<MixedMediaUpsertWithNestedWhereUniqueInput>;
  Product?: InputMaybe<ProductUpsertWithNestedWhereUniqueInput>;
};

export type LayoutSectionsWhereInput = {
  Archive?: InputMaybe<ArchiveWhereInput>;
  Collection?: InputMaybe<CollectionWhereInput>;
  CustomizedSection?: InputMaybe<CustomizedSectionWhereInput>;
  Event?: InputMaybe<EventWhereInput>;
  Form?: InputMaybe<FormWhereInput>;
  Lock?: InputMaybe<LockWhereInput>;
  MixedMedia?: InputMaybe<MixedMediaWhereInput>;
  Product?: InputMaybe<ProductWhereInput>;
};

export type LayoutSectionsWhereUniqueInput = {
  Archive?: InputMaybe<ArchiveWhereUniqueInput>;
  Collection?: InputMaybe<CollectionWhereUniqueInput>;
  CustomizedSection?: InputMaybe<CustomizedSectionWhereUniqueInput>;
  Event?: InputMaybe<EventWhereUniqueInput>;
  Form?: InputMaybe<FormWhereUniqueInput>;
  Lock?: InputMaybe<LockWhereUniqueInput>;
  MixedMedia?: InputMaybe<MixedMediaWhereUniqueInput>;
  Product?: InputMaybe<ProductWhereUniqueInput>;
};

export type LayoutUpdateInput = {
  footerStyle?: InputMaybe<FooterStyle>;
  headerStyle?: InputMaybe<HeaderStyle>;
  heroes?: InputMaybe<LayoutHeroUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<LayoutUpdateLocalizationsInput>;
  locks?: InputMaybe<LockUpdateManyInlineInput>;
  pages?: InputMaybe<PageUpdateManyInlineInput>;
  sections?: InputMaybe<LayoutSectionsUpdateManyInlineInput>;
  theme?: InputMaybe<ThemeUpdateOneInlineInput>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']['input']>;
};

export type LayoutUpdateLocalizationDataInput = {
  title?: InputMaybe<Scalars['String']['input']>;
};

export type LayoutUpdateLocalizationInput = {
  data: LayoutUpdateLocalizationDataInput;
  locale: Locale;
};

export type LayoutUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<LayoutCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<LayoutUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<LayoutUpsertLocalizationInput>>;
};

export type LayoutUpdateManyInlineInput = {
  /** Connect multiple existing Layout documents */
  connect?: InputMaybe<Array<LayoutConnectInput>>;
  /** Create and connect multiple Layout documents */
  create?: InputMaybe<Array<LayoutCreateInput>>;
  /** Delete multiple Layout documents */
  delete?: InputMaybe<Array<LayoutWhereUniqueInput>>;
  /** Disconnect multiple Layout documents */
  disconnect?: InputMaybe<Array<LayoutWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Layout documents */
  set?: InputMaybe<Array<LayoutWhereUniqueInput>>;
  /** Update multiple Layout documents */
  update?: InputMaybe<Array<LayoutUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Layout documents */
  upsert?: InputMaybe<Array<LayoutUpsertWithNestedWhereUniqueInput>>;
};

export type LayoutUpdateManyInput = {
  footerStyle?: InputMaybe<FooterStyle>;
  headerStyle?: InputMaybe<HeaderStyle>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<LayoutUpdateManyLocalizationsInput>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']['input']>;
};

export type LayoutUpdateManyLocalizationDataInput = {
  title?: InputMaybe<Scalars['String']['input']>;
};

export type LayoutUpdateManyLocalizationInput = {
  data: LayoutUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type LayoutUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<LayoutUpdateManyLocalizationInput>>;
};

export type LayoutUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: LayoutUpdateManyInput;
  /** Document search */
  where: LayoutWhereInput;
};

export type LayoutUpdateOneInlineInput = {
  /** Connect existing Layout document */
  connect?: InputMaybe<LayoutWhereUniqueInput>;
  /** Create and connect one Layout document */
  create?: InputMaybe<LayoutCreateInput>;
  /** Delete currently connected Layout document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected Layout document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Layout document */
  update?: InputMaybe<LayoutUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Layout document */
  upsert?: InputMaybe<LayoutUpsertWithNestedWhereUniqueInput>;
};

export type LayoutUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: LayoutUpdateInput;
  /** Unique document search */
  where: LayoutWhereUniqueInput;
};

export type LayoutUpsertInput = {
  /** Create document if it didn't exist */
  create: LayoutCreateInput;
  /** Update document if it exists */
  update: LayoutUpdateInput;
};

export type LayoutUpsertLocalizationInput = {
  create: LayoutCreateLocalizationDataInput;
  locale: Locale;
  update: LayoutUpdateLocalizationDataInput;
};

export type LayoutUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: LayoutUpsertInput;
  /** Unique document search */
  where: LayoutWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type LayoutWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type LayoutWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LayoutWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LayoutWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LayoutWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<LayoutWhereStageInput>;
  documentInStages_none?: InputMaybe<LayoutWhereStageInput>;
  documentInStages_some?: InputMaybe<LayoutWhereStageInput>;
  footerStyle?: InputMaybe<FooterStyle>;
  /** All values that are contained in given list. */
  footerStyle_in?: InputMaybe<Array<InputMaybe<FooterStyle>>>;
  /** Any other value that exists and is not equal to the given value. */
  footerStyle_not?: InputMaybe<FooterStyle>;
  /** All values that are not contained in given list. */
  footerStyle_not_in?: InputMaybe<Array<InputMaybe<FooterStyle>>>;
  headerStyle?: InputMaybe<HeaderStyle>;
  /** All values that are contained in given list. */
  headerStyle_in?: InputMaybe<Array<InputMaybe<HeaderStyle>>>;
  /** Any other value that exists and is not equal to the given value. */
  headerStyle_not?: InputMaybe<HeaderStyle>;
  /** All values that are not contained in given list. */
  headerStyle_not_in?: InputMaybe<Array<InputMaybe<HeaderStyle>>>;
  /** All values in which the union is empty */
  heroes_empty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Matches if the union contains at least one connection to the provided item to the filter */
  heroes_some?: InputMaybe<LayoutHeroWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  locks_every?: InputMaybe<LockWhereInput>;
  locks_none?: InputMaybe<LockWhereInput>;
  locks_some?: InputMaybe<LockWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  /** All values in which the union is empty */
  sections_empty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Matches if the union contains at least one connection to the provided item to the filter */
  sections_some?: InputMaybe<LayoutSectionsWhereInput>;
  theme?: InputMaybe<ThemeWhereInput>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type LayoutWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LayoutWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LayoutWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LayoutWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<LayoutWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Layout record uniquely */
export type LayoutWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Link = Entity & {
  __typename?: 'Link';
  /** Pass any arbitrary URL to use for the link . If "Target (Internal)" is assigned, that will be used by default. */
  externalTarget?: Maybe<Scalars['String']['output']>;
  hasTargetBlank: Scalars['Boolean']['output'];
  /** The unique identifier */
  id: Scalars['ID']['output'];
  /** Links to an internal page */
  internalTarget?: Maybe<LinkInternalTarget>;
  label?: Maybe<Scalars['String']['output']>;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Link>;
  /** The rel attribute defines the relationship between a linked resource and the current document. */
  rel?: Maybe<Scalars['String']['output']>;
  /** System stage field */
  stage: Stage;
  /** The title attribute is used to provide additional information to help clarify or further describe the purpose of a link. It pops up in the context menu on hover. */
  title?: Maybe<Scalars['String']['output']>;
};


export type LinkInternalTargetArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type LinkLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  locales?: Array<Locale>;
};

export type LinkConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: LinkWhereUniqueInput;
};

/** A connection to a list of items. */
export type LinkConnection = {
  __typename?: 'LinkConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<LinkEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type LinkCreateInput = {
  externalTarget?: InputMaybe<Scalars['String']['input']>;
  hasTargetBlank: Scalars['Boolean']['input'];
  internalTarget?: InputMaybe<LinkInternalTargetCreateOneInlineInput>;
  /** label input for default locale (en) */
  label?: InputMaybe<Scalars['String']['input']>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<LinkCreateLocalizationsInput>;
  rel?: InputMaybe<Scalars['String']['input']>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']['input']>;
};

export type LinkCreateLocalizationDataInput = {
  label?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type LinkCreateLocalizationInput = {
  /** Localization input */
  data: LinkCreateLocalizationDataInput;
  locale: Locale;
};

export type LinkCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<LinkCreateLocalizationInput>>;
};

export type LinkCreateManyInlineInput = {
  /** Create and connect multiple existing Link documents */
  create?: InputMaybe<Array<LinkCreateInput>>;
};

export type LinkCreateOneInlineInput = {
  /** Create and connect one Link document */
  create?: InputMaybe<LinkCreateInput>;
};

export type LinkCreateWithPositionInput = {
  /** Document to create */
  data: LinkCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type LinkEdge = {
  __typename?: 'LinkEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Link;
};

export type LinkInternalTarget = Collection | Editorial | Page | Product;

export type LinkInternalTargetConnectInput = {
  Collection?: InputMaybe<CollectionConnectInput>;
  Editorial?: InputMaybe<EditorialConnectInput>;
  Page?: InputMaybe<PageConnectInput>;
  Product?: InputMaybe<ProductConnectInput>;
};

export type LinkInternalTargetCreateInput = {
  Collection?: InputMaybe<CollectionCreateInput>;
  Editorial?: InputMaybe<EditorialCreateInput>;
  Page?: InputMaybe<PageCreateInput>;
  Product?: InputMaybe<ProductCreateInput>;
};

export type LinkInternalTargetCreateManyInlineInput = {
  /** Connect multiple existing LinkInternalTarget documents */
  connect?: InputMaybe<Array<LinkInternalTargetWhereUniqueInput>>;
  /** Create and connect multiple existing LinkInternalTarget documents */
  create?: InputMaybe<Array<LinkInternalTargetCreateInput>>;
};

export type LinkInternalTargetCreateOneInlineInput = {
  /** Connect one existing LinkInternalTarget document */
  connect?: InputMaybe<LinkInternalTargetWhereUniqueInput>;
  /** Create and connect one LinkInternalTarget document */
  create?: InputMaybe<LinkInternalTargetCreateInput>;
};

export type LinkInternalTargetUpdateInput = {
  Collection?: InputMaybe<CollectionUpdateInput>;
  Editorial?: InputMaybe<EditorialUpdateInput>;
  Page?: InputMaybe<PageUpdateInput>;
  Product?: InputMaybe<ProductUpdateInput>;
};

export type LinkInternalTargetUpdateManyInlineInput = {
  /** Connect multiple existing LinkInternalTarget documents */
  connect?: InputMaybe<Array<LinkInternalTargetConnectInput>>;
  /** Create and connect multiple LinkInternalTarget documents */
  create?: InputMaybe<Array<LinkInternalTargetCreateInput>>;
  /** Delete multiple LinkInternalTarget documents */
  delete?: InputMaybe<Array<LinkInternalTargetWhereUniqueInput>>;
  /** Disconnect multiple LinkInternalTarget documents */
  disconnect?: InputMaybe<Array<LinkInternalTargetWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing LinkInternalTarget documents */
  set?: InputMaybe<Array<LinkInternalTargetWhereUniqueInput>>;
  /** Update multiple LinkInternalTarget documents */
  update?: InputMaybe<Array<LinkInternalTargetUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple LinkInternalTarget documents */
  upsert?: InputMaybe<Array<LinkInternalTargetUpsertWithNestedWhereUniqueInput>>;
};

export type LinkInternalTargetUpdateManyWithNestedWhereInput = {
  Collection?: InputMaybe<CollectionUpdateManyWithNestedWhereInput>;
  Editorial?: InputMaybe<EditorialUpdateManyWithNestedWhereInput>;
  Page?: InputMaybe<PageUpdateManyWithNestedWhereInput>;
  Product?: InputMaybe<ProductUpdateManyWithNestedWhereInput>;
};

export type LinkInternalTargetUpdateOneInlineInput = {
  /** Connect existing LinkInternalTarget document */
  connect?: InputMaybe<LinkInternalTargetWhereUniqueInput>;
  /** Create and connect one LinkInternalTarget document */
  create?: InputMaybe<LinkInternalTargetCreateInput>;
  /** Delete currently connected LinkInternalTarget document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected LinkInternalTarget document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single LinkInternalTarget document */
  update?: InputMaybe<LinkInternalTargetUpdateWithNestedWhereUniqueInput>;
  /** Upsert single LinkInternalTarget document */
  upsert?: InputMaybe<LinkInternalTargetUpsertWithNestedWhereUniqueInput>;
};

export type LinkInternalTargetUpdateWithNestedWhereUniqueInput = {
  Collection?: InputMaybe<CollectionUpdateWithNestedWhereUniqueInput>;
  Editorial?: InputMaybe<EditorialUpdateWithNestedWhereUniqueInput>;
  Page?: InputMaybe<PageUpdateWithNestedWhereUniqueInput>;
  Product?: InputMaybe<ProductUpdateWithNestedWhereUniqueInput>;
};

export type LinkInternalTargetUpsertWithNestedWhereUniqueInput = {
  Collection?: InputMaybe<CollectionUpsertWithNestedWhereUniqueInput>;
  Editorial?: InputMaybe<EditorialUpsertWithNestedWhereUniqueInput>;
  Page?: InputMaybe<PageUpsertWithNestedWhereUniqueInput>;
  Product?: InputMaybe<ProductUpsertWithNestedWhereUniqueInput>;
};

export type LinkInternalTargetWhereInput = {
  Collection?: InputMaybe<CollectionWhereInput>;
  Editorial?: InputMaybe<EditorialWhereInput>;
  Page?: InputMaybe<PageWhereInput>;
  Product?: InputMaybe<ProductWhereInput>;
};

export type LinkInternalTargetWhereUniqueInput = {
  Collection?: InputMaybe<CollectionWhereUniqueInput>;
  Editorial?: InputMaybe<EditorialWhereUniqueInput>;
  Page?: InputMaybe<PageWhereUniqueInput>;
  Product?: InputMaybe<ProductWhereUniqueInput>;
};

/** Identifies documents */
export type LinkManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LinkWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LinkWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LinkWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  externalTarget?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  externalTarget_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  externalTarget_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  externalTarget_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  externalTarget_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  externalTarget_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  externalTarget_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  externalTarget_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  externalTarget_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  externalTarget_starts_with?: InputMaybe<Scalars['String']['input']>;
  hasTargetBlank?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  hasTargetBlank_not?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values in which the union is connected to the given models */
  internalTarget?: InputMaybe<LinkInternalTargetWhereInput>;
  /** All values in which the union is empty */
  internalTarget_empty?: InputMaybe<Scalars['Boolean']['input']>;
  rel?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  rel_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  rel_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  rel_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  rel_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  rel_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  rel_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  rel_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  rel_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  rel_starts_with?: InputMaybe<Scalars['String']['input']>;
};

export enum LinkOrderByInput {
  ExternalTargetAsc = 'externalTarget_ASC',
  ExternalTargetDesc = 'externalTarget_DESC',
  HasTargetBlankAsc = 'hasTargetBlank_ASC',
  HasTargetBlankDesc = 'hasTargetBlank_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LabelAsc = 'label_ASC',
  LabelDesc = 'label_DESC',
  RelAsc = 'rel_ASC',
  RelDesc = 'rel_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC'
}

export type LinkParent = MixedMedia | Navigation;

export type LinkParentConnectInput = {
  MixedMedia?: InputMaybe<MixedMediaConnectInput>;
  Navigation?: InputMaybe<NavigationConnectInput>;
};

export type LinkParentCreateInput = {
  MixedMedia?: InputMaybe<MixedMediaCreateInput>;
  Navigation?: InputMaybe<NavigationCreateInput>;
};

export type LinkParentCreateManyInlineInput = {
  /** Connect multiple existing LinkParent documents */
  connect?: InputMaybe<Array<LinkParentWhereUniqueInput>>;
  /** Create and connect multiple existing LinkParent documents */
  create?: InputMaybe<Array<LinkParentCreateInput>>;
};

export type LinkParentCreateOneInlineInput = {
  /** Connect one existing LinkParent document */
  connect?: InputMaybe<LinkParentWhereUniqueInput>;
  /** Create and connect one LinkParent document */
  create?: InputMaybe<LinkParentCreateInput>;
};

export type LinkParentUpdateInput = {
  MixedMedia?: InputMaybe<MixedMediaUpdateInput>;
  Navigation?: InputMaybe<NavigationUpdateInput>;
};

export type LinkParentUpdateManyInlineInput = {
  /** Connect multiple existing LinkParent documents */
  connect?: InputMaybe<Array<LinkParentConnectInput>>;
  /** Create and connect multiple LinkParent documents */
  create?: InputMaybe<Array<LinkParentCreateInput>>;
  /** Delete multiple LinkParent documents */
  delete?: InputMaybe<Array<LinkParentWhereUniqueInput>>;
  /** Disconnect multiple LinkParent documents */
  disconnect?: InputMaybe<Array<LinkParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing LinkParent documents */
  set?: InputMaybe<Array<LinkParentWhereUniqueInput>>;
  /** Update multiple LinkParent documents */
  update?: InputMaybe<Array<LinkParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple LinkParent documents */
  upsert?: InputMaybe<Array<LinkParentUpsertWithNestedWhereUniqueInput>>;
};

export type LinkParentUpdateManyWithNestedWhereInput = {
  MixedMedia?: InputMaybe<MixedMediaUpdateManyWithNestedWhereInput>;
  Navigation?: InputMaybe<NavigationUpdateManyWithNestedWhereInput>;
};

export type LinkParentUpdateOneInlineInput = {
  /** Connect existing LinkParent document */
  connect?: InputMaybe<LinkParentWhereUniqueInput>;
  /** Create and connect one LinkParent document */
  create?: InputMaybe<LinkParentCreateInput>;
  /** Delete currently connected LinkParent document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected LinkParent document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single LinkParent document */
  update?: InputMaybe<LinkParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single LinkParent document */
  upsert?: InputMaybe<LinkParentUpsertWithNestedWhereUniqueInput>;
};

export type LinkParentUpdateWithNestedWhereUniqueInput = {
  MixedMedia?: InputMaybe<MixedMediaUpdateWithNestedWhereUniqueInput>;
  Navigation?: InputMaybe<NavigationUpdateWithNestedWhereUniqueInput>;
};

export type LinkParentUpsertWithNestedWhereUniqueInput = {
  MixedMedia?: InputMaybe<MixedMediaUpsertWithNestedWhereUniqueInput>;
  Navigation?: InputMaybe<NavigationUpsertWithNestedWhereUniqueInput>;
};

export type LinkParentWhereInput = {
  MixedMedia?: InputMaybe<MixedMediaWhereInput>;
  Navigation?: InputMaybe<NavigationWhereInput>;
};

export type LinkParentWhereUniqueInput = {
  MixedMedia?: InputMaybe<MixedMediaWhereUniqueInput>;
  Navigation?: InputMaybe<NavigationWhereUniqueInput>;
};

export type LinkUpdateInput = {
  externalTarget?: InputMaybe<Scalars['String']['input']>;
  hasTargetBlank?: InputMaybe<Scalars['Boolean']['input']>;
  internalTarget?: InputMaybe<LinkInternalTargetUpdateOneInlineInput>;
  /** label input for default locale (en) */
  label?: InputMaybe<Scalars['String']['input']>;
  /** Manage document localizations */
  localizations?: InputMaybe<LinkUpdateLocalizationsInput>;
  rel?: InputMaybe<Scalars['String']['input']>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']['input']>;
};

export type LinkUpdateLocalizationDataInput = {
  label?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type LinkUpdateLocalizationInput = {
  data: LinkUpdateLocalizationDataInput;
  locale: Locale;
};

export type LinkUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<LinkCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<LinkUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<LinkUpsertLocalizationInput>>;
};

export type LinkUpdateManyInlineInput = {
  /** Create and connect multiple Link component instances */
  create?: InputMaybe<Array<LinkCreateWithPositionInput>>;
  /** Delete multiple Link documents */
  delete?: InputMaybe<Array<LinkWhereUniqueInput>>;
  /** Update multiple Link component instances */
  update?: InputMaybe<Array<LinkUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple Link component instances */
  upsert?: InputMaybe<Array<LinkUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type LinkUpdateManyInput = {
  externalTarget?: InputMaybe<Scalars['String']['input']>;
  hasTargetBlank?: InputMaybe<Scalars['Boolean']['input']>;
  /** label input for default locale (en) */
  label?: InputMaybe<Scalars['String']['input']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<LinkUpdateManyLocalizationsInput>;
  rel?: InputMaybe<Scalars['String']['input']>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']['input']>;
};

export type LinkUpdateManyLocalizationDataInput = {
  label?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type LinkUpdateManyLocalizationInput = {
  data: LinkUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type LinkUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<LinkUpdateManyLocalizationInput>>;
};

export type LinkUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: LinkUpdateManyInput;
  /** Document search */
  where: LinkWhereInput;
};

export type LinkUpdateOneInlineInput = {
  /** Create and connect one Link document */
  create?: InputMaybe<LinkCreateInput>;
  /** Delete currently connected Link document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Link document */
  update?: InputMaybe<LinkUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Link document */
  upsert?: InputMaybe<LinkUpsertWithNestedWhereUniqueInput>;
};

export type LinkUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<LinkUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: LinkWhereUniqueInput;
};

export type LinkUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: LinkUpdateInput;
  /** Unique document search */
  where: LinkWhereUniqueInput;
};

export type LinkUpsertInput = {
  /** Create document if it didn't exist */
  create: LinkCreateInput;
  /** Update document if it exists */
  update: LinkUpdateInput;
};

export type LinkUpsertLocalizationInput = {
  create: LinkCreateLocalizationDataInput;
  locale: Locale;
  update: LinkUpdateLocalizationDataInput;
};

export type LinkUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<LinkUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: LinkWhereUniqueInput;
};

export type LinkUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: LinkUpsertInput;
  /** Unique document search */
  where: LinkWhereUniqueInput;
};

/** Identifies documents */
export type LinkWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LinkWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LinkWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LinkWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  externalTarget?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  externalTarget_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  externalTarget_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  externalTarget_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  externalTarget_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  externalTarget_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  externalTarget_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  externalTarget_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  externalTarget_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  externalTarget_starts_with?: InputMaybe<Scalars['String']['input']>;
  hasTargetBlank?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  hasTargetBlank_not?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values in which the union is connected to the given models */
  internalTarget?: InputMaybe<LinkInternalTargetWhereInput>;
  /** All values in which the union is empty */
  internalTarget_empty?: InputMaybe<Scalars['Boolean']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  label_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']['input']>;
  rel?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  rel_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  rel_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  rel_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  rel_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  rel_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  rel_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  rel_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  rel_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  rel_starts_with?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
};

/** References Link record uniquely */
export type LinkWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

/** Locale system enumeration */
export enum Locale {
  /** System locale */
  En = 'en'
}

/** Representing a geolocation point with latitude and longitude */
export type Location = {
  __typename?: 'Location';
  distance: Scalars['Float']['output'];
  latitude: Scalars['Float']['output'];
  longitude: Scalars['Float']['output'];
};


/** Representing a geolocation point with latitude and longitude */
export type LocationDistanceArgs = {
  from: LocationInput;
};

/** Input for a geolocation point with latitude and longitude */
export type LocationInput = {
  latitude: Scalars['Float']['input'];
  longitude: Scalars['Float']['input'];
};

export type Lock = Entity & Node & {
  __typename?: 'Lock';
  /** By enabling this option, the page is unlocked for a user that has entered a password, regardless of the scheduled lock time. */
  alwaysUnlockForAuthenticatedUser: Scalars['Boolean']['output'];
  /** By enabling this option, even if a page is password protected, it will be unlocked at scheduled unlock time. */
  alwaysUnlockOnTime: Scalars['Boolean']['output'];
  /** Add a background image or video for the default lock screen. */
  background?: Maybe<Asset>;
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Optionally create a Lock Screen. */
  customLockScreen?: Maybe<Layout>;
  /** Get the document in other stages */
  documentInStages: Array<Lock>;
  event?: Maybe<Event>;
  exemptions: Array<LockExemptionExemptions>;
  /** List of Lock versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  internalName?: Maybe<Scalars['String']['output']>;
  /** Toggle the lock on and off. */
  isEnabled: Scalars['Boolean']['output'];
  /** Apply lock to the entire webshop. While GLOBAL is enabled, you can bypass the lock on specific pages using exemptions; while disabled, you can still enable a lock on specific page using "Single Page Locks" */
  isGlobal: Scalars['Boolean']['output'];
  layouts: Array<Layout>;
  pageLocks: Array<LockPageLocks>;
  /** Leave blank to disable password protection. */
  password?: Maybe<Scalars['String']['output']>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  scheduledUnlockTime?: Maybe<Scalars['DateTime']['output']>;
  slug: Scalars['String']['output'];
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type LockBackgroundArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  where?: InputMaybe<AssetSingleRelationWhereInput>;
};


export type LockCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type LockCustomLockScreenArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type LockDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type LockEventArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type LockExemptionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
};


export type LockHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type LockLayoutsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LayoutWhereInput>;
};


export type LockPageLocksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
};


export type LockPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type LockScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type LockUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type LockConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: LockWhereUniqueInput;
};

/** A connection to a list of items. */
export type LockConnection = {
  __typename?: 'LockConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<LockEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type LockCreateInput = {
  alwaysUnlockForAuthenticatedUser: Scalars['Boolean']['input'];
  alwaysUnlockOnTime: Scalars['Boolean']['input'];
  background?: InputMaybe<AssetCreateOneInlineInput>;
  clu2jp8090atk07lfhdzoagfy?: InputMaybe<CountdownComponentCreateManyInlineInput>;
  clubqsy1f01kq06n3a1k39lar?: InputMaybe<LockedSectionCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  customLockScreen?: InputMaybe<LayoutCreateOneInlineInput>;
  event?: InputMaybe<EventCreateOneInlineInput>;
  exemptions?: InputMaybe<LockExemptionExemptionsCreateManyInlineInput>;
  internalName?: InputMaybe<Scalars['String']['input']>;
  isEnabled: Scalars['Boolean']['input'];
  isGlobal: Scalars['Boolean']['input'];
  layouts?: InputMaybe<LayoutCreateManyInlineInput>;
  pageLocks?: InputMaybe<LockPageLocksCreateManyInlineInput>;
  password?: InputMaybe<Scalars['String']['input']>;
  scheduledUnlockTime?: InputMaybe<Scalars['DateTime']['input']>;
  slug: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type LockCreateManyInlineInput = {
  /** Connect multiple existing Lock documents */
  connect?: InputMaybe<Array<LockWhereUniqueInput>>;
  /** Create and connect multiple existing Lock documents */
  create?: InputMaybe<Array<LockCreateInput>>;
};

export type LockCreateOneInlineInput = {
  /** Connect one existing Lock document */
  connect?: InputMaybe<LockWhereUniqueInput>;
  /** Create and connect one Lock document */
  create?: InputMaybe<LockCreateInput>;
};

/** An edge in a connection. */
export type LockEdge = {
  __typename?: 'LockEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Lock;
};

/** Identifies documents */
export type LockManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LockWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LockWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LockWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  alwaysUnlockForAuthenticatedUser?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  alwaysUnlockForAuthenticatedUser_not?: InputMaybe<Scalars['Boolean']['input']>;
  alwaysUnlockOnTime?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  alwaysUnlockOnTime_not?: InputMaybe<Scalars['Boolean']['input']>;
  background?: InputMaybe<AssetWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  customLockScreen?: InputMaybe<LayoutWhereInput>;
  documentInStages_every?: InputMaybe<LockWhereStageInput>;
  documentInStages_none?: InputMaybe<LockWhereStageInput>;
  documentInStages_some?: InputMaybe<LockWhereStageInput>;
  event?: InputMaybe<EventWhereInput>;
  /** All values in which the union is empty */
  exemptions_empty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Matches if the union contains at least one connection to the provided item to the filter */
  exemptions_some?: InputMaybe<LockExemptionExemptionsWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  internalName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  internalName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  internalName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  internalName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  internalName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  internalName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  internalName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  internalName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  internalName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  internalName_starts_with?: InputMaybe<Scalars['String']['input']>;
  isEnabled?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  isEnabled_not?: InputMaybe<Scalars['Boolean']['input']>;
  isGlobal?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  isGlobal_not?: InputMaybe<Scalars['Boolean']['input']>;
  layouts_every?: InputMaybe<LayoutWhereInput>;
  layouts_none?: InputMaybe<LayoutWhereInput>;
  layouts_some?: InputMaybe<LayoutWhereInput>;
  /** All values in which the union is empty */
  pageLocks_empty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Matches if the union contains at least one connection to the provided item to the filter */
  pageLocks_some?: InputMaybe<LockPageLocksWhereInput>;
  password?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  password_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  password_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  password_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  password_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  password_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  password_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  password_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  password_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  password_starts_with?: InputMaybe<Scalars['String']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledUnlockTime?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  scheduledUnlockTime_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  scheduledUnlockTime_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  scheduledUnlockTime_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  scheduledUnlockTime_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  scheduledUnlockTime_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  scheduledUnlockTime_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  scheduledUnlockTime_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum LockOrderByInput {
  AlwaysUnlockForAuthenticatedUserAsc = 'alwaysUnlockForAuthenticatedUser_ASC',
  AlwaysUnlockForAuthenticatedUserDesc = 'alwaysUnlockForAuthenticatedUser_DESC',
  AlwaysUnlockOnTimeAsc = 'alwaysUnlockOnTime_ASC',
  AlwaysUnlockOnTimeDesc = 'alwaysUnlockOnTime_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  InternalNameAsc = 'internalName_ASC',
  InternalNameDesc = 'internalName_DESC',
  IsEnabledAsc = 'isEnabled_ASC',
  IsEnabledDesc = 'isEnabled_DESC',
  IsGlobalAsc = 'isGlobal_ASC',
  IsGlobalDesc = 'isGlobal_DESC',
  PasswordAsc = 'password_ASC',
  PasswordDesc = 'password_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  ScheduledUnlockTimeAsc = 'scheduledUnlockTime_ASC',
  ScheduledUnlockTimeDesc = 'scheduledUnlockTime_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type LockUpdateInput = {
  alwaysUnlockForAuthenticatedUser?: InputMaybe<Scalars['Boolean']['input']>;
  alwaysUnlockOnTime?: InputMaybe<Scalars['Boolean']['input']>;
  background?: InputMaybe<AssetUpdateOneInlineInput>;
  clu2jp8090atk07lfhdzoagfy?: InputMaybe<CountdownComponentUpdateManyInlineInput>;
  clubqsy1f01kq06n3a1k39lar?: InputMaybe<LockedSectionUpdateManyInlineInput>;
  customLockScreen?: InputMaybe<LayoutUpdateOneInlineInput>;
  event?: InputMaybe<EventUpdateOneInlineInput>;
  exemptions?: InputMaybe<LockExemptionExemptionsUpdateManyInlineInput>;
  internalName?: InputMaybe<Scalars['String']['input']>;
  isEnabled?: InputMaybe<Scalars['Boolean']['input']>;
  isGlobal?: InputMaybe<Scalars['Boolean']['input']>;
  layouts?: InputMaybe<LayoutUpdateManyInlineInput>;
  pageLocks?: InputMaybe<LockPageLocksUpdateManyInlineInput>;
  password?: InputMaybe<Scalars['String']['input']>;
  scheduledUnlockTime?: InputMaybe<Scalars['DateTime']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type LockUpdateManyInlineInput = {
  /** Connect multiple existing Lock documents */
  connect?: InputMaybe<Array<LockConnectInput>>;
  /** Create and connect multiple Lock documents */
  create?: InputMaybe<Array<LockCreateInput>>;
  /** Delete multiple Lock documents */
  delete?: InputMaybe<Array<LockWhereUniqueInput>>;
  /** Disconnect multiple Lock documents */
  disconnect?: InputMaybe<Array<LockWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Lock documents */
  set?: InputMaybe<Array<LockWhereUniqueInput>>;
  /** Update multiple Lock documents */
  update?: InputMaybe<Array<LockUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Lock documents */
  upsert?: InputMaybe<Array<LockUpsertWithNestedWhereUniqueInput>>;
};

export type LockUpdateManyInput = {
  alwaysUnlockForAuthenticatedUser?: InputMaybe<Scalars['Boolean']['input']>;
  alwaysUnlockOnTime?: InputMaybe<Scalars['Boolean']['input']>;
  isEnabled?: InputMaybe<Scalars['Boolean']['input']>;
  isGlobal?: InputMaybe<Scalars['Boolean']['input']>;
  password?: InputMaybe<Scalars['String']['input']>;
  scheduledUnlockTime?: InputMaybe<Scalars['DateTime']['input']>;
};

export type LockUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: LockUpdateManyInput;
  /** Document search */
  where: LockWhereInput;
};

export type LockUpdateOneInlineInput = {
  /** Connect existing Lock document */
  connect?: InputMaybe<LockWhereUniqueInput>;
  /** Create and connect one Lock document */
  create?: InputMaybe<LockCreateInput>;
  /** Delete currently connected Lock document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected Lock document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Lock document */
  update?: InputMaybe<LockUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Lock document */
  upsert?: InputMaybe<LockUpsertWithNestedWhereUniqueInput>;
};

export type LockUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: LockUpdateInput;
  /** Unique document search */
  where: LockWhereUniqueInput;
};

export type LockUpsertInput = {
  /** Create document if it didn't exist */
  create: LockCreateInput;
  /** Update document if it exists */
  update: LockUpdateInput;
};

export type LockUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: LockUpsertInput;
  /** Unique document search */
  where: LockWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type LockWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type LockWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LockWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LockWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LockWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  alwaysUnlockForAuthenticatedUser?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  alwaysUnlockForAuthenticatedUser_not?: InputMaybe<Scalars['Boolean']['input']>;
  alwaysUnlockOnTime?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  alwaysUnlockOnTime_not?: InputMaybe<Scalars['Boolean']['input']>;
  background?: InputMaybe<AssetWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  customLockScreen?: InputMaybe<LayoutWhereInput>;
  documentInStages_every?: InputMaybe<LockWhereStageInput>;
  documentInStages_none?: InputMaybe<LockWhereStageInput>;
  documentInStages_some?: InputMaybe<LockWhereStageInput>;
  event?: InputMaybe<EventWhereInput>;
  /** All values in which the union is empty */
  exemptions_empty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Matches if the union contains at least one connection to the provided item to the filter */
  exemptions_some?: InputMaybe<LockExemptionExemptionsWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  internalName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  internalName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  internalName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  internalName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  internalName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  internalName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  internalName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  internalName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  internalName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  internalName_starts_with?: InputMaybe<Scalars['String']['input']>;
  isEnabled?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  isEnabled_not?: InputMaybe<Scalars['Boolean']['input']>;
  isGlobal?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  isGlobal_not?: InputMaybe<Scalars['Boolean']['input']>;
  layouts_every?: InputMaybe<LayoutWhereInput>;
  layouts_none?: InputMaybe<LayoutWhereInput>;
  layouts_some?: InputMaybe<LayoutWhereInput>;
  /** All values in which the union is empty */
  pageLocks_empty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Matches if the union contains at least one connection to the provided item to the filter */
  pageLocks_some?: InputMaybe<LockPageLocksWhereInput>;
  password?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  password_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  password_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  password_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  password_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  password_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  password_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  password_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  password_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  password_starts_with?: InputMaybe<Scalars['String']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledUnlockTime?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  scheduledUnlockTime_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  scheduledUnlockTime_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  scheduledUnlockTime_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  scheduledUnlockTime_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  scheduledUnlockTime_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  scheduledUnlockTime_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  scheduledUnlockTime_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type LockWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LockWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LockWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LockWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<LockWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Lock record uniquely */
export type LockWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  internalName?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type LockedSection = Entity & {
  __typename?: 'LockedSection';
  countdown?: Maybe<Lock>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  postLaunch?: Maybe<Block>;
  preview?: Maybe<Block>;
  /** System stage field */
  stage: Stage;
};


export type LockedSectionCountdownArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type LockedSectionPostLaunchArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type LockedSectionPreviewArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type LockedSectionConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: LockedSectionWhereUniqueInput;
};

/** A connection to a list of items. */
export type LockedSectionConnection = {
  __typename?: 'LockedSectionConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<LockedSectionEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type LockedSectionCreateInput = {
  countdown?: InputMaybe<LockCreateOneInlineInput>;
  postLaunch?: InputMaybe<BlockCreateOneInlineInput>;
  preview?: InputMaybe<BlockCreateOneInlineInput>;
};

export type LockedSectionCreateManyInlineInput = {
  /** Create and connect multiple existing LockedSection documents */
  create?: InputMaybe<Array<LockedSectionCreateInput>>;
};

export type LockedSectionCreateOneInlineInput = {
  /** Create and connect one LockedSection document */
  create?: InputMaybe<LockedSectionCreateInput>;
};

export type LockedSectionCreateWithPositionInput = {
  /** Document to create */
  data: LockedSectionCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type LockedSectionEdge = {
  __typename?: 'LockedSectionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: LockedSection;
};

/** Identifies documents */
export type LockedSectionManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LockedSectionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LockedSectionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LockedSectionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  countdown?: InputMaybe<LockWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  postLaunch?: InputMaybe<BlockWhereInput>;
  preview?: InputMaybe<BlockWhereInput>;
};

export enum LockedSectionOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type LockedSectionUpdateInput = {
  countdown?: InputMaybe<LockUpdateOneInlineInput>;
  postLaunch?: InputMaybe<BlockUpdateOneInlineInput>;
  preview?: InputMaybe<BlockUpdateOneInlineInput>;
};

export type LockedSectionUpdateManyInlineInput = {
  /** Create and connect multiple LockedSection component instances */
  create?: InputMaybe<Array<LockedSectionCreateWithPositionInput>>;
  /** Delete multiple LockedSection documents */
  delete?: InputMaybe<Array<LockedSectionWhereUniqueInput>>;
  /** Update multiple LockedSection component instances */
  update?: InputMaybe<Array<LockedSectionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple LockedSection component instances */
  upsert?: InputMaybe<Array<LockedSectionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type LockedSectionUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: InputMaybe<Scalars['String']['input']>;
};

export type LockedSectionUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: LockedSectionUpdateManyInput;
  /** Document search */
  where: LockedSectionWhereInput;
};

export type LockedSectionUpdateOneInlineInput = {
  /** Create and connect one LockedSection document */
  create?: InputMaybe<LockedSectionCreateInput>;
  /** Delete currently connected LockedSection document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single LockedSection document */
  update?: InputMaybe<LockedSectionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single LockedSection document */
  upsert?: InputMaybe<LockedSectionUpsertWithNestedWhereUniqueInput>;
};

export type LockedSectionUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<LockedSectionUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: LockedSectionWhereUniqueInput;
};

export type LockedSectionUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: LockedSectionUpdateInput;
  /** Unique document search */
  where: LockedSectionWhereUniqueInput;
};

export type LockedSectionUpsertInput = {
  /** Create document if it didn't exist */
  create: LockedSectionCreateInput;
  /** Update document if it exists */
  update: LockedSectionUpdateInput;
};

export type LockedSectionUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<LockedSectionUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: LockedSectionWhereUniqueInput;
};

export type LockedSectionUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: LockedSectionUpsertInput;
  /** Unique document search */
  where: LockedSectionWhereUniqueInput;
};

/** Identifies documents */
export type LockedSectionWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LockedSectionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LockedSectionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LockedSectionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  countdown?: InputMaybe<LockWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  postLaunch?: InputMaybe<BlockWhereInput>;
  preview?: InputMaybe<BlockWhereInput>;
};

/** References LockedSection record uniquely */
export type LockedSectionWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type MixedMedia = Entity & Node & {
  __typename?: 'MixedMedia';
  body?: Maybe<MixedMediaBodyRichText>;
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<MixedMedia>;
  heroes: Array<Layout>;
  /** List of MixedMedia versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  layouts: Array<Layout>;
  link?: Maybe<Link>;
  /** Attaching multiple images to this field will load an image slider */
  media: Array<Asset>;
  /** By default, the image loads on the left, and the body loads on the right. By checking this box, the order is reversed */
  mirror?: Maybe<Scalars['Boolean']['output']>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  title?: Maybe<Scalars['String']['output']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type MixedMediaCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type MixedMediaDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type MixedMediaHeroesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LayoutWhereInput>;
};


export type MixedMediaHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type MixedMediaLayoutsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LayoutWhereInput>;
};


export type MixedMediaLinkArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type MixedMediaMediaArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<AssetWhereInput>;
};


export type MixedMediaPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type MixedMediaScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type MixedMediaUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type MixedMediaBodyRichText = {
  __typename?: 'MixedMediaBodyRichText';
  /** Returns HTMl representation */
  html: Scalars['String']['output'];
  json: Scalars['RichTextAST']['output'];
  /** Returns Markdown representation */
  markdown: Scalars['String']['output'];
  /** @deprecated Please use the 'json' field */
  raw: Scalars['RichTextAST']['output'];
  references: Array<MixedMediaBodyRichTextEmbeddedTypes>;
  /** Returns plain-text contents of RichText */
  text: Scalars['String']['output'];
};


export type MixedMediaBodyRichTextReferencesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
};

export type MixedMediaBodyRichTextEmbeddedTypes = Asset | Form | Lock | Page;

export type MixedMediaConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: MixedMediaWhereUniqueInput;
};

/** A connection to a list of items. */
export type MixedMediaConnection = {
  __typename?: 'MixedMediaConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<MixedMediaEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type MixedMediaCreateInput = {
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  heroes?: InputMaybe<LayoutCreateManyInlineInput>;
  layouts?: InputMaybe<LayoutCreateManyInlineInput>;
  link?: InputMaybe<LinkCreateOneInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<MixedMediaCreateLocalizationsInput>;
  media?: InputMaybe<AssetCreateManyInlineInput>;
  mirror?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type MixedMediaCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type MixedMediaCreateLocalizationInput = {
  /** Localization input */
  data: MixedMediaCreateLocalizationDataInput;
  locale: Locale;
};

export type MixedMediaCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<MixedMediaCreateLocalizationInput>>;
};

export type MixedMediaCreateManyInlineInput = {
  /** Connect multiple existing MixedMedia documents */
  connect?: InputMaybe<Array<MixedMediaWhereUniqueInput>>;
  /** Create and connect multiple existing MixedMedia documents */
  create?: InputMaybe<Array<MixedMediaCreateInput>>;
};

export type MixedMediaCreateOneInlineInput = {
  /** Connect one existing MixedMedia document */
  connect?: InputMaybe<MixedMediaWhereUniqueInput>;
  /** Create and connect one MixedMedia document */
  create?: InputMaybe<MixedMediaCreateInput>;
};

/** An edge in a connection. */
export type MixedMediaEdge = {
  __typename?: 'MixedMediaEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: MixedMedia;
};

/** Identifies documents */
export type MixedMediaManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<MixedMediaWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<MixedMediaWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<MixedMediaWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<MixedMediaWhereStageInput>;
  documentInStages_none?: InputMaybe<MixedMediaWhereStageInput>;
  documentInStages_some?: InputMaybe<MixedMediaWhereStageInput>;
  heroes_every?: InputMaybe<LayoutWhereInput>;
  heroes_none?: InputMaybe<LayoutWhereInput>;
  heroes_some?: InputMaybe<LayoutWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  layouts_every?: InputMaybe<LayoutWhereInput>;
  layouts_none?: InputMaybe<LayoutWhereInput>;
  layouts_some?: InputMaybe<LayoutWhereInput>;
  link?: InputMaybe<LinkWhereInput>;
  media_every?: InputMaybe<AssetWhereInput>;
  media_none?: InputMaybe<AssetWhereInput>;
  media_some?: InputMaybe<AssetWhereInput>;
  mirror?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  mirror_not?: InputMaybe<Scalars['Boolean']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum MixedMediaOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  MirrorAsc = 'mirror_ASC',
  MirrorDesc = 'mirror_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type MixedMediaUpdateInput = {
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  heroes?: InputMaybe<LayoutUpdateManyInlineInput>;
  layouts?: InputMaybe<LayoutUpdateManyInlineInput>;
  link?: InputMaybe<LinkUpdateOneInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<MixedMediaUpdateLocalizationsInput>;
  media?: InputMaybe<AssetUpdateManyInlineInput>;
  mirror?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type MixedMediaUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<MixedMediaCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type MixedMediaUpdateManyInlineInput = {
  /** Connect multiple existing MixedMedia documents */
  connect?: InputMaybe<Array<MixedMediaConnectInput>>;
  /** Create and connect multiple MixedMedia documents */
  create?: InputMaybe<Array<MixedMediaCreateInput>>;
  /** Delete multiple MixedMedia documents */
  delete?: InputMaybe<Array<MixedMediaWhereUniqueInput>>;
  /** Disconnect multiple MixedMedia documents */
  disconnect?: InputMaybe<Array<MixedMediaWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing MixedMedia documents */
  set?: InputMaybe<Array<MixedMediaWhereUniqueInput>>;
  /** Update multiple MixedMedia documents */
  update?: InputMaybe<Array<MixedMediaUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple MixedMedia documents */
  upsert?: InputMaybe<Array<MixedMediaUpsertWithNestedWhereUniqueInput>>;
};

export type MixedMediaUpdateManyInput = {
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  mirror?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type MixedMediaUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: MixedMediaUpdateManyInput;
  /** Document search */
  where: MixedMediaWhereInput;
};

export type MixedMediaUpdateOneInlineInput = {
  /** Connect existing MixedMedia document */
  connect?: InputMaybe<MixedMediaWhereUniqueInput>;
  /** Create and connect one MixedMedia document */
  create?: InputMaybe<MixedMediaCreateInput>;
  /** Delete currently connected MixedMedia document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected MixedMedia document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single MixedMedia document */
  update?: InputMaybe<MixedMediaUpdateWithNestedWhereUniqueInput>;
  /** Upsert single MixedMedia document */
  upsert?: InputMaybe<MixedMediaUpsertWithNestedWhereUniqueInput>;
};

export type MixedMediaUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: MixedMediaUpdateInput;
  /** Unique document search */
  where: MixedMediaWhereUniqueInput;
};

export type MixedMediaUpsertInput = {
  /** Create document if it didn't exist */
  create: MixedMediaCreateInput;
  /** Update document if it exists */
  update: MixedMediaUpdateInput;
};

export type MixedMediaUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: MixedMediaUpsertInput;
  /** Unique document search */
  where: MixedMediaWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type MixedMediaWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type MixedMediaWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<MixedMediaWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<MixedMediaWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<MixedMediaWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<MixedMediaWhereStageInput>;
  documentInStages_none?: InputMaybe<MixedMediaWhereStageInput>;
  documentInStages_some?: InputMaybe<MixedMediaWhereStageInput>;
  heroes_every?: InputMaybe<LayoutWhereInput>;
  heroes_none?: InputMaybe<LayoutWhereInput>;
  heroes_some?: InputMaybe<LayoutWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  layouts_every?: InputMaybe<LayoutWhereInput>;
  layouts_none?: InputMaybe<LayoutWhereInput>;
  layouts_some?: InputMaybe<LayoutWhereInput>;
  link?: InputMaybe<LinkWhereInput>;
  media_every?: InputMaybe<AssetWhereInput>;
  media_none?: InputMaybe<AssetWhereInput>;
  media_some?: InputMaybe<AssetWhereInput>;
  mirror?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  mirror_not?: InputMaybe<Scalars['Boolean']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type MixedMediaWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<MixedMediaWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<MixedMediaWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<MixedMediaWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<MixedMediaWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References MixedMedia record uniquely */
export type MixedMediaWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Create one archive */
  createArchive?: Maybe<Archive>;
  /** Create an asset. Use the returned info to finish the creation process by uploading the asset. */
  createAsset?: Maybe<Asset>;
  /** Create one collection */
  createCollection?: Maybe<Collection>;
  /** Create one combinedListing */
  createCombinedListing?: Maybe<CombinedListing>;
  /** Create one customizedSection */
  createCustomizedSection?: Maybe<CustomizedSection>;
  /** Create one editorial */
  createEditorial?: Maybe<Editorial>;
  /** Create one event */
  createEvent?: Maybe<Event>;
  /** Create one form */
  createForm?: Maybe<Form>;
  /** Create one gallery */
  createGallery?: Maybe<Gallery>;
  /** Create one grid */
  createGrid?: Maybe<Grid>;
  /** Create one layout */
  createLayout?: Maybe<Layout>;
  /** Create one lock */
  createLock?: Maybe<Lock>;
  /** Create one mixedMedia */
  createMixedMedia?: Maybe<MixedMedia>;
  /** Create one navigation */
  createNavigation?: Maybe<Navigation>;
  /** Create one page */
  createPage?: Maybe<Page>;
  /** Create one person */
  createPerson?: Maybe<Person>;
  /** Create one product */
  createProduct?: Maybe<Product>;
  /** Create one scheduledRelease */
  createScheduledRelease?: Maybe<ScheduledRelease>;
  /** Create one seo */
  createSeo?: Maybe<Seo>;
  /** Create one theme */
  createTheme?: Maybe<Theme>;
  /** Delete one archive from _all_ existing stages. Returns deleted document. */
  deleteArchive?: Maybe<Archive>;
  /** Delete one asset from _all_ existing stages. Returns deleted document. */
  deleteAsset?: Maybe<Asset>;
  /** Delete one collection from _all_ existing stages. Returns deleted document. */
  deleteCollection?: Maybe<Collection>;
  /** Delete one combinedListing from _all_ existing stages. Returns deleted document. */
  deleteCombinedListing?: Maybe<CombinedListing>;
  /** Delete one customizedSection from _all_ existing stages. Returns deleted document. */
  deleteCustomizedSection?: Maybe<CustomizedSection>;
  /** Delete one editorial from _all_ existing stages. Returns deleted document. */
  deleteEditorial?: Maybe<Editorial>;
  /** Delete one event from _all_ existing stages. Returns deleted document. */
  deleteEvent?: Maybe<Event>;
  /** Delete one form from _all_ existing stages. Returns deleted document. */
  deleteForm?: Maybe<Form>;
  /** Delete one gallery from _all_ existing stages. Returns deleted document. */
  deleteGallery?: Maybe<Gallery>;
  /** Delete one grid from _all_ existing stages. Returns deleted document. */
  deleteGrid?: Maybe<Grid>;
  /** Delete one layout from _all_ existing stages. Returns deleted document. */
  deleteLayout?: Maybe<Layout>;
  /** Delete one lock from _all_ existing stages. Returns deleted document. */
  deleteLock?: Maybe<Lock>;
  /**
   * Delete many Archive documents
   * @deprecated Please use the new paginated many mutation (deleteManyArchivesConnection)
   */
  deleteManyArchives: BatchPayload;
  /** Delete many Archive documents, return deleted documents */
  deleteManyArchivesConnection: ArchiveConnection;
  /**
   * Delete many Asset documents
   * @deprecated Please use the new paginated many mutation (deleteManyAssetsConnection)
   */
  deleteManyAssets: BatchPayload;
  /** Delete many Asset documents, return deleted documents */
  deleteManyAssetsConnection: AssetConnection;
  /**
   * Delete many Collection documents
   * @deprecated Please use the new paginated many mutation (deleteManyCollectionsConnection)
   */
  deleteManyCollections: BatchPayload;
  /** Delete many Collection documents, return deleted documents */
  deleteManyCollectionsConnection: CollectionConnection;
  /**
   * Delete many CombinedListing documents
   * @deprecated Please use the new paginated many mutation (deleteManyCombinedListingsConnection)
   */
  deleteManyCombinedListings: BatchPayload;
  /** Delete many CombinedListing documents, return deleted documents */
  deleteManyCombinedListingsConnection: CombinedListingConnection;
  /**
   * Delete many CustomizedSection documents
   * @deprecated Please use the new paginated many mutation (deleteManyCustomizedSectionsConnection)
   */
  deleteManyCustomizedSections: BatchPayload;
  /** Delete many CustomizedSection documents, return deleted documents */
  deleteManyCustomizedSectionsConnection: CustomizedSectionConnection;
  /**
   * Delete many Editorial documents
   * @deprecated Please use the new paginated many mutation (deleteManyEditorialsConnection)
   */
  deleteManyEditorials: BatchPayload;
  /** Delete many Editorial documents, return deleted documents */
  deleteManyEditorialsConnection: EditorialConnection;
  /**
   * Delete many Event documents
   * @deprecated Please use the new paginated many mutation (deleteManyEventsConnection)
   */
  deleteManyEvents: BatchPayload;
  /** Delete many Event documents, return deleted documents */
  deleteManyEventsConnection: EventConnection;
  /**
   * Delete many Form documents
   * @deprecated Please use the new paginated many mutation (deleteManyFormsConnection)
   */
  deleteManyForms: BatchPayload;
  /** Delete many Form documents, return deleted documents */
  deleteManyFormsConnection: FormConnection;
  /**
   * Delete many Gallery documents
   * @deprecated Please use the new paginated many mutation (deleteManyGalleriesConnection)
   */
  deleteManyGalleries: BatchPayload;
  /** Delete many Gallery documents, return deleted documents */
  deleteManyGalleriesConnection: GalleryConnection;
  /**
   * Delete many Grid documents
   * @deprecated Please use the new paginated many mutation (deleteManyGridsConnection)
   */
  deleteManyGrids: BatchPayload;
  /** Delete many Grid documents, return deleted documents */
  deleteManyGridsConnection: GridConnection;
  /**
   * Delete many Layout documents
   * @deprecated Please use the new paginated many mutation (deleteManyLayoutsConnection)
   */
  deleteManyLayouts: BatchPayload;
  /** Delete many Layout documents, return deleted documents */
  deleteManyLayoutsConnection: LayoutConnection;
  /**
   * Delete many Lock documents
   * @deprecated Please use the new paginated many mutation (deleteManyLocksConnection)
   */
  deleteManyLocks: BatchPayload;
  /** Delete many Lock documents, return deleted documents */
  deleteManyLocksConnection: LockConnection;
  /**
   * Delete many MixedMedia documents
   * @deprecated Please use the new paginated many mutation (deleteManyMixedMediasConnection)
   */
  deleteManyMixedMedias: BatchPayload;
  /** Delete many MixedMedia documents, return deleted documents */
  deleteManyMixedMediasConnection: MixedMediaConnection;
  /**
   * Delete many Navigation documents
   * @deprecated Please use the new paginated many mutation (deleteManyNavigationsConnection)
   */
  deleteManyNavigations: BatchPayload;
  /** Delete many Navigation documents, return deleted documents */
  deleteManyNavigationsConnection: NavigationConnection;
  /**
   * Delete many Page documents
   * @deprecated Please use the new paginated many mutation (deleteManyPagesConnection)
   */
  deleteManyPages: BatchPayload;
  /** Delete many Page documents, return deleted documents */
  deleteManyPagesConnection: PageConnection;
  /**
   * Delete many Person documents
   * @deprecated Please use the new paginated many mutation (deleteManyPeopleConnection)
   */
  deleteManyPeople: BatchPayload;
  /** Delete many Person documents, return deleted documents */
  deleteManyPeopleConnection: PersonConnection;
  /**
   * Delete many Product documents
   * @deprecated Please use the new paginated many mutation (deleteManyProductsConnection)
   */
  deleteManyProducts: BatchPayload;
  /** Delete many Product documents, return deleted documents */
  deleteManyProductsConnection: ProductConnection;
  /**
   * Delete many Seo documents
   * @deprecated Please use the new paginated many mutation (deleteManySeosConnection)
   */
  deleteManySeos: BatchPayload;
  /** Delete many Seo documents, return deleted documents */
  deleteManySeosConnection: SeoConnection;
  /**
   * Delete many Theme documents
   * @deprecated Please use the new paginated many mutation (deleteManyThemesConnection)
   */
  deleteManyThemes: BatchPayload;
  /** Delete many Theme documents, return deleted documents */
  deleteManyThemesConnection: ThemeConnection;
  /** Delete one mixedMedia from _all_ existing stages. Returns deleted document. */
  deleteMixedMedia?: Maybe<MixedMedia>;
  /** Delete one navigation from _all_ existing stages. Returns deleted document. */
  deleteNavigation?: Maybe<Navigation>;
  /** Delete one page from _all_ existing stages. Returns deleted document. */
  deletePage?: Maybe<Page>;
  /** Delete one person from _all_ existing stages. Returns deleted document. */
  deletePerson?: Maybe<Person>;
  /** Delete one product from _all_ existing stages. Returns deleted document. */
  deleteProduct?: Maybe<Product>;
  /** Delete and return scheduled operation */
  deleteScheduledOperation?: Maybe<ScheduledOperation>;
  /** Delete one scheduledRelease from _all_ existing stages. Returns deleted document. */
  deleteScheduledRelease?: Maybe<ScheduledRelease>;
  /** Delete one seo from _all_ existing stages. Returns deleted document. */
  deleteSeo?: Maybe<Seo>;
  /** Delete one theme from _all_ existing stages. Returns deleted document. */
  deleteTheme?: Maybe<Theme>;
  /** Publish one archive */
  publishArchive?: Maybe<Archive>;
  /** Publish one asset */
  publishAsset?: Maybe<Asset>;
  /** Publish one collection */
  publishCollection?: Maybe<Collection>;
  /** Publish one combinedListing */
  publishCombinedListing?: Maybe<CombinedListing>;
  /** Publish one customizedSection */
  publishCustomizedSection?: Maybe<CustomizedSection>;
  /** Publish one editorial */
  publishEditorial?: Maybe<Editorial>;
  /** Publish one event */
  publishEvent?: Maybe<Event>;
  /** Publish one form */
  publishForm?: Maybe<Form>;
  /** Publish one gallery */
  publishGallery?: Maybe<Gallery>;
  /** Publish one grid */
  publishGrid?: Maybe<Grid>;
  /** Publish one layout */
  publishLayout?: Maybe<Layout>;
  /** Publish one lock */
  publishLock?: Maybe<Lock>;
  /**
   * Publish many Archive documents
   * @deprecated Please use the new paginated many mutation (publishManyArchivesConnection)
   */
  publishManyArchives: BatchPayload;
  /** Publish many Archive documents */
  publishManyArchivesConnection: ArchiveConnection;
  /**
   * Publish many Asset documents
   * @deprecated Please use the new paginated many mutation (publishManyAssetsConnection)
   */
  publishManyAssets: BatchPayload;
  /** Publish many Asset documents */
  publishManyAssetsConnection: AssetConnection;
  /**
   * Publish many Collection documents
   * @deprecated Please use the new paginated many mutation (publishManyCollectionsConnection)
   */
  publishManyCollections: BatchPayload;
  /** Publish many Collection documents */
  publishManyCollectionsConnection: CollectionConnection;
  /**
   * Publish many CombinedListing documents
   * @deprecated Please use the new paginated many mutation (publishManyCombinedListingsConnection)
   */
  publishManyCombinedListings: BatchPayload;
  /** Publish many CombinedListing documents */
  publishManyCombinedListingsConnection: CombinedListingConnection;
  /**
   * Publish many CustomizedSection documents
   * @deprecated Please use the new paginated many mutation (publishManyCustomizedSectionsConnection)
   */
  publishManyCustomizedSections: BatchPayload;
  /** Publish many CustomizedSection documents */
  publishManyCustomizedSectionsConnection: CustomizedSectionConnection;
  /**
   * Publish many Editorial documents
   * @deprecated Please use the new paginated many mutation (publishManyEditorialsConnection)
   */
  publishManyEditorials: BatchPayload;
  /** Publish many Editorial documents */
  publishManyEditorialsConnection: EditorialConnection;
  /**
   * Publish many Event documents
   * @deprecated Please use the new paginated many mutation (publishManyEventsConnection)
   */
  publishManyEvents: BatchPayload;
  /** Publish many Event documents */
  publishManyEventsConnection: EventConnection;
  /**
   * Publish many Form documents
   * @deprecated Please use the new paginated many mutation (publishManyFormsConnection)
   */
  publishManyForms: BatchPayload;
  /** Publish many Form documents */
  publishManyFormsConnection: FormConnection;
  /**
   * Publish many Gallery documents
   * @deprecated Please use the new paginated many mutation (publishManyGalleriesConnection)
   */
  publishManyGalleries: BatchPayload;
  /** Publish many Gallery documents */
  publishManyGalleriesConnection: GalleryConnection;
  /**
   * Publish many Grid documents
   * @deprecated Please use the new paginated many mutation (publishManyGridsConnection)
   */
  publishManyGrids: BatchPayload;
  /** Publish many Grid documents */
  publishManyGridsConnection: GridConnection;
  /**
   * Publish many Layout documents
   * @deprecated Please use the new paginated many mutation (publishManyLayoutsConnection)
   */
  publishManyLayouts: BatchPayload;
  /** Publish many Layout documents */
  publishManyLayoutsConnection: LayoutConnection;
  /**
   * Publish many Lock documents
   * @deprecated Please use the new paginated many mutation (publishManyLocksConnection)
   */
  publishManyLocks: BatchPayload;
  /** Publish many Lock documents */
  publishManyLocksConnection: LockConnection;
  /**
   * Publish many MixedMedia documents
   * @deprecated Please use the new paginated many mutation (publishManyMixedMediasConnection)
   */
  publishManyMixedMedias: BatchPayload;
  /** Publish many MixedMedia documents */
  publishManyMixedMediasConnection: MixedMediaConnection;
  /**
   * Publish many Navigation documents
   * @deprecated Please use the new paginated many mutation (publishManyNavigationsConnection)
   */
  publishManyNavigations: BatchPayload;
  /** Publish many Navigation documents */
  publishManyNavigationsConnection: NavigationConnection;
  /**
   * Publish many Page documents
   * @deprecated Please use the new paginated many mutation (publishManyPagesConnection)
   */
  publishManyPages: BatchPayload;
  /** Publish many Page documents */
  publishManyPagesConnection: PageConnection;
  /**
   * Publish many Person documents
   * @deprecated Please use the new paginated many mutation (publishManyPeopleConnection)
   */
  publishManyPeople: BatchPayload;
  /** Publish many Person documents */
  publishManyPeopleConnection: PersonConnection;
  /**
   * Publish many Product documents
   * @deprecated Please use the new paginated many mutation (publishManyProductsConnection)
   */
  publishManyProducts: BatchPayload;
  /** Publish many Product documents */
  publishManyProductsConnection: ProductConnection;
  /**
   * Publish many Seo documents
   * @deprecated Please use the new paginated many mutation (publishManySeosConnection)
   */
  publishManySeos: BatchPayload;
  /** Publish many Seo documents */
  publishManySeosConnection: SeoConnection;
  /**
   * Publish many Theme documents
   * @deprecated Please use the new paginated many mutation (publishManyThemesConnection)
   */
  publishManyThemes: BatchPayload;
  /** Publish many Theme documents */
  publishManyThemesConnection: ThemeConnection;
  /** Publish one mixedMedia */
  publishMixedMedia?: Maybe<MixedMedia>;
  /** Publish one navigation */
  publishNavigation?: Maybe<Navigation>;
  /** Publish one page */
  publishPage?: Maybe<Page>;
  /** Publish one person */
  publishPerson?: Maybe<Person>;
  /** Publish one product */
  publishProduct?: Maybe<Product>;
  /** Publish one seo */
  publishSeo?: Maybe<Seo>;
  /** Publish one theme */
  publishTheme?: Maybe<Theme>;
  /** Schedule to publish one archive */
  schedulePublishArchive?: Maybe<Archive>;
  /** Schedule to publish one asset */
  schedulePublishAsset?: Maybe<Asset>;
  /** Schedule to publish one collection */
  schedulePublishCollection?: Maybe<Collection>;
  /** Schedule to publish one combinedListing */
  schedulePublishCombinedListing?: Maybe<CombinedListing>;
  /** Schedule to publish one customizedSection */
  schedulePublishCustomizedSection?: Maybe<CustomizedSection>;
  /** Schedule to publish one editorial */
  schedulePublishEditorial?: Maybe<Editorial>;
  /** Schedule to publish one event */
  schedulePublishEvent?: Maybe<Event>;
  /** Schedule to publish one form */
  schedulePublishForm?: Maybe<Form>;
  /** Schedule to publish one gallery */
  schedulePublishGallery?: Maybe<Gallery>;
  /** Schedule to publish one grid */
  schedulePublishGrid?: Maybe<Grid>;
  /** Schedule to publish one layout */
  schedulePublishLayout?: Maybe<Layout>;
  /** Schedule to publish one lock */
  schedulePublishLock?: Maybe<Lock>;
  /** Schedule to publish one mixedMedia */
  schedulePublishMixedMedia?: Maybe<MixedMedia>;
  /** Schedule to publish one navigation */
  schedulePublishNavigation?: Maybe<Navigation>;
  /** Schedule to publish one page */
  schedulePublishPage?: Maybe<Page>;
  /** Schedule to publish one person */
  schedulePublishPerson?: Maybe<Person>;
  /** Schedule to publish one product */
  schedulePublishProduct?: Maybe<Product>;
  /** Schedule to publish one seo */
  schedulePublishSeo?: Maybe<Seo>;
  /** Schedule to publish one theme */
  schedulePublishTheme?: Maybe<Theme>;
  /** Unpublish one archive from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishArchive?: Maybe<Archive>;
  /** Unpublish one asset from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishAsset?: Maybe<Asset>;
  /** Unpublish one collection from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishCollection?: Maybe<Collection>;
  /** Unpublish one combinedListing from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishCombinedListing?: Maybe<CombinedListing>;
  /** Unpublish one customizedSection from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishCustomizedSection?: Maybe<CustomizedSection>;
  /** Unpublish one editorial from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishEditorial?: Maybe<Editorial>;
  /** Unpublish one event from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishEvent?: Maybe<Event>;
  /** Unpublish one form from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishForm?: Maybe<Form>;
  /** Unpublish one gallery from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishGallery?: Maybe<Gallery>;
  /** Unpublish one grid from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishGrid?: Maybe<Grid>;
  /** Unpublish one layout from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishLayout?: Maybe<Layout>;
  /** Unpublish one lock from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishLock?: Maybe<Lock>;
  /** Unpublish one mixedMedia from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishMixedMedia?: Maybe<MixedMedia>;
  /** Unpublish one navigation from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishNavigation?: Maybe<Navigation>;
  /** Unpublish one page from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishPage?: Maybe<Page>;
  /** Unpublish one person from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishPerson?: Maybe<Person>;
  /** Unpublish one product from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishProduct?: Maybe<Product>;
  /** Unpublish one seo from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSeo?: Maybe<Seo>;
  /** Unpublish one theme from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishTheme?: Maybe<Theme>;
  /** Unpublish one archive from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishArchive?: Maybe<Archive>;
  /** Unpublish one asset from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishAsset?: Maybe<Asset>;
  /** Unpublish one collection from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishCollection?: Maybe<Collection>;
  /** Unpublish one combinedListing from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishCombinedListing?: Maybe<CombinedListing>;
  /** Unpublish one customizedSection from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishCustomizedSection?: Maybe<CustomizedSection>;
  /** Unpublish one editorial from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishEditorial?: Maybe<Editorial>;
  /** Unpublish one event from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishEvent?: Maybe<Event>;
  /** Unpublish one form from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishForm?: Maybe<Form>;
  /** Unpublish one gallery from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishGallery?: Maybe<Gallery>;
  /** Unpublish one grid from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishGrid?: Maybe<Grid>;
  /** Unpublish one layout from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishLayout?: Maybe<Layout>;
  /** Unpublish one lock from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishLock?: Maybe<Lock>;
  /**
   * Unpublish many Archive documents
   * @deprecated Please use the new paginated many mutation (unpublishManyArchivesConnection)
   */
  unpublishManyArchives: BatchPayload;
  /** Find many Archive documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyArchivesConnection: ArchiveConnection;
  /**
   * Unpublish many Asset documents
   * @deprecated Please use the new paginated many mutation (unpublishManyAssetsConnection)
   */
  unpublishManyAssets: BatchPayload;
  /** Find many Asset documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyAssetsConnection: AssetConnection;
  /**
   * Unpublish many Collection documents
   * @deprecated Please use the new paginated many mutation (unpublishManyCollectionsConnection)
   */
  unpublishManyCollections: BatchPayload;
  /** Find many Collection documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyCollectionsConnection: CollectionConnection;
  /**
   * Unpublish many CombinedListing documents
   * @deprecated Please use the new paginated many mutation (unpublishManyCombinedListingsConnection)
   */
  unpublishManyCombinedListings: BatchPayload;
  /** Find many CombinedListing documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyCombinedListingsConnection: CombinedListingConnection;
  /**
   * Unpublish many CustomizedSection documents
   * @deprecated Please use the new paginated many mutation (unpublishManyCustomizedSectionsConnection)
   */
  unpublishManyCustomizedSections: BatchPayload;
  /** Find many CustomizedSection documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyCustomizedSectionsConnection: CustomizedSectionConnection;
  /**
   * Unpublish many Editorial documents
   * @deprecated Please use the new paginated many mutation (unpublishManyEditorialsConnection)
   */
  unpublishManyEditorials: BatchPayload;
  /** Find many Editorial documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyEditorialsConnection: EditorialConnection;
  /**
   * Unpublish many Event documents
   * @deprecated Please use the new paginated many mutation (unpublishManyEventsConnection)
   */
  unpublishManyEvents: BatchPayload;
  /** Find many Event documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyEventsConnection: EventConnection;
  /**
   * Unpublish many Form documents
   * @deprecated Please use the new paginated many mutation (unpublishManyFormsConnection)
   */
  unpublishManyForms: BatchPayload;
  /** Find many Form documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyFormsConnection: FormConnection;
  /**
   * Unpublish many Gallery documents
   * @deprecated Please use the new paginated many mutation (unpublishManyGalleriesConnection)
   */
  unpublishManyGalleries: BatchPayload;
  /** Find many Gallery documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyGalleriesConnection: GalleryConnection;
  /**
   * Unpublish many Grid documents
   * @deprecated Please use the new paginated many mutation (unpublishManyGridsConnection)
   */
  unpublishManyGrids: BatchPayload;
  /** Find many Grid documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyGridsConnection: GridConnection;
  /**
   * Unpublish many Layout documents
   * @deprecated Please use the new paginated many mutation (unpublishManyLayoutsConnection)
   */
  unpublishManyLayouts: BatchPayload;
  /** Find many Layout documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyLayoutsConnection: LayoutConnection;
  /**
   * Unpublish many Lock documents
   * @deprecated Please use the new paginated many mutation (unpublishManyLocksConnection)
   */
  unpublishManyLocks: BatchPayload;
  /** Find many Lock documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyLocksConnection: LockConnection;
  /**
   * Unpublish many MixedMedia documents
   * @deprecated Please use the new paginated many mutation (unpublishManyMixedMediasConnection)
   */
  unpublishManyMixedMedias: BatchPayload;
  /** Find many MixedMedia documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyMixedMediasConnection: MixedMediaConnection;
  /**
   * Unpublish many Navigation documents
   * @deprecated Please use the new paginated many mutation (unpublishManyNavigationsConnection)
   */
  unpublishManyNavigations: BatchPayload;
  /** Find many Navigation documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyNavigationsConnection: NavigationConnection;
  /**
   * Unpublish many Page documents
   * @deprecated Please use the new paginated many mutation (unpublishManyPagesConnection)
   */
  unpublishManyPages: BatchPayload;
  /** Find many Page documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyPagesConnection: PageConnection;
  /**
   * Unpublish many Person documents
   * @deprecated Please use the new paginated many mutation (unpublishManyPeopleConnection)
   */
  unpublishManyPeople: BatchPayload;
  /** Find many Person documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyPeopleConnection: PersonConnection;
  /**
   * Unpublish many Product documents
   * @deprecated Please use the new paginated many mutation (unpublishManyProductsConnection)
   */
  unpublishManyProducts: BatchPayload;
  /** Find many Product documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyProductsConnection: ProductConnection;
  /**
   * Unpublish many Seo documents
   * @deprecated Please use the new paginated many mutation (unpublishManySeosConnection)
   */
  unpublishManySeos: BatchPayload;
  /** Find many Seo documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySeosConnection: SeoConnection;
  /**
   * Unpublish many Theme documents
   * @deprecated Please use the new paginated many mutation (unpublishManyThemesConnection)
   */
  unpublishManyThemes: BatchPayload;
  /** Find many Theme documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyThemesConnection: ThemeConnection;
  /** Unpublish one mixedMedia from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishMixedMedia?: Maybe<MixedMedia>;
  /** Unpublish one navigation from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishNavigation?: Maybe<Navigation>;
  /** Unpublish one page from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishPage?: Maybe<Page>;
  /** Unpublish one person from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishPerson?: Maybe<Person>;
  /** Unpublish one product from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishProduct?: Maybe<Product>;
  /** Unpublish one seo from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSeo?: Maybe<Seo>;
  /** Unpublish one theme from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishTheme?: Maybe<Theme>;
  /** Update one archive */
  updateArchive?: Maybe<Archive>;
  /** Update one asset */
  updateAsset?: Maybe<Asset>;
  /** Update one collection */
  updateCollection?: Maybe<Collection>;
  /** Update one combinedListing */
  updateCombinedListing?: Maybe<CombinedListing>;
  /** Update one customizedSection */
  updateCustomizedSection?: Maybe<CustomizedSection>;
  /** Update one editorial */
  updateEditorial?: Maybe<Editorial>;
  /** Update one event */
  updateEvent?: Maybe<Event>;
  /** Update one form */
  updateForm?: Maybe<Form>;
  /** Update one gallery */
  updateGallery?: Maybe<Gallery>;
  /** Update one grid */
  updateGrid?: Maybe<Grid>;
  /** Update one layout */
  updateLayout?: Maybe<Layout>;
  /** Update one lock */
  updateLock?: Maybe<Lock>;
  /**
   * Update many archives
   * @deprecated Please use the new paginated many mutation (updateManyArchivesConnection)
   */
  updateManyArchives: BatchPayload;
  /** Update many Archive documents */
  updateManyArchivesConnection: ArchiveConnection;
  /**
   * Update many assets
   * @deprecated Please use the new paginated many mutation (updateManyAssetsConnection)
   */
  updateManyAssets: BatchPayload;
  /** Update many Asset documents */
  updateManyAssetsConnection: AssetConnection;
  /**
   * Update many collections
   * @deprecated Please use the new paginated many mutation (updateManyCollectionsConnection)
   */
  updateManyCollections: BatchPayload;
  /** Update many Collection documents */
  updateManyCollectionsConnection: CollectionConnection;
  /**
   * Update many combinedListings
   * @deprecated Please use the new paginated many mutation (updateManyCombinedListingsConnection)
   */
  updateManyCombinedListings: BatchPayload;
  /** Update many CombinedListing documents */
  updateManyCombinedListingsConnection: CombinedListingConnection;
  /**
   * Update many customizedSections
   * @deprecated Please use the new paginated many mutation (updateManyCustomizedSectionsConnection)
   */
  updateManyCustomizedSections: BatchPayload;
  /** Update many CustomizedSection documents */
  updateManyCustomizedSectionsConnection: CustomizedSectionConnection;
  /**
   * Update many editorials
   * @deprecated Please use the new paginated many mutation (updateManyEditorialsConnection)
   */
  updateManyEditorials: BatchPayload;
  /** Update many Editorial documents */
  updateManyEditorialsConnection: EditorialConnection;
  /**
   * Update many events
   * @deprecated Please use the new paginated many mutation (updateManyEventsConnection)
   */
  updateManyEvents: BatchPayload;
  /** Update many Event documents */
  updateManyEventsConnection: EventConnection;
  /**
   * Update many forms
   * @deprecated Please use the new paginated many mutation (updateManyFormsConnection)
   */
  updateManyForms: BatchPayload;
  /** Update many Form documents */
  updateManyFormsConnection: FormConnection;
  /**
   * Update many galleries
   * @deprecated Please use the new paginated many mutation (updateManyGalleriesConnection)
   */
  updateManyGalleries: BatchPayload;
  /** Update many Gallery documents */
  updateManyGalleriesConnection: GalleryConnection;
  /**
   * Update many grids
   * @deprecated Please use the new paginated many mutation (updateManyGridsConnection)
   */
  updateManyGrids: BatchPayload;
  /** Update many Grid documents */
  updateManyGridsConnection: GridConnection;
  /**
   * Update many layouts
   * @deprecated Please use the new paginated many mutation (updateManyLayoutsConnection)
   */
  updateManyLayouts: BatchPayload;
  /** Update many Layout documents */
  updateManyLayoutsConnection: LayoutConnection;
  /**
   * Update many locks
   * @deprecated Please use the new paginated many mutation (updateManyLocksConnection)
   */
  updateManyLocks: BatchPayload;
  /** Update many Lock documents */
  updateManyLocksConnection: LockConnection;
  /**
   * Update many mixedMedias
   * @deprecated Please use the new paginated many mutation (updateManyMixedMediasConnection)
   */
  updateManyMixedMedias: BatchPayload;
  /** Update many MixedMedia documents */
  updateManyMixedMediasConnection: MixedMediaConnection;
  /**
   * Update many navigations
   * @deprecated Please use the new paginated many mutation (updateManyNavigationsConnection)
   */
  updateManyNavigations: BatchPayload;
  /** Update many Navigation documents */
  updateManyNavigationsConnection: NavigationConnection;
  /**
   * Update many pages
   * @deprecated Please use the new paginated many mutation (updateManyPagesConnection)
   */
  updateManyPages: BatchPayload;
  /** Update many Page documents */
  updateManyPagesConnection: PageConnection;
  /**
   * Update many people
   * @deprecated Please use the new paginated many mutation (updateManyPeopleConnection)
   */
  updateManyPeople: BatchPayload;
  /** Update many Person documents */
  updateManyPeopleConnection: PersonConnection;
  /**
   * Update many products
   * @deprecated Please use the new paginated many mutation (updateManyProductsConnection)
   */
  updateManyProducts: BatchPayload;
  /** Update many Product documents */
  updateManyProductsConnection: ProductConnection;
  /**
   * Update many seos
   * @deprecated Please use the new paginated many mutation (updateManySeosConnection)
   */
  updateManySeos: BatchPayload;
  /** Update many Seo documents */
  updateManySeosConnection: SeoConnection;
  /**
   * Update many themes
   * @deprecated Please use the new paginated many mutation (updateManyThemesConnection)
   */
  updateManyThemes: BatchPayload;
  /** Update many Theme documents */
  updateManyThemesConnection: ThemeConnection;
  /** Update one mixedMedia */
  updateMixedMedia?: Maybe<MixedMedia>;
  /** Update one navigation */
  updateNavigation?: Maybe<Navigation>;
  /** Update one page */
  updatePage?: Maybe<Page>;
  /** Update one person */
  updatePerson?: Maybe<Person>;
  /** Update one product */
  updateProduct?: Maybe<Product>;
  /** Update one scheduledRelease */
  updateScheduledRelease?: Maybe<ScheduledRelease>;
  /** Update one seo */
  updateSeo?: Maybe<Seo>;
  /** Update one theme */
  updateTheme?: Maybe<Theme>;
  /** Upsert one archive */
  upsertArchive?: Maybe<Archive>;
  /** Upsert one asset */
  upsertAsset?: Maybe<Asset>;
  /** Upsert one collection */
  upsertCollection?: Maybe<Collection>;
  /** Upsert one combinedListing */
  upsertCombinedListing?: Maybe<CombinedListing>;
  /** Upsert one customizedSection */
  upsertCustomizedSection?: Maybe<CustomizedSection>;
  /** Upsert one editorial */
  upsertEditorial?: Maybe<Editorial>;
  /** Upsert one event */
  upsertEvent?: Maybe<Event>;
  /** Upsert one form */
  upsertForm?: Maybe<Form>;
  /** Upsert one gallery */
  upsertGallery?: Maybe<Gallery>;
  /** Upsert one grid */
  upsertGrid?: Maybe<Grid>;
  /** Upsert one layout */
  upsertLayout?: Maybe<Layout>;
  /** Upsert one lock */
  upsertLock?: Maybe<Lock>;
  /** Upsert one mixedMedia */
  upsertMixedMedia?: Maybe<MixedMedia>;
  /** Upsert one navigation */
  upsertNavigation?: Maybe<Navigation>;
  /** Upsert one page */
  upsertPage?: Maybe<Page>;
  /** Upsert one person */
  upsertPerson?: Maybe<Person>;
  /** Upsert one product */
  upsertProduct?: Maybe<Product>;
  /** Upsert one seo */
  upsertSeo?: Maybe<Seo>;
  /** Upsert one theme */
  upsertTheme?: Maybe<Theme>;
};


export type MutationCreateArchiveArgs = {
  data: ArchiveCreateInput;
};


export type MutationCreateAssetArgs = {
  data: AssetCreateInput;
};


export type MutationCreateCollectionArgs = {
  data: CollectionCreateInput;
};


export type MutationCreateCombinedListingArgs = {
  data: CombinedListingCreateInput;
};


export type MutationCreateCustomizedSectionArgs = {
  data: CustomizedSectionCreateInput;
};


export type MutationCreateEditorialArgs = {
  data: EditorialCreateInput;
};


export type MutationCreateEventArgs = {
  data: EventCreateInput;
};


export type MutationCreateFormArgs = {
  data: FormCreateInput;
};


export type MutationCreateGalleryArgs = {
  data: GalleryCreateInput;
};


export type MutationCreateGridArgs = {
  data: GridCreateInput;
};


export type MutationCreateLayoutArgs = {
  data: LayoutCreateInput;
};


export type MutationCreateLockArgs = {
  data: LockCreateInput;
};


export type MutationCreateMixedMediaArgs = {
  data: MixedMediaCreateInput;
};


export type MutationCreateNavigationArgs = {
  data: NavigationCreateInput;
};


export type MutationCreatePageArgs = {
  data: PageCreateInput;
};


export type MutationCreatePersonArgs = {
  data: PersonCreateInput;
};


export type MutationCreateProductArgs = {
  data: ProductCreateInput;
};


export type MutationCreateScheduledReleaseArgs = {
  data: ScheduledReleaseCreateInput;
};


export type MutationCreateSeoArgs = {
  data: SeoCreateInput;
};


export type MutationCreateThemeArgs = {
  data: ThemeCreateInput;
};


export type MutationDeleteArchiveArgs = {
  where: ArchiveWhereUniqueInput;
};


export type MutationDeleteAssetArgs = {
  where: AssetWhereUniqueInput;
};


export type MutationDeleteCollectionArgs = {
  where: CollectionWhereUniqueInput;
};


export type MutationDeleteCombinedListingArgs = {
  where: CombinedListingWhereUniqueInput;
};


export type MutationDeleteCustomizedSectionArgs = {
  where: CustomizedSectionWhereUniqueInput;
};


export type MutationDeleteEditorialArgs = {
  where: EditorialWhereUniqueInput;
};


export type MutationDeleteEventArgs = {
  where: EventWhereUniqueInput;
};


export type MutationDeleteFormArgs = {
  where: FormWhereUniqueInput;
};


export type MutationDeleteGalleryArgs = {
  where: GalleryWhereUniqueInput;
};


export type MutationDeleteGridArgs = {
  where: GridWhereUniqueInput;
};


export type MutationDeleteLayoutArgs = {
  where: LayoutWhereUniqueInput;
};


export type MutationDeleteLockArgs = {
  where: LockWhereUniqueInput;
};


export type MutationDeleteManyArchivesArgs = {
  where?: InputMaybe<ArchiveManyWhereInput>;
};


export type MutationDeleteManyArchivesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ArchiveManyWhereInput>;
};


export type MutationDeleteManyAssetsArgs = {
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationDeleteManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationDeleteManyCollectionsArgs = {
  where?: InputMaybe<CollectionManyWhereInput>;
};


export type MutationDeleteManyCollectionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CollectionManyWhereInput>;
};


export type MutationDeleteManyCombinedListingsArgs = {
  where?: InputMaybe<CombinedListingManyWhereInput>;
};


export type MutationDeleteManyCombinedListingsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CombinedListingManyWhereInput>;
};


export type MutationDeleteManyCustomizedSectionsArgs = {
  where?: InputMaybe<CustomizedSectionManyWhereInput>;
};


export type MutationDeleteManyCustomizedSectionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CustomizedSectionManyWhereInput>;
};


export type MutationDeleteManyEditorialsArgs = {
  where?: InputMaybe<EditorialManyWhereInput>;
};


export type MutationDeleteManyEditorialsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<EditorialManyWhereInput>;
};


export type MutationDeleteManyEventsArgs = {
  where?: InputMaybe<EventManyWhereInput>;
};


export type MutationDeleteManyEventsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<EventManyWhereInput>;
};


export type MutationDeleteManyFormsArgs = {
  where?: InputMaybe<FormManyWhereInput>;
};


export type MutationDeleteManyFormsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FormManyWhereInput>;
};


export type MutationDeleteManyGalleriesArgs = {
  where?: InputMaybe<GalleryManyWhereInput>;
};


export type MutationDeleteManyGalleriesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GalleryManyWhereInput>;
};


export type MutationDeleteManyGridsArgs = {
  where?: InputMaybe<GridManyWhereInput>;
};


export type MutationDeleteManyGridsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GridManyWhereInput>;
};


export type MutationDeleteManyLayoutsArgs = {
  where?: InputMaybe<LayoutManyWhereInput>;
};


export type MutationDeleteManyLayoutsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LayoutManyWhereInput>;
};


export type MutationDeleteManyLocksArgs = {
  where?: InputMaybe<LockManyWhereInput>;
};


export type MutationDeleteManyLocksConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LockManyWhereInput>;
};


export type MutationDeleteManyMixedMediasArgs = {
  where?: InputMaybe<MixedMediaManyWhereInput>;
};


export type MutationDeleteManyMixedMediasConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<MixedMediaManyWhereInput>;
};


export type MutationDeleteManyNavigationsArgs = {
  where?: InputMaybe<NavigationManyWhereInput>;
};


export type MutationDeleteManyNavigationsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<NavigationManyWhereInput>;
};


export type MutationDeleteManyPagesArgs = {
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationDeleteManyPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationDeleteManyPeopleArgs = {
  where?: InputMaybe<PersonManyWhereInput>;
};


export type MutationDeleteManyPeopleConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PersonManyWhereInput>;
};


export type MutationDeleteManyProductsArgs = {
  where?: InputMaybe<ProductManyWhereInput>;
};


export type MutationDeleteManyProductsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProductManyWhereInput>;
};


export type MutationDeleteManySeosArgs = {
  where?: InputMaybe<SeoManyWhereInput>;
};


export type MutationDeleteManySeosConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<SeoManyWhereInput>;
};


export type MutationDeleteManyThemesArgs = {
  where?: InputMaybe<ThemeManyWhereInput>;
};


export type MutationDeleteManyThemesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ThemeManyWhereInput>;
};


export type MutationDeleteMixedMediaArgs = {
  where: MixedMediaWhereUniqueInput;
};


export type MutationDeleteNavigationArgs = {
  where: NavigationWhereUniqueInput;
};


export type MutationDeletePageArgs = {
  where: PageWhereUniqueInput;
};


export type MutationDeletePersonArgs = {
  where: PersonWhereUniqueInput;
};


export type MutationDeleteProductArgs = {
  where: ProductWhereUniqueInput;
};


export type MutationDeleteScheduledOperationArgs = {
  where: ScheduledOperationWhereUniqueInput;
};


export type MutationDeleteScheduledReleaseArgs = {
  where: ScheduledReleaseWhereUniqueInput;
};


export type MutationDeleteSeoArgs = {
  where: SeoWhereUniqueInput;
};


export type MutationDeleteThemeArgs = {
  where: ThemeWhereUniqueInput;
};


export type MutationPublishArchiveArgs = {
  to?: Array<Stage>;
  where: ArchiveWhereUniqueInput;
};


export type MutationPublishAssetArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  to?: Array<Stage>;
  where: AssetWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationPublishCollectionArgs = {
  to?: Array<Stage>;
  where: CollectionWhereUniqueInput;
};


export type MutationPublishCombinedListingArgs = {
  to?: Array<Stage>;
  where: CombinedListingWhereUniqueInput;
};


export type MutationPublishCustomizedSectionArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  to?: Array<Stage>;
  where: CustomizedSectionWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationPublishEditorialArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  to?: Array<Stage>;
  where: EditorialWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationPublishEventArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  to?: Array<Stage>;
  where: EventWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationPublishFormArgs = {
  to?: Array<Stage>;
  where: FormWhereUniqueInput;
};


export type MutationPublishGalleryArgs = {
  to?: Array<Stage>;
  where: GalleryWhereUniqueInput;
};


export type MutationPublishGridArgs = {
  to?: Array<Stage>;
  where: GridWhereUniqueInput;
};


export type MutationPublishLayoutArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  to?: Array<Stage>;
  where: LayoutWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationPublishLockArgs = {
  to?: Array<Stage>;
  where: LockWhereUniqueInput;
};


export type MutationPublishManyArchivesArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<ArchiveManyWhereInput>;
};


export type MutationPublishManyArchivesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<ArchiveManyWhereInput>;
};


export type MutationPublishManyAssetsArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<AssetManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationPublishManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<AssetManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationPublishManyCollectionsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<CollectionManyWhereInput>;
};


export type MutationPublishManyCollectionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<CollectionManyWhereInput>;
};


export type MutationPublishManyCombinedListingsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<CombinedListingManyWhereInput>;
};


export type MutationPublishManyCombinedListingsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<CombinedListingManyWhereInput>;
};


export type MutationPublishManyCustomizedSectionsArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<CustomizedSectionManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationPublishManyCustomizedSectionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<CustomizedSectionManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationPublishManyEditorialsArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<EditorialManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationPublishManyEditorialsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<EditorialManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationPublishManyEventsArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<EventManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationPublishManyEventsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<EventManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationPublishManyFormsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<FormManyWhereInput>;
};


export type MutationPublishManyFormsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<FormManyWhereInput>;
};


export type MutationPublishManyGalleriesArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<GalleryManyWhereInput>;
};


export type MutationPublishManyGalleriesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<GalleryManyWhereInput>;
};


export type MutationPublishManyGridsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<GridManyWhereInput>;
};


export type MutationPublishManyGridsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<GridManyWhereInput>;
};


export type MutationPublishManyLayoutsArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<LayoutManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationPublishManyLayoutsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<LayoutManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationPublishManyLocksArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<LockManyWhereInput>;
};


export type MutationPublishManyLocksConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<LockManyWhereInput>;
};


export type MutationPublishManyMixedMediasArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<MixedMediaManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationPublishManyMixedMediasConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<MixedMediaManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationPublishManyNavigationsArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<NavigationManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationPublishManyNavigationsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<NavigationManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationPublishManyPagesArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationPublishManyPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationPublishManyPeopleArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<PersonManyWhereInput>;
};


export type MutationPublishManyPeopleConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<PersonManyWhereInput>;
};


export type MutationPublishManyProductsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<ProductManyWhereInput>;
};


export type MutationPublishManyProductsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<ProductManyWhereInput>;
};


export type MutationPublishManySeosArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<SeoManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationPublishManySeosConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<SeoManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationPublishManyThemesArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<ThemeManyWhereInput>;
};


export type MutationPublishManyThemesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<ThemeManyWhereInput>;
};


export type MutationPublishMixedMediaArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  to?: Array<Stage>;
  where: MixedMediaWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationPublishNavigationArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  to?: Array<Stage>;
  where: NavigationWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationPublishPageArgs = {
  to?: Array<Stage>;
  where: PageWhereUniqueInput;
};


export type MutationPublishPersonArgs = {
  to?: Array<Stage>;
  where: PersonWhereUniqueInput;
};


export type MutationPublishProductArgs = {
  to?: Array<Stage>;
  where: ProductWhereUniqueInput;
};


export type MutationPublishSeoArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  to?: Array<Stage>;
  where: SeoWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationPublishThemeArgs = {
  to?: Array<Stage>;
  where: ThemeWhereUniqueInput;
};


export type MutationSchedulePublishArchiveArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: ArchiveWhereUniqueInput;
};


export type MutationSchedulePublishAssetArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: AssetWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationSchedulePublishCollectionArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: CollectionWhereUniqueInput;
};


export type MutationSchedulePublishCombinedListingArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: CombinedListingWhereUniqueInput;
};


export type MutationSchedulePublishCustomizedSectionArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: CustomizedSectionWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationSchedulePublishEditorialArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: EditorialWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationSchedulePublishEventArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: EventWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationSchedulePublishFormArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: FormWhereUniqueInput;
};


export type MutationSchedulePublishGalleryArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: GalleryWhereUniqueInput;
};


export type MutationSchedulePublishGridArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: GridWhereUniqueInput;
};


export type MutationSchedulePublishLayoutArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: LayoutWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationSchedulePublishLockArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: LockWhereUniqueInput;
};


export type MutationSchedulePublishMixedMediaArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: MixedMediaWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationSchedulePublishNavigationArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: NavigationWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationSchedulePublishPageArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: PageWhereUniqueInput;
};


export type MutationSchedulePublishPersonArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: PersonWhereUniqueInput;
};


export type MutationSchedulePublishProductArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: ProductWhereUniqueInput;
};


export type MutationSchedulePublishSeoArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: SeoWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationSchedulePublishThemeArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: ThemeWhereUniqueInput;
};


export type MutationScheduleUnpublishArchiveArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: ArchiveWhereUniqueInput;
};


export type MutationScheduleUnpublishAssetArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where: AssetWhereUniqueInput;
};


export type MutationScheduleUnpublishCollectionArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: CollectionWhereUniqueInput;
};


export type MutationScheduleUnpublishCombinedListingArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: CombinedListingWhereUniqueInput;
};


export type MutationScheduleUnpublishCustomizedSectionArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where: CustomizedSectionWhereUniqueInput;
};


export type MutationScheduleUnpublishEditorialArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where: EditorialWhereUniqueInput;
};


export type MutationScheduleUnpublishEventArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where: EventWhereUniqueInput;
};


export type MutationScheduleUnpublishFormArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: FormWhereUniqueInput;
};


export type MutationScheduleUnpublishGalleryArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: GalleryWhereUniqueInput;
};


export type MutationScheduleUnpublishGridArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: GridWhereUniqueInput;
};


export type MutationScheduleUnpublishLayoutArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where: LayoutWhereUniqueInput;
};


export type MutationScheduleUnpublishLockArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: LockWhereUniqueInput;
};


export type MutationScheduleUnpublishMixedMediaArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where: MixedMediaWhereUniqueInput;
};


export type MutationScheduleUnpublishNavigationArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where: NavigationWhereUniqueInput;
};


export type MutationScheduleUnpublishPageArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: PageWhereUniqueInput;
};


export type MutationScheduleUnpublishPersonArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: PersonWhereUniqueInput;
};


export type MutationScheduleUnpublishProductArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: ProductWhereUniqueInput;
};


export type MutationScheduleUnpublishSeoArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where: SeoWhereUniqueInput;
};


export type MutationScheduleUnpublishThemeArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: ThemeWhereUniqueInput;
};


export type MutationUnpublishArchiveArgs = {
  from?: Array<Stage>;
  where: ArchiveWhereUniqueInput;
};


export type MutationUnpublishAssetArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where: AssetWhereUniqueInput;
};


export type MutationUnpublishCollectionArgs = {
  from?: Array<Stage>;
  where: CollectionWhereUniqueInput;
};


export type MutationUnpublishCombinedListingArgs = {
  from?: Array<Stage>;
  where: CombinedListingWhereUniqueInput;
};


export type MutationUnpublishCustomizedSectionArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where: CustomizedSectionWhereUniqueInput;
};


export type MutationUnpublishEditorialArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where: EditorialWhereUniqueInput;
};


export type MutationUnpublishEventArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where: EventWhereUniqueInput;
};


export type MutationUnpublishFormArgs = {
  from?: Array<Stage>;
  where: FormWhereUniqueInput;
};


export type MutationUnpublishGalleryArgs = {
  from?: Array<Stage>;
  where: GalleryWhereUniqueInput;
};


export type MutationUnpublishGridArgs = {
  from?: Array<Stage>;
  where: GridWhereUniqueInput;
};


export type MutationUnpublishLayoutArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where: LayoutWhereUniqueInput;
};


export type MutationUnpublishLockArgs = {
  from?: Array<Stage>;
  where: LockWhereUniqueInput;
};


export type MutationUnpublishManyArchivesArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<ArchiveManyWhereInput>;
};


export type MutationUnpublishManyArchivesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<ArchiveManyWhereInput>;
};


export type MutationUnpublishManyAssetsArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationUnpublishManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationUnpublishManyCollectionsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<CollectionManyWhereInput>;
};


export type MutationUnpublishManyCollectionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<CollectionManyWhereInput>;
};


export type MutationUnpublishManyCombinedListingsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<CombinedListingManyWhereInput>;
};


export type MutationUnpublishManyCombinedListingsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<CombinedListingManyWhereInput>;
};


export type MutationUnpublishManyCustomizedSectionsArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where?: InputMaybe<CustomizedSectionManyWhereInput>;
};


export type MutationUnpublishManyCustomizedSectionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where?: InputMaybe<CustomizedSectionManyWhereInput>;
};


export type MutationUnpublishManyEditorialsArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where?: InputMaybe<EditorialManyWhereInput>;
};


export type MutationUnpublishManyEditorialsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where?: InputMaybe<EditorialManyWhereInput>;
};


export type MutationUnpublishManyEventsArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where?: InputMaybe<EventManyWhereInput>;
};


export type MutationUnpublishManyEventsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where?: InputMaybe<EventManyWhereInput>;
};


export type MutationUnpublishManyFormsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<FormManyWhereInput>;
};


export type MutationUnpublishManyFormsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<FormManyWhereInput>;
};


export type MutationUnpublishManyGalleriesArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<GalleryManyWhereInput>;
};


export type MutationUnpublishManyGalleriesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<GalleryManyWhereInput>;
};


export type MutationUnpublishManyGridsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<GridManyWhereInput>;
};


export type MutationUnpublishManyGridsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<GridManyWhereInput>;
};


export type MutationUnpublishManyLayoutsArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where?: InputMaybe<LayoutManyWhereInput>;
};


export type MutationUnpublishManyLayoutsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where?: InputMaybe<LayoutManyWhereInput>;
};


export type MutationUnpublishManyLocksArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<LockManyWhereInput>;
};


export type MutationUnpublishManyLocksConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<LockManyWhereInput>;
};


export type MutationUnpublishManyMixedMediasArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where?: InputMaybe<MixedMediaManyWhereInput>;
};


export type MutationUnpublishManyMixedMediasConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where?: InputMaybe<MixedMediaManyWhereInput>;
};


export type MutationUnpublishManyNavigationsArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where?: InputMaybe<NavigationManyWhereInput>;
};


export type MutationUnpublishManyNavigationsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where?: InputMaybe<NavigationManyWhereInput>;
};


export type MutationUnpublishManyPagesArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationUnpublishManyPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationUnpublishManyPeopleArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<PersonManyWhereInput>;
};


export type MutationUnpublishManyPeopleConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<PersonManyWhereInput>;
};


export type MutationUnpublishManyProductsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<ProductManyWhereInput>;
};


export type MutationUnpublishManyProductsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<ProductManyWhereInput>;
};


export type MutationUnpublishManySeosArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where?: InputMaybe<SeoManyWhereInput>;
};


export type MutationUnpublishManySeosConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where?: InputMaybe<SeoManyWhereInput>;
};


export type MutationUnpublishManyThemesArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<ThemeManyWhereInput>;
};


export type MutationUnpublishManyThemesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<ThemeManyWhereInput>;
};


export type MutationUnpublishMixedMediaArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where: MixedMediaWhereUniqueInput;
};


export type MutationUnpublishNavigationArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where: NavigationWhereUniqueInput;
};


export type MutationUnpublishPageArgs = {
  from?: Array<Stage>;
  where: PageWhereUniqueInput;
};


export type MutationUnpublishPersonArgs = {
  from?: Array<Stage>;
  where: PersonWhereUniqueInput;
};


export type MutationUnpublishProductArgs = {
  from?: Array<Stage>;
  where: ProductWhereUniqueInput;
};


export type MutationUnpublishSeoArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where: SeoWhereUniqueInput;
};


export type MutationUnpublishThemeArgs = {
  from?: Array<Stage>;
  where: ThemeWhereUniqueInput;
};


export type MutationUpdateArchiveArgs = {
  data: ArchiveUpdateInput;
  where: ArchiveWhereUniqueInput;
};


export type MutationUpdateAssetArgs = {
  data: AssetUpdateInput;
  where: AssetWhereUniqueInput;
};


export type MutationUpdateCollectionArgs = {
  data: CollectionUpdateInput;
  where: CollectionWhereUniqueInput;
};


export type MutationUpdateCombinedListingArgs = {
  data: CombinedListingUpdateInput;
  where: CombinedListingWhereUniqueInput;
};


export type MutationUpdateCustomizedSectionArgs = {
  data: CustomizedSectionUpdateInput;
  where: CustomizedSectionWhereUniqueInput;
};


export type MutationUpdateEditorialArgs = {
  data: EditorialUpdateInput;
  where: EditorialWhereUniqueInput;
};


export type MutationUpdateEventArgs = {
  data: EventUpdateInput;
  where: EventWhereUniqueInput;
};


export type MutationUpdateFormArgs = {
  data: FormUpdateInput;
  where: FormWhereUniqueInput;
};


export type MutationUpdateGalleryArgs = {
  data: GalleryUpdateInput;
  where: GalleryWhereUniqueInput;
};


export type MutationUpdateGridArgs = {
  data: GridUpdateInput;
  where: GridWhereUniqueInput;
};


export type MutationUpdateLayoutArgs = {
  data: LayoutUpdateInput;
  where: LayoutWhereUniqueInput;
};


export type MutationUpdateLockArgs = {
  data: LockUpdateInput;
  where: LockWhereUniqueInput;
};


export type MutationUpdateManyArchivesArgs = {
  data: ArchiveUpdateManyInput;
  where?: InputMaybe<ArchiveManyWhereInput>;
};


export type MutationUpdateManyArchivesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: ArchiveUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ArchiveManyWhereInput>;
};


export type MutationUpdateManyAssetsArgs = {
  data: AssetUpdateManyInput;
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationUpdateManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: AssetUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationUpdateManyCollectionsArgs = {
  data: CollectionUpdateManyInput;
  where?: InputMaybe<CollectionManyWhereInput>;
};


export type MutationUpdateManyCollectionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: CollectionUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CollectionManyWhereInput>;
};


export type MutationUpdateManyCombinedListingsArgs = {
  data: CombinedListingUpdateManyInput;
  where?: InputMaybe<CombinedListingManyWhereInput>;
};


export type MutationUpdateManyCombinedListingsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: CombinedListingUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CombinedListingManyWhereInput>;
};


export type MutationUpdateManyCustomizedSectionsArgs = {
  data: CustomizedSectionUpdateManyInput;
  where?: InputMaybe<CustomizedSectionManyWhereInput>;
};


export type MutationUpdateManyCustomizedSectionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: CustomizedSectionUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CustomizedSectionManyWhereInput>;
};


export type MutationUpdateManyEditorialsArgs = {
  data: EditorialUpdateManyInput;
  where?: InputMaybe<EditorialManyWhereInput>;
};


export type MutationUpdateManyEditorialsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: EditorialUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<EditorialManyWhereInput>;
};


export type MutationUpdateManyEventsArgs = {
  data: EventUpdateManyInput;
  where?: InputMaybe<EventManyWhereInput>;
};


export type MutationUpdateManyEventsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: EventUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<EventManyWhereInput>;
};


export type MutationUpdateManyFormsArgs = {
  data: FormUpdateManyInput;
  where?: InputMaybe<FormManyWhereInput>;
};


export type MutationUpdateManyFormsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: FormUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FormManyWhereInput>;
};


export type MutationUpdateManyGalleriesArgs = {
  data: GalleryUpdateManyInput;
  where?: InputMaybe<GalleryManyWhereInput>;
};


export type MutationUpdateManyGalleriesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: GalleryUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GalleryManyWhereInput>;
};


export type MutationUpdateManyGridsArgs = {
  data: GridUpdateManyInput;
  where?: InputMaybe<GridManyWhereInput>;
};


export type MutationUpdateManyGridsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: GridUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GridManyWhereInput>;
};


export type MutationUpdateManyLayoutsArgs = {
  data: LayoutUpdateManyInput;
  where?: InputMaybe<LayoutManyWhereInput>;
};


export type MutationUpdateManyLayoutsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: LayoutUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LayoutManyWhereInput>;
};


export type MutationUpdateManyLocksArgs = {
  data: LockUpdateManyInput;
  where?: InputMaybe<LockManyWhereInput>;
};


export type MutationUpdateManyLocksConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: LockUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LockManyWhereInput>;
};


export type MutationUpdateManyMixedMediasArgs = {
  data: MixedMediaUpdateManyInput;
  where?: InputMaybe<MixedMediaManyWhereInput>;
};


export type MutationUpdateManyMixedMediasConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: MixedMediaUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<MixedMediaManyWhereInput>;
};


export type MutationUpdateManyNavigationsArgs = {
  data: NavigationUpdateManyInput;
  where?: InputMaybe<NavigationManyWhereInput>;
};


export type MutationUpdateManyNavigationsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: NavigationUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<NavigationManyWhereInput>;
};


export type MutationUpdateManyPagesArgs = {
  data: PageUpdateManyInput;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationUpdateManyPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: PageUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationUpdateManyPeopleArgs = {
  data: PersonUpdateManyInput;
  where?: InputMaybe<PersonManyWhereInput>;
};


export type MutationUpdateManyPeopleConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: PersonUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PersonManyWhereInput>;
};


export type MutationUpdateManyProductsArgs = {
  data: ProductUpdateManyInput;
  where?: InputMaybe<ProductManyWhereInput>;
};


export type MutationUpdateManyProductsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: ProductUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProductManyWhereInput>;
};


export type MutationUpdateManySeosArgs = {
  data: SeoUpdateManyInput;
  where?: InputMaybe<SeoManyWhereInput>;
};


export type MutationUpdateManySeosConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: SeoUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<SeoManyWhereInput>;
};


export type MutationUpdateManyThemesArgs = {
  data: ThemeUpdateManyInput;
  where?: InputMaybe<ThemeManyWhereInput>;
};


export type MutationUpdateManyThemesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: ThemeUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ThemeManyWhereInput>;
};


export type MutationUpdateMixedMediaArgs = {
  data: MixedMediaUpdateInput;
  where: MixedMediaWhereUniqueInput;
};


export type MutationUpdateNavigationArgs = {
  data: NavigationUpdateInput;
  where: NavigationWhereUniqueInput;
};


export type MutationUpdatePageArgs = {
  data: PageUpdateInput;
  where: PageWhereUniqueInput;
};


export type MutationUpdatePersonArgs = {
  data: PersonUpdateInput;
  where: PersonWhereUniqueInput;
};


export type MutationUpdateProductArgs = {
  data: ProductUpdateInput;
  where: ProductWhereUniqueInput;
};


export type MutationUpdateScheduledReleaseArgs = {
  data: ScheduledReleaseUpdateInput;
  where: ScheduledReleaseWhereUniqueInput;
};


export type MutationUpdateSeoArgs = {
  data: SeoUpdateInput;
  where: SeoWhereUniqueInput;
};


export type MutationUpdateThemeArgs = {
  data: ThemeUpdateInput;
  where: ThemeWhereUniqueInput;
};


export type MutationUpsertArchiveArgs = {
  upsert: ArchiveUpsertInput;
  where: ArchiveWhereUniqueInput;
};


export type MutationUpsertAssetArgs = {
  upsert: AssetUpsertInput;
  where: AssetWhereUniqueInput;
};


export type MutationUpsertCollectionArgs = {
  upsert: CollectionUpsertInput;
  where: CollectionWhereUniqueInput;
};


export type MutationUpsertCombinedListingArgs = {
  upsert: CombinedListingUpsertInput;
  where: CombinedListingWhereUniqueInput;
};


export type MutationUpsertCustomizedSectionArgs = {
  upsert: CustomizedSectionUpsertInput;
  where: CustomizedSectionWhereUniqueInput;
};


export type MutationUpsertEditorialArgs = {
  upsert: EditorialUpsertInput;
  where: EditorialWhereUniqueInput;
};


export type MutationUpsertEventArgs = {
  upsert: EventUpsertInput;
  where: EventWhereUniqueInput;
};


export type MutationUpsertFormArgs = {
  upsert: FormUpsertInput;
  where: FormWhereUniqueInput;
};


export type MutationUpsertGalleryArgs = {
  upsert: GalleryUpsertInput;
  where: GalleryWhereUniqueInput;
};


export type MutationUpsertGridArgs = {
  upsert: GridUpsertInput;
  where: GridWhereUniqueInput;
};


export type MutationUpsertLayoutArgs = {
  upsert: LayoutUpsertInput;
  where: LayoutWhereUniqueInput;
};


export type MutationUpsertLockArgs = {
  upsert: LockUpsertInput;
  where: LockWhereUniqueInput;
};


export type MutationUpsertMixedMediaArgs = {
  upsert: MixedMediaUpsertInput;
  where: MixedMediaWhereUniqueInput;
};


export type MutationUpsertNavigationArgs = {
  upsert: NavigationUpsertInput;
  where: NavigationWhereUniqueInput;
};


export type MutationUpsertPageArgs = {
  upsert: PageUpsertInput;
  where: PageWhereUniqueInput;
};


export type MutationUpsertPersonArgs = {
  upsert: PersonUpsertInput;
  where: PersonWhereUniqueInput;
};


export type MutationUpsertProductArgs = {
  upsert: ProductUpsertInput;
  where: ProductWhereUniqueInput;
};


export type MutationUpsertSeoArgs = {
  upsert: SeoUpsertInput;
  where: SeoWhereUniqueInput;
};


export type MutationUpsertThemeArgs = {
  upsert: ThemeUpsertInput;
  where: ThemeWhereUniqueInput;
};

export type Navigation = Entity & Node & {
  __typename?: 'Navigation';
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Navigation>;
  /** List of Navigation versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  links: Array<Link>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  slug?: Maybe<Scalars['String']['output']>;
  /** System stage field */
  stage: Stage;
  /** Use this field to assign a navigation as the "header" or the "footer" for the website */
  staticNavigation?: Maybe<StaticNavigation>;
  title?: Maybe<Scalars['String']['output']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type NavigationCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type NavigationDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type NavigationHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type NavigationLinksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<LinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LinkWhereInput>;
};


export type NavigationPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type NavigationScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type NavigationUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type NavigationConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: NavigationWhereUniqueInput;
};

/** A connection to a list of items. */
export type NavigationConnection = {
  __typename?: 'NavigationConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<NavigationEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type NavigationCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  links?: InputMaybe<LinkCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<NavigationCreateLocalizationsInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  staticNavigation?: InputMaybe<StaticNavigation>;
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type NavigationCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type NavigationCreateLocalizationInput = {
  /** Localization input */
  data: NavigationCreateLocalizationDataInput;
  locale: Locale;
};

export type NavigationCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<NavigationCreateLocalizationInput>>;
};

export type NavigationCreateManyInlineInput = {
  /** Connect multiple existing Navigation documents */
  connect?: InputMaybe<Array<NavigationWhereUniqueInput>>;
  /** Create and connect multiple existing Navigation documents */
  create?: InputMaybe<Array<NavigationCreateInput>>;
};

export type NavigationCreateOneInlineInput = {
  /** Connect one existing Navigation document */
  connect?: InputMaybe<NavigationWhereUniqueInput>;
  /** Create and connect one Navigation document */
  create?: InputMaybe<NavigationCreateInput>;
};

/** An edge in a connection. */
export type NavigationEdge = {
  __typename?: 'NavigationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Navigation;
};

/** Identifies documents */
export type NavigationManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<NavigationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<NavigationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<NavigationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<NavigationWhereStageInput>;
  documentInStages_none?: InputMaybe<NavigationWhereStageInput>;
  documentInStages_some?: InputMaybe<NavigationWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  links_every?: InputMaybe<LinkWhereInput>;
  links_none?: InputMaybe<LinkWhereInput>;
  links_some?: InputMaybe<LinkWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  staticNavigation?: InputMaybe<StaticNavigation>;
  /** All values that are contained in given list. */
  staticNavigation_in?: InputMaybe<Array<InputMaybe<StaticNavigation>>>;
  /** Any other value that exists and is not equal to the given value. */
  staticNavigation_not?: InputMaybe<StaticNavigation>;
  /** All values that are not contained in given list. */
  staticNavigation_not_in?: InputMaybe<Array<InputMaybe<StaticNavigation>>>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum NavigationOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  StaticNavigationAsc = 'staticNavigation_ASC',
  StaticNavigationDesc = 'staticNavigation_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type NavigationUpdateInput = {
  links?: InputMaybe<LinkUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<NavigationUpdateLocalizationsInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  staticNavigation?: InputMaybe<StaticNavigation>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type NavigationUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<NavigationCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type NavigationUpdateManyInlineInput = {
  /** Connect multiple existing Navigation documents */
  connect?: InputMaybe<Array<NavigationConnectInput>>;
  /** Create and connect multiple Navigation documents */
  create?: InputMaybe<Array<NavigationCreateInput>>;
  /** Delete multiple Navigation documents */
  delete?: InputMaybe<Array<NavigationWhereUniqueInput>>;
  /** Disconnect multiple Navigation documents */
  disconnect?: InputMaybe<Array<NavigationWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Navigation documents */
  set?: InputMaybe<Array<NavigationWhereUniqueInput>>;
  /** Update multiple Navigation documents */
  update?: InputMaybe<Array<NavigationUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Navigation documents */
  upsert?: InputMaybe<Array<NavigationUpsertWithNestedWhereUniqueInput>>;
};

export type NavigationUpdateManyInput = {
  title?: InputMaybe<Scalars['String']['input']>;
};

export type NavigationUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: NavigationUpdateManyInput;
  /** Document search */
  where: NavigationWhereInput;
};

export type NavigationUpdateOneInlineInput = {
  /** Connect existing Navigation document */
  connect?: InputMaybe<NavigationWhereUniqueInput>;
  /** Create and connect one Navigation document */
  create?: InputMaybe<NavigationCreateInput>;
  /** Delete currently connected Navigation document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected Navigation document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Navigation document */
  update?: InputMaybe<NavigationUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Navigation document */
  upsert?: InputMaybe<NavigationUpsertWithNestedWhereUniqueInput>;
};

export type NavigationUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: NavigationUpdateInput;
  /** Unique document search */
  where: NavigationWhereUniqueInput;
};

export type NavigationUpsertInput = {
  /** Create document if it didn't exist */
  create: NavigationCreateInput;
  /** Update document if it exists */
  update: NavigationUpdateInput;
};

export type NavigationUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: NavigationUpsertInput;
  /** Unique document search */
  where: NavigationWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type NavigationWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type NavigationWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<NavigationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<NavigationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<NavigationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<NavigationWhereStageInput>;
  documentInStages_none?: InputMaybe<NavigationWhereStageInput>;
  documentInStages_some?: InputMaybe<NavigationWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  links_every?: InputMaybe<LinkWhereInput>;
  links_none?: InputMaybe<LinkWhereInput>;
  links_some?: InputMaybe<LinkWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  staticNavigation?: InputMaybe<StaticNavigation>;
  /** All values that are contained in given list. */
  staticNavigation_in?: InputMaybe<Array<InputMaybe<StaticNavigation>>>;
  /** Any other value that exists and is not equal to the given value. */
  staticNavigation_not?: InputMaybe<StaticNavigation>;
  /** All values that are not contained in given list. */
  staticNavigation_not_in?: InputMaybe<Array<InputMaybe<StaticNavigation>>>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type NavigationWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<NavigationWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<NavigationWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<NavigationWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<NavigationWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Navigation record uniquely */
export type NavigationWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  staticNavigation?: InputMaybe<StaticNavigation>;
};

/** An object with an ID */
export type Node = {
  /** The id of the object. */
  id: Scalars['ID']['output'];
  /** The Stage of an object */
  stage: Stage;
};

export type Page = Entity & Node & {
  __typename?: 'Page';
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Page>;
  featuredMedia?: Maybe<Asset>;
  /** List of Page versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  /** used internally for identification purposes. */
  internalName?: Maybe<Scalars['String']['output']>;
  layout?: Maybe<Layout>;
  lock?: Maybe<Lock>;
  lockExemption?: Maybe<Lock>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  seo?: Maybe<Seo>;
  slug: Scalars['String']['output'];
  /** System stage field */
  stage: Stage;
  staticPage?: Maybe<StaticPage>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type PageCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type PageFeaturedMediaArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  where?: InputMaybe<AssetSingleRelationWhereInput>;
};


export type PageHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type PageLayoutArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageLockArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageLockExemptionArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PagePublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type PageSeoArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type PageConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: PageWhereUniqueInput;
};

/** A connection to a list of items. */
export type PageConnection = {
  __typename?: 'PageConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<PageEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type PageCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  featuredMedia?: InputMaybe<AssetCreateOneInlineInput>;
  internalName?: InputMaybe<Scalars['String']['input']>;
  layout?: InputMaybe<LayoutCreateOneInlineInput>;
  lock?: InputMaybe<LockCreateOneInlineInput>;
  lockExemption?: InputMaybe<LockCreateOneInlineInput>;
  seo?: InputMaybe<SeoCreateOneInlineInput>;
  slug: Scalars['String']['input'];
  staticPage?: InputMaybe<StaticPage>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type PageCreateManyInlineInput = {
  /** Connect multiple existing Page documents */
  connect?: InputMaybe<Array<PageWhereUniqueInput>>;
  /** Create and connect multiple existing Page documents */
  create?: InputMaybe<Array<PageCreateInput>>;
};

export type PageCreateOneInlineInput = {
  /** Connect one existing Page document */
  connect?: InputMaybe<PageWhereUniqueInput>;
  /** Create and connect one Page document */
  create?: InputMaybe<PageCreateInput>;
};

/** An edge in a connection. */
export type PageEdge = {
  __typename?: 'PageEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Page;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Number of items in the current page. */
  pageSize?: Maybe<Scalars['Int']['output']>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Identifies documents */
export type PageManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<PageWhereStageInput>;
  documentInStages_none?: InputMaybe<PageWhereStageInput>;
  documentInStages_some?: InputMaybe<PageWhereStageInput>;
  featuredMedia?: InputMaybe<AssetWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  internalName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  internalName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  internalName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  internalName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  internalName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  internalName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  internalName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  internalName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  internalName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  internalName_starts_with?: InputMaybe<Scalars['String']['input']>;
  layout?: InputMaybe<LayoutWhereInput>;
  lock?: InputMaybe<LockWhereInput>;
  lockExemption?: InputMaybe<LockWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  seo?: InputMaybe<SeoWhereInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  staticPage?: InputMaybe<StaticPage>;
  /** All values that are contained in given list. */
  staticPage_in?: InputMaybe<Array<InputMaybe<StaticPage>>>;
  /** Any other value that exists and is not equal to the given value. */
  staticPage_not?: InputMaybe<StaticPage>;
  /** All values that are not contained in given list. */
  staticPage_not_in?: InputMaybe<Array<InputMaybe<StaticPage>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum PageOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  InternalNameAsc = 'internalName_ASC',
  InternalNameDesc = 'internalName_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  StaticPageAsc = 'staticPage_ASC',
  StaticPageDesc = 'staticPage_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type PageUpdateInput = {
  featuredMedia?: InputMaybe<AssetUpdateOneInlineInput>;
  internalName?: InputMaybe<Scalars['String']['input']>;
  layout?: InputMaybe<LayoutUpdateOneInlineInput>;
  lock?: InputMaybe<LockUpdateOneInlineInput>;
  lockExemption?: InputMaybe<LockUpdateOneInlineInput>;
  seo?: InputMaybe<SeoUpdateOneInlineInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  staticPage?: InputMaybe<StaticPage>;
};

export type PageUpdateManyInlineInput = {
  /** Connect multiple existing Page documents */
  connect?: InputMaybe<Array<PageConnectInput>>;
  /** Create and connect multiple Page documents */
  create?: InputMaybe<Array<PageCreateInput>>;
  /** Delete multiple Page documents */
  delete?: InputMaybe<Array<PageWhereUniqueInput>>;
  /** Disconnect multiple Page documents */
  disconnect?: InputMaybe<Array<PageWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Page documents */
  set?: InputMaybe<Array<PageWhereUniqueInput>>;
  /** Update multiple Page documents */
  update?: InputMaybe<Array<PageUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Page documents */
  upsert?: InputMaybe<Array<PageUpsertWithNestedWhereUniqueInput>>;
};

export type PageUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: InputMaybe<Scalars['String']['input']>;
};

export type PageUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: PageUpdateManyInput;
  /** Document search */
  where: PageWhereInput;
};

export type PageUpdateOneInlineInput = {
  /** Connect existing Page document */
  connect?: InputMaybe<PageWhereUniqueInput>;
  /** Create and connect one Page document */
  create?: InputMaybe<PageCreateInput>;
  /** Delete currently connected Page document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected Page document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Page document */
  update?: InputMaybe<PageUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Page document */
  upsert?: InputMaybe<PageUpsertWithNestedWhereUniqueInput>;
};

export type PageUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: PageUpdateInput;
  /** Unique document search */
  where: PageWhereUniqueInput;
};

export type PageUpsertInput = {
  /** Create document if it didn't exist */
  create: PageCreateInput;
  /** Update document if it exists */
  update: PageUpdateInput;
};

export type PageUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: PageUpsertInput;
  /** Unique document search */
  where: PageWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type PageWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type PageWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<PageWhereStageInput>;
  documentInStages_none?: InputMaybe<PageWhereStageInput>;
  documentInStages_some?: InputMaybe<PageWhereStageInput>;
  featuredMedia?: InputMaybe<AssetWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  internalName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  internalName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  internalName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  internalName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  internalName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  internalName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  internalName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  internalName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  internalName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  internalName_starts_with?: InputMaybe<Scalars['String']['input']>;
  layout?: InputMaybe<LayoutWhereInput>;
  lock?: InputMaybe<LockWhereInput>;
  lockExemption?: InputMaybe<LockWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  seo?: InputMaybe<SeoWhereInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  staticPage?: InputMaybe<StaticPage>;
  /** All values that are contained in given list. */
  staticPage_in?: InputMaybe<Array<InputMaybe<StaticPage>>>;
  /** Any other value that exists and is not equal to the given value. */
  staticPage_not?: InputMaybe<StaticPage>;
  /** All values that are not contained in given list. */
  staticPage_not_in?: InputMaybe<Array<InputMaybe<StaticPage>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type PageWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<PageWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Page record uniquely */
export type PageWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  internalName?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  staticPage?: InputMaybe<StaticPage>;
};

export type Person = Entity & Node & {
  __typename?: 'Person';
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Person>;
  editorial?: Maybe<Editorial>;
  /** List of Person versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  role?: Maybe<Scalars['String']['output']>;
  scheduledIn: Array<ScheduledOperation>;
  slug: Scalars['String']['output'];
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type PersonCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PersonDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type PersonEditorialArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PersonHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type PersonPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PersonScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type PersonUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type PersonConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: PersonWhereUniqueInput;
};

/** A connection to a list of items. */
export type PersonConnection = {
  __typename?: 'PersonConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<PersonEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type PersonCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  editorial?: InputMaybe<EditorialCreateOneInlineInput>;
  name: Scalars['String']['input'];
  role?: InputMaybe<Scalars['String']['input']>;
  slug: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type PersonCreateManyInlineInput = {
  /** Connect multiple existing Person documents */
  connect?: InputMaybe<Array<PersonWhereUniqueInput>>;
  /** Create and connect multiple existing Person documents */
  create?: InputMaybe<Array<PersonCreateInput>>;
};

export type PersonCreateOneInlineInput = {
  /** Connect one existing Person document */
  connect?: InputMaybe<PersonWhereUniqueInput>;
  /** Create and connect one Person document */
  create?: InputMaybe<PersonCreateInput>;
};

/** An edge in a connection. */
export type PersonEdge = {
  __typename?: 'PersonEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Person;
};

/** Identifies documents */
export type PersonManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PersonWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PersonWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PersonWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<PersonWhereStageInput>;
  documentInStages_none?: InputMaybe<PersonWhereStageInput>;
  documentInStages_some?: InputMaybe<PersonWhereStageInput>;
  editorial?: InputMaybe<EditorialWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  role?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  role_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  role_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  role_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  role_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  role_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  role_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  role_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  role_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  role_starts_with?: InputMaybe<Scalars['String']['input']>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum PersonOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  RoleAsc = 'role_ASC',
  RoleDesc = 'role_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type PersonUpdateInput = {
  editorial?: InputMaybe<EditorialUpdateOneInlineInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  role?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type PersonUpdateManyInlineInput = {
  /** Connect multiple existing Person documents */
  connect?: InputMaybe<Array<PersonConnectInput>>;
  /** Create and connect multiple Person documents */
  create?: InputMaybe<Array<PersonCreateInput>>;
  /** Delete multiple Person documents */
  delete?: InputMaybe<Array<PersonWhereUniqueInput>>;
  /** Disconnect multiple Person documents */
  disconnect?: InputMaybe<Array<PersonWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Person documents */
  set?: InputMaybe<Array<PersonWhereUniqueInput>>;
  /** Update multiple Person documents */
  update?: InputMaybe<Array<PersonUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Person documents */
  upsert?: InputMaybe<Array<PersonUpsertWithNestedWhereUniqueInput>>;
};

export type PersonUpdateManyInput = {
  name?: InputMaybe<Scalars['String']['input']>;
  role?: InputMaybe<Scalars['String']['input']>;
};

export type PersonUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: PersonUpdateManyInput;
  /** Document search */
  where: PersonWhereInput;
};

export type PersonUpdateOneInlineInput = {
  /** Connect existing Person document */
  connect?: InputMaybe<PersonWhereUniqueInput>;
  /** Create and connect one Person document */
  create?: InputMaybe<PersonCreateInput>;
  /** Delete currently connected Person document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected Person document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Person document */
  update?: InputMaybe<PersonUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Person document */
  upsert?: InputMaybe<PersonUpsertWithNestedWhereUniqueInput>;
};

export type PersonUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: PersonUpdateInput;
  /** Unique document search */
  where: PersonWhereUniqueInput;
};

export type PersonUpsertInput = {
  /** Create document if it didn't exist */
  create: PersonCreateInput;
  /** Update document if it exists */
  update: PersonUpdateInput;
};

export type PersonUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: PersonUpsertInput;
  /** Unique document search */
  where: PersonWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type PersonWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type PersonWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PersonWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PersonWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PersonWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<PersonWhereStageInput>;
  documentInStages_none?: InputMaybe<PersonWhereStageInput>;
  documentInStages_some?: InputMaybe<PersonWhereStageInput>;
  editorial?: InputMaybe<EditorialWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  role?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  role_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  role_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  role_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  role_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  role_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  role_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  role_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  role_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  role_starts_with?: InputMaybe<Scalars['String']['input']>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type PersonWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PersonWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PersonWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PersonWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<PersonWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Person record uniquely */
export type PersonWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type Product = Entity & Node & {
  __typename?: 'Product';
  combinedListings: Array<CombinedListing>;
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Product>;
  event: Array<Event>;
  gid: Scalars['String']['output'];
  heroes: Array<Layout>;
  /** List of Product versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  layouts: Array<Layout>;
  legacyResourceId: Scalars['String']['output'];
  lock?: Maybe<Lock>;
  lockExemption?: Maybe<Lock>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  slug: Scalars['String']['output'];
  /** System stage field */
  stage: Stage;
  title?: Maybe<Scalars['String']['output']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type ProductCombinedListingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<CombinedListingOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CombinedListingWhereInput>;
};


export type ProductCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ProductDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type ProductEventArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<EventWhereInput>;
};


export type ProductHeroesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LayoutWhereInput>;
};


export type ProductHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type ProductLayoutsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LayoutWhereInput>;
};


export type ProductLockArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ProductLockExemptionArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ProductPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ProductScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type ProductUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ProductConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ProductWhereUniqueInput;
};

/** A connection to a list of items. */
export type ProductConnection = {
  __typename?: 'ProductConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ProductEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ProductCreateInput = {
  combinedListings?: InputMaybe<CombinedListingCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  event?: InputMaybe<EventCreateManyInlineInput>;
  gid: Scalars['String']['input'];
  heroes?: InputMaybe<LayoutCreateManyInlineInput>;
  layouts?: InputMaybe<LayoutCreateManyInlineInput>;
  legacyResourceId: Scalars['String']['input'];
  lock?: InputMaybe<LockCreateOneInlineInput>;
  lockExemption?: InputMaybe<LockCreateOneInlineInput>;
  slug: Scalars['String']['input'];
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type ProductCreateManyInlineInput = {
  /** Connect multiple existing Product documents */
  connect?: InputMaybe<Array<ProductWhereUniqueInput>>;
  /** Create and connect multiple existing Product documents */
  create?: InputMaybe<Array<ProductCreateInput>>;
};

export type ProductCreateOneInlineInput = {
  /** Connect one existing Product document */
  connect?: InputMaybe<ProductWhereUniqueInput>;
  /** Create and connect one Product document */
  create?: InputMaybe<ProductCreateInput>;
};

/** An edge in a connection. */
export type ProductEdge = {
  __typename?: 'ProductEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Product;
};

/** Identifies documents */
export type ProductManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProductWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProductWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProductWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  combinedListings_every?: InputMaybe<CombinedListingWhereInput>;
  combinedListings_none?: InputMaybe<CombinedListingWhereInput>;
  combinedListings_some?: InputMaybe<CombinedListingWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ProductWhereStageInput>;
  documentInStages_none?: InputMaybe<ProductWhereStageInput>;
  documentInStages_some?: InputMaybe<ProductWhereStageInput>;
  event_every?: InputMaybe<EventWhereInput>;
  event_none?: InputMaybe<EventWhereInput>;
  event_some?: InputMaybe<EventWhereInput>;
  gid?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  gid_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  gid_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  gid_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  gid_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  gid_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  gid_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  gid_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  gid_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  gid_starts_with?: InputMaybe<Scalars['String']['input']>;
  heroes_every?: InputMaybe<LayoutWhereInput>;
  heroes_none?: InputMaybe<LayoutWhereInput>;
  heroes_some?: InputMaybe<LayoutWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  layouts_every?: InputMaybe<LayoutWhereInput>;
  layouts_none?: InputMaybe<LayoutWhereInput>;
  layouts_some?: InputMaybe<LayoutWhereInput>;
  legacyResourceId?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  legacyResourceId_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  legacyResourceId_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  legacyResourceId_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  legacyResourceId_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  legacyResourceId_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  legacyResourceId_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  legacyResourceId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  legacyResourceId_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  legacyResourceId_starts_with?: InputMaybe<Scalars['String']['input']>;
  lock?: InputMaybe<LockWhereInput>;
  lockExemption?: InputMaybe<LockWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ProductOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  GidAsc = 'gid_ASC',
  GidDesc = 'gid_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LegacyResourceIdAsc = 'legacyResourceId_ASC',
  LegacyResourceIdDesc = 'legacyResourceId_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type ProductUpdateInput = {
  combinedListings?: InputMaybe<CombinedListingUpdateManyInlineInput>;
  event?: InputMaybe<EventUpdateManyInlineInput>;
  gid?: InputMaybe<Scalars['String']['input']>;
  heroes?: InputMaybe<LayoutUpdateManyInlineInput>;
  layouts?: InputMaybe<LayoutUpdateManyInlineInput>;
  legacyResourceId?: InputMaybe<Scalars['String']['input']>;
  lock?: InputMaybe<LockUpdateOneInlineInput>;
  lockExemption?: InputMaybe<LockUpdateOneInlineInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type ProductUpdateManyInlineInput = {
  /** Connect multiple existing Product documents */
  connect?: InputMaybe<Array<ProductConnectInput>>;
  /** Create and connect multiple Product documents */
  create?: InputMaybe<Array<ProductCreateInput>>;
  /** Delete multiple Product documents */
  delete?: InputMaybe<Array<ProductWhereUniqueInput>>;
  /** Disconnect multiple Product documents */
  disconnect?: InputMaybe<Array<ProductWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Product documents */
  set?: InputMaybe<Array<ProductWhereUniqueInput>>;
  /** Update multiple Product documents */
  update?: InputMaybe<Array<ProductUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Product documents */
  upsert?: InputMaybe<Array<ProductUpsertWithNestedWhereUniqueInput>>;
};

export type ProductUpdateManyInput = {
  legacyResourceId?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type ProductUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ProductUpdateManyInput;
  /** Document search */
  where: ProductWhereInput;
};

export type ProductUpdateOneInlineInput = {
  /** Connect existing Product document */
  connect?: InputMaybe<ProductWhereUniqueInput>;
  /** Create and connect one Product document */
  create?: InputMaybe<ProductCreateInput>;
  /** Delete currently connected Product document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected Product document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Product document */
  update?: InputMaybe<ProductUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Product document */
  upsert?: InputMaybe<ProductUpsertWithNestedWhereUniqueInput>;
};

export type ProductUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ProductUpdateInput;
  /** Unique document search */
  where: ProductWhereUniqueInput;
};

export type ProductUpsertInput = {
  /** Create document if it didn't exist */
  create: ProductCreateInput;
  /** Update document if it exists */
  update: ProductUpdateInput;
};

export type ProductUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ProductUpsertInput;
  /** Unique document search */
  where: ProductWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type ProductWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type ProductWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProductWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProductWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProductWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  combinedListings_every?: InputMaybe<CombinedListingWhereInput>;
  combinedListings_none?: InputMaybe<CombinedListingWhereInput>;
  combinedListings_some?: InputMaybe<CombinedListingWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ProductWhereStageInput>;
  documentInStages_none?: InputMaybe<ProductWhereStageInput>;
  documentInStages_some?: InputMaybe<ProductWhereStageInput>;
  event_every?: InputMaybe<EventWhereInput>;
  event_none?: InputMaybe<EventWhereInput>;
  event_some?: InputMaybe<EventWhereInput>;
  gid?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  gid_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  gid_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  gid_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  gid_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  gid_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  gid_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  gid_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  gid_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  gid_starts_with?: InputMaybe<Scalars['String']['input']>;
  heroes_every?: InputMaybe<LayoutWhereInput>;
  heroes_none?: InputMaybe<LayoutWhereInput>;
  heroes_some?: InputMaybe<LayoutWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  layouts_every?: InputMaybe<LayoutWhereInput>;
  layouts_none?: InputMaybe<LayoutWhereInput>;
  layouts_some?: InputMaybe<LayoutWhereInput>;
  legacyResourceId?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  legacyResourceId_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  legacyResourceId_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  legacyResourceId_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  legacyResourceId_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  legacyResourceId_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  legacyResourceId_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  legacyResourceId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  legacyResourceId_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  legacyResourceId_starts_with?: InputMaybe<Scalars['String']['input']>;
  lock?: InputMaybe<LockWhereInput>;
  lockExemption?: InputMaybe<LockWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type ProductWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProductWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProductWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProductWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<ProductWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Product record uniquely */
export type ProductWhereUniqueInput = {
  gid?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type PublishLocaleInput = {
  /** Locales to publish */
  locale: Locale;
  /** Stages to publish selected locales to */
  stages: Array<Stage>;
};

export type Query = {
  __typename?: 'Query';
  /** Retrieve a single archive */
  archive?: Maybe<Archive>;
  /** Retrieve document version */
  archiveVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple archives */
  archives: Array<Archive>;
  /** Retrieve multiple archives using the Relay connection interface */
  archivesConnection: ArchiveConnection;
  /** Retrieve a single asset */
  asset?: Maybe<Asset>;
  /** Retrieve document version */
  assetVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple assets */
  assets: Array<Asset>;
  /** Retrieve multiple assets using the Relay connection interface */
  assetsConnection: AssetConnection;
  /** Retrieve a single collection */
  collection?: Maybe<Collection>;
  /** Retrieve document version */
  collectionVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple collections */
  collections: Array<Collection>;
  /** Retrieve multiple collections using the Relay connection interface */
  collectionsConnection: CollectionConnection;
  /** Retrieve a single combinedListing */
  combinedListing?: Maybe<CombinedListing>;
  /** Retrieve document version */
  combinedListingVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple combinedListings */
  combinedListings: Array<CombinedListing>;
  /** Retrieve multiple combinedListings using the Relay connection interface */
  combinedListingsConnection: CombinedListingConnection;
  /** Retrieve a single customizedSection */
  customizedSection?: Maybe<CustomizedSection>;
  /** Retrieve document version */
  customizedSectionVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple customizedSections */
  customizedSections: Array<CustomizedSection>;
  /** Retrieve multiple customizedSections using the Relay connection interface */
  customizedSectionsConnection: CustomizedSectionConnection;
  /** Retrieve a single editorial */
  editorial?: Maybe<Editorial>;
  /** Retrieve document version */
  editorialVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple editorials */
  editorials: Array<Editorial>;
  /** Retrieve multiple editorials using the Relay connection interface */
  editorialsConnection: EditorialConnection;
  /** Fetches an object given its ID */
  entities?: Maybe<Array<Entity>>;
  /** Retrieve a single event */
  event?: Maybe<Event>;
  /** Retrieve document version */
  eventVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple events */
  events: Array<Event>;
  /** Retrieve multiple events using the Relay connection interface */
  eventsConnection: EventConnection;
  /** Retrieve a single form */
  form?: Maybe<Form>;
  /** Retrieve document version */
  formVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple forms */
  forms: Array<Form>;
  /** Retrieve multiple forms using the Relay connection interface */
  formsConnection: FormConnection;
  /** Retrieve multiple galleries */
  galleries: Array<Gallery>;
  /** Retrieve multiple galleries using the Relay connection interface */
  galleriesConnection: GalleryConnection;
  /** Retrieve a single gallery */
  gallery?: Maybe<Gallery>;
  /** Retrieve document version */
  galleryVersion?: Maybe<DocumentVersion>;
  /** Retrieve a single grid */
  grid?: Maybe<Grid>;
  /** Retrieve document version */
  gridVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple grids */
  grids: Array<Grid>;
  /** Retrieve multiple grids using the Relay connection interface */
  gridsConnection: GridConnection;
  /** Retrieve a single layout */
  layout?: Maybe<Layout>;
  /** Retrieve document version */
  layoutVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple layouts */
  layouts: Array<Layout>;
  /** Retrieve multiple layouts using the Relay connection interface */
  layoutsConnection: LayoutConnection;
  /** Retrieve a single lock */
  lock?: Maybe<Lock>;
  /** Retrieve document version */
  lockVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple locks */
  locks: Array<Lock>;
  /** Retrieve multiple locks using the Relay connection interface */
  locksConnection: LockConnection;
  /** Retrieve a single mixedMedia */
  mixedMedia?: Maybe<MixedMedia>;
  /** Retrieve document version */
  mixedMediaVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple mixedMedias */
  mixedMedias: Array<MixedMedia>;
  /** Retrieve multiple mixedMedias using the Relay connection interface */
  mixedMediasConnection: MixedMediaConnection;
  /** Retrieve a single navigation */
  navigation?: Maybe<Navigation>;
  /** Retrieve document version */
  navigationVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple navigations */
  navigations: Array<Navigation>;
  /** Retrieve multiple navigations using the Relay connection interface */
  navigationsConnection: NavigationConnection;
  /** Fetches an object given its ID */
  node?: Maybe<Node>;
  /** Retrieve a single page */
  page?: Maybe<Page>;
  /** Retrieve document version */
  pageVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple pages */
  pages: Array<Page>;
  /** Retrieve multiple pages using the Relay connection interface */
  pagesConnection: PageConnection;
  /** Retrieve multiple people */
  people: Array<Person>;
  /** Retrieve multiple people using the Relay connection interface */
  peopleConnection: PersonConnection;
  /** Retrieve a single person */
  person?: Maybe<Person>;
  /** Retrieve document version */
  personVersion?: Maybe<DocumentVersion>;
  /** Retrieve a single product */
  product?: Maybe<Product>;
  /** Retrieve document version */
  productVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple products */
  products: Array<Product>;
  /** Retrieve multiple products using the Relay connection interface */
  productsConnection: ProductConnection;
  /** Retrieve a single scheduledOperation */
  scheduledOperation?: Maybe<ScheduledOperation>;
  /** Retrieve multiple scheduledOperations */
  scheduledOperations: Array<ScheduledOperation>;
  /** Retrieve multiple scheduledOperations using the Relay connection interface */
  scheduledOperationsConnection: ScheduledOperationConnection;
  /** Retrieve a single scheduledRelease */
  scheduledRelease?: Maybe<ScheduledRelease>;
  /** Retrieve multiple scheduledReleases */
  scheduledReleases: Array<ScheduledRelease>;
  /** Retrieve multiple scheduledReleases using the Relay connection interface */
  scheduledReleasesConnection: ScheduledReleaseConnection;
  /** Retrieve a single seo */
  seo?: Maybe<Seo>;
  /** Retrieve document version */
  seoVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple seos */
  seos: Array<Seo>;
  /** Retrieve multiple seos using the Relay connection interface */
  seosConnection: SeoConnection;
  shopifyProduct?: Maybe<Shopify_Product>;
  /** Retrieve a single theme */
  theme?: Maybe<Theme>;
  /** Retrieve document version */
  themeVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple themes */
  themes: Array<Theme>;
  /** Retrieve multiple themes using the Relay connection interface */
  themesConnection: ThemeConnection;
  /** Retrieve a single user */
  user?: Maybe<User>;
  /** Retrieve multiple users */
  users: Array<User>;
  /** Retrieve multiple users using the Relay connection interface */
  usersConnection: UserConnection;
};


export type QueryArchiveArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ArchiveWhereUniqueInput;
};


export type QueryArchiveVersionArgs = {
  where: VersionWhereInput;
};


export type QueryArchivesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ArchiveOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<ArchiveWhereInput>;
};


export type QueryArchivesConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ArchiveOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<ArchiveWhereInput>;
};


export type QueryAssetArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: AssetWhereUniqueInput;
};


export type QueryAssetVersionArgs = {
  where: VersionWhereInput;
};


export type QueryAssetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<AssetWhereInput>;
};


export type QueryAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<AssetWhereInput>;
};


export type QueryCollectionArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: CollectionWhereUniqueInput;
};


export type QueryCollectionVersionArgs = {
  where: VersionWhereInput;
};


export type QueryCollectionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<CollectionOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<CollectionWhereInput>;
};


export type QueryCollectionsConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<CollectionOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<CollectionWhereInput>;
};


export type QueryCombinedListingArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: CombinedListingWhereUniqueInput;
};


export type QueryCombinedListingVersionArgs = {
  where: VersionWhereInput;
};


export type QueryCombinedListingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<CombinedListingOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<CombinedListingWhereInput>;
};


export type QueryCombinedListingsConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<CombinedListingOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<CombinedListingWhereInput>;
};


export type QueryCustomizedSectionArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: CustomizedSectionWhereUniqueInput;
};


export type QueryCustomizedSectionVersionArgs = {
  where: VersionWhereInput;
};


export type QueryCustomizedSectionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<CustomizedSectionOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<CustomizedSectionWhereInput>;
};


export type QueryCustomizedSectionsConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<CustomizedSectionOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<CustomizedSectionWhereInput>;
};


export type QueryEditorialArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: EditorialWhereUniqueInput;
};


export type QueryEditorialVersionArgs = {
  where: VersionWhereInput;
};


export type QueryEditorialsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<EditorialOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<EditorialWhereInput>;
};


export type QueryEditorialsConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<EditorialOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<EditorialWhereInput>;
};


export type QueryEntitiesArgs = {
  locales?: InputMaybe<Array<Locale>>;
  where: Array<EntityWhereInput>;
};


export type QueryEventArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: EventWhereUniqueInput;
};


export type QueryEventVersionArgs = {
  where: VersionWhereInput;
};


export type QueryEventsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<EventOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<EventWhereInput>;
};


export type QueryEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<EventOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<EventWhereInput>;
};


export type QueryFormArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: FormWhereUniqueInput;
};


export type QueryFormVersionArgs = {
  where: VersionWhereInput;
};


export type QueryFormsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<FormOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<FormWhereInput>;
};


export type QueryFormsConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<FormOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<FormWhereInput>;
};


export type QueryGalleriesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<GalleryOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<GalleryWhereInput>;
};


export type QueryGalleriesConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<GalleryOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<GalleryWhereInput>;
};


export type QueryGalleryArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: GalleryWhereUniqueInput;
};


export type QueryGalleryVersionArgs = {
  where: VersionWhereInput;
};


export type QueryGridArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: GridWhereUniqueInput;
};


export type QueryGridVersionArgs = {
  where: VersionWhereInput;
};


export type QueryGridsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<GridOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<GridWhereInput>;
};


export type QueryGridsConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<GridOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<GridWhereInput>;
};


export type QueryLayoutArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: LayoutWhereUniqueInput;
};


export type QueryLayoutVersionArgs = {
  where: VersionWhereInput;
};


export type QueryLayoutsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<LayoutOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<LayoutWhereInput>;
};


export type QueryLayoutsConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<LayoutOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<LayoutWhereInput>;
};


export type QueryLockArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: LockWhereUniqueInput;
};


export type QueryLockVersionArgs = {
  where: VersionWhereInput;
};


export type QueryLocksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<LockOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<LockWhereInput>;
};


export type QueryLocksConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<LockOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<LockWhereInput>;
};


export type QueryMixedMediaArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: MixedMediaWhereUniqueInput;
};


export type QueryMixedMediaVersionArgs = {
  where: VersionWhereInput;
};


export type QueryMixedMediasArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<MixedMediaOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<MixedMediaWhereInput>;
};


export type QueryMixedMediasConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<MixedMediaOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<MixedMediaWhereInput>;
};


export type QueryNavigationArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: NavigationWhereUniqueInput;
};


export type QueryNavigationVersionArgs = {
  where: VersionWhereInput;
};


export type QueryNavigationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<NavigationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<NavigationWhereInput>;
};


export type QueryNavigationsConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<NavigationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<NavigationWhereInput>;
};


export type QueryNodeArgs = {
  id: Scalars['ID']['input'];
  locales?: Array<Locale>;
  stage?: Stage;
};


export type QueryPageArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: PageWhereUniqueInput;
};


export type QueryPageVersionArgs = {
  where: VersionWhereInput;
};


export type QueryPagesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<PageWhereInput>;
};


export type QueryPagesConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<PageWhereInput>;
};


export type QueryPeopleArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<PersonOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<PersonWhereInput>;
};


export type QueryPeopleConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<PersonOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<PersonWhereInput>;
};


export type QueryPersonArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: PersonWhereUniqueInput;
};


export type QueryPersonVersionArgs = {
  where: VersionWhereInput;
};


export type QueryProductArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ProductWhereUniqueInput;
};


export type QueryProductVersionArgs = {
  where: VersionWhereInput;
};


export type QueryProductsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ProductOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<ProductWhereInput>;
};


export type QueryProductsConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ProductOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<ProductWhereInput>;
};


export type QueryScheduledOperationArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ScheduledOperationWhereUniqueInput;
};


export type QueryScheduledOperationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ScheduledOperationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type QueryScheduledOperationsConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ScheduledOperationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type QueryScheduledReleaseArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ScheduledReleaseWhereUniqueInput;
};


export type QueryScheduledReleasesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ScheduledReleaseOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<ScheduledReleaseWhereInput>;
};


export type QueryScheduledReleasesConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ScheduledReleaseOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<ScheduledReleaseWhereInput>;
};


export type QuerySeoArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SeoWhereUniqueInput;
};


export type QuerySeoVersionArgs = {
  where: VersionWhereInput;
};


export type QuerySeosArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SeoOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<SeoWhereInput>;
};


export type QuerySeosConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SeoOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<SeoWhereInput>;
};


export type QueryShopifyProductArgs = {
  gid?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryThemeArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ThemeWhereUniqueInput;
};


export type QueryThemeVersionArgs = {
  where: VersionWhereInput;
};


export type QueryThemesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ThemeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<ThemeWhereInput>;
};


export type QueryThemesConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ThemeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<ThemeWhereInput>;
};


export type QueryUserArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: UserWhereUniqueInput;
};


export type QueryUsersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<UserOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<UserWhereInput>;
};


export type QueryUsersConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<UserOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<UserWhereInput>;
};

/** Representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba() */
export type Rgba = {
  __typename?: 'RGBA';
  a: Scalars['RGBATransparency']['output'];
  b: Scalars['RGBAHue']['output'];
  g: Scalars['RGBAHue']['output'];
  r: Scalars['RGBAHue']['output'];
};

/** Input type representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba() */
export type RgbaInput = {
  a: Scalars['RGBATransparency']['input'];
  b: Scalars['RGBAHue']['input'];
  g: Scalars['RGBAHue']['input'];
  r: Scalars['RGBAHue']['input'];
};

/** Custom type representing a rich text value comprising of raw rich text ast, html, markdown and text values */
export type RichText = {
  __typename?: 'RichText';
  /** Returns HTMl representation */
  html: Scalars['String']['output'];
  /** Returns Markdown representation */
  markdown: Scalars['String']['output'];
  /** Returns AST representation */
  raw: Scalars['RichTextAST']['output'];
  /** Returns plain-text contents of RichText */
  text: Scalars['String']['output'];
};

/** Scheduled Operation system model */
export type ScheduledOperation = Entity & Node & {
  __typename?: 'ScheduledOperation';
  affectedDocuments: Array<ScheduledOperationAffectedDocument>;
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Operation description */
  description?: Maybe<Scalars['String']['output']>;
  /** Get the document in other stages */
  documentInStages: Array<ScheduledOperation>;
  /** Operation error message */
  errorMessage?: Maybe<Scalars['String']['output']>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  /** Raw operation payload including all details, this field is subject to change */
  rawPayload: Scalars['Json']['output'];
  /** The release this operation is scheduled for */
  release?: Maybe<ScheduledRelease>;
  /** System stage field */
  stage: Stage;
  /** operation Status */
  status: ScheduledOperationStatus;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


/** Scheduled Operation system model */
export type ScheduledOperationAffectedDocumentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
};


/** Scheduled Operation system model */
export type ScheduledOperationCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Operation system model */
export type ScheduledOperationDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


/** Scheduled Operation system model */
export type ScheduledOperationPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Operation system model */
export type ScheduledOperationReleaseArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Operation system model */
export type ScheduledOperationUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ScheduledOperationAffectedDocument = Archive | Asset | Collection | CombinedListing | CustomizedSection | Editorial | Event | Form | Gallery | Grid | Layout | Lock | MixedMedia | Navigation | Page | Person | Product | Seo | Theme;

export type ScheduledOperationConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ScheduledOperationWhereUniqueInput;
};

/** A connection to a list of items. */
export type ScheduledOperationConnection = {
  __typename?: 'ScheduledOperationConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ScheduledOperationEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ScheduledOperationCreateManyInlineInput = {
  /** Connect multiple existing ScheduledOperation documents */
  connect?: InputMaybe<Array<ScheduledOperationWhereUniqueInput>>;
};

export type ScheduledOperationCreateOneInlineInput = {
  /** Connect one existing ScheduledOperation document */
  connect?: InputMaybe<ScheduledOperationWhereUniqueInput>;
};

/** An edge in a connection. */
export type ScheduledOperationEdge = {
  __typename?: 'ScheduledOperationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: ScheduledOperation;
};

/** Identifies documents */
export type ScheduledOperationManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']['input']>;
  errorMessage?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  errorMessage_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  /** All values containing the given json path. */
  rawPayload_json_path_exists?: InputMaybe<Scalars['String']['input']>;
  /**
   * Recursively tries to find the provided JSON scalar value inside the field.
   * It does use an exact match when comparing values.
   * If you pass `null` as value the filter will be ignored.
   * Note: This filter fails if you try to look for a non scalar JSON value!
   */
  rawPayload_value_recursive?: InputMaybe<Scalars['Json']['input']>;
  release?: InputMaybe<ScheduledReleaseWhereInput>;
  status?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  /** Any other value that exists and is not equal to the given value. */
  status_not?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ScheduledOperationOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  ErrorMessageAsc = 'errorMessage_ASC',
  ErrorMessageDesc = 'errorMessage_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

/** System Scheduled Operation Status */
export enum ScheduledOperationStatus {
  Canceled = 'CANCELED',
  Completed = 'COMPLETED',
  Failed = 'FAILED',
  InProgress = 'IN_PROGRESS',
  Pending = 'PENDING'
}

export type ScheduledOperationUpdateManyInlineInput = {
  /** Connect multiple existing ScheduledOperation documents */
  connect?: InputMaybe<Array<ScheduledOperationConnectInput>>;
  /** Disconnect multiple ScheduledOperation documents */
  disconnect?: InputMaybe<Array<ScheduledOperationWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ScheduledOperation documents */
  set?: InputMaybe<Array<ScheduledOperationWhereUniqueInput>>;
};

export type ScheduledOperationUpdateOneInlineInput = {
  /** Connect existing ScheduledOperation document */
  connect?: InputMaybe<ScheduledOperationWhereUniqueInput>;
  /** Disconnect currently connected ScheduledOperation document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type ScheduledOperationWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']['input']>;
  errorMessage?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  errorMessage_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  /** All values containing the given json path. */
  rawPayload_json_path_exists?: InputMaybe<Scalars['String']['input']>;
  /**
   * Recursively tries to find the provided JSON scalar value inside the field.
   * It does use an exact match when comparing values.
   * If you pass `null` as value the filter will be ignored.
   * Note: This filter fails if you try to look for a non scalar JSON value!
   */
  rawPayload_value_recursive?: InputMaybe<Scalars['Json']['input']>;
  release?: InputMaybe<ScheduledReleaseWhereInput>;
  status?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  /** Any other value that exists and is not equal to the given value. */
  status_not?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** References ScheduledOperation record uniquely */
export type ScheduledOperationWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

/** Scheduled Release system model */
export type ScheduledRelease = Entity & Node & {
  __typename?: 'ScheduledRelease';
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Release description */
  description?: Maybe<Scalars['String']['output']>;
  /** Get the document in other stages */
  documentInStages: Array<ScheduledRelease>;
  /** Release error message */
  errorMessage?: Maybe<Scalars['String']['output']>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  /** Whether scheduled release should be run */
  isActive: Scalars['Boolean']['output'];
  /** Whether scheduled release is implicit */
  isImplicit: Scalars['Boolean']['output'];
  /** Operations to run with this release */
  operations: Array<ScheduledOperation>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  /** Release date and time */
  releaseAt?: Maybe<Scalars['DateTime']['output']>;
  /** System stage field */
  stage: Stage;
  /** Release Status */
  status: ScheduledReleaseStatus;
  /** Release Title */
  title?: Maybe<Scalars['String']['output']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


/** Scheduled Release system model */
export type ScheduledReleaseCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Release system model */
export type ScheduledReleaseDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


/** Scheduled Release system model */
export type ScheduledReleaseOperationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ScheduledOperationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


/** Scheduled Release system model */
export type ScheduledReleasePublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Release system model */
export type ScheduledReleaseUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ScheduledReleaseConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ScheduledReleaseWhereUniqueInput;
};

/** A connection to a list of items. */
export type ScheduledReleaseConnection = {
  __typename?: 'ScheduledReleaseConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ScheduledReleaseEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ScheduledReleaseCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  errorMessage?: InputMaybe<Scalars['String']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type ScheduledReleaseCreateManyInlineInput = {
  /** Connect multiple existing ScheduledRelease documents */
  connect?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Create and connect multiple existing ScheduledRelease documents */
  create?: InputMaybe<Array<ScheduledReleaseCreateInput>>;
};

export type ScheduledReleaseCreateOneInlineInput = {
  /** Connect one existing ScheduledRelease document */
  connect?: InputMaybe<ScheduledReleaseWhereUniqueInput>;
  /** Create and connect one ScheduledRelease document */
  create?: InputMaybe<ScheduledReleaseCreateInput>;
};

/** An edge in a connection. */
export type ScheduledReleaseEdge = {
  __typename?: 'ScheduledReleaseEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: ScheduledRelease;
};

/** Identifies documents */
export type ScheduledReleaseManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']['input']>;
  errorMessage?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  errorMessage_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']['input']>;
  isImplicit?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  isImplicit_not?: InputMaybe<Scalars['Boolean']['input']>;
  operations_every?: InputMaybe<ScheduledOperationWhereInput>;
  operations_none?: InputMaybe<ScheduledOperationWhereInput>;
  operations_some?: InputMaybe<ScheduledOperationWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  releaseAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  releaseAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  releaseAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  releaseAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  releaseAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  releaseAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  releaseAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  status?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  /** Any other value that exists and is not equal to the given value. */
  status_not?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ScheduledReleaseOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  ErrorMessageAsc = 'errorMessage_ASC',
  ErrorMessageDesc = 'errorMessage_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsActiveAsc = 'isActive_ASC',
  IsActiveDesc = 'isActive_DESC',
  IsImplicitAsc = 'isImplicit_ASC',
  IsImplicitDesc = 'isImplicit_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  ReleaseAtAsc = 'releaseAt_ASC',
  ReleaseAtDesc = 'releaseAt_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

/** System Scheduled Release Status */
export enum ScheduledReleaseStatus {
  Completed = 'COMPLETED',
  Failed = 'FAILED',
  InProgress = 'IN_PROGRESS',
  Pending = 'PENDING'
}

export type ScheduledReleaseUpdateInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  errorMessage?: InputMaybe<Scalars['String']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type ScheduledReleaseUpdateManyInlineInput = {
  /** Connect multiple existing ScheduledRelease documents */
  connect?: InputMaybe<Array<ScheduledReleaseConnectInput>>;
  /** Create and connect multiple ScheduledRelease documents */
  create?: InputMaybe<Array<ScheduledReleaseCreateInput>>;
  /** Delete multiple ScheduledRelease documents */
  delete?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Disconnect multiple ScheduledRelease documents */
  disconnect?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ScheduledRelease documents */
  set?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Update multiple ScheduledRelease documents */
  update?: InputMaybe<Array<ScheduledReleaseUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ScheduledRelease documents */
  upsert?: InputMaybe<Array<ScheduledReleaseUpsertWithNestedWhereUniqueInput>>;
};

export type ScheduledReleaseUpdateManyInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  errorMessage?: InputMaybe<Scalars['String']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type ScheduledReleaseUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ScheduledReleaseUpdateManyInput;
  /** Document search */
  where: ScheduledReleaseWhereInput;
};

export type ScheduledReleaseUpdateOneInlineInput = {
  /** Connect existing ScheduledRelease document */
  connect?: InputMaybe<ScheduledReleaseWhereUniqueInput>;
  /** Create and connect one ScheduledRelease document */
  create?: InputMaybe<ScheduledReleaseCreateInput>;
  /** Delete currently connected ScheduledRelease document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected ScheduledRelease document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single ScheduledRelease document */
  update?: InputMaybe<ScheduledReleaseUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ScheduledRelease document */
  upsert?: InputMaybe<ScheduledReleaseUpsertWithNestedWhereUniqueInput>;
};

export type ScheduledReleaseUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ScheduledReleaseUpdateInput;
  /** Unique document search */
  where: ScheduledReleaseWhereUniqueInput;
};

export type ScheduledReleaseUpsertInput = {
  /** Create document if it didn't exist */
  create: ScheduledReleaseCreateInput;
  /** Update document if it exists */
  update: ScheduledReleaseUpdateInput;
};

export type ScheduledReleaseUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ScheduledReleaseUpsertInput;
  /** Unique document search */
  where: ScheduledReleaseWhereUniqueInput;
};

/** Identifies documents */
export type ScheduledReleaseWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']['input']>;
  errorMessage?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  errorMessage_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']['input']>;
  isImplicit?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  isImplicit_not?: InputMaybe<Scalars['Boolean']['input']>;
  operations_every?: InputMaybe<ScheduledOperationWhereInput>;
  operations_none?: InputMaybe<ScheduledOperationWhereInput>;
  operations_some?: InputMaybe<ScheduledOperationWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  releaseAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  releaseAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  releaseAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  releaseAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  releaseAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  releaseAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  releaseAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  status?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  /** Any other value that exists and is not equal to the given value. */
  status_not?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** References ScheduledRelease record uniquely */
export type ScheduledReleaseWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

/**
 * "Single mode": only a single day can be selected
 * "Multiple mode": allow selection of multiple days
 * "Range mode": allow the selection of range of days
 *
 */
export enum SelectionMode {
  Multiple = 'multiple',
  Range = 'range',
  Single = 'single'
}

export type Seo = Entity & Node & {
  __typename?: 'Seo';
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** The ideal length for a meta description is 160 characters. Google generally truncates them to ~ 155–160 characters.  */
  description: Scalars['String']['output'];
  /** Get the document in other stages */
  documentInStages: Array<Seo>;
  editorials: Array<Editorial>;
  /** The title template has the following format `{title} | No Maintenance` */
  hasTitleTemplate?: Maybe<Scalars['Boolean']['output']>;
  /** List of Seo versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  image?: Maybe<Asset>;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Seo>;
  noIndex?: Maybe<Scalars['Boolean']['output']>;
  pages: Array<Page>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The ideal length for a title is no more than 70 characters. If you use the title template, try to keep it under 53 characters. */
  title?: Maybe<Scalars['String']['output']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type SeoCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type SeoCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SeoDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type SeoEditorialsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<EditorialOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<EditorialWhereInput>;
};


export type SeoHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type SeoImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  where?: InputMaybe<AssetSingleRelationWhereInput>;
};


export type SeoLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  locales?: Array<Locale>;
};


export type SeoPagesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PageWhereInput>;
};


export type SeoPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type SeoPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SeoScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type SeoUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type SeoUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type SeoConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SeoWhereUniqueInput;
};

/** A connection to a list of items. */
export type SeoConnection = {
  __typename?: 'SeoConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SeoEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SeoCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** description input for default locale (en) */
  description: Scalars['String']['input'];
  editorials?: InputMaybe<EditorialCreateManyInlineInput>;
  hasTitleTemplate?: InputMaybe<Scalars['Boolean']['input']>;
  image?: InputMaybe<AssetCreateOneInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<SeoCreateLocalizationsInput>;
  noIndex?: InputMaybe<Scalars['Boolean']['input']>;
  pages?: InputMaybe<PageCreateManyInlineInput>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type SeoCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description: Scalars['String']['input'];
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type SeoCreateLocalizationInput = {
  /** Localization input */
  data: SeoCreateLocalizationDataInput;
  locale: Locale;
};

export type SeoCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<SeoCreateLocalizationInput>>;
};

export type SeoCreateManyInlineInput = {
  /** Connect multiple existing Seo documents */
  connect?: InputMaybe<Array<SeoWhereUniqueInput>>;
  /** Create and connect multiple existing Seo documents */
  create?: InputMaybe<Array<SeoCreateInput>>;
};

export type SeoCreateOneInlineInput = {
  /** Connect one existing Seo document */
  connect?: InputMaybe<SeoWhereUniqueInput>;
  /** Create and connect one Seo document */
  create?: InputMaybe<SeoCreateInput>;
};

/** An edge in a connection. */
export type SeoEdge = {
  __typename?: 'SeoEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Seo;
};

/** Identifies documents */
export type SeoManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SeoWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SeoWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SeoWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SeoWhereStageInput>;
  documentInStages_none?: InputMaybe<SeoWhereStageInput>;
  documentInStages_some?: InputMaybe<SeoWhereStageInput>;
  editorials_every?: InputMaybe<EditorialWhereInput>;
  editorials_none?: InputMaybe<EditorialWhereInput>;
  editorials_some?: InputMaybe<EditorialWhereInput>;
  hasTitleTemplate?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  hasTitleTemplate_not?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  image?: InputMaybe<AssetWhereInput>;
  noIndex?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  noIndex_not?: InputMaybe<Scalars['Boolean']['input']>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum SeoOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  HasTitleTemplateAsc = 'hasTitleTemplate_ASC',
  HasTitleTemplateDesc = 'hasTitleTemplate_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NoIndexAsc = 'noIndex_ASC',
  NoIndexDesc = 'noIndex_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type SeoUpdateInput = {
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['String']['input']>;
  editorials?: InputMaybe<EditorialUpdateManyInlineInput>;
  hasTitleTemplate?: InputMaybe<Scalars['Boolean']['input']>;
  image?: InputMaybe<AssetUpdateOneInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<SeoUpdateLocalizationsInput>;
  noIndex?: InputMaybe<Scalars['Boolean']['input']>;
  pages?: InputMaybe<PageUpdateManyInlineInput>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']['input']>;
};

export type SeoUpdateLocalizationDataInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type SeoUpdateLocalizationInput = {
  data: SeoUpdateLocalizationDataInput;
  locale: Locale;
};

export type SeoUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<SeoCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<SeoUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<SeoUpsertLocalizationInput>>;
};

export type SeoUpdateManyInlineInput = {
  /** Connect multiple existing Seo documents */
  connect?: InputMaybe<Array<SeoConnectInput>>;
  /** Create and connect multiple Seo documents */
  create?: InputMaybe<Array<SeoCreateInput>>;
  /** Delete multiple Seo documents */
  delete?: InputMaybe<Array<SeoWhereUniqueInput>>;
  /** Disconnect multiple Seo documents */
  disconnect?: InputMaybe<Array<SeoWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Seo documents */
  set?: InputMaybe<Array<SeoWhereUniqueInput>>;
  /** Update multiple Seo documents */
  update?: InputMaybe<Array<SeoUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Seo documents */
  upsert?: InputMaybe<Array<SeoUpsertWithNestedWhereUniqueInput>>;
};

export type SeoUpdateManyInput = {
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['String']['input']>;
  hasTitleTemplate?: InputMaybe<Scalars['Boolean']['input']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<SeoUpdateManyLocalizationsInput>;
  noIndex?: InputMaybe<Scalars['Boolean']['input']>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']['input']>;
};

export type SeoUpdateManyLocalizationDataInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type SeoUpdateManyLocalizationInput = {
  data: SeoUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type SeoUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<SeoUpdateManyLocalizationInput>>;
};

export type SeoUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SeoUpdateManyInput;
  /** Document search */
  where: SeoWhereInput;
};

export type SeoUpdateOneInlineInput = {
  /** Connect existing Seo document */
  connect?: InputMaybe<SeoWhereUniqueInput>;
  /** Create and connect one Seo document */
  create?: InputMaybe<SeoCreateInput>;
  /** Delete currently connected Seo document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected Seo document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Seo document */
  update?: InputMaybe<SeoUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Seo document */
  upsert?: InputMaybe<SeoUpsertWithNestedWhereUniqueInput>;
};

export type SeoUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SeoUpdateInput;
  /** Unique document search */
  where: SeoWhereUniqueInput;
};

export type SeoUpsertInput = {
  /** Create document if it didn't exist */
  create: SeoCreateInput;
  /** Update document if it exists */
  update: SeoUpdateInput;
};

export type SeoUpsertLocalizationInput = {
  create: SeoCreateLocalizationDataInput;
  locale: Locale;
  update: SeoUpdateLocalizationDataInput;
};

export type SeoUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SeoUpsertInput;
  /** Unique document search */
  where: SeoWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SeoWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type SeoWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SeoWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SeoWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SeoWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']['input']>;
  documentInStages_every?: InputMaybe<SeoWhereStageInput>;
  documentInStages_none?: InputMaybe<SeoWhereStageInput>;
  documentInStages_some?: InputMaybe<SeoWhereStageInput>;
  editorials_every?: InputMaybe<EditorialWhereInput>;
  editorials_none?: InputMaybe<EditorialWhereInput>;
  editorials_some?: InputMaybe<EditorialWhereInput>;
  hasTitleTemplate?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  hasTitleTemplate_not?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  image?: InputMaybe<AssetWhereInput>;
  noIndex?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  noIndex_not?: InputMaybe<Scalars['Boolean']['input']>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SeoWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SeoWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SeoWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SeoWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SeoWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Seo record uniquely */
export type SeoWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

/** A checkout that was abandoned by the customer. */
export type Shopify_AbandonedCheckout = Shopify_Navigable & Shopify_Node & {
  __typename?: 'Shopify_AbandonedCheckout';
  /** The URL for the buyer to recover their checkout. */
  abandonedCheckoutUrl: Scalars['Shopify_URL']['output'];
  /** A default cursor that returns the single next record, sorted ascending by ID. */
  defaultCursor: Scalars['String']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** A list of the line items in this checkout. */
  lineItems: Shopify_AbandonedCheckoutLineItemConnection;
  /** The number of products in the checkout. */
  lineItemsQuantity: Scalars['Int']['output'];
  /** The sum of all items in the checkout, including discounts, shipping, taxes, and tips. */
  totalPriceSet: Shopify_MoneyBag;
};


/** A checkout that was abandoned by the customer. */
export type Shopify_AbandonedCheckoutLineItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** A single line item in an abandoned checkout. */
export type Shopify_AbandonedCheckoutLineItem = Shopify_Node & {
  __typename?: 'Shopify_AbandonedCheckoutLineItem';
  /** A list of extra information that has been added to the line item. */
  customAttributes: Array<Shopify_Attribute>;
  /** Final total price for the entire quantity of this line item, including discounts. */
  discountedTotalPriceSet: Shopify_MoneyBag;
  /** The total price for the entire quantity of this line item, after all discounts are applied, at both the line item and code-based line item level. */
  discountedTotalPriceWithCodeDiscount: Shopify_MoneyBag;
  /** The price of a single variant unit after discounts are applied at the line item level, in shop and presentment currencies. */
  discountedUnitPriceSet: Shopify_MoneyBag;
  /** The price of a single variant unit after all discounts are applied, at both the line item and code-based line item level. */
  discountedUnitPriceWithCodeDiscount: Shopify_MoneyBag;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /**
   * The image associated with the line item's variant or product.
   * NULL if the line item has no product, or if neither the variant nor the product have an image.
   */
  image?: Maybe<Shopify_Image>;
  /** Original total price for the entire quantity of this line item, before discounts. */
  originalTotalPriceSet: Shopify_MoneyBag;
  /** Original price for a single unit of this line item, before discounts. */
  originalUnitPriceSet: Shopify_MoneyBag;
  /**
   * Product for this line item.
   * NULL for custom line items and products that were deleted after checkout began.
   */
  product?: Maybe<Shopify_Product>;
  /** The quantity of the line item. */
  quantity: Scalars['Int']['output'];
  /** SKU for the inventory item associated with the variant, if any. */
  sku?: Maybe<Scalars['String']['output']>;
  /** Title of the line item. Defaults to the product's title. */
  title?: Maybe<Scalars['String']['output']>;
  /**
   * Product variant for this line item.
   * NULL for custom line items and variants that were deleted after checkout began.
   */
  variant?: Maybe<Shopify_ProductVariant>;
  /**
   * Title of the variant for this line item.
   * NULL for custom line items and products that don't have distinct variants.
   */
  variantTitle?: Maybe<Scalars['String']['output']>;
};

/** An auto-generated type for paginating through multiple AbandonedCheckoutLineItems. */
export type Shopify_AbandonedCheckoutLineItemConnection = {
  __typename?: 'Shopify_AbandonedCheckoutLineItemConnection';
  /** A list of edges. */
  edges: Array<Shopify_AbandonedCheckoutLineItemEdge>;
  /** A list of the nodes contained in AbandonedCheckoutLineItemEdge. */
  nodes: Array<Shopify_AbandonedCheckoutLineItem>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one AbandonedCheckoutLineItem and a cursor during pagination. */
export type Shopify_AbandonedCheckoutLineItemEdge = {
  __typename?: 'Shopify_AbandonedCheckoutLineItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of AbandonedCheckoutLineItemEdge. */
  node: Shopify_AbandonedCheckoutLineItem;
};

/** A browse, cart, or checkout that was abandoned by a customer. */
export type Shopify_Abandonment = Shopify_Node & {
  __typename?: 'Shopify_Abandonment';
  /** The abandonment payload for the abandoned checkout. */
  abandonedCheckoutPayload?: Maybe<Shopify_AbandonedCheckout>;
  /** The abandonment type. */
  abandonmentType: Shopify_AbandonmentAbandonmentType;
  /** The app associated with an abandoned checkout. */
  app: Shopify_App;
  /** Permalink to the cart page. */
  cartUrl?: Maybe<Scalars['Shopify_URL']['output']>;
  /** The date and time when the abandonment was created. */
  createdAt: Scalars['DateTime']['output'];
  /** The customer who abandoned this event. */
  customer: Shopify_Customer;
  /** Whether the customer has a draft order since this abandonment has been abandoned. */
  customerHasNoDraftOrderSinceAbandonment: Scalars['Boolean']['output'];
  /** Whether the customer has completed an order since this checkout has been abandoned. */
  customerHasNoOrderSinceAbandonment: Scalars['Boolean']['output'];
  /** The number of days since the last abandonment email was sent to the customer. */
  daysSinceLastAbandonmentEmail: Scalars['Int']['output'];
  /** When the email was sent, if that's the case. */
  emailSentAt?: Maybe<Scalars['DateTime']['output']>;
  /** The email state (e.g., sent or not sent). */
  emailState?: Maybe<Shopify_AbandonmentEmailState>;
  /** The number of hours since the customer has last abandoned a checkout. */
  hoursSinceLastAbandonedCheckout?: Maybe<Scalars['Float']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** Whether the products in abandonment are available. */
  inventoryAvailable: Scalars['Boolean']['output'];
  /** Whether the abandonment event comes from a custom storefront channel. */
  isFromCustomStorefront: Scalars['Boolean']['output'];
  /** Whether the abandonment event comes from the Online Store sales channel. */
  isFromOnlineStore: Scalars['Boolean']['output'];
  /** Whether the abandonment event comes from the Shop app sales channel. */
  isFromShopApp: Scalars['Boolean']['output'];
  /** Whether the abandonment event comes from Shop Pay. */
  isFromShopPay: Scalars['Boolean']['output'];
  /** Whether the customer didn't complete another most significant step since this abandonment. */
  isMostSignificantAbandonment: Scalars['Boolean']['output'];
  /** The date for the latest browse abandonment. */
  lastBrowseAbandonmentDate: Scalars['DateTime']['output'];
  /** The date for the latest cart abandonment. */
  lastCartAbandonmentDate: Scalars['DateTime']['output'];
  /** The date for the latest checkout abandonment. */
  lastCheckoutAbandonmentDate: Scalars['DateTime']['output'];
  /** The most recent step type. */
  mostRecentStep: Shopify_AbandonmentAbandonmentType;
  /** The products added to the cart during the customer abandoned visit. */
  productsAddedToCart: Shopify_CustomerVisitProductInfoConnection;
  /** The products viewed during the customer abandoned visit. */
  productsViewed: Shopify_CustomerVisitProductInfoConnection;
  /** The date and time when the visit started. */
  visitStartedAt?: Maybe<Scalars['DateTime']['output']>;
};


/** A browse, cart, or checkout that was abandoned by a customer. */
export type Shopify_AbandonmentProductsAddedToCartArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** A browse, cart, or checkout that was abandoned by a customer. */
export type Shopify_AbandonmentProductsViewedArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Specifies the abandonment type. */
export enum Shopify_AbandonmentAbandonmentType {
  /** The abandonment event is an abandoned browse. */
  Browse = 'BROWSE',
  /** The abandonment event is an abandoned cart. */
  Cart = 'CART',
  /** The abandonment event is an abandoned checkout. */
  Checkout = 'CHECKOUT'
}

/** Specifies the email state. */
export enum Shopify_AbandonmentEmailState {
  /** The email has not yet been sent. */
  NotSent = 'NOT_SENT',
  /** The email has been scheduled for later delivery. */
  Scheduled = 'SCHEDULED',
  /** The email has been sent. */
  Sent = 'SENT'
}

/** An error that occurs during the execution of `AbandonmentEmailStateUpdate`. */
export type Shopify_AbandonmentEmailStateUpdateUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_AbandonmentEmailStateUpdateUserError';
  /** The error code. */
  code?: Maybe<Shopify_AbandonmentEmailStateUpdateUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `AbandonmentEmailStateUpdateUserError`. */
export enum Shopify_AbandonmentEmailStateUpdateUserErrorCode {
  /** Unable to find an Abandonment for the provided ID. */
  AbandonmentNotFound = 'ABANDONMENT_NOT_FOUND'
}

/** An error that occurs during the execution of `AbandonmentUpdateActivitiesDeliveryStatuses`. */
export type Shopify_AbandonmentUpdateActivitiesDeliveryStatusesUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_AbandonmentUpdateActivitiesDeliveryStatusesUserError';
  /** The error code. */
  code?: Maybe<Shopify_AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `AbandonmentUpdateActivitiesDeliveryStatusesUserError`. */
export enum Shopify_AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCode {
  /** Unable to find an Abandonment for the provided ID. */
  AbandonmentNotFound = 'ABANDONMENT_NOT_FOUND',
  /** Unable to find delivery status info for the provided ID. */
  DeliveryStatusInfoNotFound = 'DELIVERY_STATUS_INFO_NOT_FOUND',
  /** Unable to find a marketing activity for the provided ID. */
  MarketingActivityNotFound = 'MARKETING_ACTIVITY_NOT_FOUND'
}

/** The permission required to access a Shopify Admin API or Storefront API resource for a shop. Merchants grant access scopes that are requested by applications. */
export type Shopify_AccessScope = {
  __typename?: 'Shopify_AccessScope';
  /** A description of the actions that the access scope allows an app to perform. */
  description: Scalars['String']['output'];
  /** A readable string that represents the access scope. The string usually follows the format `{action}_{resource}`. `{action}` is `read` or `write`, and `{resource}` is the resource that the action can be performed on. `{action}` and `{resource}` are separated by an underscore. For example, `read_orders` or `write_products`. */
  handle: Scalars['String']['output'];
};

/** Represents an operation publishing all products to a publication. */
export type Shopify_AddAllProductsOperation = Shopify_Node & Shopify_ResourceOperation & {
  __typename?: 'Shopify_AddAllProductsOperation';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The count of processed rows, summing imported, failed, and skipped rows. */
  processedRowCount?: Maybe<Scalars['Int']['output']>;
  /** Represents a rows objects within this background operation. */
  rowCount?: Maybe<Shopify_RowCount>;
  /** The status of this operation. */
  status: Shopify_ResourceOperationStatus;
};

/** The additional fees that have been applied to the order. */
export type Shopify_AdditionalFee = Shopify_Node & {
  __typename?: 'Shopify_AdditionalFee';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The name of the additional fee. */
  name: Scalars['String']['output'];
  /** The price of the additional fee. */
  price: Shopify_MoneyBag;
  /** A list of taxes charged on the additional fee. */
  taxLines: Array<Shopify_TaxLine>;
};

/** A sale associated with an additional fee charge. */
export type Shopify_AdditionalFeeSale = Shopify_Sale & {
  __typename?: 'Shopify_AdditionalFeeSale';
  /** The type of order action that the sale represents. */
  actionType: Shopify_SaleActionType;
  /** The additional fees for the associated sale. */
  additionalFee: Shopify_SaleAdditionalFee;
  /** The unique ID for the sale. */
  id: Scalars['ID']['output'];
  /** The line type assocated with the sale. */
  lineType: Shopify_SaleLineType;
  /** The number of units either ordered or intended to be returned. */
  quantity?: Maybe<Scalars['Int']['output']>;
  /** All individual taxes associated with the sale. */
  taxes: Array<Shopify_SaleTax>;
  /** The total sale amount after taxes and discounts. */
  totalAmount: Shopify_MoneyBag;
  /** The total discounts allocated to the sale after taxes. */
  totalDiscountAmountAfterTaxes: Shopify_MoneyBag;
  /** The total discounts allocated to the sale before taxes. */
  totalDiscountAmountBeforeTaxes: Shopify_MoneyBag;
  /** The total amount of taxes for the sale. */
  totalTaxAmount: Shopify_MoneyBag;
};

/** A sale associated with an order price adjustment. */
export type Shopify_AdjustmentSale = Shopify_Sale & {
  __typename?: 'Shopify_AdjustmentSale';
  /** The type of order action that the sale represents. */
  actionType: Shopify_SaleActionType;
  /** The unique ID for the sale. */
  id: Scalars['ID']['output'];
  /** The line type assocated with the sale. */
  lineType: Shopify_SaleLineType;
  /** The number of units either ordered or intended to be returned. */
  quantity?: Maybe<Scalars['Int']['output']>;
  /** All individual taxes associated with the sale. */
  taxes: Array<Shopify_SaleTax>;
  /** The total sale amount after taxes and discounts. */
  totalAmount: Shopify_MoneyBag;
  /** The total discounts allocated to the sale after taxes. */
  totalDiscountAmountAfterTaxes: Shopify_MoneyBag;
  /** The total discounts allocated to the sale before taxes. */
  totalDiscountAmountBeforeTaxes: Shopify_MoneyBag;
  /** The total amount of taxes for the sale. */
  totalTaxAmount: Shopify_MoneyBag;
};

/** The set of valid sort keys for the Adjustments query. */
export enum Shopify_AdjustmentsSortKeys {
  /** Sort by the `id` value. */
  Id = 'ID',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE',
  /** Sort by the `time` value. */
  Time = 'TIME'
}

/** Targets all items the cart for a specified discount. */
export type Shopify_AllDiscountItems = {
  __typename?: 'Shopify_AllDiscountItems';
  /** Whether all items are eligible for the discount. This value always returns `true`. */
  allItems: Scalars['Boolean']['output'];
};

/**
 * A version of the API, as defined by [Shopify API versioning](https://shopify.dev/api/usage/versioning).
 * Versions are commonly referred to by their handle (for example, `2021-10`).
 */
export type Shopify_ApiVersion = {
  __typename?: 'Shopify_ApiVersion';
  /** The human-readable name of the version. */
  displayName: Scalars['String']['output'];
  /** The unique identifier of an ApiVersion. All supported API versions have a date-based (YYYY-MM) or `unstable` handle. */
  handle: Scalars['String']['output'];
  /** Whether the version is actively supported by Shopify. Supported API versions are guaranteed to be stable. Unsupported API versions include unstable, release candidate, and end-of-life versions that are marked as unsupported. For more information, refer to [Versioning](https://shopify.dev/api/usage/versioning). */
  supported: Scalars['Boolean']['output'];
};

/** A Shopify application. */
export type Shopify_App = Shopify_Node & {
  __typename?: 'Shopify_App';
  /** A unique application API identifier. */
  apiKey: Scalars['String']['output'];
  /** App store page URL of the app. */
  appStoreAppUrl?: Maybe<Scalars['Shopify_URL']['output']>;
  /** App store page URL of the developer who created the app. */
  appStoreDeveloperUrl?: Maybe<Scalars['Shopify_URL']['output']>;
  /** The access scopes available to the app. */
  availableAccessScopes: Array<Shopify_AccessScope>;
  /** Banner image for the app. */
  banner: Shopify_Image;
  /** Description of the app. */
  description?: Maybe<Scalars['String']['output']>;
  /** The name of the app developer. */
  developerName?: Maybe<Scalars['String']['output']>;
  /** The type of app developer. */
  developerType: Shopify_AppDeveloperType;
  /**
   * Website of the developer who created the app.
   * @deprecated Use `appStoreDeveloperUrl` instead.
   */
  developerUrl: Scalars['Shopify_URL']['output'];
  /** Whether the app uses the Embedded App SDK. */
  embedded: Scalars['Boolean']['output'];
  /** Requirements that must be met before the app can be installed. */
  failedRequirements: Array<Shopify_FailedRequirement>;
  /** A list of app features that are shown in the Shopify App Store listing. */
  features: Array<Scalars['String']['output']>;
  /** Feedback from this app about the store. */
  feedback?: Maybe<Shopify_AppFeedback>;
  /** Handle of the app. */
  handle?: Maybe<Scalars['String']['output']>;
  /** Icon that represents the app. */
  icon: Shopify_Image;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** Webpage where you can install the app. */
  installUrl?: Maybe<Scalars['Shopify_URL']['output']>;
  /**
   * Corresponding AppInstallation for this shop and App.
   * Returns null if the App is not installed.
   */
  installation?: Maybe<Shopify_AppInstallation>;
  /** Whether the app is the [post purchase](https://shopify.dev/apps/checkout/post-purchase) app in use. */
  isPostPurchaseAppInUse: Scalars['Boolean']['output'];
  /**
   * Webpage that the app starts in.
   * @deprecated Use AppInstallation.launchUrl instead
   */
  launchUrl: Scalars['Shopify_URL']['output'];
  /**
   * Menu items for the app, which also appear as submenu items in left navigation sidebar in the Shopify admin.
   * @deprecated Use AppInstallation.navigationItems instead
   */
  navigationItems: Array<Shopify_NavigationItem>;
  /** Whether the app was previously installed on the current shop. */
  previouslyInstalled: Scalars['Boolean']['output'];
  /** Detailed information about the app pricing. */
  pricingDetails?: Maybe<Scalars['String']['output']>;
  /** Summary of the app pricing details. */
  pricingDetailsSummary: Scalars['String']['output'];
  /** Link to app privacy policy. */
  privacyPolicyUrl?: Maybe<Scalars['Shopify_URL']['output']>;
  /** The public category for the app. */
  publicCategory: Shopify_AppPublicCategory;
  /** Whether the app is published to the Shopify App Store. */
  published: Scalars['Boolean']['output'];
  /** The access scopes requested by the app. */
  requestedAccessScopes: Array<Shopify_AccessScope>;
  /** Screenshots of the app. */
  screenshots: Array<Shopify_Image>;
  /** Whether the app was developed by Shopify. */
  shopifyDeveloped: Scalars['Boolean']['output'];
  /** Name of the app. */
  title: Scalars['String']['output'];
  /**
   * Message that appears when the app is uninstalled. For example:
   * By removing this app, you will no longer be able to publish products to MySocialSite or view this app in your Shopify admin. You can re-enable this channel at any time.
   */
  uninstallMessage: Scalars['String']['output'];
  /**
   * Webpage where you can uninstall the app.
   * @deprecated Use AppInstallation.uninstallUrl instead
   */
  uninstallUrl?: Maybe<Scalars['Shopify_URL']['output']>;
  /** The webhook API version for the app. */
  webhookApiVersion: Scalars['String']['output'];
};

/** A catalog that defines the publication associated with an app. */
export type Shopify_AppCatalog = Shopify_Catalog & Shopify_Node & {
  __typename?: 'Shopify_AppCatalog';
  /** The apps associated with the catalog. */
  apps: Shopify_AppConnection;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** Most recent catalog operations. */
  operations: Array<Shopify_ResourceOperation>;
  /** The price list associated with the catalog. */
  priceList?: Maybe<Shopify_PriceList>;
  /** A group of products and collections that's published to a catalog. */
  publication?: Maybe<Shopify_Publication>;
  /** The status of the catalog. */
  status: Shopify_CatalogStatus;
  /** The name of the catalog. */
  title: Scalars['String']['output'];
};


/** A catalog that defines the publication associated with an app. */
export type Shopify_AppCatalogAppsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** An auto-generated type for paginating through multiple Apps. */
export type Shopify_AppConnection = {
  __typename?: 'Shopify_AppConnection';
  /** A list of edges. */
  edges: Array<Shopify_AppEdge>;
  /** A list of the nodes contained in AppEdge. */
  nodes: Array<Shopify_App>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** App credits can be applied by the merchant towards future app purchases, subscriptions, or usage records in Shopify. */
export type Shopify_AppCredit = Shopify_Node & {
  __typename?: 'Shopify_AppCredit';
  /** The amount that can be used towards future app purchases in Shopify. */
  amount: Shopify_MoneyV2;
  /** The date and time when the app credit was created. */
  createdAt: Scalars['DateTime']['output'];
  /** The description of the app credit. */
  description: Scalars['String']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** Whether the app credit is a test transaction. */
  test: Scalars['Boolean']['output'];
};

/** An auto-generated type for paginating through multiple AppCredits. */
export type Shopify_AppCreditConnection = {
  __typename?: 'Shopify_AppCreditConnection';
  /** A list of edges. */
  edges: Array<Shopify_AppCreditEdge>;
  /** A list of the nodes contained in AppCreditEdge. */
  nodes: Array<Shopify_AppCredit>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one AppCredit and a cursor during pagination. */
export type Shopify_AppCreditEdge = {
  __typename?: 'Shopify_AppCreditEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of AppCreditEdge. */
  node: Shopify_AppCredit;
};

/** Possible types of app developer. */
export enum Shopify_AppDeveloperType {
  /** Indicates the app developer works directly for a Merchant. */
  Merchant = 'MERCHANT',
  /** Indicates the app developer is a Partner. */
  Partner = 'PARTNER',
  /** Indicates the app developer is Shopify. */
  Shopify = 'SHOPIFY',
  /** Indicates the app developer is unknown. It is not categorized as any of the other developer types. */
  Unknown = 'UNKNOWN'
}

/** A script that defines a discount type. */
export type Shopify_AppDiscountType = {
  __typename?: 'Shopify_AppDiscountType';
  /** The app providing the app discount type. */
  app: Shopify_App;
  /** The App Bridge details for discount type configuration. */
  appBridge: Shopify_FunctionsAppBridge;
  /** The client ID of the app providing the app discount type. */
  appKey: Scalars['String']['output'];
  /** A description of the app discount type. */
  description?: Maybe<Scalars['String']['output']>;
  /** The class of the app discount type. */
  discountClass: Shopify_DiscountClass;
  /** The ID of the function providing the app discount type. */
  functionId: Scalars['String']['output'];
  /** The target type of the app discount type. Possible values: `SHIPPING_LINE` and `LINE_ITEM`. */
  targetType: Shopify_DiscountApplicationTargetType;
  /** The title of the app discount type. */
  title: Scalars['String']['output'];
};

/** An auto-generated type which holds one App and a cursor during pagination. */
export type Shopify_AppEdge = {
  __typename?: 'Shopify_AppEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of AppEdge. */
  node: Shopify_App;
};

/**
 * Reports the status of shops and their resources and displays this information
 * within Shopify admin. AppFeedback is used to notify merchants about steps they need to take
 * to set up an app on their store.
 */
export type Shopify_AppFeedback = {
  __typename?: 'Shopify_AppFeedback';
  /** The application associated to the feedback. */
  app: Shopify_App;
  /** A link to where merchants can resolve errors. */
  link?: Maybe<Shopify_Link>;
  /** The feedback message presented to the merchant. */
  messages: Array<Shopify_UserError>;
};

/** Represents an installed application on a shop. */
export type Shopify_AppInstallation = Shopify_HasMetafields & Shopify_Node & {
  __typename?: 'Shopify_AppInstallation';
  /** The access scopes granted to the application by a merchant during installation. */
  accessScopes: Array<Shopify_AccessScope>;
  /** The active application subscriptions billed to the shop on a recurring basis. */
  activeSubscriptions: Array<Shopify_AppSubscription>;
  /** All subscriptions created for a shop. */
  allSubscriptions: Shopify_AppSubscriptionConnection;
  /** Application which is installed. */
  app: Shopify_App;
  /**
   * Channel associated with the installed application.
   * @deprecated Use `publication` instead.
   */
  channel?: Maybe<Shopify_Channel>;
  /** Credits that can be used towards future app purchases. */
  credits: Shopify_AppCreditConnection;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The URL to launch the application. */
  launchUrl: Scalars['Shopify_URL']['output'];
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /** One-time purchases to a shop. */
  oneTimePurchases: Shopify_AppPurchaseOneTimeConnection;
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafields: Shopify_PrivateMetafieldConnection;
  /** The publication associated with the installed application. */
  publication?: Maybe<Shopify_Publication>;
  /** The records that track the externally-captured revenue for the app. The records are used for revenue attribution purposes. */
  revenueAttributionRecords: Shopify_AppRevenueAttributionRecordConnection;
  /**
   * Subscriptions charge to a shop on a recurring basis.
   * @deprecated Use `activeSubscriptions` instead.
   */
  subscriptions: Array<Shopify_AppSubscription>;
  /** The URL to uninstall the application. */
  uninstallUrl?: Maybe<Scalars['Shopify_URL']['output']>;
};


/** Represents an installed application on a shop. */
export type Shopify_AppInstallationAllSubscriptionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_AppSubscriptionSortKeys>;
};


/** Represents an installed application on a shop. */
export type Shopify_AppInstallationCreditsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_AppTransactionSortKeys>;
};


/** Represents an installed application on a shop. */
export type Shopify_AppInstallationMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace?: InputMaybe<Scalars['String']['input']>;
};


/** Represents an installed application on a shop. */
export type Shopify_AppInstallationMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents an installed application on a shop. */
export type Shopify_AppInstallationOneTimePurchasesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_AppTransactionSortKeys>;
};


/** Represents an installed application on a shop. */
export type Shopify_AppInstallationPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace: Scalars['String']['input'];
};


/** Represents an installed application on a shop. */
export type Shopify_AppInstallationPrivateMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents an installed application on a shop. */
export type Shopify_AppInstallationRevenueAttributionRecordsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_AppRevenueAttributionRecordSortKeys>;
};

/** The app plan that the merchant is subscribed to. */
export type Shopify_AppPlanV2 = {
  __typename?: 'Shopify_AppPlanV2';
  /** The plan billed to a shop on a recurring basis. */
  pricingDetails: Shopify_AppPricingDetails;
};

/**
 * The information about the price that's charged to a shop every plan period.
 * The concrete type can be `AppRecurringPricing` for recurring billing or `AppUsagePricing` for usage-based billing.
 */
export type Shopify_AppPricingDetails = Shopify_AppRecurringPricing | Shopify_AppUsagePricing;

/** The frequency at which the shop is billed for an app subscription. */
export enum Shopify_AppPricingInterval {
  /** The app subscription bills the shop annually. */
  Annual = 'ANNUAL',
  /** The app subscription bills the shop every 30 days. */
  Every_30Days = 'EVERY_30_DAYS'
}

/** The public-facing category for an app. */
export enum Shopify_AppPublicCategory {
  /** The app's public category is [custom](https://shopify.dev/apps/distribution#capabilities-and-requirements). */
  Custom = 'CUSTOM',
  /** The app's public category is other. An app is in this category if it's not classified under any of the other app types (private, public, or custom). */
  Other = 'OTHER',
  /** The app's public category is [private](https://shopify.dev/apps/distribution#deprecated-app-types). */
  Private = 'PRIVATE',
  /** The app's public category is [public](https://shopify.dev/apps/distribution#capabilities-and-requirements). */
  Public = 'PUBLIC'
}

/** Services and features purchased once by the store. */
export type Shopify_AppPurchase = {
  /** The date and time when the app purchase occurred. */
  createdAt: Scalars['DateTime']['output'];
  /** The name of the app purchase. */
  name: Scalars['String']['output'];
  /** The amount to be charged to the store for the app purchase. */
  price: Shopify_MoneyV2;
  /** The status of the app purchase. */
  status: Shopify_AppPurchaseStatus;
  /** Whether the app purchase is a test transaction. */
  test: Scalars['Boolean']['output'];
};

/** Services and features purchased once by a store. */
export type Shopify_AppPurchaseOneTime = Shopify_AppPurchase & Shopify_Node & {
  __typename?: 'Shopify_AppPurchaseOneTime';
  /** The date and time when the app purchase occurred. */
  createdAt: Scalars['DateTime']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The name of the app purchase. */
  name: Scalars['String']['output'];
  /** The amount to be charged to the store for the app purchase. */
  price: Shopify_MoneyV2;
  /** The status of the app purchase. */
  status: Shopify_AppPurchaseStatus;
  /** Whether the app purchase is a test transaction. */
  test: Scalars['Boolean']['output'];
};

/** An auto-generated type for paginating through multiple AppPurchaseOneTimes. */
export type Shopify_AppPurchaseOneTimeConnection = {
  __typename?: 'Shopify_AppPurchaseOneTimeConnection';
  /** A list of edges. */
  edges: Array<Shopify_AppPurchaseOneTimeEdge>;
  /** A list of the nodes contained in AppPurchaseOneTimeEdge. */
  nodes: Array<Shopify_AppPurchaseOneTime>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one AppPurchaseOneTime and a cursor during pagination. */
export type Shopify_AppPurchaseOneTimeEdge = {
  __typename?: 'Shopify_AppPurchaseOneTimeEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of AppPurchaseOneTimeEdge. */
  node: Shopify_AppPurchaseOneTime;
};

/**
 * The approval status of the app purchase.
 *
 * The merchant is charged for the purchase immediately after approval, and the status changes to `active`.
 * If the payment fails, then the app purchase remains `pending`.
 *
 * Purchases start as `pending` and can change to: `active`, `declined`, `expired`. After a purchase changes, it
 * remains in that final state.
 */
export enum Shopify_AppPurchaseStatus {
  /**
   * The app purchase has been approved by the merchant and is ready to be activated by the app. App purchases created through the GraphQL Admin API are activated upon approval.
   * @deprecated As of API version 2021-01, when a merchant accepts an app purchase, the status immediately changes from `pending` to `active`.
   */
  Accepted = 'ACCEPTED',
  /** The app purchase was approved by the merchant and has been activated by the app. Active app purchases are charged to the merchant and are paid out to the partner. */
  Active = 'ACTIVE',
  /** The app purchase was declined by the merchant. */
  Declined = 'DECLINED',
  /** The app purchase was not accepted within two days of being created. */
  Expired = 'EXPIRED',
  /** The app purchase is pending approval by the merchant. */
  Pending = 'PENDING'
}

/**
 * The pricing information about a subscription app.
 * The object contains an interval (the frequency at which the shop is billed for an app subscription) and
 * a price (the amount to be charged to the subscribing shop at each interval).
 */
export type Shopify_AppRecurringPricing = {
  __typename?: 'Shopify_AppRecurringPricing';
  /** The discount applied to the subscription for a given number of billing intervals. */
  discount?: Maybe<Shopify_AppSubscriptionDiscount>;
  /** The frequency at which the subscribing shop is billed for an app subscription. */
  interval: Shopify_AppPricingInterval;
  /** The amount and currency to be charged to the subscribing shop every billing interval. */
  price: Shopify_MoneyV2;
};

/** Represents app revenue that was captured externally by the partner. */
export type Shopify_AppRevenueAttributionRecord = Shopify_Node & {
  __typename?: 'Shopify_AppRevenueAttributionRecord';
  /** The financial amount captured in this attribution. */
  amount: Shopify_MoneyV2;
  /** The timestamp when the financial amount was captured. */
  capturedAt: Scalars['DateTime']['output'];
  /** The timestamp at which this revenue attribution was issued. */
  createdAt: Scalars['DateTime']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /**
   * The unique value submitted during the creation of the app revenue attribution record.
   * For more information, refer to
   * [Idempotent requests](https://shopify.dev/api/usage/idempotent-requests).
   */
  idempotencyKey: Scalars['String']['output'];
  /** Indicates whether this is a test submission. */
  test: Scalars['Boolean']['output'];
  /** The type of revenue attribution. */
  type: Shopify_AppRevenueAttributionType;
};

/** An auto-generated type for paginating through multiple AppRevenueAttributionRecords. */
export type Shopify_AppRevenueAttributionRecordConnection = {
  __typename?: 'Shopify_AppRevenueAttributionRecordConnection';
  /** A list of edges. */
  edges: Array<Shopify_AppRevenueAttributionRecordEdge>;
  /** A list of the nodes contained in AppRevenueAttributionRecordEdge. */
  nodes: Array<Shopify_AppRevenueAttributionRecord>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one AppRevenueAttributionRecord and a cursor during pagination. */
export type Shopify_AppRevenueAttributionRecordEdge = {
  __typename?: 'Shopify_AppRevenueAttributionRecordEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of AppRevenueAttributionRecordEdge. */
  node: Shopify_AppRevenueAttributionRecord;
};

/** The set of valid sort keys for the AppRevenueAttributionRecord query. */
export enum Shopify_AppRevenueAttributionRecordSortKeys {
  /** Sort by the `created_at` value. */
  CreatedAt = 'CREATED_AT',
  /** Sort by the `id` value. */
  Id = 'ID',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE'
}

/** Represents the billing types of revenue attribution. */
export enum Shopify_AppRevenueAttributionType {
  /** App purchase related revenue collection. */
  ApplicationPurchase = 'APPLICATION_PURCHASE',
  /** App subscription revenue collection. */
  ApplicationSubscription = 'APPLICATION_SUBSCRIPTION',
  /** App usage-based revenue collection. */
  ApplicationUsage = 'APPLICATION_USAGE',
  /** Other app revenue collection type. */
  Other = 'OTHER'
}

/** Provides users access to services and/or features for a duration of time. */
export type Shopify_AppSubscription = Shopify_Node & {
  __typename?: 'Shopify_AppSubscription';
  /** The date and time when the app subscription was created. */
  createdAt: Scalars['DateTime']['output'];
  /** The date and time when the current app subscription period ends. Returns `null` if the subscription isn't active. */
  currentPeriodEnd?: Maybe<Scalars['DateTime']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The plans attached to the app subscription. */
  lineItems: Array<Shopify_AppSubscriptionLineItem>;
  /** The name of the app subscription. */
  name: Scalars['String']['output'];
  /** The URL that the merchant is redirected to after approving the app subscription. */
  returnUrl: Scalars['Shopify_URL']['output'];
  /** The status of the app subscription. */
  status: Shopify_AppSubscriptionStatus;
  /** Specifies whether the app subscription is a test transaction. */
  test: Scalars['Boolean']['output'];
  /** The number of free trial days, starting at the subscription's creation date, by which billing is delayed. */
  trialDays: Scalars['Int']['output'];
};

/** An auto-generated type for paginating through multiple AppSubscriptions. */
export type Shopify_AppSubscriptionConnection = {
  __typename?: 'Shopify_AppSubscriptionConnection';
  /** A list of edges. */
  edges: Array<Shopify_AppSubscriptionEdge>;
  /** A list of the nodes contained in AppSubscriptionEdge. */
  nodes: Array<Shopify_AppSubscription>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** Discount applied to the recurring pricing portion of a subscription. */
export type Shopify_AppSubscriptionDiscount = {
  __typename?: 'Shopify_AppSubscriptionDiscount';
  /**
   * The total number of billing intervals to which the discount will be applied.
   * The discount will be applied to an indefinite number of billing intervals if this value is blank.
   */
  durationLimitInIntervals?: Maybe<Scalars['Int']['output']>;
  /** The price of the subscription after the discount is applied. */
  priceAfterDiscount: Shopify_MoneyV2;
  /** The remaining number of billing intervals to which the discount will be applied. */
  remainingDurationInIntervals?: Maybe<Scalars['Int']['output']>;
  /** The value of the discount applied every billing interval. */
  value: Shopify_AppSubscriptionDiscountValue;
};

/** The fixed amount value of a discount. */
export type Shopify_AppSubscriptionDiscountAmount = {
  __typename?: 'Shopify_AppSubscriptionDiscountAmount';
  /** The fixed amount value of a discount. */
  amount: Shopify_MoneyV2;
};

/** The percentage value of a discount. */
export type Shopify_AppSubscriptionDiscountPercentage = {
  __typename?: 'Shopify_AppSubscriptionDiscountPercentage';
  /** The percentage value of a discount. */
  percentage: Scalars['Float']['output'];
};

/** The value of the discount. */
export type Shopify_AppSubscriptionDiscountValue = Shopify_AppSubscriptionDiscountAmount | Shopify_AppSubscriptionDiscountPercentage;

/** An auto-generated type which holds one AppSubscription and a cursor during pagination. */
export type Shopify_AppSubscriptionEdge = {
  __typename?: 'Shopify_AppSubscriptionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of AppSubscriptionEdge. */
  node: Shopify_AppSubscription;
};

/** The plan attached to an app subscription. */
export type Shopify_AppSubscriptionLineItem = {
  __typename?: 'Shopify_AppSubscriptionLineItem';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The pricing model for the app subscription. */
  plan: Shopify_AppPlanV2;
  /** A list of the store's usage records for a usage pricing plan. */
  usageRecords: Shopify_AppUsageRecordConnection;
};


/** The plan attached to an app subscription. */
export type Shopify_AppSubscriptionLineItemUsageRecordsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_AppUsageRecordSortKeys>;
};

/** The set of valid sort keys for the AppSubscription query. */
export enum Shopify_AppSubscriptionSortKeys {
  /** Sort by the `created_at` value. */
  CreatedAt = 'CREATED_AT',
  /** Sort by the `id` value. */
  Id = 'ID',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE'
}

/** The status of the app subscription. */
export enum Shopify_AppSubscriptionStatus {
  /**
   * The app subscription has been approved by the merchant and is ready to be activated by the app.
   * @deprecated As of API version 2021-01, when a merchant approves an app subscription, the status immediately transitions from `pending` to `active`.
   */
  Accepted = 'ACCEPTED',
  /** The app subscription has been approved by the merchant. Active app subscriptions are billed to the shop. After payment, partners receive payouts. */
  Active = 'ACTIVE',
  /** The app subscription was cancelled by the app. This could be caused by the app being uninstalled, a new app subscription being activated, or a direct cancellation by the app. This is a terminal state. */
  Cancelled = 'CANCELLED',
  /** The app subscription was declined by the merchant. This is a terminal state. */
  Declined = 'DECLINED',
  /** The app subscription wasn't approved by the merchant within two days of being created. This is a terminal state. */
  Expired = 'EXPIRED',
  /** The app subscription is on hold due to non-payment. The subscription re-activates after payments resume. */
  Frozen = 'FROZEN',
  /** The app subscription is pending approval by the merchant. */
  Pending = 'PENDING'
}

/** An error that occurs during the execution of `AppSubscriptionTrialExtend`. */
export type Shopify_AppSubscriptionTrialExtendUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_AppSubscriptionTrialExtendUserError';
  /** The error code. */
  code?: Maybe<Shopify_AppSubscriptionTrialExtendUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `AppSubscriptionTrialExtendUserError`. */
export enum Shopify_AppSubscriptionTrialExtendUserErrorCode {
  /** The app subscription isn't active. */
  SubscriptionNotActive = 'SUBSCRIPTION_NOT_ACTIVE',
  /** The app subscription wasn't found. */
  SubscriptionNotFound = 'SUBSCRIPTION_NOT_FOUND',
  /** The trial isn't active. */
  TrialNotActive = 'TRIAL_NOT_ACTIVE'
}

/** The set of valid sort keys for the AppTransaction query. */
export enum Shopify_AppTransactionSortKeys {
  /** Sort by the `created_at` value. */
  CreatedAt = 'CREATED_AT',
  /** Sort by the `id` value. */
  Id = 'ID',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE'
}

/**
 * Defines a usage pricing model for the app subscription.
 * These charges are variable based on how much the merchant uses the app.
 */
export type Shopify_AppUsagePricing = {
  __typename?: 'Shopify_AppUsagePricing';
  /** The total usage records for interval. */
  balanceUsed: Shopify_MoneyV2;
  /**
   * The capped amount prevents the merchant from being charged for any usage over that amount during a billing period.
   * This prevents billing from exceeding a maximum threshold over the duration of the billing period.
   * For the merchant to continue using the app after exceeding a capped amount, they would need to agree to a new usage charge.
   */
  cappedAmount: Shopify_MoneyV2;
  /** The frequency with which the app usage records are billed. */
  interval: Shopify_AppPricingInterval;
  /**
   * The terms and conditions for app usage pricing.
   * Must be present in order to create usage charges.
   * The terms are presented to the merchant when they approve an app's usage charges.
   */
  terms: Scalars['String']['output'];
};

/** Store usage for app subscriptions with usage pricing. */
export type Shopify_AppUsageRecord = Shopify_Node & {
  __typename?: 'Shopify_AppUsageRecord';
  /** The date and time when the usage record was created. */
  createdAt: Scalars['DateTime']['output'];
  /** The description of the app usage record. */
  description: Scalars['String']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** A unique key generated by the client to avoid duplicate charges. */
  idempotencyKey?: Maybe<Scalars['String']['output']>;
  /** The price of the usage record. */
  price: Shopify_MoneyV2;
  /** Defines the usage pricing plan the merchant is subscribed to. */
  subscriptionLineItem: Shopify_AppSubscriptionLineItem;
};

/** An auto-generated type for paginating through multiple AppUsageRecords. */
export type Shopify_AppUsageRecordConnection = {
  __typename?: 'Shopify_AppUsageRecordConnection';
  /** A list of edges. */
  edges: Array<Shopify_AppUsageRecordEdge>;
  /** A list of the nodes contained in AppUsageRecordEdge. */
  nodes: Array<Shopify_AppUsageRecord>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one AppUsageRecord and a cursor during pagination. */
export type Shopify_AppUsageRecordEdge = {
  __typename?: 'Shopify_AppUsageRecordEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of AppUsageRecordEdge. */
  node: Shopify_AppUsageRecord;
};

/** The set of valid sort keys for the AppUsageRecord query. */
export enum Shopify_AppUsageRecordSortKeys {
  /** Sort by the `created_at` value. */
  CreatedAt = 'CREATED_AT',
  /** Sort by the `id` value. */
  Id = 'ID',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE'
}

/** Represents a generic custom attribute. */
export type Shopify_Attribute = {
  __typename?: 'Shopify_Attribute';
  /** Key or name of the attribute. */
  key: Scalars['String']['output'];
  /** Value of the attribute. */
  value?: Maybe<Scalars['String']['output']>;
};

/** Automatic discount applications capture the intentions of a discount that was automatically applied. */
export type Shopify_AutomaticDiscountApplication = Shopify_DiscountApplication & {
  __typename?: 'Shopify_AutomaticDiscountApplication';
  /** The method by which the discount's value is applied to its entitled items. */
  allocationMethod: Shopify_DiscountApplicationAllocationMethod;
  /**
   * An ordered index that can be used to identify the discount application and indicate the precedence
   * of the discount application for calculations.
   */
  index: Scalars['Int']['output'];
  /** How the discount amount is distributed on the discounted lines. */
  targetSelection: Shopify_DiscountApplicationTargetSelection;
  /** Whether the discount is applied on line items or shipping lines. */
  targetType: Shopify_DiscountApplicationTargetType;
  /** The title of the discount application. */
  title: Scalars['String']['output'];
  /** The value of the discount application. */
  value: Shopify_PricingValue;
};

/** Represents an object containing all information for channels available to a shop. */
export type Shopify_AvailableChannelDefinitionsByChannel = {
  __typename?: 'Shopify_AvailableChannelDefinitionsByChannel';
  /** The channel definitions for channels installed on a shop. */
  channelDefinitions: Array<Shopify_ChannelDefinition>;
  /** The name of the channel. */
  channelName: Scalars['String']['output'];
};

/** The possible types for a badge. */
export enum Shopify_BadgeType {
  /** This badge has type `attention`. */
  Attention = 'ATTENTION',
  /** This badge has type `default`. */
  Default = 'DEFAULT',
  /** This badge has type `info`. */
  Info = 'INFO',
  /** This badge has type `success`. */
  Success = 'SUCCESS',
  /** This badge has type `warning`. */
  Warning = 'WARNING'
}

/** The set of valid sort keys for the BalanceTransaction query. */
export enum Shopify_BalanceTransactionSortKeys {
  /** Sort by the `amount` value. */
  Amount = 'AMOUNT',
  /** Sort by the `fee` value. */
  Fee = 'FEE',
  /** Sort by the `id` value. */
  Id = 'ID',
  /** Sort by the `net` value. */
  Net = 'NET',
  /** Sort by the `order_name` value. */
  OrderName = 'ORDER_NAME',
  /** Sort by the `payment_method_name` value. */
  PaymentMethodName = 'PAYMENT_METHOD_NAME',
  /** Sort by the `payout_date` value. */
  PayoutDate = 'PAYOUT_DATE',
  /** Sort by the `payout_status` value. */
  PayoutStatus = 'PAYOUT_STATUS',
  /** Sort by the `processed_at` value. */
  ProcessedAt = 'PROCESSED_AT',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE',
  /** Sort by the `transaction_type` value. */
  TransactionType = 'TRANSACTION_TYPE'
}

/** Generic payment details that are related to a transaction. */
export type Shopify_BasePaymentDetails = {
  /** The name of payment method used by the buyer. */
  paymentMethodName?: Maybe<Scalars['String']['output']>;
};

/**
 * Basic events chronicle resource activities such as the creation of an article, the fulfillment of an order, or
 * the addition of a product.
 */
export type Shopify_BasicEvent = Shopify_Event & Shopify_Node & {
  __typename?: 'Shopify_BasicEvent';
  /** The name of the app that created the event. */
  appTitle?: Maybe<Scalars['String']['output']>;
  /** Whether the event was created by an app. */
  attributeToApp: Scalars['Boolean']['output'];
  /** Whether the event was caused by an admin user. */
  attributeToUser: Scalars['Boolean']['output'];
  /** The date and time when the event was created. */
  createdAt: Scalars['DateTime']['output'];
  /** Whether the event is critical. */
  criticalAlert: Scalars['Boolean']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** Human readable text that describes the event. */
  message: Scalars['Shopify_FormattedString']['output'];
};

/** Represents an error that happens during the execution of a billing attempt mutation. */
export type Shopify_BillingAttemptUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_BillingAttemptUserError';
  /** The error code. */
  code?: Maybe<Shopify_BillingAttemptUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `BillingAttemptUserError`. */
export enum Shopify_BillingAttemptUserErrorCode {
  /** The input value is blank. */
  Blank = 'BLANK',
  /** Subscription contract does not exist. */
  ContractNotFound = 'CONTRACT_NOT_FOUND',
  /** Subscription contract cannot be billed once terminated. */
  ContractTerminated = 'CONTRACT_TERMINATED',
  /** Subscription contract is under review. */
  ContractUnderReview = 'CONTRACT_UNDER_REVIEW',
  /** Billing cycle selector cannot select billing cycle outside of index range. */
  CycleIndexOutOfRange = 'CYCLE_INDEX_OUT_OF_RANGE',
  /** Billing cycle selector cannot select billing cycle outside of start date range. */
  CycleStartDateOutOfRange = 'CYCLE_START_DATE_OUT_OF_RANGE',
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** Origin time cannot be before the contract creation time. */
  OriginTimeBeforeContractCreation = 'ORIGIN_TIME_BEFORE_CONTRACT_CREATION',
  /** Origin time needs to be within the selected billing cycle's start and end at date. */
  OriginTimeOutOfRange = 'ORIGIN_TIME_OUT_OF_RANGE',
  /** Billing cycle selector cannot select upcoming billing cycle past limit. */
  UpcomingCycleLimitExceeded = 'UPCOMING_CYCLE_LIMIT_EXCEEDED'
}

/** Possible error codes that can be returned by `BulkMutationUserError`. */
export enum Shopify_BulkMutationErrorCode {
  /** There was a problem reading the JSONL file. This error might be intermittent, so you can try performing the same query again. */
  InternalFileServerError = 'INTERNAL_FILE_SERVER_ERROR',
  /** The operation did not run because the mutation is invalid. Check your mutation syntax and try again. */
  InvalidMutation = 'INVALID_MUTATION',
  /** The JSONL file submitted via the `stagedUploadsCreate` mutation is invalid. Update the file and try again. */
  InvalidStagedUploadFile = 'INVALID_STAGED_UPLOAD_FILE',
  /** The JSONL file could not be found. Try [uploading the file](https://shopify.dev/api/usage/bulk-operations/imports#generate-the-uploaded-url-and-parameters) again, and check that you've entered the URL correctly for the `stagedUploadPath` mutation argument. */
  NoSuchFile = 'NO_SUCH_FILE',
  /** The operation did not run because another bulk mutation is already running. [Wait for the operation to finish](https://shopify.dev/api/usage/bulk-operations/imports#wait-for-the-operation-to-finish) before retrying this operation. */
  OperationInProgress = 'OPERATION_IN_PROGRESS'
}

/** Represents an error that happens during execution of a bulk mutation. */
export type Shopify_BulkMutationUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_BulkMutationUserError';
  /** The error code. */
  code?: Maybe<Shopify_BulkMutationErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/**
 * An asynchronous long-running operation to fetch data in bulk or to bulk import data.
 *
 * Bulk operations are created using the `bulkOperationRunQuery` or `bulkOperationRunMutation` mutation. After
 * they are created, clients should poll the `status` field for updates. When `COMPLETED`, the `url` field contains
 * a link to the data in [JSONL](http://jsonlines.org/) format.
 *
 * Refer to the [bulk operations guide](https://shopify.dev/api/usage/bulk-operations/imports) for more details.
 */
export type Shopify_BulkOperation = Shopify_Node & {
  __typename?: 'Shopify_BulkOperation';
  /** When the bulk operation was successfully completed. */
  completedAt?: Maybe<Scalars['DateTime']['output']>;
  /** When the bulk operation was created. */
  createdAt: Scalars['DateTime']['output'];
  /** Error code for failed operations. */
  errorCode?: Maybe<Shopify_BulkOperationErrorCode>;
  /** File size in bytes of the file in the `url` field. */
  fileSize?: Maybe<Scalars['Shopify_UnsignedInt64']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /**
   * A running count of all the objects processed.
   * For example, when fetching all the products and their variants, this field counts both products and variants.
   * This field can be used to track operation progress.
   */
  objectCount: Scalars['Shopify_UnsignedInt64']['output'];
  /**
   * The URL that points to the partial or incomplete response data (in [JSONL](http://jsonlines.org/) format) that was returned by a failed operation.
   * The URL expires 7 days after the operation fails. Returns `null` when there's no data available.
   */
  partialDataUrl?: Maybe<Scalars['Shopify_URL']['output']>;
  /** GraphQL query document specified in `bulkOperationRunQuery`. */
  query: Scalars['String']['output'];
  /**
   * A running count of all the objects that are processed at the root of the query.
   * For example, when fetching all the products and their variants, this field only counts products.
   * This field can be used to track operation progress.
   */
  rootObjectCount: Scalars['Shopify_UnsignedInt64']['output'];
  /** Status of the bulk operation. */
  status: Shopify_BulkOperationStatus;
  /** The bulk operation's type. */
  type: Shopify_BulkOperationType;
  /**
   * The URL that points to the response data in [JSONL](http://jsonlines.org/) format.
   * The URL expires 7 days after the operation completes.
   */
  url?: Maybe<Scalars['Shopify_URL']['output']>;
};

/** Error codes for failed bulk operations. */
export enum Shopify_BulkOperationErrorCode {
  /**
   * The provided operation `query` returned access denied due to missing
   * [access scopes](https://shopify.dev/api/usage/access-scopes).
   * Review the requested object permissions and execute the query as a normal non-bulk GraphQL request to see more details.
   */
  AccessDenied = 'ACCESS_DENIED',
  /**
   * The operation resulted in partial or incomplete data due to internal server errors during execution.
   * These errors might be intermittent, so you can try performing the same query again.
   */
  InternalServerError = 'INTERNAL_SERVER_ERROR',
  /**
   * The operation resulted in partial or incomplete data due to query timeouts during execution.
   * In some cases, timeouts can be avoided by modifying your `query` to select fewer fields.
   */
  Timeout = 'TIMEOUT'
}

/** The valid values for the status of a bulk operation. */
export enum Shopify_BulkOperationStatus {
  /** The bulk operation has been canceled. */
  Canceled = 'CANCELED',
  /**
   * Cancelation has been initiated on the bulk operation. There may be a short delay from when a cancelation
   * starts until the operation is actually canceled.
   */
  Canceling = 'CANCELING',
  /** The bulk operation has successfully completed. */
  Completed = 'COMPLETED',
  /** The bulk operation has been created. */
  Created = 'CREATED',
  /** The bulk operation URL has expired. */
  Expired = 'EXPIRED',
  /**
   * The bulk operation has failed. For information on why the operation failed, use
   * [BulkOperation.errorCode](https://shopify.dev/api/admin-graphql/latest/enums/bulkoperationerrorcode).
   */
  Failed = 'FAILED',
  /** The bulk operation is runnning. */
  Running = 'RUNNING'
}

/** The valid values for the bulk operation's type. */
export enum Shopify_BulkOperationType {
  /** The bulk operation is a mutation. */
  Mutation = 'MUTATION',
  /** The bulk operation is a query. */
  Query = 'QUERY'
}

/** An error that occurs during the execution of `BulkProductResourceFeedbackCreate`. */
export type Shopify_BulkProductResourceFeedbackCreateUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_BulkProductResourceFeedbackCreateUserError';
  /** The error code. */
  code?: Maybe<Shopify_BulkProductResourceFeedbackCreateUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `BulkProductResourceFeedbackCreateUserError`. */
export enum Shopify_BulkProductResourceFeedbackCreateUserErrorCode {
  /** The input value is blank. */
  Blank = 'BLANK',
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** The input value should be less than or equal to the maximum value allowed. */
  LessThanOrEqualTo = 'LESS_THAN_OR_EQUAL_TO',
  /** The operation was attempted on too many feedback objects. The maximum number of feedback objects that you can operate on is 50. */
  MaximumFeedbackLimitExceeded = 'MAXIMUM_FEEDBACK_LIMIT_EXCEEDED',
  /** The feedback for a later version of this resource was already accepted. */
  OutdatedFeedback = 'OUTDATED_FEEDBACK',
  /** The input value needs to be blank. */
  Present = 'PRESENT',
  /** The product wasn't found or isn't available to the channel. */
  ProductNotFound = 'PRODUCT_NOT_FOUND'
}

/** Represents the Bundles feature configuration for the shop. */
export type Shopify_BundlesFeature = {
  __typename?: 'Shopify_BundlesFeature';
  /** Whether a shop is configured properly to sell bundles. */
  eligibleForBundles: Scalars['Boolean']['output'];
  /** The reason why a shop is not eligible for bundles. */
  ineligibilityReason?: Maybe<Scalars['String']['output']>;
  /** Whether a shop has any fixed bundle products or has a cartTransform function installed. */
  sellsBundles: Scalars['Boolean']['output'];
};

/** Possible error codes that can be returned by `BusinessCustomerUserError`. */
export enum Shopify_BusinessCustomerErrorCode {
  /** The input value is blank. */
  Blank = 'BLANK',
  /** Deleting the resource failed. */
  FailedToDelete = 'FAILED_TO_DELETE',
  /** An internal error occurred. */
  InternalError = 'INTERNAL_ERROR',
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** The input is invalid. */
  InvalidInput = 'INVALID_INPUT',
  /** The number of resources exceeded the limit. */
  LimitReached = 'LIMIT_REACHED',
  /** The input is empty. */
  NoInput = 'NO_INPUT',
  /** Missing a required field. */
  Required = 'REQUIRED',
  /** The resource wasn't found. */
  ResourceNotFound = 'RESOURCE_NOT_FOUND',
  /** The input value is already taken. */
  Taken = 'TAKEN',
  /** The field value is too long. */
  TooLong = 'TOO_LONG',
  /** Unexpected type. */
  UnexpectedType = 'UNEXPECTED_TYPE'
}

/** An error that happens during the execution of a business customer mutation. */
export type Shopify_BusinessCustomerUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_BusinessCustomerUserError';
  /** The error code. */
  code?: Maybe<Shopify_BusinessCustomerErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Settings describing the behavior of checkout for a B2B buyer. */
export type Shopify_BuyerExperienceConfiguration = {
  __typename?: 'Shopify_BuyerExperienceConfiguration';
  /** Whether to checkout to draft order for merchant review. */
  checkoutToDraft: Scalars['Boolean']['output'];
  /** Whether to allow customers to use editable shipping addresses. */
  editableShippingAddress: Scalars['Boolean']['output'];
  /**
   * Whether a buyer must pay at checkout or they can also choose to pay
   * later using net terms.
   */
  payNowOnly: Scalars['Boolean']['output'];
  /** Represents the merchant configured payment terms. */
  paymentTermsTemplate?: Maybe<Shopify_PaymentTermsTemplate>;
};

/** A discount that is automatically applied to an order that is being edited. */
export type Shopify_CalculatedAutomaticDiscountApplication = Shopify_CalculatedDiscountApplication & {
  __typename?: 'Shopify_CalculatedAutomaticDiscountApplication';
  /** The method by which the discount's value is allocated to its entitled items. */
  allocationMethod: Shopify_DiscountApplicationAllocationMethod;
  /** The level at which the discount was applied. */
  appliedTo: Shopify_DiscountApplicationLevel;
  /** The description of discount application. Indicates the reason why the discount was applied. */
  description?: Maybe<Scalars['String']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** How the discount amount is distributed on the discounted lines. */
  targetSelection: Shopify_DiscountApplicationTargetSelection;
  /** Whether the discount is applied on line items or shipping lines. */
  targetType: Shopify_DiscountApplicationTargetType;
  /** The value of the discount application. */
  value: Shopify_PricingValue;
};

/** An amount discounting the line that has been allocated by an associated discount application. */
export type Shopify_CalculatedDiscountAllocation = {
  __typename?: 'Shopify_CalculatedDiscountAllocation';
  /** The money amount that's allocated by the discount application in shop and presentment currencies. */
  allocatedAmountSet: Shopify_MoneyBag;
  /** The discount that the allocated amount originated from. */
  discountApplication: Shopify_CalculatedDiscountApplication;
};

/** A [discount application](https://shopify.dev/api/admin-graphql/latest/interfaces/discountapplication) involved in order editing that might be newly added or have new changes applied. */
export type Shopify_CalculatedDiscountApplication = {
  /** The method by which the discount's value is allocated to its entitled items. */
  allocationMethod: Shopify_DiscountApplicationAllocationMethod;
  /** The level at which the discount was applied. */
  appliedTo: Shopify_DiscountApplicationLevel;
  /** The description of discount application. Indicates the reason why the discount was applied. */
  description?: Maybe<Scalars['String']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** How the discount amount is distributed on the discounted lines. */
  targetSelection: Shopify_DiscountApplicationTargetSelection;
  /** Whether the discount is applied on line items or shipping lines. */
  targetType: Shopify_DiscountApplicationTargetType;
  /** The value of the discount application. */
  value: Shopify_PricingValue;
};

/** An auto-generated type for paginating through multiple CalculatedDiscountApplications. */
export type Shopify_CalculatedDiscountApplicationConnection = {
  __typename?: 'Shopify_CalculatedDiscountApplicationConnection';
  /** A list of edges. */
  edges: Array<Shopify_CalculatedDiscountApplicationEdge>;
  /** A list of the nodes contained in CalculatedDiscountApplicationEdge. */
  nodes: Array<Shopify_CalculatedDiscountApplication>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one CalculatedDiscountApplication and a cursor during pagination. */
export type Shopify_CalculatedDiscountApplicationEdge = {
  __typename?: 'Shopify_CalculatedDiscountApplicationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of CalculatedDiscountApplicationEdge. */
  node: Shopify_CalculatedDiscountApplication;
};

/** A discount code that is applied to an order that is being edited. */
export type Shopify_CalculatedDiscountCodeApplication = Shopify_CalculatedDiscountApplication & {
  __typename?: 'Shopify_CalculatedDiscountCodeApplication';
  /** The method by which the discount's value is allocated to its entitled items. */
  allocationMethod: Shopify_DiscountApplicationAllocationMethod;
  /** The level at which the discount was applied. */
  appliedTo: Shopify_DiscountApplicationLevel;
  /** The string identifying the discount code that was used at the time of application. */
  code: Scalars['String']['output'];
  /** The description of discount application. Indicates the reason why the discount was applied. */
  description?: Maybe<Scalars['String']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** How the discount amount is distributed on the discounted lines. */
  targetSelection: Shopify_DiscountApplicationTargetSelection;
  /** Whether the discount is applied on line items or shipping lines. */
  targetType: Shopify_DiscountApplicationTargetType;
  /** The value of the discount application. */
  value: Shopify_PricingValue;
};

/** A line item involved in order editing that may be newly added or have new changes applied. */
export type Shopify_CalculatedLineItem = {
  __typename?: 'Shopify_CalculatedLineItem';
  /** The discounts that have been allocated onto the line item by discount applications. */
  calculatedDiscountAllocations: Array<Shopify_CalculatedDiscountAllocation>;
  /** A list of attributes that represent custom features or special requests. */
  customAttributes: Array<Shopify_Attribute>;
  /**
   * The discounts that have been allocated onto the line item by discount applications.
   * @deprecated Use `calculatedDiscountAllocations` instead.
   */
  discountAllocations: Array<Shopify_DiscountAllocation>;
  /** The price of a single quantity of the line item with line item discounts applied, in shop and presentment currencies. Discounts applied to the entire order aren't included in this price. */
  discountedUnitPriceSet: Shopify_MoneyBag;
  /** The total number of items that can be edited. */
  editableQuantity: Scalars['Int']['output'];
  /** The editable quantity prior to any changes made in the current edit. */
  editableQuantityBeforeChanges: Scalars['Int']['output'];
  /** The total price of editable lines in shop and presentment currencies. */
  editableSubtotalSet: Shopify_MoneyBag;
  /** Whether the calculated line item has a staged discount. */
  hasStagedLineItemDiscount: Scalars['Boolean']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The image object associated to the line item's variant. */
  image?: Maybe<Shopify_Image>;
  /** The variant unit price in shop and presentment currencies, without any discounts applied. */
  originalUnitPriceSet: Shopify_MoneyBag;
  /** The total number of items. */
  quantity: Scalars['Int']['output'];
  /** Whether the line item can be restocked or not. */
  restockable: Scalars['Boolean']['output'];
  /** Whether the changes on the line item will result in a restock. */
  restocking: Scalars['Boolean']['output'];
  /** The variant SKU number. */
  sku?: Maybe<Scalars['String']['output']>;
  /** A list of changes that affect this line item. */
  stagedChanges: Array<Shopify_OrderStagedChange>;
  /** The title of the product. */
  title: Scalars['String']['output'];
  /** The total price of uneditable lines in shop and presentment currencies. */
  uneditableSubtotalSet: Shopify_MoneyBag;
  /**
   * The product variant associated with this line item. The value is null for custom line items and items where
   * the variant has been deleted.
   */
  variant?: Maybe<Shopify_ProductVariant>;
  /** The title of the variant. */
  variantTitle?: Maybe<Scalars['String']['output']>;
};

/** An auto-generated type for paginating through multiple CalculatedLineItems. */
export type Shopify_CalculatedLineItemConnection = {
  __typename?: 'Shopify_CalculatedLineItemConnection';
  /** A list of edges. */
  edges: Array<Shopify_CalculatedLineItemEdge>;
  /** A list of the nodes contained in CalculatedLineItemEdge. */
  nodes: Array<Shopify_CalculatedLineItem>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one CalculatedLineItem and a cursor during pagination. */
export type Shopify_CalculatedLineItemEdge = {
  __typename?: 'Shopify_CalculatedLineItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of CalculatedLineItemEdge. */
  node: Shopify_CalculatedLineItem;
};

/** Represents a discount that was manually created for an order that is being edited. */
export type Shopify_CalculatedManualDiscountApplication = Shopify_CalculatedDiscountApplication & {
  __typename?: 'Shopify_CalculatedManualDiscountApplication';
  /** The method by which the discount's value is allocated to its entitled items. */
  allocationMethod: Shopify_DiscountApplicationAllocationMethod;
  /** The level at which the discount was applied. */
  appliedTo: Shopify_DiscountApplicationLevel;
  /** The description of discount application. Indicates the reason why the discount was applied. */
  description?: Maybe<Scalars['String']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** How the discount amount is distributed on the discounted lines. */
  targetSelection: Shopify_DiscountApplicationTargetSelection;
  /** Whether the discount is applied on line items or shipping lines. */
  targetType: Shopify_DiscountApplicationTargetType;
  /** The value of the discount application. */
  value: Shopify_PricingValue;
};

/** An order with edits applied but not saved. */
export type Shopify_CalculatedOrder = Shopify_Node & {
  __typename?: 'Shopify_CalculatedOrder';
  /** Returns only the new discount applications being added to the order in the current edit. */
  addedDiscountApplications: Shopify_CalculatedDiscountApplicationConnection;
  /** Returns only the new line items being added to the order during the current edit. */
  addedLineItems: Shopify_CalculatedLineItemConnection;
  /** Amount of the order-level discount (doesn't contain any line item discounts) in shop and presentment currencies. */
  cartDiscountAmountSet?: Maybe<Shopify_MoneyBag>;
  /** Whether the changes have been applied and saved to the order. */
  committed: Scalars['Boolean']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /**
   * Returns all items on the order that existed before starting the edit.
   * Will include any changes that have been made.
   * Will not include line items added during the current edit.
   */
  lineItems: Shopify_CalculatedLineItemConnection;
  /** The HTML of the customer notification for the order edit. */
  notificationPreviewHtml?: Maybe<Scalars['Shopify_HTML']['output']>;
  /** The customer notification title. */
  notificationPreviewTitle: Scalars['String']['output'];
  /**
   * The order without any changes applied.
   * @deprecated Use `originalOrder` instead.
   */
  order: Shopify_Order;
  /** The order without any changes applied. */
  originalOrder: Shopify_Order;
  /**
   * Returns the shipping lines on the order that existed before starting the edit.
   * Will include any changes that have been made as well as shipping lines added during the current edit.
   * Returns only the first 250 shipping lines.
   */
  shippingLines: Array<Shopify_CalculatedShippingLine>;
  /** List of changes made to the order during the current edit. */
  stagedChanges: Shopify_OrderStagedChangeConnection;
  /** The sum of the quantities for the line items that contribute to the order's subtotal. */
  subtotalLineItemsQuantity: Scalars['Int']['output'];
  /** The subtotal of the line items, in shop and presentment currencies, after all the discounts are applied.  The subtotal doesn't include shipping.  The subtotal includes taxes for taxes-included orders and excludes taxes for taxes-excluded orders. */
  subtotalPriceSet?: Maybe<Shopify_MoneyBag>;
  /** Taxes charged for the line item. */
  taxLines: Array<Shopify_TaxLine>;
  /** Total price of the order less the total amount received from the customer in shop and presentment currencies. */
  totalOutstandingSet: Shopify_MoneyBag;
  /** Total amount of the order (includes taxes and discounts) in shop and presentment currencies. */
  totalPriceSet: Shopify_MoneyBag;
};


/** An order with edits applied but not saved. */
export type Shopify_CalculatedOrderAddedDiscountApplicationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** An order with edits applied but not saved. */
export type Shopify_CalculatedOrderAddedLineItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** An order with edits applied but not saved. */
export type Shopify_CalculatedOrderLineItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** An order with edits applied but not saved. */
export type Shopify_CalculatedOrderStagedChangesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** A discount created by a Shopify script for an order that is being edited. */
export type Shopify_CalculatedScriptDiscountApplication = Shopify_CalculatedDiscountApplication & {
  __typename?: 'Shopify_CalculatedScriptDiscountApplication';
  /** The method by which the discount's value is allocated to its entitled items. */
  allocationMethod: Shopify_DiscountApplicationAllocationMethod;
  /** The level at which the discount was applied. */
  appliedTo: Shopify_DiscountApplicationLevel;
  /** The description of discount application. Indicates the reason why the discount was applied. */
  description?: Maybe<Scalars['String']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** How the discount amount is distributed on the discounted lines. */
  targetSelection: Shopify_DiscountApplicationTargetSelection;
  /** Whether the discount is applied on line items or shipping lines. */
  targetType: Shopify_DiscountApplicationTargetType;
  /** The value of the discount application. */
  value: Shopify_PricingValue;
};

/** A shipping line item involved in order editing that may be newly added or have new changes applied. */
export type Shopify_CalculatedShippingLine = {
  __typename?: 'Shopify_CalculatedShippingLine';
  /** A globally-unique ID. */
  id?: Maybe<Scalars['ID']['output']>;
  /** The price of the shipping line. */
  price: Shopify_MoneyBag;
  /** The staged status of the shipping line. */
  stagedStatus: Shopify_CalculatedShippingLineStagedStatus;
  /** The title of the shipping line. */
  title: Scalars['String']['output'];
};

/** Represents the staged status of a CalculatedShippingLine on a CalculatedOrder. */
export enum Shopify_CalculatedShippingLineStagedStatus {
  /** The shipping line was added as part of the current order edit. */
  Added = 'ADDED',
  /** The shipping line has no staged changes associated with it. */
  None = 'NONE',
  /** The shipping line was removed as part of the current order edit. */
  Removed = 'REMOVED'
}

/** Card payment details related to a transaction. */
export type Shopify_CardPaymentDetails = Shopify_BasePaymentDetails & {
  __typename?: 'Shopify_CardPaymentDetails';
  /** The response code from the address verification system (AVS). The code is always a single letter. */
  avsResultCode?: Maybe<Scalars['String']['output']>;
  /** The issuer identification number (IIN), formerly known as bank identification number (BIN) of the customer's credit card. This is made up of the first few digits of the credit card number. */
  bin?: Maybe<Scalars['String']['output']>;
  /** The name of the company that issued the customer's credit card. */
  company?: Maybe<Scalars['String']['output']>;
  /** The response code from the credit card company indicating whether the customer entered the card security code, or card verification value, correctly. The code is a single letter or empty string. */
  cvvResultCode?: Maybe<Scalars['String']['output']>;
  /** The month in which the used credit card expires. */
  expirationMonth?: Maybe<Scalars['Int']['output']>;
  /** The year in which the used credit card expires. */
  expirationYear?: Maybe<Scalars['Int']['output']>;
  /** The holder of the credit card. */
  name?: Maybe<Scalars['String']['output']>;
  /** The customer's credit card number, with most of the leading digits redacted. */
  number?: Maybe<Scalars['String']['output']>;
  /** The name of payment method used by the buyer. */
  paymentMethodName?: Maybe<Scalars['String']['output']>;
  /** Digital wallet used for the payment. */
  wallet?: Maybe<Shopify_DigitalWallet>;
};

/** A Cart Transform Function to create [Customized Bundles.](https://shopify.dev/docs/apps/selling-strategies/bundles/add-a-customized-bundle). */
export type Shopify_CartTransform = Shopify_HasMetafields & Shopify_Node & {
  __typename?: 'Shopify_CartTransform';
  /** Whether a run failure will block cart and checkout operations. */
  blockOnFailure: Scalars['Boolean']['output'];
  /** The ID for the Cart Transform function. */
  functionId: Scalars['String']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafields: Shopify_PrivateMetafieldConnection;
};


/** A Cart Transform Function to create [Customized Bundles.](https://shopify.dev/docs/apps/selling-strategies/bundles/add-a-customized-bundle). */
export type Shopify_CartTransformMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace?: InputMaybe<Scalars['String']['input']>;
};


/** A Cart Transform Function to create [Customized Bundles.](https://shopify.dev/docs/apps/selling-strategies/bundles/add-a-customized-bundle). */
export type Shopify_CartTransformMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** A Cart Transform Function to create [Customized Bundles.](https://shopify.dev/docs/apps/selling-strategies/bundles/add-a-customized-bundle). */
export type Shopify_CartTransformPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace: Scalars['String']['input'];
};


/** A Cart Transform Function to create [Customized Bundles.](https://shopify.dev/docs/apps/selling-strategies/bundles/add-a-customized-bundle). */
export type Shopify_CartTransformPrivateMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** An error that occurs during the execution of `CartTransformCreate`. */
export type Shopify_CartTransformCreateUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_CartTransformCreateUserError';
  /** The error code. */
  code?: Maybe<Shopify_CartTransformCreateUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `CartTransformCreateUserError`. */
export enum Shopify_CartTransformCreateUserErrorCode {
  /** A cart transform function already exists for the provided function_id. */
  FunctionAlreadyRegistered = 'FUNCTION_ALREADY_REGISTERED',
  /** Function does not implement the required interface for this cart_transform function. */
  FunctionDoesNotImplement = 'FUNCTION_DOES_NOT_IMPLEMENT',
  /** No Shopify Function found for provided function_id. */
  FunctionNotFound = 'FUNCTION_NOT_FOUND',
  /** Failed to create cart transform due to invalid input. */
  InputInvalid = 'INPUT_INVALID'
}

/** An error that occurs during the execution of `CartTransformDelete`. */
export type Shopify_CartTransformDeleteUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_CartTransformDeleteUserError';
  /** The error code. */
  code?: Maybe<Shopify_CartTransformDeleteUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `CartTransformDeleteUserError`. */
export enum Shopify_CartTransformDeleteUserErrorCode {
  /** Could not find cart transform for provided id. */
  NotFound = 'NOT_FOUND',
  /** Unauthorized app scope. */
  UnauthorizedAppScope = 'UNAUTHORIZED_APP_SCOPE'
}

/** Represents the cart transform feature configuration for the shop. */
export type Shopify_CartTransformEligibleOperations = {
  __typename?: 'Shopify_CartTransformEligibleOperations';
  /** The shop is eligible for expand operations. */
  expandOperation: Scalars['Boolean']['output'];
  /** The shop is eligible for merge operations. */
  mergeOperation: Scalars['Boolean']['output'];
  /** The shop is eligible for update operations. */
  updateOperation: Scalars['Boolean']['output'];
};

/** Represents the cart transform feature configuration for the shop. */
export type Shopify_CartTransformFeature = {
  __typename?: 'Shopify_CartTransformFeature';
  /** The cart transform operations eligible for the shop. */
  eligibleOperations: Shopify_CartTransformEligibleOperations;
};

/** Tracks an adjustment to the cash in a cash tracking session for a point of sale device over the course of a shift. */
export type Shopify_CashTrackingAdjustment = Shopify_Node & {
  __typename?: 'Shopify_CashTrackingAdjustment';
  /** The amount of cash being added or removed. */
  cash: Shopify_MoneyV2;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The note entered when the adjustment was made. */
  note?: Maybe<Scalars['String']['output']>;
  /** The staff member who made the adjustment. */
  staffMember: Shopify_StaffMember;
  /** The time when the adjustment was made. */
  time: Scalars['DateTime']['output'];
};

/** An auto-generated type for paginating through multiple CashTrackingAdjustments. */
export type Shopify_CashTrackingAdjustmentConnection = {
  __typename?: 'Shopify_CashTrackingAdjustmentConnection';
  /** A list of edges. */
  edges: Array<Shopify_CashTrackingAdjustmentEdge>;
  /** A list of the nodes contained in CashTrackingAdjustmentEdge. */
  nodes: Array<Shopify_CashTrackingAdjustment>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one CashTrackingAdjustment and a cursor during pagination. */
export type Shopify_CashTrackingAdjustmentEdge = {
  __typename?: 'Shopify_CashTrackingAdjustmentEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of CashTrackingAdjustmentEdge. */
  node: Shopify_CashTrackingAdjustment;
};

/** Tracks the balance in a cash drawer for a point of sale device over the course of a shift. */
export type Shopify_CashTrackingSession = Shopify_Node & {
  __typename?: 'Shopify_CashTrackingSession';
  /** The adjustments made to the cash drawer during this session. */
  adjustments: Shopify_CashTrackingAdjustmentConnection;
  /** Whether this session is tracking cash payments. */
  cashTrackingEnabled: Scalars['Boolean']['output'];
  /** The counted cash balance when the session was closed. */
  closingBalance?: Maybe<Shopify_MoneyV2>;
  /** The note entered when the session was closed. */
  closingNote?: Maybe<Scalars['String']['output']>;
  /** The user who closed the session. */
  closingStaffMember?: Maybe<Shopify_StaffMember>;
  /** When the session was closed. */
  closingTime?: Maybe<Scalars['DateTime']['output']>;
  /** The expected balance at the end of the session or the expected current balance for sessions that are still open. */
  expectedBalance: Shopify_MoneyV2;
  /** The amount that was expected to be in the cash drawer at the end of the session, calculated after the session was closed. */
  expectedClosingBalance?: Maybe<Shopify_MoneyV2>;
  /** The amount expected to be in the cash drawer based on the previous session. */
  expectedOpeningBalance?: Maybe<Shopify_MoneyV2>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The location of the point of sale device during this session. */
  location?: Maybe<Shopify_Location>;
  /** The net cash sales made for the duration of this cash tracking session. */
  netCashSales: Shopify_MoneyV2;
  /** The counted cash balance when the session was opened. */
  openingBalance: Shopify_MoneyV2;
  /** The note entered when the session was opened. */
  openingNote?: Maybe<Scalars['String']['output']>;
  /** The user who opened the session. */
  openingStaffMember?: Maybe<Shopify_StaffMember>;
  /** When the session was opened. */
  openingTime: Scalars['DateTime']['output'];
  /** The register name for the point of sale device that this session is tracking cash for. */
  registerName: Scalars['String']['output'];
  /** The sum of all adjustments made during the session, excluding the final adjustment. */
  totalAdjustments?: Maybe<Shopify_MoneyV2>;
  /** The sum of all cash refunds for the duration of this cash tracking session. */
  totalCashRefunds: Shopify_MoneyV2;
  /** The sum of all cash sales for the duration of this cash tracking session. */
  totalCashSales: Shopify_MoneyV2;
  /** The total discrepancy for the session including starting and ending. */
  totalDiscrepancy?: Maybe<Shopify_MoneyV2>;
};


/** Tracks the balance in a cash drawer for a point of sale device over the course of a shift. */
export type Shopify_CashTrackingSessionAdjustmentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_AdjustmentsSortKeys>;
};

/**
 * A list of products with publishing and pricing information.
 * A catalog can be associated with a specific context, such as a [`Market`](https://shopify.dev/api/admin-graphql/current/objects/market), [`CompanyLocation`](https://shopify.dev/api/admin-graphql/current/objects/companylocation), or [`App`](https://shopify.dev/api/admin-graphql/current/objects/app).
 */
export type Shopify_Catalog = {
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** Most recent catalog operations. */
  operations: Array<Shopify_ResourceOperation>;
  /** The price list associated with the catalog. */
  priceList?: Maybe<Shopify_PriceList>;
  /** A group of products and collections that's published to a catalog. */
  publication?: Maybe<Shopify_Publication>;
  /** The status of the catalog. */
  status: Shopify_CatalogStatus;
  /** The name of the catalog. */
  title: Scalars['String']['output'];
};

/** An auto-generated type for paginating through multiple Catalogs. */
export type Shopify_CatalogConnection = {
  __typename?: 'Shopify_CatalogConnection';
  /** A list of edges. */
  edges: Array<Shopify_CatalogEdge>;
  /** A list of the nodes contained in CatalogEdge. */
  nodes: Array<Shopify_Catalog>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** A catalog csv operation represents a CSV file import. */
export type Shopify_CatalogCsvOperation = Shopify_Node & Shopify_ResourceOperation & {
  __typename?: 'Shopify_CatalogCsvOperation';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The count of processed rows, summing imported, failed, and skipped rows. */
  processedRowCount?: Maybe<Scalars['Int']['output']>;
  /** Represents a rows objects within this background operation. */
  rowCount?: Maybe<Shopify_RowCount>;
  /** The status of this operation. */
  status: Shopify_ResourceOperationStatus;
};

/** An auto-generated type which holds one Catalog and a cursor during pagination. */
export type Shopify_CatalogEdge = {
  __typename?: 'Shopify_CatalogEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of CatalogEdge. */
  node: Shopify_Catalog;
};

/** The state of a catalog. */
export enum Shopify_CatalogStatus {
  /** The catalog is active. */
  Active = 'ACTIVE',
  /** The catalog is archived. */
  Archived = 'ARCHIVED',
  /** The catalog is in draft. */
  Draft = 'DRAFT'
}

/** The associated catalog's type. */
export enum Shopify_CatalogType {
  /** Catalogs belonging to apps. */
  App = 'APP',
  /** Catalogs belonging to company locations. */
  CompanyLocation = 'COMPANY_LOCATION',
  /** Catalogs belonging to markets. */
  Market = 'MARKET',
  /** Not associated to a catalog. */
  None = 'NONE'
}

/** Defines errors encountered while managing a catalog. */
export type Shopify_CatalogUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_CatalogUserError';
  /** The error code. */
  code?: Maybe<Shopify_CatalogUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `CatalogUserError`. */
export enum Shopify_CatalogUserErrorCode {
  /** An app catalog cannot be assigned to a price list. */
  AppCatalogPriceListAssignment = 'APP_CATALOG_PRICE_LIST_ASSIGNMENT',
  /** The input value is blank. */
  Blank = 'BLANK',
  /** The catalog can't be associated with more than one market. */
  CannotAddMoreThanOneMarket = 'CANNOT_ADD_MORE_THAN_ONE_MARKET',
  /** Cannot create a catalog for an app. */
  CannotCreateAppCatalog = 'CANNOT_CREATE_APP_CATALOG',
  /** Cannot create a catalog for a market. */
  CannotCreateMarketCatalog = 'CANNOT_CREATE_MARKET_CATALOG',
  /** Cannot delete a catalog for an app. */
  CannotDeleteAppCatalog = 'CANNOT_DELETE_APP_CATALOG',
  /** Cannot delete a catalog for a market. */
  CannotDeleteMarketCatalog = 'CANNOT_DELETE_MARKET_CATALOG',
  /** Cannot modify a catalog for an app. */
  CannotModifyAppCatalog = 'CANNOT_MODIFY_APP_CATALOG',
  /** Cannot modify a catalog for a market. */
  CannotModifyMarketCatalog = 'CANNOT_MODIFY_MARKET_CATALOG',
  /** Quantity price breaks can be associated only with company location catalogs. */
  CatalogContextDoesNotSupportQuantityPriceBreaks = 'CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_PRICE_BREAKS',
  /** Quantity rules can be associated only with company location catalogs. */
  CatalogContextDoesNotSupportQuantityRules = 'CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_RULES',
  /** Catalog failed to save. */
  CatalogFailedToSave = 'CATALOG_FAILED_TO_SAVE',
  /** The catalog wasn't found. */
  CatalogNotFound = 'CATALOG_NOT_FOUND',
  /** A company location catalog outside of a supported plan can only have an archived status. */
  CompanyLocationCatalogStatusPlan = 'COMPANY_LOCATION_CATALOG_STATUS_PLAN',
  /** The company location could not be found. */
  CompanyLocationNotFound = 'COMPANY_LOCATION_NOT_FOUND',
  /** Context driver already assigned to this catalog. */
  ContextAlreadyAssignedToCatalog = 'CONTEXT_ALREADY_ASSIGNED_TO_CATALOG',
  /** Cannot save the catalog because the catalog limit for the context was reached. */
  ContextCatalogLimitReached = 'CONTEXT_CATALOG_LIMIT_REACHED',
  /** The arguments `contextsToAdd` and `contextsToRemove` must match existing catalog context type. */
  ContextDriverMismatch = 'CONTEXT_DRIVER_MISMATCH',
  /** A country price list cannot be assigned to a catalog. */
  CountryPriceListAssignment = 'COUNTRY_PRICE_LIST_ASSIGNMENT',
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** The catalog context type is invalid. */
  InvalidCatalogContextType = 'INVALID_CATALOG_CONTEXT_TYPE',
  /** The catalog's market and price list currencies do not match. */
  MarketAndPriceListCurrencyMismatch = 'MARKET_AND_PRICE_LIST_CURRENCY_MISMATCH',
  /** A market catalog must have an active status. */
  MarketCatalogStatus = 'MARKET_CATALOG_STATUS',
  /** Market not found. */
  MarketNotFound = 'MARKET_NOT_FOUND',
  /** Market already belongs to another catalog. */
  MarketTaken = 'MARKET_TAKEN',
  /** Must provide exactly one context type. */
  MustProvideExactlyOneContextType = 'MUST_PROVIDE_EXACTLY_ONE_CONTEXT_TYPE',
  /** Price list failed to save. */
  PriceListFailedToSave = 'PRICE_LIST_FAILED_TO_SAVE',
  /** The price list is currently being modified. Please try again later. */
  PriceListLocked = 'PRICE_LIST_LOCKED',
  /** A price list cannot be assigned to the primary market. */
  PriceListNotAllowedForPrimaryMarket = 'PRICE_LIST_NOT_ALLOWED_FOR_PRIMARY_MARKET',
  /** Price list not found. */
  PriceListNotFound = 'PRICE_LIST_NOT_FOUND',
  /** Publication not found. */
  PublicationNotFound = 'PUBLICATION_NOT_FOUND',
  /** Must have `contexts_to_add` or `contexts_to_remove` argument. */
  RequiresContextsToAddOrRemove = 'REQUIRES_CONTEXTS_TO_ADD_OR_REMOVE',
  /** The input value is already taken. */
  Taken = 'TAKEN',
  /** The input value is too long. */
  TooLong = 'TOO_LONG',
  /** The input value is too short. */
  TooShort = 'TOO_SHORT',
  /** Can't perform this action on a catalog of this type. */
  UnsupportedCatalogAction = 'UNSUPPORTED_CATALOG_ACTION'
}

/**
 * A channel represents an app where you sell a group of products and collections.
 * A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
 */
export type Shopify_Channel = Shopify_Node & {
  __typename?: 'Shopify_Channel';
  /** The underlying app used by the channel. */
  app: Shopify_App;
  /** The collection publications for the list of collections published to the channel. */
  collectionPublicationsV3: Shopify_ResourcePublicationConnection;
  /** The list of collections published to the channel. */
  collections: Shopify_CollectionConnection;
  /**
   * The unique identifier for the channel.
   * @deprecated Use `id` instead.
   */
  handle: Scalars['String']['output'];
  /** Whether the collection is available to the channel. */
  hasCollection: Scalars['Boolean']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The name of the channel. */
  name: Scalars['String']['output'];
  /**
   * The menu items for the channel, which also appear as submenu items in the left navigation sidebar in the Shopify admin.
   * @deprecated Use [AppInstallation.navigationItems](
   *           https://shopify.dev/api/admin-graphql/current/objects/AppInstallation#field-appinstallation-navigationitems) instead.
   */
  navigationItems: Array<Shopify_NavigationItem>;
  /**
   * Home page for the channel.
   * @deprecated Use [AppInstallation.launchUrl](
   *           https://shopify.dev/api/admin-graphql/current/objects/AppInstallation#field-appinstallation-launchurl) instead.
   */
  overviewPath?: Maybe<Scalars['Shopify_URL']['output']>;
  /**
   * The product publications for the products published to the channel.
   * @deprecated Use `productPublicationsV3` instead.
   */
  productPublications: Shopify_ProductPublicationConnection;
  /** The product publications for the list of products published to the channel. */
  productPublicationsV3: Shopify_ResourcePublicationConnection;
  /** The list of products published to the channel. */
  products: Shopify_ProductConnection;
  /** The count of products published to the channel. Limited to a maximum of 10000. */
  productsCount?: Maybe<Shopify_Count>;
  /** Whether the channel supports future publishing. */
  supportsFuturePublishing: Scalars['Boolean']['output'];
};


/**
 * A channel represents an app where you sell a group of products and collections.
 * A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
 */
export type Shopify_ChannelCollectionPublicationsV3Args = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * A channel represents an app where you sell a group of products and collections.
 * A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
 */
export type Shopify_ChannelCollectionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * A channel represents an app where you sell a group of products and collections.
 * A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
 */
export type Shopify_ChannelHasCollectionArgs = {
  id: Scalars['ID']['input'];
};


/**
 * A channel represents an app where you sell a group of products and collections.
 * A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
 */
export type Shopify_ChannelProductPublicationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * A channel represents an app where you sell a group of products and collections.
 * A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
 */
export type Shopify_ChannelProductPublicationsV3Args = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * A channel represents an app where you sell a group of products and collections.
 * A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
 */
export type Shopify_ChannelProductsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * A channel represents an app where you sell a group of products and collections.
 * A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
 */
export type Shopify_ChannelProductsCountArgs = {
  query?: InputMaybe<Scalars['String']['input']>;
};

/** An auto-generated type for paginating through multiple Channels. */
export type Shopify_ChannelConnection = {
  __typename?: 'Shopify_ChannelConnection';
  /** A list of edges. */
  edges: Array<Shopify_ChannelEdge>;
  /** A list of the nodes contained in ChannelEdge. */
  nodes: Array<Shopify_Channel>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/**
 * A channel definition represents channels surfaces on the platform.
 * A channel definition can be a platform or a subsegment of it such as Facebook Home, Instagram Live, Instagram Shops, or WhatsApp chat.
 */
export type Shopify_ChannelDefinition = Shopify_Node & {
  __typename?: 'Shopify_ChannelDefinition';
  /** Name of the channel that this sub channel belongs to. */
  channelName: Scalars['String']['output'];
  /** Unique string used as a public identifier for the channel definition. */
  handle: Scalars['String']['output'];
  /** The unique ID for the channel definition. */
  id: Scalars['ID']['output'];
  /** Whether this channel definition represents a marketplace. */
  isMarketplace: Scalars['Boolean']['output'];
  /** Name of the sub channel (e.g. Online Store, Instagram Shopping, TikTok Live). */
  subChannelName: Scalars['String']['output'];
  /** Icon displayed when showing the channel in admin. */
  svgIcon?: Maybe<Scalars['String']['output']>;
};

/** An auto-generated type which holds one Channel and a cursor during pagination. */
export type Shopify_ChannelEdge = {
  __typename?: 'Shopify_ChannelEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of ChannelEdge. */
  node: Shopify_Channel;
};

/** Contains the information for a given sales channel. */
export type Shopify_ChannelInformation = Shopify_Node & {
  __typename?: 'Shopify_ChannelInformation';
  /** The app associated with the channel. */
  app: Shopify_App;
  /** The channel definition associated with the channel. */
  channelDefinition?: Maybe<Shopify_ChannelDefinition>;
  /** The unique ID for the channel. */
  channelId: Scalars['ID']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
};

/** An error that occurs during the execution of `CheckoutBrandingUpsert`. */
export type Shopify_CheckoutBrandingUpsertUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_CheckoutBrandingUpsertUserError';
  /** The error code. */
  code?: Maybe<Shopify_CheckoutBrandingUpsertUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `CheckoutBrandingUpsertUserError`. */
export enum Shopify_CheckoutBrandingUpsertUserErrorCode {
  /** Unexpected internal error happened. */
  InternalError = 'INTERNAL_ERROR'
}

/** A checkout profile defines the branding settings and the UI extensions for a store's checkout. A checkout profile could be published or draft. A store might have at most one published checkout profile, which is used to render their live checkout. The store could also have multiple draft profiles that were created, previewed, and published using the admin checkout editor. */
export type Shopify_CheckoutProfile = Shopify_Node & {
  __typename?: 'Shopify_CheckoutProfile';
  /** The date and time when the checkout profile was created. */
  createdAt: Scalars['DateTime']['output'];
  /** The date and time when the checkout profile was last edited. */
  editedAt: Scalars['DateTime']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** Whether the checkout profile is published or not. */
  isPublished: Scalars['Boolean']['output'];
  /** The profile name. */
  name: Scalars['String']['output'];
  /** The date and time when the checkout profile was last updated. */
  updatedAt: Scalars['DateTime']['output'];
};

/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_Collection = Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_HasPublishedTranslations & Shopify_Node & Shopify_Publishable & {
  __typename?: 'Shopify_Collection';
  /** The number of publications a resource is published to without feedback errors. */
  availablePublicationsCount?: Maybe<Shopify_Count>;
  /** A single-line, text-only description of the collection, stripped of any HTML tags and formatting that were included in the description. */
  description: Scalars['String']['output'];
  /** The description of the collection, including any HTML tags and formatting. This content is typically displayed to customers, such as on an online store, depending on the theme. */
  descriptionHtml: Scalars['Shopify_HTML']['output'];
  /** Information about the collection that's provided through resource feedback. */
  feedback?: Maybe<Shopify_ResourceFeedback>;
  /**
   * A unique string that identifies the collection. If a handle isn't specified when a collection is created, it's automatically generated from the collection's original title, and typically includes words from the title separated by hyphens. For example, a collection that was created with the title `Summer Catalog 2022` might have the handle `summer-catalog-2022`.
   *
   * If the title is changed, the handle doesn't automatically change.
   *
   * The handle can be used in themes by the Liquid templating language to refer to the collection, but using the ID is preferred because it never changes.
   */
  handle: Scalars['String']['output'];
  /** Whether the collection includes the specified product. */
  hasProduct: Scalars['Boolean']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The image associated with the collection. */
  image?: Maybe<Shopify_Image>;
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['Shopify_UnsignedInt64']['output'];
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafield definitions. */
  metafieldDefinitions: Shopify_MetafieldDefinitionConnection;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafields: Shopify_PrivateMetafieldConnection;
  /** The products that are included in the collection. */
  products: Shopify_ProductConnection;
  /** The number of products in the collection. */
  productsCount?: Maybe<Shopify_Count>;
  /**
   * The number of publications a resource is published on.
   * @deprecated Use `resourcePublicationsCount` instead.
   */
  publicationCount: Scalars['Int']['output'];
  /**
   * The channels where the collection is published.
   * @deprecated Use `resourcePublications` instead.
   */
  publications: Shopify_CollectionPublicationConnection;
  /**
   * Check to see whether the resource is published to a given channel.
   * @deprecated Use `publishedOnPublication` instead.
   */
  publishedOnChannel: Scalars['Boolean']['output'];
  /**
   * Check to see whether the resource is published to the calling app's channel.
   * @deprecated Use `publishedOnCurrentPublication` instead.
   */
  publishedOnCurrentChannel: Scalars['Boolean']['output'];
  /** Check to see whether the resource is published to the calling app's publication. */
  publishedOnCurrentPublication: Scalars['Boolean']['output'];
  /** Check to see whether the resource is published to a given publication. */
  publishedOnPublication: Scalars['Boolean']['output'];
  /** The list of resources that are published to a publication. */
  resourcePublications: Shopify_ResourcePublicationConnection;
  /** The number of publications a resource is published on. */
  resourcePublicationsCount?: Maybe<Shopify_Count>;
  /** The list of resources that are either published or staged to be published to a publication. */
  resourcePublicationsV2: Shopify_ResourcePublicationV2Connection;
  /** For a smart (automated) collection, specifies the rules that determine whether a product is included. */
  ruleSet?: Maybe<Shopify_CollectionRuleSet>;
  /** If the default SEO fields for page title and description have been modified, contains the modified information. */
  seo: Shopify_Seo;
  /** The order in which the products in the collection are displayed by default in the Shopify admin and in sales channels, such as an online store. */
  sortOrder: Shopify_CollectionSortOrder;
  /**
   * The Storefront GraphQL API ID of the `Collection`.
   *
   * As of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.
   * @deprecated Use `id` instead.
   */
  storefrontId: Scalars['Shopify_StorefrontID']['output'];
  /** The suffix of the Liquid template being used to show the collection in an online store. For example, if the value is `custom`, then the collection is using the `collection.custom.liquid` template. If the value is `null`, then the collection is using the default `collection.liquid` template. */
  templateSuffix?: Maybe<Scalars['String']['output']>;
  /** The name of the collection. It's displayed in the Shopify admin and is typically displayed in sales channels, such as an online store. */
  title: Scalars['String']['output'];
  /** The translations associated with the resource. */
  translations: Array<Shopify_Translation>;
  /**
   * The list of channels that the resource is not published to.
   * @deprecated Use `unpublishedPublications` instead.
   */
  unpublishedChannels: Shopify_ChannelConnection;
  /** The list of publications that the resource is not published to. */
  unpublishedPublications: Shopify_PublicationConnection;
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the collection was last modified. */
  updatedAt: Scalars['DateTime']['output'];
};


/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_CollectionDescriptionArgs = {
  truncateAt?: InputMaybe<Scalars['Int']['input']>;
};


/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_CollectionHasProductArgs = {
  id: Scalars['ID']['input'];
};


/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_CollectionMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace?: InputMaybe<Scalars['String']['input']>;
};


/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_CollectionMetafieldDefinitionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  pinnedStatus?: InputMaybe<Shopify_MetafieldDefinitionPinnedStatus>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_MetafieldDefinitionSortKeys>;
};


/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_CollectionMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_CollectionPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace: Scalars['String']['input'];
};


/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_CollectionPrivateMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_CollectionProductsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_ProductCollectionSortKeys>;
};


/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_CollectionPublicationCountArgs = {
  onlyPublished?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_CollectionPublicationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  onlyPublished?: InputMaybe<Scalars['Boolean']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_CollectionPublishedOnChannelArgs = {
  channelId: Scalars['ID']['input'];
};


/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_CollectionPublishedOnPublicationArgs = {
  publicationId: Scalars['ID']['input'];
};


/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_CollectionResourcePublicationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  onlyPublished?: InputMaybe<Scalars['Boolean']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_CollectionResourcePublicationsCountArgs = {
  onlyPublished?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_CollectionResourcePublicationsV2Args = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  catalogType?: InputMaybe<Shopify_CatalogType>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  onlyPublished?: InputMaybe<Scalars['Boolean']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_CollectionTranslationsArgs = {
  locale: Scalars['String']['input'];
  marketId?: InputMaybe<Scalars['ID']['input']>;
};


/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_CollectionUnpublishedChannelsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 *
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 *
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 */
export type Shopify_CollectionUnpublishedPublicationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** An error that occurs during the execution of `CollectionAddProductsV2`. */
export type Shopify_CollectionAddProductsV2UserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_CollectionAddProductsV2UserError';
  /** The error code. */
  code?: Maybe<Shopify_CollectionAddProductsV2UserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `CollectionAddProductsV2UserError`. */
export enum Shopify_CollectionAddProductsV2UserErrorCode {
  /** Can't manually add products to a smart collection. */
  CantAddToSmartCollection = 'CANT_ADD_TO_SMART_COLLECTION',
  /** Collection doesn't exist. */
  CollectionDoesNotExist = 'COLLECTION_DOES_NOT_EXIST'
}

/** An auto-generated type for paginating through multiple Collections. */
export type Shopify_CollectionConnection = {
  __typename?: 'Shopify_CollectionConnection';
  /** A list of edges. */
  edges: Array<Shopify_CollectionEdge>;
  /** A list of the nodes contained in CollectionEdge. */
  nodes: Array<Shopify_Collection>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one Collection and a cursor during pagination. */
export type Shopify_CollectionEdge = {
  __typename?: 'Shopify_CollectionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of CollectionEdge. */
  node: Shopify_Collection;
};

/** Represents the publications where a collection is published. */
export type Shopify_CollectionPublication = {
  __typename?: 'Shopify_CollectionPublication';
  /**
   * The channel where the collection will be published.
   * @deprecated Use `publication` instead.
   */
  channel: Shopify_Channel;
  /** The collection to be published on the publication. */
  collection: Shopify_Collection;
  /** Whether the publication is published or not. */
  isPublished: Scalars['Boolean']['output'];
  /** The publication where the collection will be published. */
  publication: Shopify_Publication;
  /** The date that the publication was or is going to be published. */
  publishDate: Scalars['DateTime']['output'];
};

/** An auto-generated type for paginating through multiple CollectionPublications. */
export type Shopify_CollectionPublicationConnection = {
  __typename?: 'Shopify_CollectionPublicationConnection';
  /** A list of edges. */
  edges: Array<Shopify_CollectionPublicationEdge>;
  /** A list of the nodes contained in CollectionPublicationEdge. */
  nodes: Array<Shopify_CollectionPublication>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one CollectionPublication and a cursor during pagination. */
export type Shopify_CollectionPublicationEdge = {
  __typename?: 'Shopify_CollectionPublicationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of CollectionPublicationEdge. */
  node: Shopify_CollectionPublication;
};

/** Represents at rule that's used to assign products to a collection. */
export type Shopify_CollectionRule = {
  __typename?: 'Shopify_CollectionRule';
  /** The attribute that the rule focuses on. For example, `title` or `product_type`. */
  column: Shopify_CollectionRuleColumn;
  /** The value that the operator is applied to. For example, `Hats`. */
  condition: Scalars['String']['output'];
  /** The value that the operator is applied to. */
  conditionObject?: Maybe<Shopify_CollectionRuleConditionObject>;
  /** The type of operator that the rule is based on. For example, `equals`, `contains`, or `not_equals`. */
  relation: Shopify_CollectionRuleRelation;
};

/** Specifies the attribute of a product being used to populate the smart collection. */
export enum Shopify_CollectionRuleColumn {
  /**
   * An attribute evaluated based on the `compare_at_price` attribute of the product's variants.
   * With `is_set` relation, the rule matches products with at least one variant with `compare_at_price` set.
   * With `is_not_set` relation, the rule matches matches products with at least one variant with `compare_at_price` not set.
   */
  IsPriceReduced = 'IS_PRICE_REDUCED',
  /** This category includes metafield definitions that have the `useAsCollectionCondition` flag set to true. */
  ProductMetafieldDefinition = 'PRODUCT_METAFIELD_DEFINITION',
  /** The [`product_taxonomy_node_id`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-productcategory) attribute. */
  ProductTaxonomyNodeId = 'PRODUCT_TAXONOMY_NODE_ID',
  /** The [`tag`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-producttype) attribute. */
  Tag = 'TAG',
  /** The [`title`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-title) attribute. */
  Title = 'TITLE',
  /** The [`type`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-producttype) attribute. */
  Type = 'TYPE',
  /** The [`variant_compare_at_price`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-compareatprice) attribute. */
  VariantCompareAtPrice = 'VARIANT_COMPARE_AT_PRICE',
  /** The [`variant_inventory`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-inventoryquantity) attribute. */
  VariantInventory = 'VARIANT_INVENTORY',
  /** This category includes metafield definitions that have the `useAsCollectionCondition` flag set to true. */
  VariantMetafieldDefinition = 'VARIANT_METAFIELD_DEFINITION',
  /** The [`variant_price`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-price) attribute. */
  VariantPrice = 'VARIANT_PRICE',
  /** The [`variant_title`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-title) attribute. */
  VariantTitle = 'VARIANT_TITLE',
  /** The [`variant_weight`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-weight) attribute. */
  VariantWeight = 'VARIANT_WEIGHT',
  /** The [`vendor`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-vendor) attribute. */
  Vendor = 'VENDOR'
}

/** Specifies object for the condition of the rule. */
export type Shopify_CollectionRuleConditionObject = Shopify_CollectionRuleMetafieldCondition | Shopify_CollectionRuleProductCategoryCondition | Shopify_CollectionRuleTextCondition;

/** Identifies a metafield definition used as a rule for the smart collection. */
export type Shopify_CollectionRuleMetafieldCondition = {
  __typename?: 'Shopify_CollectionRuleMetafieldCondition';
  /** The metafield definition associated with the condition. */
  metafieldDefinition: Shopify_MetafieldDefinition;
};

/** Specifies the condition for a Product Category field. */
export type Shopify_CollectionRuleProductCategoryCondition = {
  __typename?: 'Shopify_CollectionRuleProductCategoryCondition';
  /** The value of the condition. */
  value: Shopify_ProductTaxonomyNode;
};

/** Specifies the relationship between the `column` and the `condition`. */
export enum Shopify_CollectionRuleRelation {
  /** The attribute contains the condition. */
  Contains = 'CONTAINS',
  /** The attribute ends with the condition. */
  EndsWith = 'ENDS_WITH',
  /** The attribute is equal to the condition. */
  Equals = 'EQUALS',
  /** The attribute is greater than the condition. */
  GreaterThan = 'GREATER_THAN',
  /** The attribute is not set (equal to `null`). */
  IsNotSet = 'IS_NOT_SET',
  /** The attribute is set (not equal to `null`). */
  IsSet = 'IS_SET',
  /** The attribute is less than the condition. */
  LessThan = 'LESS_THAN',
  /** The attribute does not contain the condition. */
  NotContains = 'NOT_CONTAINS',
  /** The attribute does not equal the condition. */
  NotEquals = 'NOT_EQUALS',
  /** The attribute starts with the condition. */
  StartsWith = 'STARTS_WITH'
}

/** The set of rules that are used to determine which products are included in the collection. */
export type Shopify_CollectionRuleSet = {
  __typename?: 'Shopify_CollectionRuleSet';
  /**
   * Whether products must match any or all of the rules to be included in the collection.
   * If true, then products must match at least one of the rules to be included in the collection.
   * If false, then products must match all of the rules to be included in the collection.
   */
  appliedDisjunctively: Scalars['Boolean']['output'];
  /** The rules used to assign products to the collection. */
  rules: Array<Shopify_CollectionRule>;
};

/** Specifies the condition for a text field. */
export type Shopify_CollectionRuleTextCondition = {
  __typename?: 'Shopify_CollectionRuleTextCondition';
  /** The value of the condition. */
  value: Scalars['String']['output'];
};

/** The set of valid sort keys for the Collection query. */
export enum Shopify_CollectionSortKeys {
  /** Sort by the `id` value. */
  Id = 'ID',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE',
  /** Sort by the `title` value. */
  Title = 'TITLE',
  /** Sort by the `updated_at` value. */
  UpdatedAt = 'UPDATED_AT'
}

/** Specifies the sort order for the products in the collection. */
export enum Shopify_CollectionSortOrder {
  /** Alphabetically, in ascending order (A - Z). */
  AlphaAsc = 'ALPHA_ASC',
  /** Alphabetically, in descending order (Z - A). */
  AlphaDesc = 'ALPHA_DESC',
  /** By best-selling products. */
  BestSelling = 'BEST_SELLING',
  /** By date created, in ascending order (oldest - newest). */
  Created = 'CREATED',
  /** By date created, in descending order (newest - oldest). */
  CreatedDesc = 'CREATED_DESC',
  /** In the order set manually by the merchant. */
  Manual = 'MANUAL',
  /** By price, in ascending order (lowest - highest). */
  PriceAsc = 'PRICE_ASC',
  /** By price, in descending order (highest - lowest). */
  PriceDesc = 'PRICE_DESC'
}

/**
 * Comment events are generated by staff members of a shop.
 * They are created when a staff member adds a comment to the timeline of an order, draft order, customer, or transfer.
 */
export type Shopify_CommentEvent = Shopify_Event & Shopify_Node & {
  __typename?: 'Shopify_CommentEvent';
  /** The name of the app that created the event. */
  appTitle?: Maybe<Scalars['String']['output']>;
  /** The attachments associated with the comment event. */
  attachments: Array<Shopify_CommentEventAttachment>;
  /** Whether the event was created by an app. */
  attributeToApp: Scalars['Boolean']['output'];
  /** Whether the event was caused by an admin user. */
  attributeToUser: Scalars['Boolean']['output'];
  /** The name of the user that authored the comment event. */
  author: Shopify_StaffMember;
  /** Whether the comment event can be deleted. If true, then the comment event can be deleted. */
  canDelete: Scalars['Boolean']['output'];
  /** Whether the comment event can be edited. If true, then the comment event can be edited. */
  canEdit: Scalars['Boolean']['output'];
  /** The date and time when the event was created. */
  createdAt: Scalars['DateTime']['output'];
  /** Whether the event is critical. */
  criticalAlert: Scalars['Boolean']['output'];
  /** Whether the comment event has been edited. If true, then the comment event has been edited. */
  edited: Scalars['Boolean']['output'];
  /** The object reference associated with the comment event. For example, a product or discount). */
  embed?: Maybe<Shopify_CommentEventEmbed>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** Human readable text that describes the event. */
  message: Scalars['Shopify_FormattedString']['output'];
  /** The raw body of the comment event. */
  rawMessage: Scalars['String']['output'];
  /** The parent subject to which the comment event belongs. */
  subject: Shopify_CommentEventSubject;
};

/** A file attachment associated to a comment event. */
export type Shopify_CommentEventAttachment = {
  __typename?: 'Shopify_CommentEventAttachment';
  /** The file extension of the comment event attachment, indicating the file format. */
  fileExtension?: Maybe<Scalars['String']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The image attached to the comment event. */
  image?: Maybe<Shopify_Image>;
  /** The filename of the comment event attachment. */
  name: Scalars['String']['output'];
  /** The size of the attachment. */
  size: Scalars['Int']['output'];
  /** The URL of the attachment. */
  url: Scalars['Shopify_URL']['output'];
};

/** The main embed of a comment event. */
export type Shopify_CommentEventEmbed = Shopify_Customer | Shopify_DraftOrder | Shopify_Order | Shopify_Product | Shopify_ProductVariant;

/** The subject line of a comment event. */
export type Shopify_CommentEventSubject = {
  /** Whether the timeline subject has a timeline comment. If true, then a timeline comment exists. */
  hasTimelineComment: Scalars['Boolean']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
};

/** Represents information about a company which is also a customer of the shop. */
export type Shopify_Company = Shopify_CommentEventSubject & Shopify_HasEvents & Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_Navigable & Shopify_Node & {
  __typename?: 'Shopify_Company';
  /**
   * The number of contacts that belong to the company.
   * @deprecated Use `contactsCount` instead.
   */
  contactCount: Scalars['Int']['output'];
  /** The list of roles for the company contacts. */
  contactRoles: Shopify_CompanyContactRoleConnection;
  /** The list of contacts in the company. */
  contacts: Shopify_CompanyContactConnection;
  /** The number of contacts that belong to the company. */
  contactsCount?: Maybe<Shopify_Count>;
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company was created in Shopify. */
  createdAt: Scalars['DateTime']['output'];
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company became the customer. */
  customerSince: Scalars['DateTime']['output'];
  /** A default cursor that returns the single next record, sorted ascending by ID. */
  defaultCursor: Scalars['String']['output'];
  /** The role proposed by default for a contact at the company. */
  defaultRole?: Maybe<Shopify_CompanyContactRole>;
  /** The list of the company's draft orders. */
  draftOrders: Shopify_DraftOrderConnection;
  /** The paginated list of events associated with the host subject. */
  events: Shopify_EventConnection;
  /** A unique externally-supplied ID for the company. */
  externalId?: Maybe<Scalars['String']['output']>;
  /** Whether the merchant added a timeline comment to the company. */
  hasTimelineComment: Scalars['Boolean']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The lifetime duration of the company, since it became a customer of the shop. Examples: `2 days`, `3 months`, `1 year`. */
  lifetimeDuration: Scalars['String']['output'];
  /** The list of locations in the company. */
  locations: Shopify_CompanyLocationConnection;
  /** The number of locations that belong to the company. */
  locationsCount?: Maybe<Shopify_Count>;
  /** The main contact for the company. */
  mainContact?: Maybe<Shopify_CompanyContact>;
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafield definitions. */
  metafieldDefinitions: Shopify_MetafieldDefinitionConnection;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /** The name of the company. */
  name: Scalars['String']['output'];
  /** A note about the company. */
  note?: Maybe<Scalars['String']['output']>;
  /** The list of the company's orders. */
  orders: Shopify_OrderConnection;
  /** The total number of orders placed for this company, across all its locations. */
  ordersCount?: Maybe<Shopify_Count>;
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafields: Shopify_PrivateMetafieldConnection;
  /** The total amount spent by this company, across all its locations. */
  totalSpent: Shopify_MoneyV2;
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company was last modified. */
  updatedAt: Scalars['DateTime']['output'];
};


/** Represents information about a company which is also a customer of the shop. */
export type Shopify_CompanyContactRolesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_CompanyContactRoleSortKeys>;
};


/** Represents information about a company which is also a customer of the shop. */
export type Shopify_CompanyContactsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_CompanyContactSortKeys>;
};


/** Represents information about a company which is also a customer of the shop. */
export type Shopify_CompanyDraftOrdersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_DraftOrderSortKeys>;
};


/** Represents information about a company which is also a customer of the shop. */
export type Shopify_CompanyEventsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_EventSortKeys>;
};


/** Represents information about a company which is also a customer of the shop. */
export type Shopify_CompanyLocationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_CompanyLocationSortKeys>;
};


/** Represents information about a company which is also a customer of the shop. */
export type Shopify_CompanyMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace?: InputMaybe<Scalars['String']['input']>;
};


/** Represents information about a company which is also a customer of the shop. */
export type Shopify_CompanyMetafieldDefinitionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  pinnedStatus?: InputMaybe<Shopify_MetafieldDefinitionPinnedStatus>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_MetafieldDefinitionSortKeys>;
};


/** Represents information about a company which is also a customer of the shop. */
export type Shopify_CompanyMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents information about a company which is also a customer of the shop. */
export type Shopify_CompanyOrdersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_OrderSortKeys>;
};


/** Represents information about a company which is also a customer of the shop. */
export type Shopify_CompanyPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace: Scalars['String']['input'];
};


/** Represents information about a company which is also a customer of the shop. */
export type Shopify_CompanyPrivateMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Represents a billing or shipping address for a company location. */
export type Shopify_CompanyAddress = Shopify_Node & {
  __typename?: 'Shopify_CompanyAddress';
  /** The first line of the address. Typically the street address or PO Box number. */
  address1: Scalars['String']['output'];
  /** The second line of the address. Typically the number of the apartment, suite, or unit. */
  address2?: Maybe<Scalars['String']['output']>;
  /** The name of the city, district, village, or town. */
  city?: Maybe<Scalars['String']['output']>;
  /** The name of the company. */
  companyName: Scalars['String']['output'];
  /** The name of the country. */
  country?: Maybe<Scalars['String']['output']>;
  /**
   * The two-letter code for the country of the address.
   * For example, US.
   */
  countryCode: Shopify_CountryCode;
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company address was created. */
  createdAt: Scalars['DateTime']['output'];
  /** The first name of the recipient. */
  firstName?: Maybe<Scalars['String']['output']>;
  /** The formatted version of the address. */
  formattedAddress: Array<Scalars['String']['output']>;
  /** A comma-separated list of the values for city, province, and country. */
  formattedArea?: Maybe<Scalars['String']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The last name of the recipient. */
  lastName?: Maybe<Scalars['String']['output']>;
  /**
   * A unique phone number for the customer.
   * Formatted using E.164 standard. For example, _+16135551111_.
   */
  phone?: Maybe<Scalars['String']['output']>;
  /** The region of the address, such as the province, state, or district. */
  province?: Maybe<Scalars['String']['output']>;
  /** The identity of the recipient e.g. 'Receiving Department'. */
  recipient?: Maybe<Scalars['String']['output']>;
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company address was last updated. */
  updatedAt: Scalars['DateTime']['output'];
  /** The zip or postal code of the address. */
  zip?: Maybe<Scalars['String']['output']>;
  /**
   * The two-letter code for the region.
   * For example, ON.
   */
  zoneCode?: Maybe<Scalars['String']['output']>;
};


/** Represents a billing or shipping address for a company location. */
export type Shopify_CompanyAddressFormattedAddressArgs = {
  withCompanyName?: InputMaybe<Scalars['Boolean']['input']>;
  withName?: InputMaybe<Scalars['Boolean']['input']>;
};

/** A person that acts on behalf of company associated to [a customer](https://shopify.dev/api/admin-graphql/latest/objects/customer). */
export type Shopify_CompanyContact = Shopify_Node & {
  __typename?: 'Shopify_CompanyContact';
  /** The company to which the contact belongs. */
  company: Shopify_Company;
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company contact was created at Shopify. */
  createdAt: Scalars['DateTime']['output'];
  /** The customer associated to this contact. */
  customer: Shopify_Customer;
  /** The list of draft orders for the company contact. */
  draftOrders: Shopify_DraftOrderConnection;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** Whether the contact is the main contact of the company. */
  isMainContact: Scalars['Boolean']['output'];
  /** The lifetime duration of the company contact, since its creation date on Shopify. Examples: `1 year`, `2 months`, `3 days`. */
  lifetimeDuration: Scalars['String']['output'];
  /** The company contact's locale (language). */
  locale?: Maybe<Scalars['String']['output']>;
  /** The list of orders for the company contact. */
  orders: Shopify_OrderConnection;
  /** The list of roles assigned to this company contact. */
  roleAssignments: Shopify_CompanyContactRoleAssignmentConnection;
  /** The company contact's job title. */
  title?: Maybe<Scalars['String']['output']>;
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company contact was last updated. */
  updatedAt: Scalars['DateTime']['output'];
};


/** A person that acts on behalf of company associated to [a customer](https://shopify.dev/api/admin-graphql/latest/objects/customer). */
export type Shopify_CompanyContactDraftOrdersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_DraftOrderSortKeys>;
};


/** A person that acts on behalf of company associated to [a customer](https://shopify.dev/api/admin-graphql/latest/objects/customer). */
export type Shopify_CompanyContactOrdersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_OrderSortKeys>;
};


/** A person that acts on behalf of company associated to [a customer](https://shopify.dev/api/admin-graphql/latest/objects/customer). */
export type Shopify_CompanyContactRoleAssignmentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_CompanyContactRoleAssignmentSortKeys>;
};

/** An auto-generated type for paginating through multiple CompanyContacts. */
export type Shopify_CompanyContactConnection = {
  __typename?: 'Shopify_CompanyContactConnection';
  /** A list of edges. */
  edges: Array<Shopify_CompanyContactEdge>;
  /** A list of the nodes contained in CompanyContactEdge. */
  nodes: Array<Shopify_CompanyContact>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one CompanyContact and a cursor during pagination. */
export type Shopify_CompanyContactEdge = {
  __typename?: 'Shopify_CompanyContactEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of CompanyContactEdge. */
  node: Shopify_CompanyContact;
};

/** The role for a [company contact](https://shopify.dev/api/admin-graphql/latest/objects/companycontact). */
export type Shopify_CompanyContactRole = Shopify_Node & {
  __typename?: 'Shopify_CompanyContactRole';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /**
   * The name of a role.
   * For example, `admin` or `buyer`.
   */
  name: Scalars['String']['output'];
  /** A note for the role. */
  note?: Maybe<Scalars['String']['output']>;
};

/** The CompanyContactRoleAssignment describes the company and location associated to a company contact's role. */
export type Shopify_CompanyContactRoleAssignment = Shopify_Node & {
  __typename?: 'Shopify_CompanyContactRoleAssignment';
  /** The company this role assignment belongs to. */
  company: Shopify_Company;
  /** The company contact for whom this role is assigned. */
  companyContact: Shopify_CompanyContact;
  /** The company location to which the role is assigned. */
  companyLocation: Shopify_CompanyLocation;
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the assignment record was created. */
  createdAt: Scalars['DateTime']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The role that's assigned to the company contact. */
  role: Shopify_CompanyContactRole;
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the assignment record was last updated. */
  updatedAt: Scalars['DateTime']['output'];
};

/** An auto-generated type for paginating through multiple CompanyContactRoleAssignments. */
export type Shopify_CompanyContactRoleAssignmentConnection = {
  __typename?: 'Shopify_CompanyContactRoleAssignmentConnection';
  /** A list of edges. */
  edges: Array<Shopify_CompanyContactRoleAssignmentEdge>;
  /** A list of the nodes contained in CompanyContactRoleAssignmentEdge. */
  nodes: Array<Shopify_CompanyContactRoleAssignment>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one CompanyContactRoleAssignment and a cursor during pagination. */
export type Shopify_CompanyContactRoleAssignmentEdge = {
  __typename?: 'Shopify_CompanyContactRoleAssignmentEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of CompanyContactRoleAssignmentEdge. */
  node: Shopify_CompanyContactRoleAssignment;
};

/** The set of valid sort keys for the CompanyContactRoleAssignment query. */
export enum Shopify_CompanyContactRoleAssignmentSortKeys {
  /** Sort by the `created_at` value. */
  CreatedAt = 'CREATED_AT',
  /** Sort by the `id` value. */
  Id = 'ID',
  /** Sort by the `location_name` value. */
  LocationName = 'LOCATION_NAME',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE',
  /** Sort by the `updated_at` value. */
  UpdatedAt = 'UPDATED_AT'
}

/** An auto-generated type for paginating through multiple CompanyContactRoles. */
export type Shopify_CompanyContactRoleConnection = {
  __typename?: 'Shopify_CompanyContactRoleConnection';
  /** A list of edges. */
  edges: Array<Shopify_CompanyContactRoleEdge>;
  /** A list of the nodes contained in CompanyContactRoleEdge. */
  nodes: Array<Shopify_CompanyContactRole>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one CompanyContactRole and a cursor during pagination. */
export type Shopify_CompanyContactRoleEdge = {
  __typename?: 'Shopify_CompanyContactRoleEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of CompanyContactRoleEdge. */
  node: Shopify_CompanyContactRole;
};

/** The set of valid sort keys for the CompanyContactRole query. */
export enum Shopify_CompanyContactRoleSortKeys {
  /** Sort by the `created_at` value. */
  CreatedAt = 'CREATED_AT',
  /** Sort by the `id` value. */
  Id = 'ID',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE',
  /** Sort by the `updated_at` value. */
  UpdatedAt = 'UPDATED_AT'
}

/** The set of valid sort keys for the CompanyContact query. */
export enum Shopify_CompanyContactSortKeys {
  /** Sort by the `company_id` value. */
  CompanyId = 'COMPANY_ID',
  /** Sort by the `created_at` value. */
  CreatedAt = 'CREATED_AT',
  /** Sort by the `email` value. */
  Email = 'EMAIL',
  /** Sort by the `id` value. */
  Id = 'ID',
  /** Sort by the `name` value. */
  Name = 'NAME',
  /** Sort by the `name_email` value. */
  NameEmail = 'NAME_EMAIL',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE',
  /** Sort by the `title` value. */
  Title = 'TITLE',
  /** Sort by the `updated_at` value. */
  UpdatedAt = 'UPDATED_AT'
}

/** A location or branch of a [company that's a customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the shop. Configuration of B2B relationship, for example prices lists and checkout settings, may be done for a location. */
export type Shopify_CompanyLocation = Shopify_CommentEventSubject & Shopify_HasEvents & Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_Navigable & Shopify_Node & {
  __typename?: 'Shopify_CompanyLocation';
  /** The address used as billing address for the location. */
  billingAddress?: Maybe<Shopify_CompanyAddress>;
  /** The configuration for the buyer's B2B checkout. */
  buyerExperienceConfiguration?: Maybe<Shopify_BuyerExperienceConfiguration>;
  /** The list of catalogs associated with the company location. */
  catalogs: Shopify_CatalogConnection;
  /** The number of catalogs associated with the company location. */
  catalogsCount?: Maybe<Shopify_Count>;
  /** The company that the company location belongs to. */
  company: Shopify_Company;
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company location was created in Shopify. */
  createdAt: Scalars['DateTime']['output'];
  /** The location's currency based on the shipping address. If the shipping address is empty, then the value is the shop's primary market. */
  currency: Shopify_CurrencyCode;
  /** A default cursor that returns the single next record, sorted ascending by ID. */
  defaultCursor: Scalars['String']['output'];
  /** The list of draft orders for the company location. */
  draftOrders: Shopify_DraftOrderConnection;
  /** The paginated list of events associated with the host subject. */
  events: Shopify_EventConnection;
  /** A unique externally-supplied ID for the company location. */
  externalId?: Maybe<Scalars['String']['output']>;
  /** Whether the merchant added a timeline comment to the company location. */
  hasTimelineComment: Scalars['Boolean']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** Whether the company location is assigned a specific catalog. */
  inCatalog: Scalars['Boolean']['output'];
  /** The preferred locale of the company location. */
  locale?: Maybe<Scalars['String']['output']>;
  /** The market that includes the location's shipping address. If the shipping address is empty, then the value is the shop's primary market. */
  market: Shopify_Market;
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafield definitions. */
  metafieldDefinitions: Shopify_MetafieldDefinitionConnection;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /** The name of the company location. */
  name: Scalars['String']['output'];
  /** A note about the company location. */
  note?: Maybe<Scalars['String']['output']>;
  /**
   * The total number of orders placed for the location.
   * @deprecated Use `ordersCount` instead.
   */
  orderCount: Scalars['Int']['output'];
  /** The list of orders for the company location. */
  orders: Shopify_OrderConnection;
  /** The total number of orders placed for the location. */
  ordersCount?: Maybe<Shopify_Count>;
  /** The phone number of the company location. */
  phone?: Maybe<Scalars['String']['output']>;
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafields: Shopify_PrivateMetafieldConnection;
  /** The list of roles assigned to the company location. */
  roleAssignments: Shopify_CompanyContactRoleAssignmentConnection;
  /** The address used as shipping address for the location. */
  shippingAddress?: Maybe<Shopify_CompanyAddress>;
  /** The list of tax exemptions applied to the location. */
  taxExemptions: Array<Shopify_TaxExemption>;
  /** The tax registration ID for the company location. */
  taxRegistrationId?: Maybe<Scalars['String']['output']>;
  /** The total amount spent by the location. */
  totalSpent: Shopify_MoneyV2;
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company location was last modified. */
  updatedAt: Scalars['DateTime']['output'];
};


/** A location or branch of a [company that's a customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the shop. Configuration of B2B relationship, for example prices lists and checkout settings, may be done for a location. */
export type Shopify_CompanyLocationCatalogsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** A location or branch of a [company that's a customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the shop. Configuration of B2B relationship, for example prices lists and checkout settings, may be done for a location. */
export type Shopify_CompanyLocationDraftOrdersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_DraftOrderSortKeys>;
};


/** A location or branch of a [company that's a customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the shop. Configuration of B2B relationship, for example prices lists and checkout settings, may be done for a location. */
export type Shopify_CompanyLocationEventsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_EventSortKeys>;
};


/** A location or branch of a [company that's a customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the shop. Configuration of B2B relationship, for example prices lists and checkout settings, may be done for a location. */
export type Shopify_CompanyLocationInCatalogArgs = {
  catalogId: Scalars['ID']['input'];
};


/** A location or branch of a [company that's a customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the shop. Configuration of B2B relationship, for example prices lists and checkout settings, may be done for a location. */
export type Shopify_CompanyLocationMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace?: InputMaybe<Scalars['String']['input']>;
};


/** A location or branch of a [company that's a customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the shop. Configuration of B2B relationship, for example prices lists and checkout settings, may be done for a location. */
export type Shopify_CompanyLocationMetafieldDefinitionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  pinnedStatus?: InputMaybe<Shopify_MetafieldDefinitionPinnedStatus>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_MetafieldDefinitionSortKeys>;
};


/** A location or branch of a [company that's a customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the shop. Configuration of B2B relationship, for example prices lists and checkout settings, may be done for a location. */
export type Shopify_CompanyLocationMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** A location or branch of a [company that's a customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the shop. Configuration of B2B relationship, for example prices lists and checkout settings, may be done for a location. */
export type Shopify_CompanyLocationOrdersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_OrderSortKeys>;
};


/** A location or branch of a [company that's a customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the shop. Configuration of B2B relationship, for example prices lists and checkout settings, may be done for a location. */
export type Shopify_CompanyLocationPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace: Scalars['String']['input'];
};


/** A location or branch of a [company that's a customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the shop. Configuration of B2B relationship, for example prices lists and checkout settings, may be done for a location. */
export type Shopify_CompanyLocationPrivateMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** A location or branch of a [company that's a customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the shop. Configuration of B2B relationship, for example prices lists and checkout settings, may be done for a location. */
export type Shopify_CompanyLocationRoleAssignmentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_CompanyContactRoleAssignmentSortKeys>;
};

/** A list of products with publishing and pricing information associated with company locations. */
export type Shopify_CompanyLocationCatalog = Shopify_Catalog & Shopify_Node & {
  __typename?: 'Shopify_CompanyLocationCatalog';
  /** The company locations associated with the catalog. */
  companyLocations: Shopify_CompanyLocationConnection;
  /** The number of company locations associated with the catalog. */
  companyLocationsCount?: Maybe<Shopify_Count>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** Most recent catalog operations. */
  operations: Array<Shopify_ResourceOperation>;
  /** The price list associated with the catalog. */
  priceList?: Maybe<Shopify_PriceList>;
  /** A group of products and collections that's published to a catalog. */
  publication?: Maybe<Shopify_Publication>;
  /** The status of the catalog. */
  status: Shopify_CatalogStatus;
  /** The name of the catalog. */
  title: Scalars['String']['output'];
};


/** A list of products with publishing and pricing information associated with company locations. */
export type Shopify_CompanyLocationCatalogCompanyLocationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_CompanyLocationSortKeys>;
};

/** An auto-generated type for paginating through multiple CompanyLocations. */
export type Shopify_CompanyLocationConnection = {
  __typename?: 'Shopify_CompanyLocationConnection';
  /** A list of edges. */
  edges: Array<Shopify_CompanyLocationEdge>;
  /** A list of the nodes contained in CompanyLocationEdge. */
  nodes: Array<Shopify_CompanyLocation>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one CompanyLocation and a cursor during pagination. */
export type Shopify_CompanyLocationEdge = {
  __typename?: 'Shopify_CompanyLocationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of CompanyLocationEdge. */
  node: Shopify_CompanyLocation;
};

/** The set of valid sort keys for the CompanyLocation query. */
export enum Shopify_CompanyLocationSortKeys {
  /** Sort by the `company_and_location_name` value. */
  CompanyAndLocationName = 'COMPANY_AND_LOCATION_NAME',
  /** Sort by the `company_id` value. */
  CompanyId = 'COMPANY_ID',
  /** Sort by the `created_at` value. */
  CreatedAt = 'CREATED_AT',
  /** Sort by the `id` value. */
  Id = 'ID',
  /** Sort by the `name` value. */
  Name = 'NAME',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE',
  /** Sort by the `updated_at` value. */
  UpdatedAt = 'UPDATED_AT'
}

/** The input fields for the context data that determines the pricing of a variant. */
export type Shopify_ContextualPricingContext = {
  /** The CompanyLocation ID used to fetch company location specific prices. */
  companyLocationId?: InputMaybe<Scalars['ID']['input']>;
  /** The country code used to fetch country-specific prices. */
  country?: InputMaybe<Shopify_CountryCode>;
};

/** The context data that determines the publication status of a product. */
export type Shopify_ContextualPublicationContext = {
  /** The company location ID used to fetch company-specific publication. */
  companyLocationId?: InputMaybe<Scalars['ID']['input']>;
  /** The country code used to fetch country-specific publication. */
  country?: InputMaybe<Shopify_CountryCode>;
};

/** Details for count of elements. */
export type Shopify_Count = {
  __typename?: 'Shopify_Count';
  /** Count of elements. */
  count: Scalars['Int']['output'];
  /** Precision of count, how exact is the value. */
  precision: Shopify_CountPrecision;
};

/** The precision of the value returned by a count field. */
export enum Shopify_CountPrecision {
  /** The count is at least the value. A limit was imposed and reached. */
  AtLeast = 'AT_LEAST',
  /** The count is exactly the value. */
  Exact = 'EXACT'
}

/** The list of all the countries from the combined shipping zones for the shop. */
export type Shopify_CountriesInShippingZones = {
  __typename?: 'Shopify_CountriesInShippingZones';
  /** The list of all the countries from all the combined shipping zones. */
  countryCodes: Array<Shopify_CountryCode>;
  /** Whether 'Rest of World' has been defined in any of the shipping zones. */
  includeRestOfWorld: Scalars['Boolean']['output'];
};

/**
 * The code designating a country/region, which generally follows ISO 3166-1 alpha-2 guidelines.
 * If a territory doesn't have a country code value in the `CountryCode` enum, then it might be considered a subdivision
 * of another country. For example, the territories associated with Spain are represented by the country code `ES`,
 * and the territories associated with the United States of America are represented by the country code `US`.
 */
export enum Shopify_CountryCode {
  /** Ascension Island. */
  Ac = 'AC',
  /** Andorra. */
  Ad = 'AD',
  /** United Arab Emirates. */
  Ae = 'AE',
  /** Afghanistan. */
  Af = 'AF',
  /** Antigua & Barbuda. */
  Ag = 'AG',
  /** Anguilla. */
  Ai = 'AI',
  /** Albania. */
  Al = 'AL',
  /** Armenia. */
  Am = 'AM',
  /** Netherlands Antilles. */
  An = 'AN',
  /** Angola. */
  Ao = 'AO',
  /** Argentina. */
  Ar = 'AR',
  /** Austria. */
  At = 'AT',
  /** Australia. */
  Au = 'AU',
  /** Aruba. */
  Aw = 'AW',
  /** Åland Islands. */
  Ax = 'AX',
  /** Azerbaijan. */
  Az = 'AZ',
  /** Bosnia & Herzegovina. */
  Ba = 'BA',
  /** Barbados. */
  Bb = 'BB',
  /** Bangladesh. */
  Bd = 'BD',
  /** Belgium. */
  Be = 'BE',
  /** Burkina Faso. */
  Bf = 'BF',
  /** Bulgaria. */
  Bg = 'BG',
  /** Bahrain. */
  Bh = 'BH',
  /** Burundi. */
  Bi = 'BI',
  /** Benin. */
  Bj = 'BJ',
  /** St. Barthélemy. */
  Bl = 'BL',
  /** Bermuda. */
  Bm = 'BM',
  /** Brunei. */
  Bn = 'BN',
  /** Bolivia. */
  Bo = 'BO',
  /** Caribbean Netherlands. */
  Bq = 'BQ',
  /** Brazil. */
  Br = 'BR',
  /** Bahamas. */
  Bs = 'BS',
  /** Bhutan. */
  Bt = 'BT',
  /** Bouvet Island. */
  Bv = 'BV',
  /** Botswana. */
  Bw = 'BW',
  /** Belarus. */
  By = 'BY',
  /** Belize. */
  Bz = 'BZ',
  /** Canada. */
  Ca = 'CA',
  /** Cocos (Keeling) Islands. */
  Cc = 'CC',
  /** Congo - Kinshasa. */
  Cd = 'CD',
  /** Central African Republic. */
  Cf = 'CF',
  /** Congo - Brazzaville. */
  Cg = 'CG',
  /** Switzerland. */
  Ch = 'CH',
  /** Côte d’Ivoire. */
  Ci = 'CI',
  /** Cook Islands. */
  Ck = 'CK',
  /** Chile. */
  Cl = 'CL',
  /** Cameroon. */
  Cm = 'CM',
  /** China. */
  Cn = 'CN',
  /** Colombia. */
  Co = 'CO',
  /** Costa Rica. */
  Cr = 'CR',
  /** Cuba. */
  Cu = 'CU',
  /** Cape Verde. */
  Cv = 'CV',
  /** Curaçao. */
  Cw = 'CW',
  /** Christmas Island. */
  Cx = 'CX',
  /** Cyprus. */
  Cy = 'CY',
  /** Czechia. */
  Cz = 'CZ',
  /** Germany. */
  De = 'DE',
  /** Djibouti. */
  Dj = 'DJ',
  /** Denmark. */
  Dk = 'DK',
  /** Dominica. */
  Dm = 'DM',
  /** Dominican Republic. */
  Do = 'DO',
  /** Algeria. */
  Dz = 'DZ',
  /** Ecuador. */
  Ec = 'EC',
  /** Estonia. */
  Ee = 'EE',
  /** Egypt. */
  Eg = 'EG',
  /** Western Sahara. */
  Eh = 'EH',
  /** Eritrea. */
  Er = 'ER',
  /** Spain. */
  Es = 'ES',
  /** Ethiopia. */
  Et = 'ET',
  /** Finland. */
  Fi = 'FI',
  /** Fiji. */
  Fj = 'FJ',
  /** Falkland Islands. */
  Fk = 'FK',
  /** Faroe Islands. */
  Fo = 'FO',
  /** France. */
  Fr = 'FR',
  /** Gabon. */
  Ga = 'GA',
  /** United Kingdom. */
  Gb = 'GB',
  /** Grenada. */
  Gd = 'GD',
  /** Georgia. */
  Ge = 'GE',
  /** French Guiana. */
  Gf = 'GF',
  /** Guernsey. */
  Gg = 'GG',
  /** Ghana. */
  Gh = 'GH',
  /** Gibraltar. */
  Gi = 'GI',
  /** Greenland. */
  Gl = 'GL',
  /** Gambia. */
  Gm = 'GM',
  /** Guinea. */
  Gn = 'GN',
  /** Guadeloupe. */
  Gp = 'GP',
  /** Equatorial Guinea. */
  Gq = 'GQ',
  /** Greece. */
  Gr = 'GR',
  /** South Georgia & South Sandwich Islands. */
  Gs = 'GS',
  /** Guatemala. */
  Gt = 'GT',
  /** Guinea-Bissau. */
  Gw = 'GW',
  /** Guyana. */
  Gy = 'GY',
  /** Hong Kong SAR. */
  Hk = 'HK',
  /** Heard & McDonald Islands. */
  Hm = 'HM',
  /** Honduras. */
  Hn = 'HN',
  /** Croatia. */
  Hr = 'HR',
  /** Haiti. */
  Ht = 'HT',
  /** Hungary. */
  Hu = 'HU',
  /** Indonesia. */
  Id = 'ID',
  /** Ireland. */
  Ie = 'IE',
  /** Israel. */
  Il = 'IL',
  /** Isle of Man. */
  Im = 'IM',
  /** India. */
  In = 'IN',
  /** British Indian Ocean Territory. */
  Io = 'IO',
  /** Iraq. */
  Iq = 'IQ',
  /** Iran. */
  Ir = 'IR',
  /** Iceland. */
  Is = 'IS',
  /** Italy. */
  It = 'IT',
  /** Jersey. */
  Je = 'JE',
  /** Jamaica. */
  Jm = 'JM',
  /** Jordan. */
  Jo = 'JO',
  /** Japan. */
  Jp = 'JP',
  /** Kenya. */
  Ke = 'KE',
  /** Kyrgyzstan. */
  Kg = 'KG',
  /** Cambodia. */
  Kh = 'KH',
  /** Kiribati. */
  Ki = 'KI',
  /** Comoros. */
  Km = 'KM',
  /** St. Kitts & Nevis. */
  Kn = 'KN',
  /** North Korea. */
  Kp = 'KP',
  /** South Korea. */
  Kr = 'KR',
  /** Kuwait. */
  Kw = 'KW',
  /** Cayman Islands. */
  Ky = 'KY',
  /** Kazakhstan. */
  Kz = 'KZ',
  /** Laos. */
  La = 'LA',
  /** Lebanon. */
  Lb = 'LB',
  /** St. Lucia. */
  Lc = 'LC',
  /** Liechtenstein. */
  Li = 'LI',
  /** Sri Lanka. */
  Lk = 'LK',
  /** Liberia. */
  Lr = 'LR',
  /** Lesotho. */
  Ls = 'LS',
  /** Lithuania. */
  Lt = 'LT',
  /** Luxembourg. */
  Lu = 'LU',
  /** Latvia. */
  Lv = 'LV',
  /** Libya. */
  Ly = 'LY',
  /** Morocco. */
  Ma = 'MA',
  /** Monaco. */
  Mc = 'MC',
  /** Moldova. */
  Md = 'MD',
  /** Montenegro. */
  Me = 'ME',
  /** St. Martin. */
  Mf = 'MF',
  /** Madagascar. */
  Mg = 'MG',
  /** North Macedonia. */
  Mk = 'MK',
  /** Mali. */
  Ml = 'ML',
  /** Myanmar (Burma). */
  Mm = 'MM',
  /** Mongolia. */
  Mn = 'MN',
  /** Macao SAR. */
  Mo = 'MO',
  /** Martinique. */
  Mq = 'MQ',
  /** Mauritania. */
  Mr = 'MR',
  /** Montserrat. */
  Ms = 'MS',
  /** Malta. */
  Mt = 'MT',
  /** Mauritius. */
  Mu = 'MU',
  /** Maldives. */
  Mv = 'MV',
  /** Malawi. */
  Mw = 'MW',
  /** Mexico. */
  Mx = 'MX',
  /** Malaysia. */
  My = 'MY',
  /** Mozambique. */
  Mz = 'MZ',
  /** Namibia. */
  Na = 'NA',
  /** New Caledonia. */
  Nc = 'NC',
  /** Niger. */
  Ne = 'NE',
  /** Norfolk Island. */
  Nf = 'NF',
  /** Nigeria. */
  Ng = 'NG',
  /** Nicaragua. */
  Ni = 'NI',
  /** Netherlands. */
  Nl = 'NL',
  /** Norway. */
  No = 'NO',
  /** Nepal. */
  Np = 'NP',
  /** Nauru. */
  Nr = 'NR',
  /** Niue. */
  Nu = 'NU',
  /** New Zealand. */
  Nz = 'NZ',
  /** Oman. */
  Om = 'OM',
  /** Panama. */
  Pa = 'PA',
  /** Peru. */
  Pe = 'PE',
  /** French Polynesia. */
  Pf = 'PF',
  /** Papua New Guinea. */
  Pg = 'PG',
  /** Philippines. */
  Ph = 'PH',
  /** Pakistan. */
  Pk = 'PK',
  /** Poland. */
  Pl = 'PL',
  /** St. Pierre & Miquelon. */
  Pm = 'PM',
  /** Pitcairn Islands. */
  Pn = 'PN',
  /** Palestinian Territories. */
  Ps = 'PS',
  /** Portugal. */
  Pt = 'PT',
  /** Paraguay. */
  Py = 'PY',
  /** Qatar. */
  Qa = 'QA',
  /** Réunion. */
  Re = 'RE',
  /** Romania. */
  Ro = 'RO',
  /** Serbia. */
  Rs = 'RS',
  /** Russia. */
  Ru = 'RU',
  /** Rwanda. */
  Rw = 'RW',
  /** Saudi Arabia. */
  Sa = 'SA',
  /** Solomon Islands. */
  Sb = 'SB',
  /** Seychelles. */
  Sc = 'SC',
  /** Sudan. */
  Sd = 'SD',
  /** Sweden. */
  Se = 'SE',
  /** Singapore. */
  Sg = 'SG',
  /** St. Helena. */
  Sh = 'SH',
  /** Slovenia. */
  Si = 'SI',
  /** Svalbard & Jan Mayen. */
  Sj = 'SJ',
  /** Slovakia. */
  Sk = 'SK',
  /** Sierra Leone. */
  Sl = 'SL',
  /** San Marino. */
  Sm = 'SM',
  /** Senegal. */
  Sn = 'SN',
  /** Somalia. */
  So = 'SO',
  /** Suriname. */
  Sr = 'SR',
  /** South Sudan. */
  Ss = 'SS',
  /** São Tomé & Príncipe. */
  St = 'ST',
  /** El Salvador. */
  Sv = 'SV',
  /** Sint Maarten. */
  Sx = 'SX',
  /** Syria. */
  Sy = 'SY',
  /** Eswatini. */
  Sz = 'SZ',
  /** Tristan da Cunha. */
  Ta = 'TA',
  /** Turks & Caicos Islands. */
  Tc = 'TC',
  /** Chad. */
  Td = 'TD',
  /** French Southern Territories. */
  Tf = 'TF',
  /** Togo. */
  Tg = 'TG',
  /** Thailand. */
  Th = 'TH',
  /** Tajikistan. */
  Tj = 'TJ',
  /** Tokelau. */
  Tk = 'TK',
  /** Timor-Leste. */
  Tl = 'TL',
  /** Turkmenistan. */
  Tm = 'TM',
  /** Tunisia. */
  Tn = 'TN',
  /** Tonga. */
  To = 'TO',
  /** Türkiye. */
  Tr = 'TR',
  /** Trinidad & Tobago. */
  Tt = 'TT',
  /** Tuvalu. */
  Tv = 'TV',
  /** Taiwan. */
  Tw = 'TW',
  /** Tanzania. */
  Tz = 'TZ',
  /** Ukraine. */
  Ua = 'UA',
  /** Uganda. */
  Ug = 'UG',
  /** U.S. Outlying Islands. */
  Um = 'UM',
  /** United States. */
  Us = 'US',
  /** Uruguay. */
  Uy = 'UY',
  /** Uzbekistan. */
  Uz = 'UZ',
  /** Vatican City. */
  Va = 'VA',
  /** St. Vincent & Grenadines. */
  Vc = 'VC',
  /** Venezuela. */
  Ve = 'VE',
  /** British Virgin Islands. */
  Vg = 'VG',
  /** Vietnam. */
  Vn = 'VN',
  /** Vanuatu. */
  Vu = 'VU',
  /** Wallis & Futuna. */
  Wf = 'WF',
  /** Samoa. */
  Ws = 'WS',
  /** Kosovo. */
  Xk = 'XK',
  /** Yemen. */
  Ye = 'YE',
  /** Mayotte. */
  Yt = 'YT',
  /** South Africa. */
  Za = 'ZA',
  /** Zambia. */
  Zm = 'ZM',
  /** Zimbabwe. */
  Zw = 'ZW',
  /** Unknown Region. */
  Zz = 'ZZ'
}

/** The country-specific harmonized system code and ISO country code for an inventory item. */
export type Shopify_CountryHarmonizedSystemCode = {
  __typename?: 'Shopify_CountryHarmonizedSystemCode';
  /** The ISO 3166-1 alpha-2 country code for the country that issued the specified harmonized system code. */
  countryCode: Shopify_CountryCode;
  /** The country-specific harmonized system code. These are usually longer than 6 digits. */
  harmonizedSystemCode: Scalars['String']['output'];
};

/** An auto-generated type for paginating through multiple CountryHarmonizedSystemCodes. */
export type Shopify_CountryHarmonizedSystemCodeConnection = {
  __typename?: 'Shopify_CountryHarmonizedSystemCodeConnection';
  /** A list of edges. */
  edges: Array<Shopify_CountryHarmonizedSystemCodeEdge>;
  /** A list of the nodes contained in CountryHarmonizedSystemCodeEdge. */
  nodes: Array<Shopify_CountryHarmonizedSystemCode>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one CountryHarmonizedSystemCode and a cursor during pagination. */
export type Shopify_CountryHarmonizedSystemCodeEdge = {
  __typename?: 'Shopify_CountryHarmonizedSystemCodeEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of CountryHarmonizedSystemCodeEdge. */
  node: Shopify_CountryHarmonizedSystemCode;
};

/** The part of the image that should remain after cropping. */
export enum Shopify_CropRegion {
  /** Keep the bottom of the image. */
  Bottom = 'BOTTOM',
  /** Keep the center of the image. */
  Center = 'CENTER',
  /** Keep the left of the image. */
  Left = 'LEFT',
  /** Keep the right of the image. */
  Right = 'RIGHT',
  /** Keep the top of the image. */
  Top = 'TOP'
}

/**
 * The three-letter currency codes that represent the world currencies used in stores. These include standard ISO 4217 codes, legacy codes,
 * and non-standard codes.
 */
export enum Shopify_CurrencyCode {
  /** United Arab Emirates Dirham (AED). */
  Aed = 'AED',
  /** Afghan Afghani (AFN). */
  Afn = 'AFN',
  /** Albanian Lek (ALL). */
  All = 'ALL',
  /** Armenian Dram (AMD). */
  Amd = 'AMD',
  /** Netherlands Antillean Guilder. */
  Ang = 'ANG',
  /** Angolan Kwanza (AOA). */
  Aoa = 'AOA',
  /** Argentine Pesos (ARS). */
  Ars = 'ARS',
  /** Australian Dollars (AUD). */
  Aud = 'AUD',
  /** Aruban Florin (AWG). */
  Awg = 'AWG',
  /** Azerbaijani Manat (AZN). */
  Azn = 'AZN',
  /** Bosnia and Herzegovina Convertible Mark (BAM). */
  Bam = 'BAM',
  /** Barbadian Dollar (BBD). */
  Bbd = 'BBD',
  /** Bangladesh Taka (BDT). */
  Bdt = 'BDT',
  /** Bulgarian Lev (BGN). */
  Bgn = 'BGN',
  /** Bahraini Dinar (BHD). */
  Bhd = 'BHD',
  /** Burundian Franc (BIF). */
  Bif = 'BIF',
  /** Bermudian Dollar (BMD). */
  Bmd = 'BMD',
  /** Brunei Dollar (BND). */
  Bnd = 'BND',
  /** Bolivian Boliviano (BOB). */
  Bob = 'BOB',
  /** Brazilian Real (BRL). */
  Brl = 'BRL',
  /** Bahamian Dollar (BSD). */
  Bsd = 'BSD',
  /** Bhutanese Ngultrum (BTN). */
  Btn = 'BTN',
  /** Botswana Pula (BWP). */
  Bwp = 'BWP',
  /** Belarusian Ruble (BYN). */
  Byn = 'BYN',
  /**
   * Belarusian Ruble (BYR).
   * @deprecated `BYR` is deprecated. Use `BYN` available from version `2021-01` onwards instead.
   */
  Byr = 'BYR',
  /** Belize Dollar (BZD). */
  Bzd = 'BZD',
  /** Canadian Dollars (CAD). */
  Cad = 'CAD',
  /** Congolese franc (CDF). */
  Cdf = 'CDF',
  /** Swiss Francs (CHF). */
  Chf = 'CHF',
  /** Chilean Peso (CLP). */
  Clp = 'CLP',
  /** Chinese Yuan Renminbi (CNY). */
  Cny = 'CNY',
  /** Colombian Peso (COP). */
  Cop = 'COP',
  /** Costa Rican Colones (CRC). */
  Crc = 'CRC',
  /** Cape Verdean escudo (CVE). */
  Cve = 'CVE',
  /** Czech Koruny (CZK). */
  Czk = 'CZK',
  /** Djiboutian Franc (DJF). */
  Djf = 'DJF',
  /** Danish Kroner (DKK). */
  Dkk = 'DKK',
  /** Dominican Peso (DOP). */
  Dop = 'DOP',
  /** Algerian Dinar (DZD). */
  Dzd = 'DZD',
  /** Egyptian Pound (EGP). */
  Egp = 'EGP',
  /** Eritrean Nakfa (ERN). */
  Ern = 'ERN',
  /** Ethiopian Birr (ETB). */
  Etb = 'ETB',
  /** Euro (EUR). */
  Eur = 'EUR',
  /** Fijian Dollars (FJD). */
  Fjd = 'FJD',
  /** Falkland Islands Pounds (FKP). */
  Fkp = 'FKP',
  /** United Kingdom Pounds (GBP). */
  Gbp = 'GBP',
  /** Georgian Lari (GEL). */
  Gel = 'GEL',
  /** Ghanaian Cedi (GHS). */
  Ghs = 'GHS',
  /** Gibraltar Pounds (GIP). */
  Gip = 'GIP',
  /** Gambian Dalasi (GMD). */
  Gmd = 'GMD',
  /** Guinean Franc (GNF). */
  Gnf = 'GNF',
  /** Guatemalan Quetzal (GTQ). */
  Gtq = 'GTQ',
  /** Guyanese Dollar (GYD). */
  Gyd = 'GYD',
  /** Hong Kong Dollars (HKD). */
  Hkd = 'HKD',
  /** Honduran Lempira (HNL). */
  Hnl = 'HNL',
  /** Croatian Kuna (HRK). */
  Hrk = 'HRK',
  /** Haitian Gourde (HTG). */
  Htg = 'HTG',
  /** Hungarian Forint (HUF). */
  Huf = 'HUF',
  /** Indonesian Rupiah (IDR). */
  Idr = 'IDR',
  /** Israeli New Shekel (NIS). */
  Ils = 'ILS',
  /** Indian Rupees (INR). */
  Inr = 'INR',
  /** Iraqi Dinar (IQD). */
  Iqd = 'IQD',
  /** Iranian Rial (IRR). */
  Irr = 'IRR',
  /** Icelandic Kronur (ISK). */
  Isk = 'ISK',
  /** Jersey Pound. */
  Jep = 'JEP',
  /** Jamaican Dollars (JMD). */
  Jmd = 'JMD',
  /** Jordanian Dinar (JOD). */
  Jod = 'JOD',
  /** Japanese Yen (JPY). */
  Jpy = 'JPY',
  /** Kenyan Shilling (KES). */
  Kes = 'KES',
  /** Kyrgyzstani Som (KGS). */
  Kgs = 'KGS',
  /** Cambodian Riel. */
  Khr = 'KHR',
  /** Kiribati Dollar (KID). */
  Kid = 'KID',
  /** Comorian Franc (KMF). */
  Kmf = 'KMF',
  /** South Korean Won (KRW). */
  Krw = 'KRW',
  /** Kuwaiti Dinar (KWD). */
  Kwd = 'KWD',
  /** Cayman Dollars (KYD). */
  Kyd = 'KYD',
  /** Kazakhstani Tenge (KZT). */
  Kzt = 'KZT',
  /** Laotian Kip (LAK). */
  Lak = 'LAK',
  /** Lebanese Pounds (LBP). */
  Lbp = 'LBP',
  /** Sri Lankan Rupees (LKR). */
  Lkr = 'LKR',
  /** Liberian Dollar (LRD). */
  Lrd = 'LRD',
  /** Lesotho Loti (LSL). */
  Lsl = 'LSL',
  /** Lithuanian Litai (LTL). */
  Ltl = 'LTL',
  /** Latvian Lati (LVL). */
  Lvl = 'LVL',
  /** Libyan Dinar (LYD). */
  Lyd = 'LYD',
  /** Moroccan Dirham. */
  Mad = 'MAD',
  /** Moldovan Leu (MDL). */
  Mdl = 'MDL',
  /** Malagasy Ariary (MGA). */
  Mga = 'MGA',
  /** Macedonia Denar (MKD). */
  Mkd = 'MKD',
  /** Burmese Kyat (MMK). */
  Mmk = 'MMK',
  /** Mongolian Tugrik. */
  Mnt = 'MNT',
  /** Macanese Pataca (MOP). */
  Mop = 'MOP',
  /** Mauritanian Ouguiya (MRU). */
  Mru = 'MRU',
  /** Mauritian Rupee (MUR). */
  Mur = 'MUR',
  /** Maldivian Rufiyaa (MVR). */
  Mvr = 'MVR',
  /** Malawian Kwacha (MWK). */
  Mwk = 'MWK',
  /** Mexican Pesos (MXN). */
  Mxn = 'MXN',
  /** Malaysian Ringgits (MYR). */
  Myr = 'MYR',
  /** Mozambican Metical. */
  Mzn = 'MZN',
  /** Namibian Dollar. */
  Nad = 'NAD',
  /** Nigerian Naira (NGN). */
  Ngn = 'NGN',
  /** Nicaraguan Córdoba (NIO). */
  Nio = 'NIO',
  /** Norwegian Kroner (NOK). */
  Nok = 'NOK',
  /** Nepalese Rupee (NPR). */
  Npr = 'NPR',
  /** New Zealand Dollars (NZD). */
  Nzd = 'NZD',
  /** Omani Rial (OMR). */
  Omr = 'OMR',
  /** Panamian Balboa (PAB). */
  Pab = 'PAB',
  /** Peruvian Nuevo Sol (PEN). */
  Pen = 'PEN',
  /** Papua New Guinean Kina (PGK). */
  Pgk = 'PGK',
  /** Philippine Peso (PHP). */
  Php = 'PHP',
  /** Pakistani Rupee (PKR). */
  Pkr = 'PKR',
  /** Polish Zlotych (PLN). */
  Pln = 'PLN',
  /** Paraguayan Guarani (PYG). */
  Pyg = 'PYG',
  /** Qatari Rial (QAR). */
  Qar = 'QAR',
  /** Romanian Lei (RON). */
  Ron = 'RON',
  /** Serbian dinar (RSD). */
  Rsd = 'RSD',
  /** Russian Rubles (RUB). */
  Rub = 'RUB',
  /** Rwandan Franc (RWF). */
  Rwf = 'RWF',
  /** Saudi Riyal (SAR). */
  Sar = 'SAR',
  /** Solomon Islands Dollar (SBD). */
  Sbd = 'SBD',
  /** Seychellois Rupee (SCR). */
  Scr = 'SCR',
  /** Sudanese Pound (SDG). */
  Sdg = 'SDG',
  /** Swedish Kronor (SEK). */
  Sek = 'SEK',
  /** Singapore Dollars (SGD). */
  Sgd = 'SGD',
  /** Saint Helena Pounds (SHP). */
  Shp = 'SHP',
  /** Sierra Leonean Leone (SLL). */
  Sll = 'SLL',
  /** Somali Shilling (SOS). */
  Sos = 'SOS',
  /** Surinamese Dollar (SRD). */
  Srd = 'SRD',
  /** South Sudanese Pound (SSP). */
  Ssp = 'SSP',
  /**
   * Sao Tome And Principe Dobra (STD).
   * @deprecated `STD` is deprecated. Use `STN` available from version `2022-07` onwards instead.
   */
  Std = 'STD',
  /** Sao Tome And Principe Dobra (STN). */
  Stn = 'STN',
  /** Syrian Pound (SYP). */
  Syp = 'SYP',
  /** Swazi Lilangeni (SZL). */
  Szl = 'SZL',
  /** Thai baht (THB). */
  Thb = 'THB',
  /** Tajikistani Somoni (TJS). */
  Tjs = 'TJS',
  /** Turkmenistani Manat (TMT). */
  Tmt = 'TMT',
  /** Tunisian Dinar (TND). */
  Tnd = 'TND',
  /** Tongan Pa'anga (TOP). */
  Top = 'TOP',
  /** Turkish Lira (TRY). */
  Try = 'TRY',
  /** Trinidad and Tobago Dollars (TTD). */
  Ttd = 'TTD',
  /** Taiwan Dollars (TWD). */
  Twd = 'TWD',
  /** Tanzanian Shilling (TZS). */
  Tzs = 'TZS',
  /** Ukrainian Hryvnia (UAH). */
  Uah = 'UAH',
  /** Ugandan Shilling (UGX). */
  Ugx = 'UGX',
  /** United States Dollars (USD). */
  Usd = 'USD',
  /** Uruguayan Pesos (UYU). */
  Uyu = 'UYU',
  /** Uzbekistan som (UZS). */
  Uzs = 'UZS',
  /** Venezuelan Bolivares (VED). */
  Ved = 'VED',
  /**
   * Venezuelan Bolivares (VEF).
   * @deprecated `VEF` is deprecated. Use `VES` available from version `2020-10` onwards instead.
   */
  Vef = 'VEF',
  /** Venezuelan Bolivares Soberanos (VES). */
  Ves = 'VES',
  /** Vietnamese đồng (VND). */
  Vnd = 'VND',
  /** Vanuatu Vatu (VUV). */
  Vuv = 'VUV',
  /** Samoan Tala (WST). */
  Wst = 'WST',
  /** Central African CFA Franc (XAF). */
  Xaf = 'XAF',
  /** East Caribbean Dollar (XCD). */
  Xcd = 'XCD',
  /** West African CFA franc (XOF). */
  Xof = 'XOF',
  /** CFP Franc (XPF). */
  Xpf = 'XPF',
  /** Unrecognized currency. */
  Xxx = 'XXX',
  /** Yemeni Rial (YER). */
  Yer = 'YER',
  /** South African Rand (ZAR). */
  Zar = 'ZAR',
  /** Zambian Kwacha (ZMW). */
  Zmw = 'ZMW'
}

/** Currency formats configured for the merchant. These formats are available to use within Liquid. */
export type Shopify_CurrencyFormats = {
  __typename?: 'Shopify_CurrencyFormats';
  /** Money without currency in HTML. */
  moneyFormat: Scalars['Shopify_FormattedString']['output'];
  /** Money without currency in emails. */
  moneyInEmailsFormat: Scalars['String']['output'];
  /** Money with currency in HTML. */
  moneyWithCurrencyFormat: Scalars['Shopify_FormattedString']['output'];
  /** Money with currency in emails. */
  moneyWithCurrencyInEmailsFormat: Scalars['String']['output'];
};

/** A setting for a presentment currency. */
export type Shopify_CurrencySetting = {
  __typename?: 'Shopify_CurrencySetting';
  /** The currency's ISO code. */
  currencyCode: Shopify_CurrencyCode;
  /** The full name of the currency. */
  currencyName: Scalars['String']['output'];
  /** Whether the currency is enabled or not. An enabled currency setting is visible to buyers and allows orders to be generated with that currency as presentment. */
  enabled: Scalars['Boolean']['output'];
  /** The date and time when the active exchange rate for the currency was last modified. It can be the automatic rate's creation date, or the manual rate's last updated at date if active. */
  rateUpdatedAt?: Maybe<Scalars['DateTime']['output']>;
};

/** An auto-generated type for paginating through multiple CurrencySettings. */
export type Shopify_CurrencySettingConnection = {
  __typename?: 'Shopify_CurrencySettingConnection';
  /** A list of edges. */
  edges: Array<Shopify_CurrencySettingEdge>;
  /** A list of the nodes contained in CurrencySettingEdge. */
  nodes: Array<Shopify_CurrencySetting>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one CurrencySetting and a cursor during pagination. */
export type Shopify_CurrencySettingEdge = {
  __typename?: 'Shopify_CurrencySettingEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of CurrencySettingEdge. */
  node: Shopify_CurrencySetting;
};

/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_Customer = Shopify_CommentEventSubject & Shopify_HasEvents & Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_LegacyInteroperability & Shopify_Node & {
  __typename?: 'Shopify_Customer';
  /** A list of addresses associated with the customer. */
  addresses: Array<Shopify_MailingAddress>;
  /** The total amount that the customer has spent on orders in their lifetime. */
  amountSpent: Shopify_MoneyV2;
  /**
   * Whether the merchant can delete the customer from their store.
   *
   * A customer can be deleted from a store only if they haven't yet made an order. After a customer makes an
   * order, they can't be deleted from a store.
   */
  canDelete: Scalars['Boolean']['output'];
  /** A list of the customer's company contact profiles. */
  companyContactProfiles: Array<Shopify_CompanyContact>;
  /** The date and time when the customer was added to the store. */
  createdAt: Scalars['DateTime']['output'];
  /** The default address associated with the customer. */
  defaultAddress?: Maybe<Shopify_MailingAddress>;
  /**
   * The full name of the customer, based on the values for first_name and last_name. If the first_name and
   * last_name are not available, then this falls back to the customer's email address, and if that is not available, the customer's phone number.
   */
  displayName: Scalars['String']['output'];
  /** The customer's email address. */
  email?: Maybe<Scalars['String']['output']>;
  /**
   * The current email marketing state for the customer.
   * If the customer doesn't have an email address, then this property is `null`.
   */
  emailMarketingConsent?: Maybe<Shopify_CustomerEmailMarketingConsentState>;
  /** A list of events associated with the customer. */
  events: Shopify_EventConnection;
  /** The customer's first name. */
  firstName?: Maybe<Scalars['String']['output']>;
  /**
   * Whether the merchant has added timeline comments about the customer on the customer's page.
   * @deprecated To query for comments on the timeline, use the events connection and a `query` argument containing `verb:comment`, or look for a `CommentEvent` in the `__typename` of events.
   */
  hasTimelineComment: Scalars['Boolean']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The image associated with the customer. */
  image: Shopify_Image;
  /** The customer's last name. */
  lastName?: Maybe<Scalars['String']['output']>;
  /** The customer's last order. */
  lastOrder?: Maybe<Shopify_Order>;
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['Shopify_UnsignedInt64']['output'];
  /**
   * The amount of time since the customer was first added to the store.
   *
   * Example: 'about 12 years'.
   */
  lifetimeDuration: Scalars['String']['output'];
  /** The customer's locale. */
  locale: Scalars['String']['output'];
  /** The market that includes the customer’s default address. */
  market?: Maybe<Shopify_Market>;
  /** Whether the customer can be merged with another customer. */
  mergeable: Shopify_CustomerMergeable;
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafield definitions. */
  metafieldDefinitions: Shopify_MetafieldDefinitionConnection;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /** A unique identifier for the customer that's used with Multipass login. */
  multipassIdentifier?: Maybe<Scalars['String']['output']>;
  /** A note about the customer. */
  note?: Maybe<Scalars['String']['output']>;
  /** The number of orders that the customer has made at the store in their lifetime. */
  numberOfOrders: Scalars['Shopify_UnsignedInt64']['output'];
  /** A list of the customer's orders. */
  orders: Shopify_OrderConnection;
  /** A list of the customer's payment methods. */
  paymentMethods: Shopify_CustomerPaymentMethodConnection;
  /** The customer's phone number. */
  phone?: Maybe<Scalars['String']['output']>;
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafields: Shopify_PrivateMetafieldConnection;
  /** Possible subscriber states of a customer defined by their subscription contracts. */
  productSubscriberStatus: Shopify_CustomerProductSubscriberStatus;
  /**
   * The current SMS marketing state for the customer's phone number.
   *
   * If the customer does not have a phone number, then this property is `null`.
   */
  smsMarketingConsent?: Maybe<Shopify_CustomerSmsMarketingConsentState>;
  /** The state of the customer's account with the shop. */
  state: Shopify_CustomerState;
  /** The statistics for a given customer. */
  statistics: Shopify_CustomerStatistics;
  /** A list of the customer's subscription contracts. */
  subscriptionContracts: Shopify_SubscriptionContractConnection;
  /** A comma separated list of tags that have been added to the customer. */
  tags: Array<Scalars['String']['output']>;
  /** Whether the customer is exempt from being charged taxes on their orders. */
  taxExempt: Scalars['Boolean']['output'];
  /** The list of tax exemptions applied to the customer. */
  taxExemptions: Array<Shopify_TaxExemption>;
  /** The URL to unsubscribe the customer from the mailing list. */
  unsubscribeUrl: Scalars['Shopify_URL']['output'];
  /** The date and time when the customer was last updated. */
  updatedAt: Scalars['DateTime']['output'];
  /**
   * Whether the email address is formatted correctly.
   *
   * Returns `true` when the email is formatted correctly and
   * belongs to an existing domain. This doesn't guarantee that
   * the email address actually exists.
   */
  validEmailAddress: Scalars['Boolean']['output'];
  /** Whether the customer has verified their email address. Defaults to `true` if the customer is created through the Shopify admin or API. */
  verifiedEmail: Scalars['Boolean']['output'];
};


/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_CustomerAddressesArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
};


/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_CustomerEventsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_EventSortKeys>;
};


/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_CustomerMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace?: InputMaybe<Scalars['String']['input']>;
};


/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_CustomerMetafieldDefinitionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  pinnedStatus?: InputMaybe<Shopify_MetafieldDefinitionPinnedStatus>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_MetafieldDefinitionSortKeys>;
};


/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_CustomerMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_CustomerOrdersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_OrderSortKeys>;
};


/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_CustomerPaymentMethodsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  showRevoked?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_CustomerPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace: Scalars['String']['input'];
};


/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_CustomerPrivateMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_CustomerSubscriptionContractsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Information about the shop's customer accounts. */
export type Shopify_CustomerAccountsV2 = {
  __typename?: 'Shopify_CustomerAccountsV2';
  /** Indicates which version of customer accounts the merchant is using in online store and checkout. */
  customerAccountsVersion: Shopify_CustomerAccountsVersion;
  /** Login links are shown in online store and checkout. */
  loginLinksVisibleOnStorefrontAndCheckout: Scalars['Boolean']['output'];
  /** Customers are required to log in to their account before checkout. */
  loginRequiredAtCheckout: Scalars['Boolean']['output'];
  /** The root url for the customer accounts pages. */
  url?: Maybe<Scalars['Shopify_URL']['output']>;
};

/** The login redirection target for customer accounts. */
export enum Shopify_CustomerAccountsVersion {
  /** The customer is redirected to the classic customer accounts login page. */
  Classic = 'CLASSIC',
  /** The customer is redirected to the new customer accounts login page. */
  NewCustomerAccounts = 'NEW_CUSTOMER_ACCOUNTS'
}

/** Possible error codes that can be returned by `CustomerCancelDataErasureUserError`. */
export enum Shopify_CustomerCancelDataErasureErrorCode {
  /** Customer does not exist. */
  DoesNotExist = 'DOES_NOT_EXIST',
  /** Failed to cancel customer data erasure. */
  FailedToCancel = 'FAILED_TO_CANCEL',
  /** Customer's data is not scheduled for erasure. */
  NotBeingErased = 'NOT_BEING_ERASED'
}

/** An error that occurs when cancelling a customer data erasure request. */
export type Shopify_CustomerCancelDataErasureUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_CustomerCancelDataErasureUserError';
  /** The error code. */
  code?: Maybe<Shopify_CustomerCancelDataErasureErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** An auto-generated type for paginating through multiple Customers. */
export type Shopify_CustomerConnection = {
  __typename?: 'Shopify_CustomerConnection';
  /** A list of edges. */
  edges: Array<Shopify_CustomerEdge>;
  /** A list of the nodes contained in CustomerEdge. */
  nodes: Array<Shopify_Customer>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** The source that collected the customer's consent to receive marketing materials. */
export enum Shopify_CustomerConsentCollectedFrom {
  /** The customer consent was collected outside of Shopify. */
  Other = 'OTHER',
  /** The customer consent was collected by Shopify. */
  Shopify = 'SHOPIFY'
}

/** Represents a card instrument for customer payment method. */
export type Shopify_CustomerCreditCard = {
  __typename?: 'Shopify_CustomerCreditCard';
  /** The billing address of the card. */
  billingAddress?: Maybe<Shopify_CustomerCreditCardBillingAddress>;
  /** The brand of the card. */
  brand: Scalars['String']['output'];
  /** Whether the card is about to expire. */
  expiresSoon: Scalars['Boolean']['output'];
  /** The expiry month of the card. */
  expiryMonth: Scalars['Int']['output'];
  /** The expiry year of the card. */
  expiryYear: Scalars['Int']['output'];
  /** The card's BIN number. */
  firstDigits?: Maybe<Scalars['String']['output']>;
  /** The payment method can be revoked if there are no active subscription contracts. */
  isRevocable: Scalars['Boolean']['output'];
  /** The last 4 digits of the card. */
  lastDigits: Scalars['String']['output'];
  /** The masked card number with only the last 4 digits displayed. */
  maskedNumber: Scalars['String']['output'];
  /** The name of the card holder. */
  name: Scalars['String']['output'];
  /** The source of the card if coming from a wallet such as Apple Pay. */
  source?: Maybe<Scalars['String']['output']>;
  /** The last 4 digits of the Device Account Number. */
  virtualLastDigits?: Maybe<Scalars['String']['output']>;
};

/** The billing address of a credit card payment instrument. */
export type Shopify_CustomerCreditCardBillingAddress = {
  __typename?: 'Shopify_CustomerCreditCardBillingAddress';
  /** The first line of the address. Typically the street address or PO Box number. */
  address1?: Maybe<Scalars['String']['output']>;
  /** The name of the city, district, village, or town. */
  city?: Maybe<Scalars['String']['output']>;
  /** The name of the country. */
  country?: Maybe<Scalars['String']['output']>;
  /**
   * The two-letter code for the country of the address.
   * For example, US.
   */
  countryCode?: Maybe<Shopify_CountryCode>;
  /** The first name in the billing address. */
  firstName?: Maybe<Scalars['String']['output']>;
  /** The last name in the billing address. */
  lastName?: Maybe<Scalars['String']['output']>;
  /** The region of the address, such as the province, state, or district. */
  province?: Maybe<Scalars['String']['output']>;
  /**
   * The two-letter code for the region.
   * For example, ON.
   */
  provinceCode?: Maybe<Scalars['String']['output']>;
  /** The zip or postal code of the address. */
  zip?: Maybe<Scalars['String']['output']>;
};

/** An auto-generated type which holds one Customer and a cursor during pagination. */
export type Shopify_CustomerEdge = {
  __typename?: 'Shopify_CustomerEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of CustomerEdge. */
  node: Shopify_Customer;
};

/** Represents an email address. */
export type Shopify_CustomerEmailAddress = {
  __typename?: 'Shopify_CustomerEmailAddress';
  /** The customer's default email address. */
  emailAddress: Scalars['String']['output'];
  /** Whether the customer has subscribed to email marketing. */
  marketingState: Shopify_CustomerEmailAddressMarketingState;
  /** The URL to unsubscribe a member from all mailing lists. */
  marketingUnsubscribeUrl: Scalars['Shopify_URL']['output'];
  /** Whether the customer has opted in to having their opened emails tracked. */
  openTrackingLevel: Shopify_CustomerEmailAddressOpenTrackingLevel;
  /** The URL that can be used to opt a customer in or out of email open tracking. */
  openTrackingUrl: Scalars['Shopify_URL']['output'];
};

/** Possible marketing states for the customer’s email address. */
export enum Shopify_CustomerEmailAddressMarketingState {
  /** The customer’s email address marketing state is invalid. */
  Invalid = 'INVALID',
  /** The customer is not subscribed to email marketing. */
  NotSubscribed = 'NOT_SUBSCRIBED',
  /** The customer is in the process of subscribing to email marketing. */
  Pending = 'PENDING',
  /** The customer is subscribed to email marketing. */
  Subscribed = 'SUBSCRIBED',
  /** The customer is not subscribed to email marketing but was previously subscribed. */
  Unsubscribed = 'UNSUBSCRIBED'
}

/** The different levels related to whether a customer has opted in to having their opened emails tracked. */
export enum Shopify_CustomerEmailAddressOpenTrackingLevel {
  /** The customer has opted in to having their open emails tracked. */
  OptedIn = 'OPTED_IN',
  /** The customer has opted out of having their open emails tracked. */
  OptedOut = 'OPTED_OUT',
  /** The customer has not specified whether they want to opt in or out of having their open emails tracked. */
  Unknown = 'UNKNOWN'
}

/** The record of when a customer consented to receive marketing material by email. */
export type Shopify_CustomerEmailMarketingConsentState = {
  __typename?: 'Shopify_CustomerEmailMarketingConsentState';
  /**
   * The date and time at which the customer consented to receive marketing material by email.
   * The customer's consent state reflects the consent record with the most recent `consent_updated_at` date.
   * If no date is provided, then the date and time at which the consent information was sent is used.
   */
  consentUpdatedAt?: Maybe<Scalars['DateTime']['output']>;
  /**
   * The marketing subscription opt-in level, as described by the M3AAWG best practices guidelines,
   * that the customer gave when they consented to receive marketing material by email.
   */
  marketingOptInLevel?: Maybe<Shopify_CustomerMarketingOptInLevel>;
  /** The current email marketing state for the customer. */
  marketingState: Shopify_CustomerEmailMarketingState;
};

/** An error that occurs during the execution of `CustomerEmailMarketingConsentUpdate`. */
export type Shopify_CustomerEmailMarketingConsentUpdateUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_CustomerEmailMarketingConsentUpdateUserError';
  /** The error code. */
  code?: Maybe<Shopify_CustomerEmailMarketingConsentUpdateUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `CustomerEmailMarketingConsentUpdateUserError`. */
export enum Shopify_CustomerEmailMarketingConsentUpdateUserErrorCode {
  /** The input value isn't included in the list. */
  Inclusion = 'INCLUSION',
  /** Unexpected internal error happened. */
  InternalError = 'INTERNAL_ERROR',
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** Missing a required argument. */
  MissingArgument = 'MISSING_ARGUMENT'
}

/** The possible email marketing states for a customer. */
export enum Shopify_CustomerEmailMarketingState {
  /** The customer’s email address marketing state is invalid. */
  Invalid = 'INVALID',
  /** The customer isn't subscribed to email marketing. */
  NotSubscribed = 'NOT_SUBSCRIBED',
  /** The customer is in the process of subscribing to email marketing. */
  Pending = 'PENDING',
  /** The customer's personal data is erased. This value is internally-set and read-only. */
  Redacted = 'REDACTED',
  /** The customer is subscribed to email marketing. */
  Subscribed = 'SUBSCRIBED',
  /** The customer isn't currently subscribed to email marketing but was previously subscribed. */
  Unsubscribed = 'UNSUBSCRIBED'
}

/** Represents a customer's visiting activities on a shop's online store. */
export type Shopify_CustomerJourney = {
  __typename?: 'Shopify_CustomerJourney';
  /** The position of the current order within the customer's order history. */
  customerOrderIndex: Scalars['Int']['output'];
  /** The amount of days between first session and order creation date. First session represents first session since the last order, or first session within the 30 day attribution window, if more than 30 days has passed since the last order. */
  daysToConversion: Scalars['Int']['output'];
  /** The customer's first session going into the shop. */
  firstVisit: Shopify_CustomerVisit;
  /** The last session before an order is made. */
  lastVisit?: Maybe<Shopify_CustomerVisit>;
  /** Events preceding a customer order, such as shop sessions. */
  moments: Array<Shopify_CustomerMoment>;
};

/** Represents a customer's visiting activities on a shop's online store. */
export type Shopify_CustomerJourneySummary = {
  __typename?: 'Shopify_CustomerJourneySummary';
  /** The position of the current order within the customer's order history. Test orders aren't included. */
  customerOrderIndex?: Maybe<Scalars['Int']['output']>;
  /** The number of days between the first session and the order creation date. The first session represents the first session since the last order, or the first session within the 30 day attribution window, if more than 30 days have passed since the last order. */
  daysToConversion?: Maybe<Scalars['Int']['output']>;
  /** The customer's first session going into the shop. */
  firstVisit?: Maybe<Shopify_CustomerVisit>;
  /** The last session before an order is made. */
  lastVisit?: Maybe<Shopify_CustomerVisit>;
  /** The events preceding a customer's order, such as shop sessions. */
  moments?: Maybe<Shopify_CustomerMomentConnection>;
  /** The total number of customer moments associated with this order. Returns null if the order is still in the process of being attributed. */
  momentsCount?: Maybe<Shopify_Count>;
  /** Whether the attributed sessions for the order have been created yet. */
  ready: Scalars['Boolean']['output'];
};


/** Represents a customer's visiting activities on a shop's online store. */
export type Shopify_CustomerJourneySummaryMomentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * The possible values for the marketing subscription opt-in level enabled at the time the customer consented to receive marketing information.
 *
 * The levels are defined by [the M3AAWG best practices guideline
 *   document](https://www.m3aawg.org/sites/maawg/files/news/M3AAWG_Senders_BCP_Ver3-2015-02.pdf).
 */
export enum Shopify_CustomerMarketingOptInLevel {
  /**
   * After providing their information, the customer receives a confirmation and is required to
   * perform a intermediate step before receiving marketing information.
   */
  ConfirmedOptIn = 'CONFIRMED_OPT_IN',
  /**
   * After providing their information, the customer receives marketing information without any
   * intermediate steps.
   */
  SingleOptIn = 'SINGLE_OPT_IN',
  /** The customer receives marketing information but how they were opted in is unknown. */
  Unknown = 'UNKNOWN'
}

/** The error blocking a customer merge. */
export type Shopify_CustomerMergeError = {
  __typename?: 'Shopify_CustomerMergeError';
  /** The list of fields preventing the customer from being merged. */
  errorFields: Array<Shopify_CustomerMergeErrorFieldType>;
  /** The customer merge error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `CustomerMergeUserError`. */
export enum Shopify_CustomerMergeErrorCode {
  /** The customer cannot be merged because it has associated gift cards. */
  CustomerHasGiftCards = 'CUSTOMER_HAS_GIFT_CARDS',
  /** An internal error occurred. */
  InternalError = 'INTERNAL_ERROR',
  /** The customer cannot be merged. */
  InvalidCustomer = 'INVALID_CUSTOMER',
  /** The customer ID is invalid. */
  InvalidCustomerId = 'INVALID_CUSTOMER_ID',
  /** The customer is missing the attribute requested for override. */
  MissingOverrideAttribute = 'MISSING_OVERRIDE_ATTRIBUTE',
  /** The override attribute is invalid. */
  OverrideAttributeInvalid = 'OVERRIDE_ATTRIBUTE_INVALID'
}

/** The types of the hard blockers preventing a customer from being merged to another customer. */
export enum Shopify_CustomerMergeErrorFieldType {
  /** The customer is a company contact. */
  CompanyContact = 'COMPANY_CONTACT',
  /** The customer has payment methods. */
  CustomerPaymentMethods = 'CUSTOMER_PAYMENT_METHODS',
  /** The customer does not exist. */
  DeletedAt = 'DELETED_AT',
  /** The customer has gift cards. */
  GiftCards = 'GIFT_CARDS',
  /** The customer has a merge in progress. */
  MergeInProgress = 'MERGE_IN_PROGRESS',
  /** The customer has a multipass identifier. */
  MultipassIdentifier = 'MULTIPASS_IDENTIFIER',
  /** The customer has a pending data request. */
  PendingDataRequest = 'PENDING_DATA_REQUEST',
  /** The customer has a pending or completed redaction. */
  RedactedAt = 'REDACTED_AT',
  /** The customer has a subscription history. */
  Subscriptions = 'SUBSCRIPTIONS'
}

/** A merge request for merging two customers. */
export type Shopify_CustomerMergeRequest = {
  __typename?: 'Shopify_CustomerMergeRequest';
  /** The merge errors that occurred during the customer merge request. */
  customerMergeErrors: Array<Shopify_CustomerMergeError>;
  /** The UUID of the merge job. */
  jobId?: Maybe<Scalars['ID']['output']>;
  /** The ID of the customer resulting from the merge. */
  resultingCustomerId: Scalars['ID']['output'];
  /** The status of the customer merge request. */
  status: Shopify_CustomerMergeRequestStatus;
};

/** The status of the customer merge request. */
export enum Shopify_CustomerMergeRequestStatus {
  /** The customer merge request has been completed. */
  Completed = 'COMPLETED',
  /** The customer merge request has failed. */
  Failed = 'FAILED',
  /** The customer merge request is currently in progress. */
  InProgress = 'IN_PROGRESS',
  /** The customer merge request has been requested. */
  Requested = 'REQUESTED'
}

/** An error that occurs while merging two customers. */
export type Shopify_CustomerMergeUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_CustomerMergeUserError';
  /** The error code. */
  code?: Maybe<Shopify_CustomerMergeErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** An object that represents whether a customer can be merged with another customer. */
export type Shopify_CustomerMergeable = {
  __typename?: 'Shopify_CustomerMergeable';
  /** The list of fields preventing the customer from being merged. */
  errorFields: Array<Shopify_CustomerMergeErrorFieldType>;
  /** Whether the customer can be merged with another customer. */
  isMergeable: Scalars['Boolean']['output'];
  /** The merge request if one is currently in progress. */
  mergeInProgress?: Maybe<Shopify_CustomerMergeRequest>;
  /** The reason why the customer can't be merged with another customer. */
  reason?: Maybe<Scalars['String']['output']>;
};

/** Represents a session preceding an order, often used for building a timeline of events leading to an order. */
export type Shopify_CustomerMoment = {
  /** The date and time when the customer's session occurred. */
  occurredAt: Scalars['DateTime']['output'];
};

/** An auto-generated type for paginating through multiple CustomerMoments. */
export type Shopify_CustomerMomentConnection = {
  __typename?: 'Shopify_CustomerMomentConnection';
  /** A list of edges. */
  edges: Array<Shopify_CustomerMomentEdge>;
  /** A list of the nodes contained in CustomerMomentEdge. */
  nodes: Array<Shopify_CustomerMoment>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one CustomerMoment and a cursor during pagination. */
export type Shopify_CustomerMomentEdge = {
  __typename?: 'Shopify_CustomerMomentEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of CustomerMomentEdge. */
  node: Shopify_CustomerMoment;
};

/** All possible instruments for CustomerPaymentMethods. */
export type Shopify_CustomerPaymentInstrument = Shopify_CustomerCreditCard | Shopify_CustomerPaypalBillingAgreement | Shopify_CustomerShopPayAgreement;

/** The billing address of a payment instrument. */
export type Shopify_CustomerPaymentInstrumentBillingAddress = {
  __typename?: 'Shopify_CustomerPaymentInstrumentBillingAddress';
  /** The first line of the address. Typically the street address or PO Box number. */
  address1?: Maybe<Scalars['String']['output']>;
  /** The name of the city, district, village, or town. */
  city?: Maybe<Scalars['String']['output']>;
  /** The name of the country. */
  country?: Maybe<Scalars['String']['output']>;
  /**
   * The two-letter code for the country of the address.
   * For example, US.
   */
  countryCode?: Maybe<Shopify_CountryCode>;
  /** The name of the buyer of the address. */
  name?: Maybe<Scalars['String']['output']>;
  /** The region of the address, such as the province, state, or district. */
  province?: Maybe<Scalars['String']['output']>;
  /**
   * The two-letter code for the region.
   * For example, ON.
   */
  provinceCode?: Maybe<Scalars['String']['output']>;
  /** The zip or postal code of the address. */
  zip?: Maybe<Scalars['String']['output']>;
};

/** A customer's payment method. */
export type Shopify_CustomerPaymentMethod = Shopify_Node & {
  __typename?: 'Shopify_CustomerPaymentMethod';
  /** The customer to whom the payment method belongs. */
  customer?: Maybe<Shopify_Customer>;
  /** The ID of this payment method. */
  id: Scalars['ID']['output'];
  /** The instrument for this payment method. */
  instrument?: Maybe<Shopify_CustomerPaymentInstrument>;
  /** The time that the payment method was revoked. */
  revokedAt?: Maybe<Scalars['DateTime']['output']>;
  /** The revocation reason for this payment method. */
  revokedReason?: Maybe<Shopify_CustomerPaymentMethodRevocationReason>;
  /** List Subscription Contracts. */
  subscriptionContracts: Shopify_SubscriptionContractConnection;
};


/** A customer's payment method. */
export type Shopify_CustomerPaymentMethodSubscriptionContractsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** An auto-generated type for paginating through multiple CustomerPaymentMethods. */
export type Shopify_CustomerPaymentMethodConnection = {
  __typename?: 'Shopify_CustomerPaymentMethodConnection';
  /** A list of edges. */
  edges: Array<Shopify_CustomerPaymentMethodEdge>;
  /** A list of the nodes contained in CustomerPaymentMethodEdge. */
  nodes: Array<Shopify_CustomerPaymentMethod>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An error that occurs during the execution of `CustomerPaymentMethodCreateFromDuplicationData`. */
export type Shopify_CustomerPaymentMethodCreateFromDuplicationDataUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_CustomerPaymentMethodCreateFromDuplicationDataUserError';
  /** The error code. */
  code?: Maybe<Shopify_CustomerPaymentMethodCreateFromDuplicationDataUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `CustomerPaymentMethodCreateFromDuplicationDataUserError`. */
export enum Shopify_CustomerPaymentMethodCreateFromDuplicationDataUserErrorCode {
  /** Customer doesn't exist. */
  CustomerDoesNotExist = 'CUSTOMER_DOES_NOT_EXIST',
  /** Invalid encrypted duplication data. */
  InvalidEncryptedDuplicationData = 'INVALID_ENCRYPTED_DUPLICATION_DATA',
  /** Too many requests. */
  TooManyRequests = 'TOO_MANY_REQUESTS'
}

/** An auto-generated type which holds one CustomerPaymentMethod and a cursor during pagination. */
export type Shopify_CustomerPaymentMethodEdge = {
  __typename?: 'Shopify_CustomerPaymentMethodEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of CustomerPaymentMethodEdge. */
  node: Shopify_CustomerPaymentMethod;
};

/** An error that occurs during the execution of `CustomerPaymentMethodGetDuplicationData`. */
export type Shopify_CustomerPaymentMethodGetDuplicationDataUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_CustomerPaymentMethodGetDuplicationDataUserError';
  /** The error code. */
  code?: Maybe<Shopify_CustomerPaymentMethodGetDuplicationDataUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `CustomerPaymentMethodGetDuplicationDataUserError`. */
export enum Shopify_CustomerPaymentMethodGetDuplicationDataUserErrorCode {
  /** Customer doesn't exist. */
  CustomerDoesNotExist = 'CUSTOMER_DOES_NOT_EXIST',
  /** Invalid payment instrument. */
  InvalidInstrument = 'INVALID_INSTRUMENT',
  /** Must be targeted to another shop in the same organization. */
  InvalidOrganizationShop = 'INVALID_ORGANIZATION_SHOP',
  /** Payment method doesn't exist. */
  PaymentMethodDoesNotExist = 'PAYMENT_METHOD_DOES_NOT_EXIST',
  /** Target shop cannot be the same as the source. */
  SameShop = 'SAME_SHOP',
  /** Too many requests. */
  TooManyRequests = 'TOO_MANY_REQUESTS'
}

/** An error that occurs during the execution of `CustomerPaymentMethodGetUpdateUrl`. */
export type Shopify_CustomerPaymentMethodGetUpdateUrlUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_CustomerPaymentMethodGetUpdateUrlUserError';
  /** The error code. */
  code?: Maybe<Shopify_CustomerPaymentMethodGetUpdateUrlUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `CustomerPaymentMethodGetUpdateUrlUserError`. */
export enum Shopify_CustomerPaymentMethodGetUpdateUrlUserErrorCode {
  /** Customer doesn't exist. */
  CustomerDoesNotExist = 'CUSTOMER_DOES_NOT_EXIST',
  /** Invalid payment instrument. */
  InvalidInstrument = 'INVALID_INSTRUMENT',
  /** Payment method doesn't exist. */
  PaymentMethodDoesNotExist = 'PAYMENT_METHOD_DOES_NOT_EXIST',
  /** Too many requests. */
  TooManyRequests = 'TOO_MANY_REQUESTS'
}

/** Represents an error in the input of a mutation. */
export type Shopify_CustomerPaymentMethodRemoteUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_CustomerPaymentMethodRemoteUserError';
  /** The error code. */
  code?: Maybe<Shopify_CustomerPaymentMethodRemoteUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `CustomerPaymentMethodRemoteUserError`. */
export enum Shopify_CustomerPaymentMethodRemoteUserErrorCode {
  /** Authorize.net is not enabled for subscriptions. */
  AuthorizeNetNotEnabledForSubscriptions = 'AUTHORIZE_NET_NOT_ENABLED_FOR_SUBSCRIPTIONS',
  /** Braintree is not enabled for subscriptions. */
  BraintreeNotEnabledForSubscriptions = 'BRAINTREE_NOT_ENABLED_FOR_SUBSCRIPTIONS',
  /** Exactly one remote reference is required. */
  ExactlyOneRemoteReferenceRequired = 'EXACTLY_ONE_REMOTE_REFERENCE_REQUIRED',
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** The input value needs to be blank. */
  Present = 'PRESENT',
  /** The input value is already taken. */
  Taken = 'TAKEN'
}

/** The revocation reason types for a customer payment method. */
export enum Shopify_CustomerPaymentMethodRevocationReason {
  /** The Authorize.net payment gateway is not enabled. */
  AuthorizeNetGatewayNotEnabled = 'AUTHORIZE_NET_GATEWAY_NOT_ENABLED',
  /** Authorize.net did not return any payment methods. Make sure that the correct Authorize.net account is linked. */
  AuthorizeNetReturnedNoPaymentMethod = 'AUTHORIZE_NET_RETURNED_NO_PAYMENT_METHOD',
  /** Failed to contact Braintree API. */
  BraintreeApiAuthenticationError = 'BRAINTREE_API_AUTHENTICATION_ERROR',
  /** The Braintree payment gateway is not enabled. */
  BraintreeGatewayNotEnabled = 'BRAINTREE_GATEWAY_NOT_ENABLED',
  /** The Braintree payment method type should be a credit card or Apple Pay card. */
  BraintreePaymentMethodNotCard = 'BRAINTREE_PAYMENT_METHOD_NOT_CARD',
  /** Braintree returned no payment methods. Make sure the correct Braintree account is linked. */
  BraintreeReturnedNoPaymentMethod = 'BRAINTREE_RETURNED_NO_PAYMENT_METHOD',
  /** The credit card failed to update. */
  FailedToUpdateCreditCard = 'FAILED_TO_UPDATE_CREDIT_CARD',
  /** The payment method was manually revoked. */
  ManuallyRevoked = 'MANUALLY_REVOKED',
  /** The payment method was replaced with an existing payment method. The associated contracts have been migrated to the other payment method. */
  Merged = 'MERGED',
  /** Failed to contact the Stripe API. */
  StripeApiAuthenticationError = 'STRIPE_API_AUTHENTICATION_ERROR',
  /** Invalid request. Failed to retrieve payment method from Stripe. */
  StripeApiInvalidRequestError = 'STRIPE_API_INVALID_REQUEST_ERROR',
  /** The Stripe payment gateway is not enabled. */
  StripeGatewayNotEnabled = 'STRIPE_GATEWAY_NOT_ENABLED',
  /** The Stripe payment method type should be card. */
  StripePaymentMethodNotCard = 'STRIPE_PAYMENT_METHOD_NOT_CARD',
  /** Stripe did not return any payment methods. Make sure that the correct Stripe account is linked. */
  StripeReturnedNoPaymentMethod = 'STRIPE_RETURNED_NO_PAYMENT_METHOD'
}

/** Represents an error in the input of a mutation. */
export type Shopify_CustomerPaymentMethodUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_CustomerPaymentMethodUserError';
  /** The error code. */
  code?: Maybe<Shopify_CustomerPaymentMethodUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `CustomerPaymentMethodUserError`. */
export enum Shopify_CustomerPaymentMethodUserErrorCode {
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** The input value needs to be blank. */
  Present = 'PRESENT',
  /** The input value is already taken. */
  Taken = 'TAKEN'
}

/** Represents a PayPal instrument for customer payment method. */
export type Shopify_CustomerPaypalBillingAgreement = {
  __typename?: 'Shopify_CustomerPaypalBillingAgreement';
  /** The billing address of this payment method. */
  billingAddress?: Maybe<Shopify_CustomerPaymentInstrumentBillingAddress>;
  /** Whether the PayPal billing agreement is inactive. */
  inactive: Scalars['Boolean']['output'];
  /** Whether the payment method can be revoked.The payment method can be revoked if there are no active subscription contracts. */
  isRevocable: Scalars['Boolean']['output'];
  /** The customers's PayPal account email address. */
  paypalAccountEmail?: Maybe<Scalars['String']['output']>;
};

/** A phone number. */
export type Shopify_CustomerPhoneNumber = {
  __typename?: 'Shopify_CustomerPhoneNumber';
  /** Whether the customer has subscribed to SMS marketing material. */
  marketingState: Shopify_CustomerSmsMarketingState;
  /** A customer's phone number. */
  phoneNumber: Scalars['String']['output'];
};

/** The valid tiers for the predicted spend of a customer with a shop. */
export enum Shopify_CustomerPredictedSpendTier {
  /** The customer's spending is predicted to be in the top spending range for the shop in the following year. */
  High = 'HIGH',
  /** The customer's spending is predicted to be zero, or in the lowest spending range for the shop in the following year. */
  Low = 'LOW',
  /** The customer's spending is predicted to be in the normal spending range for the shop in the following year. */
  Medium = 'MEDIUM'
}

/** The possible product subscription states for a customer, as defined by the customer's subscription contracts. */
export enum Shopify_CustomerProductSubscriberStatus {
  /** The customer has at least one active subscription contract. */
  Active = 'ACTIVE',
  /**
   * The customer's last subscription contract was cancelled and there are no other active or paused
   * subscription contracts.
   */
  Cancelled = 'CANCELLED',
  /**
   * The customer's last subscription contract expired and there are no other active or paused
   * subscription contracts.
   */
  Expired = 'EXPIRED',
  /**
   * The customer's last subscription contract failed and there are no other active or paused
   * subscription contracts.
   */
  Failed = 'FAILED',
  /** The customer has never had a subscription contract. */
  NeverSubscribed = 'NEVER_SUBSCRIBED',
  /**
   * The customer has at least one paused subscription contract and there are no other active
   * subscription contracts.
   */
  Paused = 'PAUSED'
}

/** Possible error codes that can be returned by `CustomerRequestDataErasureUserError`. */
export enum Shopify_CustomerRequestDataErasureErrorCode {
  /** Customer does not exist. */
  DoesNotExist = 'DOES_NOT_EXIST',
  /** Failed to request customer data erasure. */
  FailedToRequest = 'FAILED_TO_REQUEST'
}

/** An error that occurs when requesting a customer data erasure. */
export type Shopify_CustomerRequestDataErasureUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_CustomerRequestDataErasureUserError';
  /** The error code. */
  code?: Maybe<Shopify_CustomerRequestDataErasureErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** The set of valid sort keys for the CustomerSavedSearch query. */
export enum Shopify_CustomerSavedSearchSortKeys {
  /** Sort by the `id` value. */
  Id = 'ID',
  /** Sort by the `name` value. */
  Name = 'NAME',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE'
}

/** The member of a segment. */
export type Shopify_CustomerSegmentMember = Shopify_HasMetafields & {
  __typename?: 'Shopify_CustomerSegmentMember';
  /** The total amount of money that the member has spent on orders. */
  amountSpent?: Maybe<Shopify_MoneyV2>;
  /** The member's default address. */
  defaultAddress?: Maybe<Shopify_MailingAddress>;
  /** The member's default email address. */
  defaultEmailAddress?: Maybe<Shopify_CustomerEmailAddress>;
  /** The member's default phone number. */
  defaultPhoneNumber?: Maybe<Shopify_CustomerPhoneNumber>;
  /** The full name of the member, which is based on the values of the `first_name` and `last_name` fields. If the member's first name and last name aren't available, then the customer's email address is used. If the customer's email address isn't available, then the customer's phone number is used. */
  displayName: Scalars['String']['output'];
  /** The member's first name. */
  firstName?: Maybe<Scalars['String']['output']>;
  /** The member’s ID. */
  id: Scalars['ID']['output'];
  /** The member's last name. */
  lastName?: Maybe<Scalars['String']['output']>;
  /** The ID of the member's most recent order. */
  lastOrderId?: Maybe<Scalars['ID']['output']>;
  /** Whether the customer can be merged with another customer. */
  mergeable: Shopify_CustomerMergeable;
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /** A note about the member. */
  note?: Maybe<Scalars['String']['output']>;
  /** The total number of orders that the member has made. */
  numberOfOrders?: Maybe<Scalars['Shopify_UnsignedInt64']['output']>;
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafields: Shopify_PrivateMetafieldConnection;
};


/** The member of a segment. */
export type Shopify_CustomerSegmentMemberMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace?: InputMaybe<Scalars['String']['input']>;
};


/** The member of a segment. */
export type Shopify_CustomerSegmentMemberMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** The member of a segment. */
export type Shopify_CustomerSegmentMemberPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace: Scalars['String']['input'];
};


/** The member of a segment. */
export type Shopify_CustomerSegmentMemberPrivateMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** A job to determine a list of members, such as customers, that are associated with an individual segment. */
export type Shopify_CustomerSegmentMembersQuery = Shopify_JobResult & Shopify_Node & {
  __typename?: 'Shopify_CustomerSegmentMembersQuery';
  /** The current total number of members in a given segment. */
  currentCount: Scalars['Int']['output'];
  /** This indicates if the job is still queued or has been run. */
  done: Scalars['Boolean']['output'];
  /** A globally-unique ID that's returned when running an asynchronous mutation. */
  id: Scalars['ID']['output'];
};

/** Represents a customer segment members query custom error. */
export type Shopify_CustomerSegmentMembersQueryUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_CustomerSegmentMembersQueryUserError';
  /** The error code. */
  code?: Maybe<Shopify_CustomerSegmentMembersQueryUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `CustomerSegmentMembersQueryUserError`. */
export enum Shopify_CustomerSegmentMembersQueryUserErrorCode {
  /** The input value is invalid. */
  Invalid = 'INVALID'
}

/** Represents a Shop Pay card instrument for customer payment method. */
export type Shopify_CustomerShopPayAgreement = {
  __typename?: 'Shopify_CustomerShopPayAgreement';
  /** The billing address of the card. */
  billingAddress?: Maybe<Shopify_CustomerCreditCardBillingAddress>;
  /** Whether the card is about to expire. */
  expiresSoon: Scalars['Boolean']['output'];
  /** The expiry month of the card. */
  expiryMonth: Scalars['Int']['output'];
  /** The expiry year of the card. */
  expiryYear: Scalars['Int']['output'];
  /** Whether the Shop Pay billing agreement is inactive. */
  inactive: Scalars['Boolean']['output'];
  /** The payment method can be revoked if there are no active subscription contracts. */
  isRevocable: Scalars['Boolean']['output'];
  /** The last 4 digits of the card. */
  lastDigits: Scalars['String']['output'];
  /** The masked card number with only the last 4 digits displayed. */
  maskedNumber: Scalars['String']['output'];
  /** The name of the card holder. */
  name: Scalars['String']['output'];
};

/** An error that occurs during execution of an SMS marketing consent mutation. */
export type Shopify_CustomerSmsMarketingConsentError = Shopify_DisplayableError & {
  __typename?: 'Shopify_CustomerSmsMarketingConsentError';
  /** The error code. */
  code?: Maybe<Shopify_CustomerSmsMarketingConsentErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `CustomerSmsMarketingConsentError`. */
export enum Shopify_CustomerSmsMarketingConsentErrorCode {
  /** The input value isn't included in the list. */
  Inclusion = 'INCLUSION',
  /** Unexpected internal error happened. */
  InternalError = 'INTERNAL_ERROR',
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** Missing a required argument. */
  MissingArgument = 'MISSING_ARGUMENT'
}

/**
 * The record of when a customer consented to receive marketing material by SMS.
 *
 * The customer's consent state reflects the record with the most recent date when consent was updated.
 */
export type Shopify_CustomerSmsMarketingConsentState = {
  __typename?: 'Shopify_CustomerSmsMarketingConsentState';
  /** The source from which the SMS marketing information for the customer was collected. */
  consentCollectedFrom?: Maybe<Shopify_CustomerConsentCollectedFrom>;
  /**
   * The date and time when the customer consented to receive marketing material by SMS.
   * If no date is provided, then the date and time when the consent information was sent is used.
   */
  consentUpdatedAt?: Maybe<Scalars['DateTime']['output']>;
  /** The marketing subscription opt-in level that was set when the customer consented to receive marketing information. */
  marketingOptInLevel: Shopify_CustomerMarketingOptInLevel;
  /** The current SMS marketing state for the customer. */
  marketingState: Shopify_CustomerSmsMarketingState;
};

/** The valid SMS marketing states for a customer’s phone number. */
export enum Shopify_CustomerSmsMarketingState {
  /** The customer hasn't subscribed to SMS marketing. */
  NotSubscribed = 'NOT_SUBSCRIBED',
  /** The customer is in the process of subscribing to SMS marketing. */
  Pending = 'PENDING',
  /** The customer's personal data is erased. This value is internally-set and read-only. */
  Redacted = 'REDACTED',
  /** The customer is subscribed to SMS marketing. */
  Subscribed = 'SUBSCRIBED',
  /** The customer isn't currently subscribed to SMS marketing but was previously subscribed. */
  Unsubscribed = 'UNSUBSCRIBED'
}

/** The set of valid sort keys for the Customer query. */
export enum Shopify_CustomerSortKeys {
  /** Sort by the `created_at` value. */
  CreatedAt = 'CREATED_AT',
  /** Sort by the `id` value. */
  Id = 'ID',
  /** Sort by the `last_order_date` value. */
  LastOrderDate = 'LAST_ORDER_DATE',
  /** Sort by the `location` value. */
  Location = 'LOCATION',
  /** Sort by the `name` value. */
  Name = 'NAME',
  /** Sort by the `orders_count` value. */
  OrdersCount = 'ORDERS_COUNT',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE',
  /** Sort by the `total_spent` value. */
  TotalSpent = 'TOTAL_SPENT',
  /** Sort by the `updated_at` value. */
  UpdatedAt = 'UPDATED_AT'
}

/** The valid values for the state of a customer's account with a shop. */
export enum Shopify_CustomerState {
  /** The customer declined the email invite to create an account. */
  Declined = 'DECLINED',
  /** The customer doesn't have an active account. Customer accounts can be disabled from the Shopify admin at any time. */
  Disabled = 'DISABLED',
  /** The customer has created an account. */
  Enabled = 'ENABLED',
  /** The customer has received an email invite to create an account. */
  Invited = 'INVITED'
}

/** A customer's computed statistics. */
export type Shopify_CustomerStatistics = {
  __typename?: 'Shopify_CustomerStatistics';
  /** The predicted spend tier of a customer with a shop. */
  predictedSpendTier?: Maybe<Shopify_CustomerPredictedSpendTier>;
};

/** Represents a customer's session visiting a shop's online store, including information about the marketing activity attributed to starting the session. */
export type Shopify_CustomerVisit = Shopify_CustomerMoment & Shopify_Node & {
  __typename?: 'Shopify_CustomerVisit';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** URL of the first page the customer landed on for the session. */
  landingPage?: Maybe<Scalars['Shopify_URL']['output']>;
  /** Landing page information with URL linked in HTML. For example, the first page the customer visited was store.myshopify.com/products/1. */
  landingPageHtml?: Maybe<Scalars['Shopify_HTML']['output']>;
  /**
   * Represent actions taken by an app, on behalf of a merchant,
   * to market Shopify resources such as products, collections, and discounts.
   */
  marketingEvent?: Maybe<Shopify_MarketingEvent>;
  /** The date and time when the customer's session occurred. */
  occurredAt: Scalars['DateTime']['output'];
  /**
   * Marketing referral code from the link that the customer clicked to visit the store.
   * Supports the following URL attributes: _ref_, _source_, or _r_.
   * For example, if the URL is myshopifystore.com/products/slide?ref=j2tj1tn2, then this value is j2tj1tn2.
   */
  referralCode?: Maybe<Scalars['String']['output']>;
  /** Referral information with URLs linked in HTML. */
  referralInfoHtml: Scalars['Shopify_FormattedString']['output'];
  /**
   * Webpage where the customer clicked a link that sent them to the online store.
   * For example, _https://randomblog.com/page1_ or _android-app://com.google.android.gm_.
   */
  referrerUrl?: Maybe<Scalars['Shopify_URL']['output']>;
  /**
   * Source from which the customer visited the store, such as a platform (Facebook, Google), email, direct,
   * a website domain, QR code, or unknown.
   */
  source: Scalars['String']['output'];
  /** Describes the source explicitly for first or last session. */
  sourceDescription?: Maybe<Scalars['String']['output']>;
  /** Type of marketing tactic. */
  sourceType?: Maybe<Shopify_MarketingTactic>;
  /** A set of UTM parameters gathered from the URL parameters of the referrer. */
  utmParameters?: Maybe<Shopify_UtmParameters>;
};

/** This type returns the information about the product and product variant from a customer visit. */
export type Shopify_CustomerVisitProductInfo = {
  __typename?: 'Shopify_CustomerVisitProductInfo';
  /** The product information. If `null`, then the product was deleted from the store. */
  product?: Maybe<Shopify_Product>;
  /** The quantity of the product that the customer requested. */
  quantity: Scalars['Int']['output'];
  /** The product variant information, if the product variant exists. */
  variant?: Maybe<Shopify_ProductVariant>;
};

/** An auto-generated type for paginating through multiple CustomerVisitProductInfos. */
export type Shopify_CustomerVisitProductInfoConnection = {
  __typename?: 'Shopify_CustomerVisitProductInfoConnection';
  /** A list of edges. */
  edges: Array<Shopify_CustomerVisitProductInfoEdge>;
  /** A list of the nodes contained in CustomerVisitProductInfoEdge. */
  nodes: Array<Shopify_CustomerVisitProductInfo>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one CustomerVisitProductInfo and a cursor during pagination. */
export type Shopify_CustomerVisitProductInfoEdge = {
  __typename?: 'Shopify_CustomerVisitProductInfoEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of CustomerVisitProductInfoEdge. */
  node: Shopify_CustomerVisitProductInfo;
};

/** Days of the week from Monday to Sunday. */
export enum Shopify_DayOfTheWeek {
  /** Friday. */
  Friday = 'FRIDAY',
  /** Monday. */
  Monday = 'MONDAY',
  /** Saturday. */
  Saturday = 'SATURDAY',
  /** Sunday. */
  Sunday = 'SUNDAY',
  /** Thursday. */
  Thursday = 'THURSDAY',
  /** Tuesday. */
  Tuesday = 'TUESDAY',
  /** Wednesday. */
  Wednesday = 'WEDNESDAY'
}

/** An error that occurs during the execution of `DelegateAccessTokenCreate`. */
export type Shopify_DelegateAccessTokenCreateUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_DelegateAccessTokenCreateUserError';
  /** The error code. */
  code?: Maybe<Shopify_DelegateAccessTokenCreateUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `DelegateAccessTokenCreateUserError`. */
export enum Shopify_DelegateAccessTokenCreateUserErrorCode {
  /** The parent access token can't be a delegate token. */
  DelegateAccessToken = 'DELEGATE_ACCESS_TOKEN',
  /** The access scope can't be empty. */
  EmptyAccessScope = 'EMPTY_ACCESS_SCOPE',
  /** The delegate token can't expire after the parent token. */
  ExpiresAfterParent = 'EXPIRES_AFTER_PARENT',
  /** The expires_in value must be greater than 0. */
  NegativeExpiresIn = 'NEGATIVE_EXPIRES_IN',
  /** Persistence failed. */
  PersistenceFailed = 'PERSISTENCE_FAILED',
  /** The parent access token can't have a refresh token. */
  RefreshToken = 'REFRESH_TOKEN',
  /** Unknown scopes. */
  UnknownScopes = 'UNKNOWN_SCOPES'
}

/** An error that occurs during the execution of `DelegateAccessTokenDestroy`. */
export type Shopify_DelegateAccessTokenDestroyUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_DelegateAccessTokenDestroyUserError';
  /** The error code. */
  code?: Maybe<Shopify_DelegateAccessTokenDestroyUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `DelegateAccessTokenDestroyUserError`. */
export enum Shopify_DelegateAccessTokenDestroyUserErrorCode {
  /** Access denied. */
  AccessDenied = 'ACCESS_DENIED',
  /** Access token not found. */
  AccessTokenNotFound = 'ACCESS_TOKEN_NOT_FOUND',
  /** Cannot delete parent access token. */
  CanOnlyDeleteDelegateTokens = 'CAN_ONLY_DELETE_DELEGATE_TOKENS',
  /** Persistence failed. */
  PersistenceFailed = 'PERSISTENCE_FAILED'
}

/** A shipping service and a list of countries that the service is available for. */
export type Shopify_DeliveryAvailableService = {
  __typename?: 'Shopify_DeliveryAvailableService';
  /** The countries the service provider ships to. */
  countries: Shopify_DeliveryCountryCodesOrRestOfWorld;
  /** The name of the service. */
  name: Scalars['String']['output'];
};

/** Represents a branded promise presented to buyers. */
export type Shopify_DeliveryBrandedPromise = {
  __typename?: 'Shopify_DeliveryBrandedPromise';
  /** The handle of the branded promise.  For example: `shop_promise`. */
  handle: Scalars['String']['output'];
  /** The name of the branded promise.  For example: `Shop Promise`. */
  name: Scalars['String']['output'];
};

/**
 * A carrier service (also known as a carrier calculated service or shipping service) provides real-time shipping rates to Shopify. Some common carrier services include Canada Post, FedEx, UPS, and USPS. The term **carrier** is often used interchangeably with the terms **shipping company** and **rate provider**.
 *
 * Using the CarrierService resource, you can add a carrier service to a shop and then provide a list of applicable shipping rates at checkout. You can even use the cart data to adjust shipping rates and offer shipping discounts based on what is in the customer's cart.
 *
 * ## Requirements for accessing the CarrierService resource
 * To access the CarrierService resource, add the `write_shipping` permission to your app's requested scopes. For more information, see [API access scopes](https://shopify.dev/docs/admin-api/access-scopes).
 *
 * Your app's request to create a carrier service will fail unless the store installing your carrier service meets one of the following requirements:
 * * It's on the Advanced Shopify plan or higher.
 * * It's on the Shopify plan with yearly billing, or the carrier service feature has been added to the store for a monthly fee. For more information, contact [Shopify Support](https://help.shopify.com/questions).
 * * It's a development store.
 *
 * > Note:
 * > If a store changes its Shopify plan, then the store's association with a carrier service is deactivated if the store no long meets one of the requirements above.
 *
 * ## Providing shipping rates to Shopify
 * When adding a carrier service to a store, you need to provide a POST endpoint rooted in the `callbackUrl` property where Shopify can retrieve applicable shipping rates. The callback URL should be a public endpoint that expects these requests from Shopify.
 *
 * ### Example shipping rate request sent to a carrier service
 *
 * ```json
 * {
 *   "rate": {
 *     "origin": {
 *       "country": "CA",
 *       "postal_code": "K2P1L4",
 *       "province": "ON",
 *       "city": "Ottawa",
 *       "name": null,
 *       "address1": "150 Elgin St.",
 *       "address2": "",
 *       "address3": null,
 *       "phone": null,
 *       "fax": null,
 *       "email": null,
 *       "address_type": null,
 *       "company_name": "Jamie D's Emporium"
 *     },
 *     "destination": {
 *       "country": "CA",
 *       "postal_code": "K1M1M4",
 *       "province": "ON",
 *       "city": "Ottawa",
 *       "name": "Bob Norman",
 *       "address1": "24 Sussex Dr.",
 *       "address2": "",
 *       "address3": null,
 *       "phone": null,
 *       "fax": null,
 *       "email": null,
 *       "address_type": null,
 *       "company_name": null
 *     },
 *     "items": [{
 *       "name": "Short Sleeve T-Shirt",
 *       "sku": "",
 *       "quantity": 1,
 *       "grams": 1000,
 *       "price": 1999,
 *       "vendor": "Jamie D's Emporium",
 *       "requires_shipping": true,
 *       "taxable": true,
 *       "fulfillment_service": "manual",
 *       "properties": null,
 *       "product_id": 48447225880,
 *       "variant_id": 258644705304
 *     }],
 *     "currency": "USD",
 *     "locale": "en"
 *   }
 * }
 * ```
 *
 * ### Example response
 * ```json
 * {
 *    "rates": [
 *        {
 *            "service_name": "canadapost-overnight",
 *            "service_code": "ON",
 *            "total_price": "1295",
 *            "description": "This is the fastest option by far",
 *            "currency": "CAD",
 *            "min_delivery_date": "2013-04-12 14:48:45 -0400",
 *            "max_delivery_date": "2013-04-12 14:48:45 -0400"
 *        },
 *        {
 *            "service_name": "fedex-2dayground",
 *            "service_code": "2D",
 *            "total_price": "2934",
 *            "currency": "USD",
 *            "min_delivery_date": "2013-04-12 14:48:45 -0400",
 *            "max_delivery_date": "2013-04-12 14:48:45 -0400"
 *        },
 *        {
 *            "service_name": "fedex-priorityovernight",
 *            "service_code": "1D",
 *            "total_price": "3587",
 *            "currency": "USD",
 *            "min_delivery_date": "2013-04-12 14:48:45 -0400",
 *            "max_delivery_date": "2013-04-12 14:48:45 -0400"
 *        }
 *    ]
 * }
 * ```
 *
 * The `address3`, `fax`, `address_type`, and `company_name` fields are returned by specific [ActiveShipping](https://github.com/Shopify/active_shipping) providers. For API-created carrier services, you should use only the following shipping address fields:
 * * `address1`
 * * `address2`
 * * `city`
 * * `zip`
 * * `province`
 * * `country`
 *
 * Other values remain as `null` and are not sent to the callback URL.
 *
 * ### Response fields
 *
 * When Shopify requests shipping rates using your callback URL, the response object `rates` must be a JSON array of objects with the following fields.  Required fields must be included in the response for the carrier service integration to work properly.
 *
 * | Field                   | Required | Description                                                                                                                                                                                                  |
 * | ----------------------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
 * | `service_name`          | Yes      | The name of the rate, which customers see at checkout. For example: `Expedited Mail`.                                                                                                                        |
 * | `description`           | Yes      | A description of the rate, which customers see at checkout. For example: `Includes tracking and insurance`.                                                                                                  |
 * | `service_code`          | Yes      | A unique code associated with the rate. For example: `expedited_mail`.                                                                                                                                       |
 * | `currency`              | Yes      | The currency of the shipping rate.                                                                                                                                                                           |
 * | `total_price`           | Yes      | The total price expressed in subunits. If the currency doesn't use subunits, then the value must be multiplied by 100. For example: `"total_price": 500` for 5.00 CAD, `"total_price": 100000` for 1000 JPY. |
 * | `phone_required`        | No       | Whether the customer must provide a phone number at checkout.                                                                                                                                                |
 * | `min_delivery_date`     | No       | The earliest delivery date for the displayed rate.                                                                                                                                                           |
 * | `max_delivery_date`     | No       | The latest delivery date for the displayed rate to still be valid.                                                                                                                                           |
 *
 * ## Response Timeouts
 * The read timeout for rate requests are dynamic, based on the number of requests per minute (RPM). These limits are applied to each shop-app pair. The timeout values are as follows.
 *
 * | RPM Range     | Timeout    |
 * | ------------- | ---------- |
 * | Under 1500    | 10s        |
 * | 1500 to 3000  | 5s         |
 * | Over 3000     | 3s         |
 *
 * > Note:
 * > These values are upper limits and should not be interpretted as a goal to develop towards. Shopify is constantly evaluating the performance of the platform and working towards improving resilience as well as app capabilities. As such, these numbers may be adjusted outside of our normal versioning timelines.
 *
 * ## Server-side caching of requests
 * Shopify provides server-side caching to reduce the number of requests it makes. Any shipping rate request that identically matches the following fields will be retrieved from Shopify's cache of the initial response:
 * * variant IDs
 * * default shipping box weight and dimensions
 * * variant quantities
 * * carrier service ID
 * * origin address
 * * destination address
 * * item weights and signatures
 *
 * If any of these fields differ, or if the cache has expired since the original request, then new shipping rates are requested. The cache expires 15 minutes after rates are successfully returned. If an error occurs, then the cache expires after 30 seconds.
 */
export type Shopify_DeliveryCarrierService = Shopify_Node & {
  __typename?: 'Shopify_DeliveryCarrierService';
  /** The list of services offered for given destinations. */
  availableServicesForCountries: Array<Shopify_DeliveryAvailableService>;
  /** The properly formatted name of the shipping service provider, ready to display. */
  formattedName?: Maybe<Scalars['String']['output']>;
  /** The logo of the service provider. */
  icon: Shopify_Image;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The name of the shipping service provider. */
  name?: Maybe<Scalars['String']['output']>;
};


/**
 * A carrier service (also known as a carrier calculated service or shipping service) provides real-time shipping rates to Shopify. Some common carrier services include Canada Post, FedEx, UPS, and USPS. The term **carrier** is often used interchangeably with the terms **shipping company** and **rate provider**.
 *
 * Using the CarrierService resource, you can add a carrier service to a shop and then provide a list of applicable shipping rates at checkout. You can even use the cart data to adjust shipping rates and offer shipping discounts based on what is in the customer's cart.
 *
 * ## Requirements for accessing the CarrierService resource
 * To access the CarrierService resource, add the `write_shipping` permission to your app's requested scopes. For more information, see [API access scopes](https://shopify.dev/docs/admin-api/access-scopes).
 *
 * Your app's request to create a carrier service will fail unless the store installing your carrier service meets one of the following requirements:
 * * It's on the Advanced Shopify plan or higher.
 * * It's on the Shopify plan with yearly billing, or the carrier service feature has been added to the store for a monthly fee. For more information, contact [Shopify Support](https://help.shopify.com/questions).
 * * It's a development store.
 *
 * > Note:
 * > If a store changes its Shopify plan, then the store's association with a carrier service is deactivated if the store no long meets one of the requirements above.
 *
 * ## Providing shipping rates to Shopify
 * When adding a carrier service to a store, you need to provide a POST endpoint rooted in the `callbackUrl` property where Shopify can retrieve applicable shipping rates. The callback URL should be a public endpoint that expects these requests from Shopify.
 *
 * ### Example shipping rate request sent to a carrier service
 *
 * ```json
 * {
 *   "rate": {
 *     "origin": {
 *       "country": "CA",
 *       "postal_code": "K2P1L4",
 *       "province": "ON",
 *       "city": "Ottawa",
 *       "name": null,
 *       "address1": "150 Elgin St.",
 *       "address2": "",
 *       "address3": null,
 *       "phone": null,
 *       "fax": null,
 *       "email": null,
 *       "address_type": null,
 *       "company_name": "Jamie D's Emporium"
 *     },
 *     "destination": {
 *       "country": "CA",
 *       "postal_code": "K1M1M4",
 *       "province": "ON",
 *       "city": "Ottawa",
 *       "name": "Bob Norman",
 *       "address1": "24 Sussex Dr.",
 *       "address2": "",
 *       "address3": null,
 *       "phone": null,
 *       "fax": null,
 *       "email": null,
 *       "address_type": null,
 *       "company_name": null
 *     },
 *     "items": [{
 *       "name": "Short Sleeve T-Shirt",
 *       "sku": "",
 *       "quantity": 1,
 *       "grams": 1000,
 *       "price": 1999,
 *       "vendor": "Jamie D's Emporium",
 *       "requires_shipping": true,
 *       "taxable": true,
 *       "fulfillment_service": "manual",
 *       "properties": null,
 *       "product_id": 48447225880,
 *       "variant_id": 258644705304
 *     }],
 *     "currency": "USD",
 *     "locale": "en"
 *   }
 * }
 * ```
 *
 * ### Example response
 * ```json
 * {
 *    "rates": [
 *        {
 *            "service_name": "canadapost-overnight",
 *            "service_code": "ON",
 *            "total_price": "1295",
 *            "description": "This is the fastest option by far",
 *            "currency": "CAD",
 *            "min_delivery_date": "2013-04-12 14:48:45 -0400",
 *            "max_delivery_date": "2013-04-12 14:48:45 -0400"
 *        },
 *        {
 *            "service_name": "fedex-2dayground",
 *            "service_code": "2D",
 *            "total_price": "2934",
 *            "currency": "USD",
 *            "min_delivery_date": "2013-04-12 14:48:45 -0400",
 *            "max_delivery_date": "2013-04-12 14:48:45 -0400"
 *        },
 *        {
 *            "service_name": "fedex-priorityovernight",
 *            "service_code": "1D",
 *            "total_price": "3587",
 *            "currency": "USD",
 *            "min_delivery_date": "2013-04-12 14:48:45 -0400",
 *            "max_delivery_date": "2013-04-12 14:48:45 -0400"
 *        }
 *    ]
 * }
 * ```
 *
 * The `address3`, `fax`, `address_type`, and `company_name` fields are returned by specific [ActiveShipping](https://github.com/Shopify/active_shipping) providers. For API-created carrier services, you should use only the following shipping address fields:
 * * `address1`
 * * `address2`
 * * `city`
 * * `zip`
 * * `province`
 * * `country`
 *
 * Other values remain as `null` and are not sent to the callback URL.
 *
 * ### Response fields
 *
 * When Shopify requests shipping rates using your callback URL, the response object `rates` must be a JSON array of objects with the following fields.  Required fields must be included in the response for the carrier service integration to work properly.
 *
 * | Field                   | Required | Description                                                                                                                                                                                                  |
 * | ----------------------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
 * | `service_name`          | Yes      | The name of the rate, which customers see at checkout. For example: `Expedited Mail`.                                                                                                                        |
 * | `description`           | Yes      | A description of the rate, which customers see at checkout. For example: `Includes tracking and insurance`.                                                                                                  |
 * | `service_code`          | Yes      | A unique code associated with the rate. For example: `expedited_mail`.                                                                                                                                       |
 * | `currency`              | Yes      | The currency of the shipping rate.                                                                                                                                                                           |
 * | `total_price`           | Yes      | The total price expressed in subunits. If the currency doesn't use subunits, then the value must be multiplied by 100. For example: `"total_price": 500` for 5.00 CAD, `"total_price": 100000` for 1000 JPY. |
 * | `phone_required`        | No       | Whether the customer must provide a phone number at checkout.                                                                                                                                                |
 * | `min_delivery_date`     | No       | The earliest delivery date for the displayed rate.                                                                                                                                                           |
 * | `max_delivery_date`     | No       | The latest delivery date for the displayed rate to still be valid.                                                                                                                                           |
 *
 * ## Response Timeouts
 * The read timeout for rate requests are dynamic, based on the number of requests per minute (RPM). These limits are applied to each shop-app pair. The timeout values are as follows.
 *
 * | RPM Range     | Timeout    |
 * | ------------- | ---------- |
 * | Under 1500    | 10s        |
 * | 1500 to 3000  | 5s         |
 * | Over 3000     | 3s         |
 *
 * > Note:
 * > These values are upper limits and should not be interpretted as a goal to develop towards. Shopify is constantly evaluating the performance of the platform and working towards improving resilience as well as app capabilities. As such, these numbers may be adjusted outside of our normal versioning timelines.
 *
 * ## Server-side caching of requests
 * Shopify provides server-side caching to reduce the number of requests it makes. Any shipping rate request that identically matches the following fields will be retrieved from Shopify's cache of the initial response:
 * * variant IDs
 * * default shipping box weight and dimensions
 * * variant quantities
 * * carrier service ID
 * * origin address
 * * destination address
 * * item weights and signatures
 *
 * If any of these fields differ, or if the cache has expired since the original request, then new shipping rates are requested. The cache expires 15 minutes after rates are successfully returned. If an error occurs, then the cache expires after 30 seconds.
 */
export type Shopify_DeliveryCarrierServiceAvailableServicesForCountriesArgs = {
  countryCodes?: InputMaybe<Array<Shopify_CountryCode>>;
  origins?: InputMaybe<Array<Scalars['ID']['input']>>;
  restOfWorld: Scalars['Boolean']['input'];
};

/** A condition that must pass for a delivery method definition to be applied to an order. */
export type Shopify_DeliveryCondition = Shopify_Node & {
  __typename?: 'Shopify_DeliveryCondition';
  /** The value (weight or price) that the condition field is compared to. */
  conditionCriteria: Shopify_DeliveryConditionCriteria;
  /** The field to compare the criterion value against, using the operator. */
  field: Shopify_DeliveryConditionField;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The operator to compare the field and criterion value. */
  operator: Shopify_DeliveryConditionOperator;
};

/** The value (weight or price) that the condition field is compared to. */
export type Shopify_DeliveryConditionCriteria = Shopify_MoneyV2 | Shopify_Weight;

/** The field type that the condition will be applied to. */
export enum Shopify_DeliveryConditionField {
  /** The condition will check against the total price of the order. */
  TotalPrice = 'TOTAL_PRICE',
  /** The condition will check against the total weight of the order. */
  TotalWeight = 'TOTAL_WEIGHT'
}

/** The operator to use to determine if the condition passes. */
export enum Shopify_DeliveryConditionOperator {
  /** The condition will check whether the field is greater than or equal to the criterion. */
  GreaterThanOrEqualTo = 'GREATER_THAN_OR_EQUAL_TO',
  /** The condition will check if the field is less than or equal to the criterion. */
  LessThanOrEqualTo = 'LESS_THAN_OR_EQUAL_TO'
}

/** A country that is used to define a shipping zone. */
export type Shopify_DeliveryCountry = Shopify_Node & {
  __typename?: 'Shopify_DeliveryCountry';
  /**
   * A two-letter country code in ISO 3166-1 alpha-2 standard.
   * It also includes a flag indicating whether the country should be
   * a part of the 'Rest Of World' shipping zone.
   */
  code: Shopify_DeliveryCountryCodeOrRestOfWorld;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The full name of the country. */
  name: Scalars['String']['output'];
  /** The list of regions associated with this country. */
  provinces: Array<Shopify_DeliveryProvince>;
  /** The translated name of the country. The translation returned is based on the system's locale. */
  translatedName: Scalars['String']['output'];
};

/** The country details and the associated shipping zone. */
export type Shopify_DeliveryCountryAndZone = {
  __typename?: 'Shopify_DeliveryCountryAndZone';
  /** The country details. */
  country: Shopify_DeliveryCountry;
  /** The name of the shipping zone. */
  zone: Scalars['String']['output'];
};

/** The country code and whether the country is a part of the 'Rest Of World' shipping zone. */
export type Shopify_DeliveryCountryCodeOrRestOfWorld = {
  __typename?: 'Shopify_DeliveryCountryCodeOrRestOfWorld';
  /** The country code in the ISO 3166-1 alpha-2 format. */
  countryCode?: Maybe<Shopify_CountryCode>;
  /** Whether the country is a part of the 'Rest of World' shipping zone. */
  restOfWorld: Scalars['Boolean']['output'];
};

/**
 * The list of country codes and information whether the countries
 * are a part of the 'Rest Of World' shipping zone.
 */
export type Shopify_DeliveryCountryCodesOrRestOfWorld = {
  __typename?: 'Shopify_DeliveryCountryCodesOrRestOfWorld';
  /** List of applicable country codes in the ISO 3166-1 alpha-2 format. */
  countryCodes: Array<Shopify_CountryCode>;
  /** Whether the countries are a part of the 'Rest of World' shipping zone. */
  restOfWorld: Scalars['Boolean']['output'];
};

/** A delivery customization. */
export type Shopify_DeliveryCustomization = Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_Node & {
  __typename?: 'Shopify_DeliveryCustomization';
  /** The enabled status of the delivery customization. */
  enabled: Scalars['Boolean']['output'];
  /** The error history on the most recent version of the delivery customization. */
  errorHistory?: Maybe<Shopify_FunctionsErrorHistory>;
  /** The ID of the Shopify Function implementing the delivery customization. */
  functionId: Scalars['String']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafield definitions. */
  metafieldDefinitions: Shopify_MetafieldDefinitionConnection;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafields: Shopify_PrivateMetafieldConnection;
  /** The Shopify Function implementing the delivery customization. */
  shopifyFunction: Shopify_ShopifyFunction;
  /** The title of the delivery customization. */
  title: Scalars['String']['output'];
};


/** A delivery customization. */
export type Shopify_DeliveryCustomizationMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace?: InputMaybe<Scalars['String']['input']>;
};


/** A delivery customization. */
export type Shopify_DeliveryCustomizationMetafieldDefinitionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  pinnedStatus?: InputMaybe<Shopify_MetafieldDefinitionPinnedStatus>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_MetafieldDefinitionSortKeys>;
};


/** A delivery customization. */
export type Shopify_DeliveryCustomizationMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** A delivery customization. */
export type Shopify_DeliveryCustomizationPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace: Scalars['String']['input'];
};


/** A delivery customization. */
export type Shopify_DeliveryCustomizationPrivateMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** An error that occurs during the execution of a delivery customization mutation. */
export type Shopify_DeliveryCustomizationError = Shopify_DisplayableError & {
  __typename?: 'Shopify_DeliveryCustomizationError';
  /** The error code. */
  code?: Maybe<Shopify_DeliveryCustomizationErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `DeliveryCustomizationError`. */
export enum Shopify_DeliveryCustomizationErrorCode {
  /** Shop must be on a Shopify Plus plan to activate functions from a custom app. */
  CustomAppFunctionNotEligible = 'CUSTOM_APP_FUNCTION_NOT_ELIGIBLE',
  /** Shop must be on a Shopify Plus plan to activate delivery customizations from a custom app. */
  DeliveryCustomizationFunctionNotEligible = 'DELIVERY_CUSTOMIZATION_FUNCTION_NOT_ELIGIBLE',
  /** Delivery customization not found. */
  DeliveryCustomizationNotFound = 'DELIVERY_CUSTOMIZATION_NOT_FOUND',
  /** Function does not implement the required interface for this delivery customization. */
  FunctionDoesNotImplement = 'FUNCTION_DOES_NOT_IMPLEMENT',
  /** Function ID cannot be changed. */
  FunctionIdCannotBeChanged = 'FUNCTION_ID_CANNOT_BE_CHANGED',
  /** Function not found. */
  FunctionNotFound = 'FUNCTION_NOT_FOUND',
  /** Function is pending deletion. */
  FunctionPendingDeletion = 'FUNCTION_PENDING_DELETION',
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** Could not create or update metafields. */
  InvalidMetafields = 'INVALID_METAFIELDS',
  /** Maximum delivery customizations are already enabled. */
  MaximumActiveDeliveryCustomizations = 'MAXIMUM_ACTIVE_DELIVERY_CUSTOMIZATIONS',
  /** Required input field must be present. */
  RequiredInputField = 'REQUIRED_INPUT_FIELD',
  /** Unauthorized app scope. */
  UnauthorizedAppScope = 'UNAUTHORIZED_APP_SCOPE'
}

/** Local pickup settings associated with a location. */
export type Shopify_DeliveryLocalPickupSettings = {
  __typename?: 'Shopify_DeliveryLocalPickupSettings';
  /** Additional instructions or information related to the local pickup. */
  instructions: Scalars['String']['output'];
  /** The estimated pickup time to show customers at checkout. */
  pickupTime: Shopify_DeliveryLocalPickupTime;
};

/** Possible pickup time values that a location enabled for local pickup can have. */
export enum Shopify_DeliveryLocalPickupTime {
  /** Usually ready in 5+ days. */
  FiveOrMoreDays = 'FIVE_OR_MORE_DAYS',
  /** Usually ready in 4 hours. */
  FourHours = 'FOUR_HOURS',
  /** Usually ready in 1 hour. */
  OneHour = 'ONE_HOUR',
  /** Usually ready in 24 hours. */
  TwentyFourHours = 'TWENTY_FOUR_HOURS',
  /** Usually ready in 2 hours. */
  TwoHours = 'TWO_HOURS',
  /** Usually ready in 2-4 days. */
  TwoToFourDays = 'TWO_TO_FOUR_DAYS'
}

/**
 * A location group is a collection of locations. They share zones and delivery methods across delivery
 * profiles.
 */
export type Shopify_DeliveryLocationGroup = Shopify_Node & {
  __typename?: 'Shopify_DeliveryLocationGroup';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** A list of all locations that are part of this location group. */
  locations: Shopify_LocationConnection;
  /** A count of all locations that are part of this location group. */
  locationsCount?: Maybe<Shopify_Count>;
};


/**
 * A location group is a collection of locations. They share zones and delivery methods across delivery
 * profiles.
 */
export type Shopify_DeliveryLocationGroupLocationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  includeInactive?: InputMaybe<Scalars['Boolean']['input']>;
  includeLegacy?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_LocationSortKeys>;
};

/** Links a location group with a zone and the associated method definitions. */
export type Shopify_DeliveryLocationGroupZone = {
  __typename?: 'Shopify_DeliveryLocationGroupZone';
  /** The number of method definitions for the zone. */
  methodDefinitionCounts: Shopify_DeliveryMethodDefinitionCounts;
  /** The method definitions associated to a zone and location group. */
  methodDefinitions: Shopify_DeliveryMethodDefinitionConnection;
  /** The zone associated to a location group. */
  zone: Shopify_DeliveryZone;
};


/** Links a location group with a zone and the associated method definitions. */
export type Shopify_DeliveryLocationGroupZoneMethodDefinitionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eligible?: InputMaybe<Scalars['Boolean']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_MethodDefinitionSortKeys>;
  type?: InputMaybe<Shopify_DeliveryMethodDefinitionType>;
};

/** An auto-generated type for paginating through multiple DeliveryLocationGroupZones. */
export type Shopify_DeliveryLocationGroupZoneConnection = {
  __typename?: 'Shopify_DeliveryLocationGroupZoneConnection';
  /** A list of edges. */
  edges: Array<Shopify_DeliveryLocationGroupZoneEdge>;
  /** A list of the nodes contained in DeliveryLocationGroupZoneEdge. */
  nodes: Array<Shopify_DeliveryLocationGroupZone>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one DeliveryLocationGroupZone and a cursor during pagination. */
export type Shopify_DeliveryLocationGroupZoneEdge = {
  __typename?: 'Shopify_DeliveryLocationGroupZoneEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of DeliveryLocationGroupZoneEdge. */
  node: Shopify_DeliveryLocationGroupZone;
};

/** Represents an error that happened when changing local pickup settings for a location. */
export type Shopify_DeliveryLocationLocalPickupSettingsError = Shopify_DisplayableError & {
  __typename?: 'Shopify_DeliveryLocationLocalPickupSettingsError';
  /** The error code. */
  code?: Maybe<Shopify_DeliveryLocationLocalPickupSettingsErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `DeliveryLocationLocalPickupSettingsError`. */
export enum Shopify_DeliveryLocationLocalPickupSettingsErrorCode {
  /** Provided locationId is not for an active location belonging to this store. */
  ActiveLocationNotFound = 'ACTIVE_LOCATION_NOT_FOUND',
  /** An error occurred while changing the local pickup settings. */
  GenericError = 'GENERIC_ERROR'
}

/** The delivery method used by a fulfillment order. */
export type Shopify_DeliveryMethod = Shopify_Node & {
  __typename?: 'Shopify_DeliveryMethod';
  /** The Additional information to consider when performing the delivery. */
  additionalInformation?: Maybe<Shopify_DeliveryMethodAdditionalInformation>;
  /** The branded promise that was presented to the buyer during checkout.  For example: Shop Promise. */
  brandedPromise?: Maybe<Shopify_DeliveryBrandedPromise>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The latest delivery date and time when the fulfillment is expected to arrive at the buyer's location. */
  maxDeliveryDateTime?: Maybe<Scalars['DateTime']['output']>;
  /** The type of the delivery method. */
  methodType: Shopify_DeliveryMethodType;
  /** The earliest delivery date and time when the fulfillment is expected to arrive at the buyer's location. */
  minDeliveryDateTime?: Maybe<Scalars['DateTime']['output']>;
  /** A reference to the shipping method. */
  serviceCode?: Maybe<Scalars['String']['output']>;
};

/** Additional information included on a delivery method that will help during the delivery process. */
export type Shopify_DeliveryMethodAdditionalInformation = {
  __typename?: 'Shopify_DeliveryMethodAdditionalInformation';
  /** The delivery instructions to follow when performing the delivery. */
  instructions?: Maybe<Scalars['String']['output']>;
  /** The phone number to contact when performing the delivery. */
  phone?: Maybe<Scalars['String']['output']>;
};

/**
 * A method definition contains the delivery rate and the conditions that must be met for the method to be
 * applied.
 */
export type Shopify_DeliveryMethodDefinition = Shopify_Node & {
  __typename?: 'Shopify_DeliveryMethodDefinition';
  /** Whether this method definition is active. */
  active: Scalars['Boolean']['output'];
  /** The description of the method definition. Only available on shipping rates that are custom. */
  description?: Maybe<Scalars['String']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The method conditions that must pass for this method definition to be applied to an order. */
  methodConditions: Array<Shopify_DeliveryCondition>;
  /** The name of the method definition. */
  name: Scalars['String']['output'];
  /** The provided rate for this method definition, from a rate definition or participant. */
  rateProvider: Shopify_DeliveryRateProvider;
};

/** An auto-generated type for paginating through multiple DeliveryMethodDefinitions. */
export type Shopify_DeliveryMethodDefinitionConnection = {
  __typename?: 'Shopify_DeliveryMethodDefinitionConnection';
  /** A list of edges. */
  edges: Array<Shopify_DeliveryMethodDefinitionEdge>;
  /** A list of the nodes contained in DeliveryMethodDefinitionEdge. */
  nodes: Array<Shopify_DeliveryMethodDefinition>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** The number of method definitions for a zone, separated into merchant-owned and participant definitions. */
export type Shopify_DeliveryMethodDefinitionCounts = {
  __typename?: 'Shopify_DeliveryMethodDefinitionCounts';
  /** The number of participant method definitions for the specified zone. */
  participantDefinitionsCount: Scalars['Int']['output'];
  /** The number of merchant-defined method definitions for the specified zone. */
  rateDefinitionsCount: Scalars['Int']['output'];
};

/** An auto-generated type which holds one DeliveryMethodDefinition and a cursor during pagination. */
export type Shopify_DeliveryMethodDefinitionEdge = {
  __typename?: 'Shopify_DeliveryMethodDefinitionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of DeliveryMethodDefinitionEdge. */
  node: Shopify_DeliveryMethodDefinition;
};

/** The different types of method definitions to filter by. */
export enum Shopify_DeliveryMethodDefinitionType {
  /** A static merchant-defined rate. */
  Merchant = 'MERCHANT',
  /** A dynamic participant rate. */
  Participant = 'PARTICIPANT'
}

/** Possible method types that a delivery method can have. */
export enum Shopify_DeliveryMethodType {
  /** The order is delivered using a local delivery service. */
  Local = 'LOCAL',
  /** No delivery is needed. */
  None = 'NONE',
  /** The order is picked up by the customer. */
  PickUp = 'PICK_UP',
  /** The order is delivered to a retail store. */
  Retail = 'RETAIL',
  /** The order is shipped. */
  Shipping = 'SHIPPING'
}

/**
 * A participant defines carrier-calculated rates for shipping services
 * with a possible merchant-defined fixed fee or a percentage-of-rate fee.
 */
export type Shopify_DeliveryParticipant = Shopify_Node & {
  __typename?: 'Shopify_DeliveryParticipant';
  /** Whether to display new shipping services automatically to the customer when the service becomes available. */
  adaptToNewServicesFlag: Scalars['Boolean']['output'];
  /** The carrier used for this participant. */
  carrierService: Shopify_DeliveryCarrierService;
  /** The merchant-defined fixed fee for this participant. */
  fixedFee?: Maybe<Shopify_MoneyV2>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The carrier-specific services offered by the participant, and whether each service is active. */
  participantServices: Array<Shopify_DeliveryParticipantService>;
  /** The merchant-defined percentage-of-rate fee for this participant. */
  percentageOfRateFee: Scalars['Float']['output'];
};

/** A mail service provided by the participant. */
export type Shopify_DeliveryParticipantService = {
  __typename?: 'Shopify_DeliveryParticipantService';
  /** Whether the service is active. */
  active: Scalars['Boolean']['output'];
  /** The name of the service. */
  name: Scalars['String']['output'];
};

/** How many product variants are in a profile. This count is capped at 500. */
export type Shopify_DeliveryProductVariantsCount = {
  __typename?: 'Shopify_DeliveryProductVariantsCount';
  /** Whether the count has reached the cap of 500. */
  capped: Scalars['Boolean']['output'];
  /** The product variant count. */
  count: Scalars['Int']['output'];
};

/** A shipping profile. In Shopify, a shipping profile is a set of shipping rates scoped to a set of products or variants that can be shipped from selected locations to zones. */
export type Shopify_DeliveryProfile = Shopify_Node & {
  __typename?: 'Shopify_DeliveryProfile';
  /** The number of active shipping rates for the profile. */
  activeMethodDefinitionsCount: Scalars['Int']['output'];
  /** Whether this is the default profile. */
  default: Scalars['Boolean']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** Whether this shop has enabled legacy compatibility mode for delivery profiles. */
  legacyMode: Scalars['Boolean']['output'];
  /** The number of locations without rates defined. */
  locationsWithoutRatesCount: Scalars['Int']['output'];
  /** The name of the delivery profile. */
  name: Scalars['String']['output'];
  /** The number of active origin locations for the profile. */
  originLocationCount: Scalars['Int']['output'];
  /** How many product variants are in this profile. */
  productVariantsCount?: Maybe<Shopify_Count>;
  /**
   * How many product variants are in this profile.
   * @deprecated Use `productVariantsCount` instead.
   */
  productVariantsCountV2: Shopify_DeliveryProductVariantsCount;
  /** The products and variants associated with this profile. */
  profileItems: Shopify_DeliveryProfileItemConnection;
  /** The location groups and associated zones using this profile. */
  profileLocationGroups: Array<Shopify_DeliveryProfileLocationGroup>;
  /** Selling plan groups associated with the specified delivery profile. */
  sellingPlanGroups: Shopify_SellingPlanGroupConnection;
  /** List of locations that haven't been assigned to a location group for this profile. */
  unassignedLocations: Array<Shopify_Location>;
  /** List of locations that have not been assigned to a location group for this profile. */
  unassignedLocationsPaginated: Shopify_LocationConnection;
  /** The number of countries with active rates to deliver to. */
  zoneCountryCount: Scalars['Int']['output'];
};


/** A shipping profile. In Shopify, a shipping profile is a set of shipping rates scoped to a set of products or variants that can be shipped from selected locations to zones. */
export type Shopify_DeliveryProfileProfileItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** A shipping profile. In Shopify, a shipping profile is a set of shipping rates scoped to a set of products or variants that can be shipped from selected locations to zones. */
export type Shopify_DeliveryProfileProfileLocationGroupsArgs = {
  locationGroupId?: InputMaybe<Scalars['ID']['input']>;
};


/** A shipping profile. In Shopify, a shipping profile is a set of shipping rates scoped to a set of products or variants that can be shipped from selected locations to zones. */
export type Shopify_DeliveryProfileSellingPlanGroupsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** A shipping profile. In Shopify, a shipping profile is a set of shipping rates scoped to a set of products or variants that can be shipped from selected locations to zones. */
export type Shopify_DeliveryProfileUnassignedLocationsPaginatedArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** A product and the subset of associated variants that are part of this delivery profile. */
export type Shopify_DeliveryProfileItem = Shopify_Node & {
  __typename?: 'Shopify_DeliveryProfileItem';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** A product associated with this profile. */
  product: Shopify_Product;
  /** The product variants associated with this delivery profile. */
  variants: Shopify_ProductVariantConnection;
};


/** A product and the subset of associated variants that are part of this delivery profile. */
export type Shopify_DeliveryProfileItemVariantsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** An auto-generated type for paginating through multiple DeliveryProfileItems. */
export type Shopify_DeliveryProfileItemConnection = {
  __typename?: 'Shopify_DeliveryProfileItemConnection';
  /** A list of edges. */
  edges: Array<Shopify_DeliveryProfileItemEdge>;
  /** A list of the nodes contained in DeliveryProfileItemEdge. */
  nodes: Array<Shopify_DeliveryProfileItem>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one DeliveryProfileItem and a cursor during pagination. */
export type Shopify_DeliveryProfileItemEdge = {
  __typename?: 'Shopify_DeliveryProfileItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of DeliveryProfileItemEdge. */
  node: Shopify_DeliveryProfileItem;
};

/** Links a location group with zones. Both are associated to a delivery profile. */
export type Shopify_DeliveryProfileLocationGroup = {
  __typename?: 'Shopify_DeliveryProfileLocationGroup';
  /** The countries already selected in any zone for the specified location group. */
  countriesInAnyZone: Array<Shopify_DeliveryCountryAndZone>;
  /** The collection of locations that make up the specified location group. */
  locationGroup: Shopify_DeliveryLocationGroup;
  /** The applicable zones associated to the specified location group. */
  locationGroupZones: Shopify_DeliveryLocationGroupZoneConnection;
};


/** Links a location group with zones. Both are associated to a delivery profile. */
export type Shopify_DeliveryProfileLocationGroupLocationGroupZonesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** A region that is used to define a shipping zone. */
export type Shopify_DeliveryProvince = Shopify_Node & {
  __typename?: 'Shopify_DeliveryProvince';
  /** The code of the region. */
  code: Scalars['String']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The full name of the region. */
  name: Scalars['String']['output'];
  /** The translated name of the region. The translation returned is based on the system's locale. */
  translatedName: Scalars['String']['output'];
};

/** The merchant-defined rate of the [DeliveryMethodDefinition](https://shopify.dev/api/admin-graphql/latest/objects/DeliveryMethodDefinition). */
export type Shopify_DeliveryRateDefinition = Shopify_Node & {
  __typename?: 'Shopify_DeliveryRateDefinition';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The price of this rate. */
  price: Shopify_MoneyV2;
};

/** A rate provided by a merchant-defined rate or a participant. */
export type Shopify_DeliveryRateProvider = Shopify_DeliveryParticipant | Shopify_DeliveryRateDefinition;

/** A zone is a group of countries that have the same shipping rates. Customers can order products from a store only if they choose a shipping destination that's included in one of the store's zones. */
export type Shopify_DeliveryZone = Shopify_Node & {
  __typename?: 'Shopify_DeliveryZone';
  /** The list of countries within the zone. */
  countries: Array<Shopify_DeliveryCountry>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The name of the zone. */
  name: Scalars['String']['output'];
};

/** Digital wallet, such as Apple Pay, which can be used for accelerated checkouts. */
export enum Shopify_DigitalWallet {
  /** Android Pay. */
  AndroidPay = 'ANDROID_PAY',
  /** Apple Pay. */
  ApplePay = 'APPLE_PAY',
  /** Google Pay. */
  GooglePay = 'GOOGLE_PAY',
  /** Shopify Pay. */
  ShopifyPay = 'SHOPIFY_PAY'
}

/** A discount. */
export type Shopify_Discount = Shopify_DiscountAutomaticApp | Shopify_DiscountAutomaticBasic | Shopify_DiscountAutomaticBxgy | Shopify_DiscountAutomaticFreeShipping | Shopify_DiscountCodeApp | Shopify_DiscountCodeBasic | Shopify_DiscountCodeBxgy | Shopify_DiscountCodeFreeShipping;

/** An amount that's allocated to a line based on an associated discount application. */
export type Shopify_DiscountAllocation = {
  __typename?: 'Shopify_DiscountAllocation';
  /**
   * The money amount that's allocated to a line based on the associated discount application.
   * @deprecated Use `allocatedAmountSet` instead.
   */
  allocatedAmount: Shopify_MoneyV2;
  /** The money amount that's allocated to a line based on the associated discount application in shop and presentment currencies. */
  allocatedAmountSet: Shopify_MoneyBag;
  /** The discount application that the allocated amount originated from. */
  discountApplication: Shopify_DiscountApplication;
};

/** The fixed amount value of a discount, and whether the amount is applied to each entitled item or spread evenly across the entitled items. */
export type Shopify_DiscountAmount = {
  __typename?: 'Shopify_DiscountAmount';
  /** The value of the discount. */
  amount: Shopify_MoneyV2;
  /** If true, then the discount is applied to each of the entitled items. If false, then the amount is split across all of the entitled items. */
  appliesOnEachItem: Scalars['Boolean']['output'];
};

/**
 * Discount applications capture the intentions of a discount source at
 * the time of application on an order's line items or shipping lines.
 *
 * Discount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
 */
export type Shopify_DiscountApplication = {
  /** The method by which the discount's value is applied to its entitled items. */
  allocationMethod: Shopify_DiscountApplicationAllocationMethod;
  /**
   * An ordered index that can be used to identify the discount application and indicate the precedence
   * of the discount application for calculations.
   */
  index: Scalars['Int']['output'];
  /** How the discount amount is distributed on the discounted lines. */
  targetSelection: Shopify_DiscountApplicationTargetSelection;
  /** Whether the discount is applied on line items or shipping lines. */
  targetType: Shopify_DiscountApplicationTargetType;
  /** The value of the discount application. */
  value: Shopify_PricingValue;
};

/** The method by which the discount's value is allocated onto its entitled lines. */
export enum Shopify_DiscountApplicationAllocationMethod {
  /** The value is spread across all entitled lines. */
  Across = 'ACROSS',
  /** The value is applied onto every entitled line. */
  Each = 'EACH',
  /**
   * The value is specifically applied onto a particular line.
   * @deprecated Use ACROSS instead.
   */
  One = 'ONE'
}

/** An auto-generated type for paginating through multiple DiscountApplications. */
export type Shopify_DiscountApplicationConnection = {
  __typename?: 'Shopify_DiscountApplicationConnection';
  /** A list of edges. */
  edges: Array<Shopify_DiscountApplicationEdge>;
  /** A list of the nodes contained in DiscountApplicationEdge. */
  nodes: Array<Shopify_DiscountApplication>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one DiscountApplication and a cursor during pagination. */
export type Shopify_DiscountApplicationEdge = {
  __typename?: 'Shopify_DiscountApplicationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of DiscountApplicationEdge. */
  node: Shopify_DiscountApplication;
};

/** The level at which the discount's value is applied. */
export enum Shopify_DiscountApplicationLevel {
  /**
   * The discount is applied at the line level.
   * Line level discounts are factored into the discountedUnitPriceSet on line items.
   */
  Line = 'LINE',
  /**
   * The discount is applied at the order level.
   * Order level discounts are not factored into the discountedUnitPriceSet on line items.
   */
  Order = 'ORDER'
}

/**
 * The lines on the order to which the discount is applied, of the type defined by
 * the discount application's `targetType`. For example, the value `ENTITLED`, combined with a `targetType` of
 * `LINE_ITEM`, applies the discount on all line items that are entitled to the discount.
 * The value `ALL`, combined with a `targetType` of `SHIPPING_LINE`, applies the discount on all shipping lines.
 */
export enum Shopify_DiscountApplicationTargetSelection {
  /** The discount is allocated onto all the lines. */
  All = 'ALL',
  /** The discount is allocated onto only the lines that it's entitled for. */
  Entitled = 'ENTITLED',
  /** The discount is allocated onto explicitly chosen lines. */
  Explicit = 'EXPLICIT'
}

/** The type of line (i.e. line item or shipping line) on an order that the discount is applicable towards. */
export enum Shopify_DiscountApplicationTargetType {
  /** The discount applies onto line items. */
  LineItem = 'LINE_ITEM',
  /** The discount applies onto shipping lines. */
  ShippingLine = 'SHIPPING_LINE'
}

/** The type of discount associated to the automatic discount. For example, the automatic discount might offer a basic discount using a fixed percentage, or a fixed amount, on specific products from the order. The automatic discount may also be a BXGY discount, which offers customer discounts on select products if they add a specific product to their order. */
export type Shopify_DiscountAutomatic = Shopify_DiscountAutomaticApp | Shopify_DiscountAutomaticBasic | Shopify_DiscountAutomaticBxgy | Shopify_DiscountAutomaticFreeShipping;

/** An automatic app discount. */
export type Shopify_DiscountAutomaticApp = {
  __typename?: 'Shopify_DiscountAutomaticApp';
  /** The app discount type providing the discount type. */
  appDiscountType: Shopify_AppDiscountType;
  /** The number of times the discount has been used. This value is updated asynchronously and can be different than the actual usage count. */
  asyncUsageCount: Scalars['Int']['output'];
  /** Determines which discount classes the discount can combine with. */
  combinesWith: Shopify_DiscountCombinesWith;
  /** The date and time when the discount was created. */
  createdAt: Scalars['DateTime']['output'];
  /** The class of the discount for combining purposes. */
  discountClass: Shopify_DiscountClass;
  /** The ID for the discount. */
  discountId: Scalars['ID']['output'];
  /** The date and time when the discount ends. For open-ended discounts, use `null`. */
  endsAt?: Maybe<Scalars['DateTime']['output']>;
  /** The error history on the most recent version of the app discount. */
  errorHistory?: Maybe<Shopify_FunctionsErrorHistory>;
  /** The date and time when the discount starts. */
  startsAt: Scalars['DateTime']['output'];
  /** The status of the discount. */
  status: Shopify_DiscountStatus;
  /** The title of the discount. */
  title: Scalars['String']['output'];
  /** The date and time when the discount was updated. */
  updatedAt: Scalars['DateTime']['output'];
};

/** An automatic discount that offers customers a percentage discount, or fixed amount discount, on specific products, collections, or the entire order. */
export type Shopify_DiscountAutomaticBasic = {
  __typename?: 'Shopify_DiscountAutomaticBasic';
  /** The number of times the discount has been used. This value is updated asynchronously and can be different than the actual usage count. */
  asyncUsageCount: Scalars['Int']['output'];
  /** Determines which discount classes the discount can combine with. */
  combinesWith: Shopify_DiscountCombinesWith;
  /** The date and time when the discount was created. */
  createdAt: Scalars['DateTime']['output'];
  /** The qualifying items in an order, the quantity of each one, and the total value of the discount. */
  customerGets: Shopify_DiscountCustomerGets;
  /** The class of the discount for combining purposes. */
  discountClass: Shopify_MerchandiseDiscountClass;
  /** The date and time when the discount ends. For open-ended discounts, use `null`. */
  endsAt?: Maybe<Scalars['DateTime']['output']>;
  /** The minimum subtotal or quantity that's required for the discount to be applied. */
  minimumRequirement: Shopify_DiscountMinimumRequirement;
  /** The number of times a discount applies on recurring purchases (subscriptions). */
  recurringCycleLimit: Scalars['Int']['output'];
  /** A short summary of the discount. */
  shortSummary: Scalars['String']['output'];
  /** The date and time when the discount starts. */
  startsAt: Scalars['DateTime']['output'];
  /** The status of the discount. */
  status: Shopify_DiscountStatus;
  /** A detailed summary of the discount. */
  summary: Scalars['String']['output'];
  /** The title of the discount. */
  title: Scalars['String']['output'];
  /** The date and time when the discount was updated. */
  updatedAt: Scalars['DateTime']['output'];
  /**
   * The number of times that the discount has been used.
   * @deprecated Use `asyncUsageCount` instead.
   */
  usageCount: Scalars['Int']['output'];
};

/** An automatic discount that offers customers a Buy X, Get Y (BXGY) discount. */
export type Shopify_DiscountAutomaticBxgy = Shopify_HasEvents & Shopify_Node & {
  __typename?: 'Shopify_DiscountAutomaticBxgy';
  /** The number of times the discount has been used. This value is updated asynchronously and can be different than the actual usage count. */
  asyncUsageCount: Scalars['Int']['output'];
  /** Determines which discount classes the discount can combine with. */
  combinesWith: Shopify_DiscountCombinesWith;
  /** The date and time when the discount was created. */
  createdAt: Scalars['DateTime']['output'];
  /** The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount. */
  customerBuys: Shopify_DiscountCustomerBuys;
  /** The qualifying items in an order, the quantity of each one, and the total value of the discount. */
  customerGets: Shopify_DiscountCustomerGets;
  /** The class of the discount for combining purposes. */
  discountClass: Shopify_MerchandiseDiscountClass;
  /** The date and time when the discount ends. For open-ended discounts, use `null`. */
  endsAt?: Maybe<Scalars['DateTime']['output']>;
  /** The paginated list of events associated with the host subject. */
  events: Shopify_EventConnection;
  /**
   * A legacy unique ID for the discount.
   * @deprecated Use DiscountAutomaticNode.id instead.
   */
  id: Scalars['ID']['output'];
  /** The date and time when the discount starts. */
  startsAt: Scalars['DateTime']['output'];
  /** The status of the discount. */
  status: Shopify_DiscountStatus;
  /** A detailed summary of the discount. */
  summary: Scalars['String']['output'];
  /** The title of the discount. */
  title: Scalars['String']['output'];
  /** The date and time when the discount was updated. */
  updatedAt: Scalars['DateTime']['output'];
  /**
   * The number of times that the discount has been used.
   * @deprecated Use `asyncUsageCount` instead.
   */
  usageCount: Scalars['Int']['output'];
  /** The maximum number of times that the discount can be applied to an order. */
  usesPerOrderLimit?: Maybe<Scalars['Int']['output']>;
};


/** An automatic discount that offers customers a Buy X, Get Y (BXGY) discount. */
export type Shopify_DiscountAutomaticBxgyEventsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_EventSortKeys>;
};

/** An automatic discount that offers customers free shipping on their order. */
export type Shopify_DiscountAutomaticFreeShipping = {
  __typename?: 'Shopify_DiscountAutomaticFreeShipping';
  /** Whether the discount applies on regular one-time-purchase shipping lines. */
  appliesOnOneTimePurchase: Scalars['Boolean']['output'];
  /** Whether the discount applies on subscription shipping lines. */
  appliesOnSubscription: Scalars['Boolean']['output'];
  /** The number of times that the discount has been used. This value is updated asynchronously and can be different than the actual usage count. */
  asyncUsageCount: Scalars['Int']['output'];
  /** Determines which discount classes the discount can combine with. */
  combinesWith: Shopify_DiscountCombinesWith;
  /** The date and time when the discount was created. */
  createdAt: Scalars['DateTime']['output'];
  /** A shipping destination that qualifies for the discount. */
  destinationSelection: Shopify_DiscountShippingDestinationSelection;
  /** The class of the discount for combining purposes. */
  discountClass: Shopify_ShippingDiscountClass;
  /** The date and time when the discount ends. For open-ended discounts, use `null`. */
  endsAt?: Maybe<Scalars['DateTime']['output']>;
  /** Indicates whether there are any timeline comments on the discount. */
  hasTimelineComment: Scalars['Boolean']['output'];
  /** The maximum shipping price amount accepted to qualify for the discount. */
  maximumShippingPrice?: Maybe<Shopify_MoneyV2>;
  /** The minimum subtotal or quantity that's required for the discount to be applied. */
  minimumRequirement: Shopify_DiscountMinimumRequirement;
  /** The number of times a discount applies on recurring purchases (subscriptions). */
  recurringCycleLimit: Scalars['Int']['output'];
  /** A short summary of the discount. */
  shortSummary: Scalars['String']['output'];
  /** The date and time when the discount starts. */
  startsAt: Scalars['DateTime']['output'];
  /** The status of the discount. */
  status: Shopify_DiscountStatus;
  /** A detailed summary of the discount. */
  summary: Scalars['String']['output'];
  /** The title of the discount. */
  title: Scalars['String']['output'];
  /** The total sales from orders where the discount was used. */
  totalSales?: Maybe<Shopify_MoneyV2>;
  /** The date and time when the discount was updated. */
  updatedAt: Scalars['DateTime']['output'];
};

/** A node containing an automatic discount and its related events. */
export type Shopify_DiscountAutomaticNode = Shopify_HasEvents & Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_Node & {
  __typename?: 'Shopify_DiscountAutomaticNode';
  /** The automatic discount object. */
  automaticDiscount: Shopify_DiscountAutomatic;
  /** The paginated list of events associated with the host subject. */
  events: Shopify_EventConnection;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafield definitions. */
  metafieldDefinitions: Shopify_MetafieldDefinitionConnection;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafields: Shopify_PrivateMetafieldConnection;
};


/** A node containing an automatic discount and its related events. */
export type Shopify_DiscountAutomaticNodeEventsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_EventSortKeys>;
};


/** A node containing an automatic discount and its related events. */
export type Shopify_DiscountAutomaticNodeMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace?: InputMaybe<Scalars['String']['input']>;
};


/** A node containing an automatic discount and its related events. */
export type Shopify_DiscountAutomaticNodeMetafieldDefinitionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  pinnedStatus?: InputMaybe<Shopify_MetafieldDefinitionPinnedStatus>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_MetafieldDefinitionSortKeys>;
};


/** A node containing an automatic discount and its related events. */
export type Shopify_DiscountAutomaticNodeMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** A node containing an automatic discount and its related events. */
export type Shopify_DiscountAutomaticNodePrivateMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace: Scalars['String']['input'];
};


/** A node containing an automatic discount and its related events. */
export type Shopify_DiscountAutomaticNodePrivateMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The class of the discount for combining purposes. */
export enum Shopify_DiscountClass {
  /** Combined as an order discount. */
  Order = 'ORDER',
  /** Combined as a product discount. */
  Product = 'PRODUCT',
  /** Combined as a shipping discount. */
  Shipping = 'SHIPPING'
}

/** The type of discount associated with the discount code. For example, the discount code might offer a basic discount of a fixed percentage, or a fixed amount, on specific products or the order. Alternatively, the discount might offer the customer free shipping on their order. A third option is a Buy X, Get Y (BXGY) discount, which offers a customer discounts on select products if they add a specific product to their order. */
export type Shopify_DiscountCode = Shopify_DiscountCodeApp | Shopify_DiscountCodeBasic | Shopify_DiscountCodeBxgy | Shopify_DiscountCodeFreeShipping;

/** A code app discount. */
export type Shopify_DiscountCodeApp = {
  __typename?: 'Shopify_DiscountCodeApp';
  /** The app discount type providing the discount type. */
  appDiscountType: Shopify_AppDiscountType;
  /** Whether the discount can be applied only once per customer. */
  appliesOncePerCustomer: Scalars['Boolean']['output'];
  /** The number of times that the discount has been used. */
  asyncUsageCount: Scalars['Int']['output'];
  /** A list of redeem codes for the discount. */
  codes: Shopify_DiscountRedeemCodeConnection;
  /** The number of redeem codes for the discount. */
  codesCount?: Maybe<Shopify_Count>;
  /** Determines which discount classes the discount can combine with. */
  combinesWith: Shopify_DiscountCombinesWith;
  /** The date and time when the discount was created. */
  createdAt: Scalars['DateTime']['output'];
  /** The customers that can use the discount. */
  customerSelection: Shopify_DiscountCustomerSelection;
  /** The class of the discount for combining purposes. */
  discountClass: Shopify_DiscountClass;
  /** The ID for the discount. */
  discountId: Scalars['ID']['output'];
  /** The date and time when the discount ends. For open-ended discounts, use `null`. */
  endsAt?: Maybe<Scalars['DateTime']['output']>;
  /** The error history on the most recent version of the discount. */
  errorHistory?: Maybe<Shopify_FunctionsErrorHistory>;
  /** Indicates whether there are any timeline comments on the discount. */
  hasTimelineComment: Scalars['Boolean']['output'];
  /** The number of times a discount applies on recurring purchases (subscriptions). */
  recurringCycleLimit?: Maybe<Scalars['Int']['output']>;
  /** URLs that can be used to share the discount. */
  shareableUrls: Array<Shopify_DiscountShareableUrl>;
  /** The date and time when the discount starts. */
  startsAt: Scalars['DateTime']['output'];
  /** The status of the discount. */
  status: Shopify_DiscountStatus;
  /** The title of the discount. */
  title: Scalars['String']['output'];
  /** The total sales from orders where the discount was used. */
  totalSales?: Maybe<Shopify_MoneyV2>;
  /** The date and time when the discount was updated. */
  updatedAt: Scalars['DateTime']['output'];
  /** The maximum number of times that the discount can be used. */
  usageLimit?: Maybe<Scalars['Int']['output']>;
};


/** A code app discount. */
export type Shopify_DiscountCodeAppCodesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  savedSearchId?: InputMaybe<Scalars['ID']['input']>;
  sortKey?: InputMaybe<Shopify_DiscountCodeSortKeys>;
};

/**
 * Discount code applications capture the intentions of a discount code at
 * the time that it is applied onto an order.
 *
 * Discount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
 */
export type Shopify_DiscountCodeApplication = Shopify_DiscountApplication & {
  __typename?: 'Shopify_DiscountCodeApplication';
  /** The method by which the discount's value is applied to its entitled items. */
  allocationMethod: Shopify_DiscountApplicationAllocationMethod;
  /** The string identifying the discount code that was used at the time of application. */
  code: Scalars['String']['output'];
  /**
   * An ordered index that can be used to identify the discount application and indicate the precedence
   * of the discount application for calculations.
   */
  index: Scalars['Int']['output'];
  /** How the discount amount is distributed on the discounted lines. */
  targetSelection: Shopify_DiscountApplicationTargetSelection;
  /** Whether the discount is applied on line items or shipping lines. */
  targetType: Shopify_DiscountApplicationTargetType;
  /** The value of the discount application. */
  value: Shopify_PricingValue;
};

/** A code discount that offers customers a percentage or fixed amount discount on specific products, collections, or the entire order. */
export type Shopify_DiscountCodeBasic = {
  __typename?: 'Shopify_DiscountCodeBasic';
  /** Whether the discount can be applied only once per customer. */
  appliesOncePerCustomer: Scalars['Boolean']['output'];
  /** The number of times that the discount has been used. */
  asyncUsageCount: Scalars['Int']['output'];
  /** A list of redeem codes for the discount. */
  codes: Shopify_DiscountRedeemCodeConnection;
  /** The number of redeem codes for the discount. */
  codesCount?: Maybe<Shopify_Count>;
  /** Determines which discount classes the discount can combine with. */
  combinesWith: Shopify_DiscountCombinesWith;
  /** The date and time when the discount was created. */
  createdAt: Scalars['DateTime']['output'];
  /** The qualifying items in an order, the quantity of each one, and the total value of the discount. */
  customerGets: Shopify_DiscountCustomerGets;
  /** The customers that can use the discount. */
  customerSelection: Shopify_DiscountCustomerSelection;
  /** The class of the discount for combining purposes. */
  discountClass: Shopify_MerchandiseDiscountClass;
  /** The date and time when the discount ends. For open-ended discounts, use `null`. */
  endsAt?: Maybe<Scalars['DateTime']['output']>;
  /** Indicates whether there are any timeline comments on the discount. */
  hasTimelineComment: Scalars['Boolean']['output'];
  /** The minimum subtotal or quantity that's required for the discount to be applied. */
  minimumRequirement?: Maybe<Shopify_DiscountMinimumRequirement>;
  /** The number of times a discount applies on recurring purchases (subscriptions). */
  recurringCycleLimit?: Maybe<Scalars['Int']['output']>;
  /** URLs that can be used to share the discount. */
  shareableUrls: Array<Shopify_DiscountShareableUrl>;
  /** A short summary of the discount. */
  shortSummary: Scalars['String']['output'];
  /** The date and time when the discount starts. */
  startsAt: Scalars['DateTime']['output'];
  /** The status of the discount. */
  status: Shopify_DiscountStatus;
  /** A detailed summary of the discount. */
  summary: Scalars['String']['output'];
  /** The title of the discount. */
  title: Scalars['String']['output'];
  /** The total sales from orders where the discount was used. */
  totalSales?: Maybe<Shopify_MoneyV2>;
  /** The date and time when the discount was updated. */
  updatedAt: Scalars['DateTime']['output'];
  /** The maximum number of times that the discount can be used. */
  usageLimit?: Maybe<Scalars['Int']['output']>;
};


/** A code discount that offers customers a percentage or fixed amount discount on specific products, collections, or the entire order. */
export type Shopify_DiscountCodeBasicCodesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  savedSearchId?: InputMaybe<Scalars['ID']['input']>;
  sortKey?: InputMaybe<Shopify_DiscountCodeSortKeys>;
};

/** A code discount that offers customers a Buy X, Get Y (BXGY) discount. */
export type Shopify_DiscountCodeBxgy = {
  __typename?: 'Shopify_DiscountCodeBxgy';
  /** Whether the discount can be applied only once per customer. */
  appliesOncePerCustomer: Scalars['Boolean']['output'];
  /** The number of times that the discount has been used. */
  asyncUsageCount: Scalars['Int']['output'];
  /** A list of redeem codes for the discount. */
  codes: Shopify_DiscountRedeemCodeConnection;
  /** The number of redeem codes for the discount. */
  codesCount?: Maybe<Shopify_Count>;
  /** Determines which discount classes the discount can combine with. */
  combinesWith: Shopify_DiscountCombinesWith;
  /** The date and time when the discount was created. */
  createdAt: Scalars['DateTime']['output'];
  /** The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount. */
  customerBuys: Shopify_DiscountCustomerBuys;
  /** The qualifying items in an order, the quantity of each one, and the total value of the discount. */
  customerGets: Shopify_DiscountCustomerGets;
  /** The customers that can use the discount. */
  customerSelection: Shopify_DiscountCustomerSelection;
  /** The class of the discount for combining purposes. */
  discountClass: Shopify_MerchandiseDiscountClass;
  /** The date and time when the discount ends. For open-ended discounts, use `null`. */
  endsAt?: Maybe<Scalars['DateTime']['output']>;
  /** Indicates whether there are any timeline comments on the discount. */
  hasTimelineComment: Scalars['Boolean']['output'];
  /** URLs that can be used to share the discount. */
  shareableUrls: Array<Shopify_DiscountShareableUrl>;
  /** The date and time when the discount starts. */
  startsAt: Scalars['DateTime']['output'];
  /** The status of the discount. */
  status: Shopify_DiscountStatus;
  /** A detailed summary of the discount. */
  summary: Scalars['String']['output'];
  /** The title of the discount. */
  title: Scalars['String']['output'];
  /** The total sales from orders where the discount was used. */
  totalSales?: Maybe<Shopify_MoneyV2>;
  /** The date and time when the discount was updated. */
  updatedAt: Scalars['DateTime']['output'];
  /** The maximum number of times that the discount can be used. */
  usageLimit?: Maybe<Scalars['Int']['output']>;
  /** The maximum number of times that the discount can be applied to an order. */
  usesPerOrderLimit?: Maybe<Scalars['Int']['output']>;
};


/** A code discount that offers customers a Buy X, Get Y (BXGY) discount. */
export type Shopify_DiscountCodeBxgyCodesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  savedSearchId?: InputMaybe<Scalars['ID']['input']>;
  sortKey?: InputMaybe<Shopify_DiscountCodeSortKeys>;
};

/** A code discount that offers customers free shipping on their order. */
export type Shopify_DiscountCodeFreeShipping = {
  __typename?: 'Shopify_DiscountCodeFreeShipping';
  /** Whether the discount applies on regular one-time-purchase shipping lines. */
  appliesOnOneTimePurchase: Scalars['Boolean']['output'];
  /** Whether the discount applies on subscription shipping lines. */
  appliesOnSubscription: Scalars['Boolean']['output'];
  /** Whether the discount can be applied only once per customer. */
  appliesOncePerCustomer: Scalars['Boolean']['output'];
  /** The number of times that the discount has been used. */
  asyncUsageCount: Scalars['Int']['output'];
  /** A list of redeem codes for the discount. */
  codes: Shopify_DiscountRedeemCodeConnection;
  /** The number of redeem codes for the discount. */
  codesCount?: Maybe<Shopify_Count>;
  /** Determines which discount classes the discount can combine with. */
  combinesWith: Shopify_DiscountCombinesWith;
  /** The date and time when the discount was created. */
  createdAt: Scalars['DateTime']['output'];
  /** The customers that can use the discount. */
  customerSelection: Shopify_DiscountCustomerSelection;
  /** A shipping destination that qualifies for the discount. */
  destinationSelection: Shopify_DiscountShippingDestinationSelection;
  /** The class of the discount for combining purposes. */
  discountClass: Shopify_ShippingDiscountClass;
  /** The date and time when the discount ends. For open-ended discounts, use `null`. */
  endsAt?: Maybe<Scalars['DateTime']['output']>;
  /** Indicates whether there are any timeline comments on the discount. */
  hasTimelineComment: Scalars['Boolean']['output'];
  /** The maximum shipping price amount accepted to qualify for the discount. */
  maximumShippingPrice?: Maybe<Shopify_MoneyV2>;
  /** The minimum subtotal or quantity that's required for the discount to be applied. */
  minimumRequirement?: Maybe<Shopify_DiscountMinimumRequirement>;
  /** The number of times a discount applies on recurring purchases (subscriptions). */
  recurringCycleLimit?: Maybe<Scalars['Int']['output']>;
  /** URLs that can be used to share the discount. */
  shareableUrls: Array<Shopify_DiscountShareableUrl>;
  /** A short summary of the discount. */
  shortSummary: Scalars['String']['output'];
  /** The date and time when the discount starts. */
  startsAt: Scalars['DateTime']['output'];
  /** The status of the discount. */
  status: Shopify_DiscountStatus;
  /** A detailed summary of the discount. */
  summary: Scalars['String']['output'];
  /** The title of the discount. */
  title: Scalars['String']['output'];
  /** The total sales from orders where the discount was used. */
  totalSales?: Maybe<Shopify_MoneyV2>;
  /** The date and time when the discount was updated. */
  updatedAt: Scalars['DateTime']['output'];
  /** The maximum number of times that the discount can be used. */
  usageLimit?: Maybe<Scalars['Int']['output']>;
};


/** A code discount that offers customers free shipping on their order. */
export type Shopify_DiscountCodeFreeShippingCodesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  savedSearchId?: InputMaybe<Scalars['ID']['input']>;
  sortKey?: InputMaybe<Shopify_DiscountCodeSortKeys>;
};

/** A node containing a code discount and its related events. */
export type Shopify_DiscountCodeNode = Shopify_HasEvents & Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_Node & {
  __typename?: 'Shopify_DiscountCodeNode';
  /** The underlying code discount object. */
  codeDiscount: Shopify_DiscountCode;
  /** The paginated list of events associated with the host subject. */
  events: Shopify_EventConnection;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafield definitions. */
  metafieldDefinitions: Shopify_MetafieldDefinitionConnection;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafields: Shopify_PrivateMetafieldConnection;
};


/** A node containing a code discount and its related events. */
export type Shopify_DiscountCodeNodeEventsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_EventSortKeys>;
};


/** A node containing a code discount and its related events. */
export type Shopify_DiscountCodeNodeMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace?: InputMaybe<Scalars['String']['input']>;
};


/** A node containing a code discount and its related events. */
export type Shopify_DiscountCodeNodeMetafieldDefinitionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  pinnedStatus?: InputMaybe<Shopify_MetafieldDefinitionPinnedStatus>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_MetafieldDefinitionSortKeys>;
};


/** A node containing a code discount and its related events. */
export type Shopify_DiscountCodeNodeMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** A node containing a code discount and its related events. */
export type Shopify_DiscountCodeNodePrivateMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace: Scalars['String']['input'];
};


/** A node containing a code discount and its related events. */
export type Shopify_DiscountCodeNodePrivateMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The set of valid sort keys for the DiscountCode query. */
export enum Shopify_DiscountCodeSortKeys {
  /** Sort by the `code` value. */
  Code = 'CODE',
  /** Sort by the `created_at` value. */
  CreatedAt = 'CREATED_AT',
  /** Sort by the `id` value. */
  Id = 'ID',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE'
}

/** A list of collections that the discount can have as a prerequisite or a list of collections to which the discount can be applied. */
export type Shopify_DiscountCollections = {
  __typename?: 'Shopify_DiscountCollections';
  /** The list of collections that the discount can have as a prerequisite or the list of collections to which the discount can be applied. */
  collections: Shopify_CollectionConnection;
};


/** A list of collections that the discount can have as a prerequisite or a list of collections to which the discount can be applied. */
export type Shopify_DiscountCollectionsCollectionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Determines which discount classes the discount can combine with. */
export type Shopify_DiscountCombinesWith = {
  __typename?: 'Shopify_DiscountCombinesWith';
  /** Combines with order discounts. */
  orderDiscounts: Scalars['Boolean']['output'];
  /** Combines with product discounts. */
  productDiscounts: Scalars['Boolean']['output'];
  /** Combines with shipping discounts. */
  shippingDiscounts: Scalars['Boolean']['output'];
};

/** The shipping destinations where the discount can be applied. */
export type Shopify_DiscountCountries = {
  __typename?: 'Shopify_DiscountCountries';
  /** The codes for the countries where the discount can be applied. */
  countries: Array<Shopify_CountryCode>;
  /** Whether the discount is applicable to countries that haven't been defined in the shop's shipping zones. */
  includeRestOfWorld: Scalars['Boolean']['output'];
};

/** The `DiscountCountryAll` object lets you target all countries as shipping destination for discount eligibility. */
export type Shopify_DiscountCountryAll = {
  __typename?: 'Shopify_DiscountCountryAll';
  /** Whether the discount can be applied to all countries as shipping destination. This value is always `true`. */
  allCountries: Scalars['Boolean']['output'];
};

/** The `DiscountCustomerAll` object lets you target all customers for discount eligibility. */
export type Shopify_DiscountCustomerAll = {
  __typename?: 'Shopify_DiscountCustomerAll';
  /** Whether the discount can be applied by all customers. This value is always `true`. */
  allCustomers: Scalars['Boolean']['output'];
};

/** The prerequisite items and prerequisite value that a customer must have on the order for the discount to be applicable. */
export type Shopify_DiscountCustomerBuys = {
  __typename?: 'Shopify_DiscountCustomerBuys';
  /** The items required for the discount to be applicable. */
  items: Shopify_DiscountItems;
  /** The prerequisite value. */
  value: Shopify_DiscountCustomerBuysValue;
};

/** The prerequisite for the discount to be applicable. For example, the discount might require a customer to buy a minimum quantity of select items. Alternatively, the discount might require a customer to spend a minimum amount on select items. */
export type Shopify_DiscountCustomerBuysValue = Shopify_DiscountPurchaseAmount | Shopify_DiscountQuantity;

/** The qualifying items in an order, the quantity of each one, and the total value of the discount. */
export type Shopify_DiscountCustomerGets = {
  __typename?: 'Shopify_DiscountCustomerGets';
  /** Whether the discount applies on regular one-time-purchase items. */
  appliesOnOneTimePurchase: Scalars['Boolean']['output'];
  /** Whether the discount applies on subscription items. */
  appliesOnSubscription: Scalars['Boolean']['output'];
  /** The items to which the discount applies. */
  items: Shopify_DiscountItems;
  /** Entitled quantity and the discount value. */
  value: Shopify_DiscountCustomerGetsValue;
};

/** The type of the discount value and how it will be applied. For example, it might be a percentage discount on a fixed number of items. Alternatively, it might be a fixed amount evenly distributed across all items or on each individual item. A third example is a percentage discount on all items. */
export type Shopify_DiscountCustomerGetsValue = Shopify_DiscountAmount | Shopify_DiscountOnQuantity | Shopify_DiscountPercentage;

/** A list of customer segments that contain the customers that the discount applies to. */
export type Shopify_DiscountCustomerSegments = {
  __typename?: 'Shopify_DiscountCustomerSegments';
  /** A list of customer segments that contain the customers who can use the discount. */
  segments: Array<Shopify_Segment>;
};

/** The type used for targeting a set of customers who are eligible for the discount. For example, the discount might be available to all customers or it might only be available to a specific set of customers. You can define the set of customers by targeting a list of customer segments, or by targeting a list of specific customers. */
export type Shopify_DiscountCustomerSelection = Shopify_DiscountCustomerAll | Shopify_DiscountCustomerSegments | Shopify_DiscountCustomers;

/** A list of customers eligible for the discount. */
export type Shopify_DiscountCustomers = {
  __typename?: 'Shopify_DiscountCustomers';
  /** The list of customers eligible for the discount. */
  customers: Array<Shopify_Customer>;
};

/** The type of discount that will be applied. Currently, only a percentage discount is supported. */
export type Shopify_DiscountEffect = Shopify_DiscountAmount | Shopify_DiscountPercentage;

/** Possible error codes that can be returned by `DiscountUserError`. */
export enum Shopify_DiscountErrorCode {
  /** The active period overlaps with other automatic discounts. At any given time, only one automatic discount can be active. */
  ActivePeriodOverlap = 'ACTIVE_PERIOD_OVERLAP',
  /** The input value is blank. */
  Blank = 'BLANK',
  /** The attribute selection contains conflicting settings. */
  Conflict = 'CONFLICT',
  /** The input value is already present. */
  Duplicate = 'DUPLICATE',
  /** The input value should be equal to the value allowed. */
  EqualTo = 'EQUAL_TO',
  /** The value exceeded the maximum allowed value. */
  ExceededMax = 'EXCEEDED_MAX',
  /** The input value should be greater than the minimum allowed value. */
  GreaterThan = 'GREATER_THAN',
  /** The input value should be greater than or equal to the minimum value allowed. */
  GreaterThanOrEqualTo = 'GREATER_THAN_OR_EQUAL_TO',
  /** The value is already present through another selection. */
  ImplicitDuplicate = 'IMPLICIT_DUPLICATE',
  /** The input value isn't included in the list. */
  Inclusion = 'INCLUSION',
  /** Unexpected internal error happened. */
  InternalError = 'INTERNAL_ERROR',
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** The `combinesWith` settings are invalid for the discount class. */
  InvalidCombinesWithForDiscountClass = 'INVALID_COMBINES_WITH_FOR_DISCOUNT_CLASS',
  /** The discountClass is invalid for the price rule. */
  InvalidDiscountClassForPriceRule = 'INVALID_DISCOUNT_CLASS_FOR_PRICE_RULE',
  /** The input value should be less than the maximum value allowed. */
  LessThan = 'LESS_THAN',
  /** The input value should be less than or equal to the maximum value allowed. */
  LessThanOrEqualTo = 'LESS_THAN_OR_EQUAL_TO',
  /** The active period overlaps with too many other app-provided discounts. There's a limit on the number of app discounts that can be active at any given time. */
  MaxAppDiscounts = 'MAX_APP_DISCOUNTS',
  /** Specify a minimum subtotal or a quantity, but not both. */
  MinimumSubtotalAndQuantityRangeBothPresent = 'MINIMUM_SUBTOTAL_AND_QUANTITY_RANGE_BOTH_PRESENT',
  /** Missing a required argument. */
  MissingArgument = 'MISSING_ARGUMENT',
  /** The input value needs to be blank. */
  Present = 'PRESENT',
  /** The input value is already taken. */
  Taken = 'TAKEN',
  /** The input value is too long. */
  TooLong = 'TOO_LONG',
  /** Too many arguments provided. */
  TooManyArguments = 'TOO_MANY_ARGUMENTS',
  /** The input value is too short. */
  TooShort = 'TOO_SHORT',
  /** The value is outside of the allowed range. */
  ValueOutsideRange = 'VALUE_OUTSIDE_RANGE'
}

/** The type used to target the items required for discount eligibility, or the items to which the application of a discount might apply. For example, for a customer to be eligible for a discount, they're required to add an item from a specified collection to their order. Alternatively, a customer might be required to add a specific product or product variant. When using this type to target which items the discount will apply to, the discount might apply to all items on the order, or to specific products and product variants, or items in a given collection. */
export type Shopify_DiscountItems = Shopify_AllDiscountItems | Shopify_DiscountCollections | Shopify_DiscountProducts;

/** The minimum quantity of items required for the discount to apply. */
export type Shopify_DiscountMinimumQuantity = {
  __typename?: 'Shopify_DiscountMinimumQuantity';
  /** The minimum quantity of items that's required for the discount to be applied. */
  greaterThanOrEqualToQuantity: Scalars['Shopify_UnsignedInt64']['output'];
};

/** The type of minimum requirement that must be met for the discount to be applied. For example, a customer must spend a minimum subtotal to be eligible for the discount. Alternatively, a customer must purchase a minimum quantity of items to be eligible for the discount. */
export type Shopify_DiscountMinimumRequirement = Shopify_DiscountMinimumQuantity | Shopify_DiscountMinimumSubtotal;

/** The minimum subtotal required for the discount to apply. */
export type Shopify_DiscountMinimumSubtotal = {
  __typename?: 'Shopify_DiscountMinimumSubtotal';
  /** The minimum subtotal that's required for the discount to be applied. */
  greaterThanOrEqualToSubtotal: Shopify_MoneyV2;
};

/** A discount wrapper node. */
export type Shopify_DiscountNode = Shopify_HasEvents & Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_Node & {
  __typename?: 'Shopify_DiscountNode';
  /** A discount. */
  discount: Shopify_Discount;
  /** The paginated list of events associated with the host subject. */
  events: Shopify_EventConnection;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafield definitions. */
  metafieldDefinitions: Shopify_MetafieldDefinitionConnection;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafields: Shopify_PrivateMetafieldConnection;
};


/** A discount wrapper node. */
export type Shopify_DiscountNodeEventsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_EventSortKeys>;
};


/** A discount wrapper node. */
export type Shopify_DiscountNodeMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace?: InputMaybe<Scalars['String']['input']>;
};


/** A discount wrapper node. */
export type Shopify_DiscountNodeMetafieldDefinitionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  pinnedStatus?: InputMaybe<Shopify_MetafieldDefinitionPinnedStatus>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_MetafieldDefinitionSortKeys>;
};


/** A discount wrapper node. */
export type Shopify_DiscountNodeMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** A discount wrapper node. */
export type Shopify_DiscountNodePrivateMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace: Scalars['String']['input'];
};


/** A discount wrapper node. */
export type Shopify_DiscountNodePrivateMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The quantity of items discounted, the discount value, and how the discount will be applied. */
export type Shopify_DiscountOnQuantity = {
  __typename?: 'Shopify_DiscountOnQuantity';
  /** The discount's effect on qualifying items. */
  effect: Shopify_DiscountEffect;
  /** The number of items being discounted. The customer must have at least this many items of specified products or product variants in their order to be eligible for the discount. */
  quantity: Shopify_DiscountQuantity;
};

/** A discount effect that gives customers a percentage off of specified items on their order. */
export type Shopify_DiscountPercentage = {
  __typename?: 'Shopify_DiscountPercentage';
  /** The percentage value of the discount. */
  percentage: Scalars['Float']['output'];
};

/** A list of products and product variants that the discount can have as a prerequisite or a list of products and product variants to which the discount can be applied. */
export type Shopify_DiscountProducts = {
  __typename?: 'Shopify_DiscountProducts';
  /** The list of product variants that the discount can have as a prerequisite or the list of product variants to which the discount can be applied. */
  productVariants: Shopify_ProductVariantConnection;
  /** The list of products that the discount can have as a prerequisite or the list of products to which the discount can be applied. */
  products: Shopify_ProductConnection;
};


/** A list of products and product variants that the discount can have as a prerequisite or a list of products and product variants to which the discount can be applied. */
export type Shopify_DiscountProductsProductVariantsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** A list of products and product variants that the discount can have as a prerequisite or a list of products and product variants to which the discount can be applied. */
export type Shopify_DiscountProductsProductsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** A purchase amount in the context of a discount. This object can be used to define the minimum purchase amount required for a discount to be applicable. */
export type Shopify_DiscountPurchaseAmount = {
  __typename?: 'Shopify_DiscountPurchaseAmount';
  /** The purchase amount in decimal format. */
  amount: Scalars['Shopify_Decimal']['output'];
};

/** A quantity of items in the context of a discount. This object can be used to define the minimum quantity of items required to apply a discount. Alternatively, it can be used to define the quantity of items that can be discounted. */
export type Shopify_DiscountQuantity = {
  __typename?: 'Shopify_DiscountQuantity';
  /** The quantity of items. */
  quantity: Scalars['Shopify_UnsignedInt64']['output'];
};

/** A code that a customer can use at checkout to receive a discount. For example, a customer can use the redeem code 'SUMMER20' at checkout to receive a 20% discount on their entire order. */
export type Shopify_DiscountRedeemCode = {
  __typename?: 'Shopify_DiscountRedeemCode';
  /** The number of times that the discount redeem code has been used. This value is updated asynchronously and can be different than the actual usage count. */
  asyncUsageCount: Scalars['Int']['output'];
  /** The code that a customer can use at checkout to receive a discount. */
  code: Scalars['String']['output'];
  /** The application that created the discount redeem code. */
  createdBy?: Maybe<Shopify_App>;
  /** A globally-unique ID of the discount redeem code. */
  id: Scalars['ID']['output'];
};

/** The properties and status of a bulk discount redeem code creation operation. */
export type Shopify_DiscountRedeemCodeBulkCreation = Shopify_Node & {
  __typename?: 'Shopify_DiscountRedeemCodeBulkCreation';
  /** The result of each code creation operation associated with the bulk creation operation including any errors that might have occurred during the operation. */
  codes: Shopify_DiscountRedeemCodeBulkCreationCodeConnection;
  /** The number of codes to create. */
  codesCount: Scalars['Int']['output'];
  /** The date and time when the bulk creation was created. */
  createdAt: Scalars['DateTime']['output'];
  /** The code discount associated with the created codes. */
  discountCode?: Maybe<Shopify_DiscountCodeNode>;
  /** Whether the bulk creation is still queued (`false`) or has been run (`true`). */
  done: Scalars['Boolean']['output'];
  /** The number of codes that weren't created successfully. */
  failedCount: Scalars['Int']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The number of codes created successfully. */
  importedCount: Scalars['Int']['output'];
};


/** The properties and status of a bulk discount redeem code creation operation. */
export type Shopify_DiscountRedeemCodeBulkCreationCodesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** A result of a discount redeem code creation operation created by a bulk creation. */
export type Shopify_DiscountRedeemCodeBulkCreationCode = {
  __typename?: 'Shopify_DiscountRedeemCodeBulkCreationCode';
  /** The code to use in the discount redeem code creation operation. */
  code: Scalars['String']['output'];
  /**
   * The successfully created discount redeem code.
   *
   * If the discount redeem code couldn't be created, then this field is `null``.
   */
  discountRedeemCode?: Maybe<Shopify_DiscountRedeemCode>;
  /** A list of errors that occurred during the creation operation of the discount redeem code. */
  errors: Array<Shopify_DiscountUserError>;
};

/** An auto-generated type for paginating through multiple DiscountRedeemCodeBulkCreationCodes. */
export type Shopify_DiscountRedeemCodeBulkCreationCodeConnection = {
  __typename?: 'Shopify_DiscountRedeemCodeBulkCreationCodeConnection';
  /** A list of edges. */
  edges: Array<Shopify_DiscountRedeemCodeBulkCreationCodeEdge>;
  /** A list of the nodes contained in DiscountRedeemCodeBulkCreationCodeEdge. */
  nodes: Array<Shopify_DiscountRedeemCodeBulkCreationCode>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one DiscountRedeemCodeBulkCreationCode and a cursor during pagination. */
export type Shopify_DiscountRedeemCodeBulkCreationCodeEdge = {
  __typename?: 'Shopify_DiscountRedeemCodeBulkCreationCodeEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of DiscountRedeemCodeBulkCreationCodeEdge. */
  node: Shopify_DiscountRedeemCodeBulkCreationCode;
};

/** An auto-generated type for paginating through multiple DiscountRedeemCodes. */
export type Shopify_DiscountRedeemCodeConnection = {
  __typename?: 'Shopify_DiscountRedeemCodeConnection';
  /** A list of edges. */
  edges: Array<Shopify_DiscountRedeemCodeEdge>;
  /** A list of the nodes contained in DiscountRedeemCodeEdge. */
  nodes: Array<Shopify_DiscountRedeemCode>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one DiscountRedeemCode and a cursor during pagination. */
export type Shopify_DiscountRedeemCodeEdge = {
  __typename?: 'Shopify_DiscountRedeemCodeEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of DiscountRedeemCodeEdge. */
  node: Shopify_DiscountRedeemCode;
};

/** A shareable URL for a discount code. */
export type Shopify_DiscountShareableUrl = {
  __typename?: 'Shopify_DiscountShareableUrl';
  /** The image URL of the item (product or collection) to which the discount applies. */
  targetItemImage?: Maybe<Shopify_Image>;
  /** The type of page that's associated with the URL. */
  targetType: Shopify_DiscountShareableUrlTargetType;
  /** The title of the page that's associated with the URL. */
  title: Scalars['String']['output'];
  /** The URL for the discount code. */
  url: Scalars['Shopify_URL']['output'];
};

/** The type of page where a shareable discount URL lands. */
export enum Shopify_DiscountShareableUrlTargetType {
  /** The URL lands on a collection page. */
  Collection = 'COLLECTION',
  /** The URL lands on a home page. */
  Home = 'HOME',
  /** The URL lands on a product page. */
  Product = 'PRODUCT'
}

/** The type used to target the eligible countries of an order's shipping destination for which the discount applies. For example, the discount might be applicable when shipping to all countries, or only to a set of countries. */
export type Shopify_DiscountShippingDestinationSelection = Shopify_DiscountCountries | Shopify_DiscountCountryAll;

/** The status of the discount. */
export enum Shopify_DiscountStatus {
  /** The discount is active. */
  Active = 'ACTIVE',
  /** The discount is expired. */
  Expired = 'EXPIRED',
  /** The discount is scheduled when it has a start date in the future. */
  Scheduled = 'SCHEDULED'
}

/** The type of line (line item or shipping line) on an order that the subscription discount is applicable towards. */
export enum Shopify_DiscountTargetType {
  /** The discount applies onto line items. */
  LineItem = 'LINE_ITEM',
  /** The discount applies onto shipping lines. */
  ShippingLine = 'SHIPPING_LINE'
}

/** The type of the subscription discount. */
export enum Shopify_DiscountType {
  /** Automatic discount type. */
  AutomaticDiscount = 'AUTOMATIC_DISCOUNT',
  /** Code discount type. */
  CodeDiscount = 'CODE_DISCOUNT',
  /** Manual discount type. */
  Manual = 'MANUAL'
}

/** An error that occurs during the execution of a discount mutation. */
export type Shopify_DiscountUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_DiscountUserError';
  /** The error code. */
  code?: Maybe<Shopify_DiscountErrorCode>;
  /** Extra information about this error. */
  extraInfo?: Maybe<Scalars['String']['output']>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Represents an error in the input of a mutation. */
export type Shopify_DisplayableError = {
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** An error that occurs during the execution of `DisputeEvidenceUpdate`. */
export type Shopify_DisputeEvidenceUpdateUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_DisputeEvidenceUpdateUserError';
  /** The error code. */
  code?: Maybe<Shopify_DisputeEvidenceUpdateUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `DisputeEvidenceUpdateUserError`. */
export enum Shopify_DisputeEvidenceUpdateUserErrorCode {
  /** Dispute evidence could not be found. */
  DisputeEvidenceNotFound = 'DISPUTE_EVIDENCE_NOT_FOUND',
  /** Evidence already accepted. */
  EvidenceAlreadyAccepted = 'EVIDENCE_ALREADY_ACCEPTED',
  /** Evidence past due date. */
  EvidencePastDueDate = 'EVIDENCE_PAST_DUE_DATE',
  /** Combined files size is too large. */
  FilesSizeExceededLimit = 'FILES_SIZE_EXCEEDED_LIMIT',
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** Individual file size is too large. */
  TooLarge = 'TOO_LARGE'
}

/** The possible statuses of a dispute. */
export enum Shopify_DisputeStatus {
  Accepted = 'ACCEPTED',
  /**
   * Status previously used by Stripe to indicate that a dispute led to a refund.
   * @deprecated CHARGE_REFUNDED is no longer supported.
   */
  ChargeRefunded = 'CHARGE_REFUNDED',
  Lost = 'LOST',
  NeedsResponse = 'NEEDS_RESPONSE',
  UnderReview = 'UNDER_REVIEW',
  Won = 'WON'
}

/** The possible types for a dispute. */
export enum Shopify_DisputeType {
  /** The dispute has turned into a chargeback. */
  Chargeback = 'CHARGEBACK',
  /** The dispute is in the inquiry phase. */
  Inquiry = 'INQUIRY'
}

/** A unique string that represents the address of a Shopify store on the Internet. */
export type Shopify_Domain = Shopify_Node & {
  __typename?: 'Shopify_Domain';
  /** The host name of the domain. For example, `example.com`. */
  host: Scalars['String']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The localization of the domain, if the domain doesn't redirect. */
  localization?: Maybe<Shopify_DomainLocalization>;
  /** The web presence of the domain. */
  marketWebPresence?: Maybe<Shopify_MarketWebPresence>;
  /** Whether SSL is enabled. */
  sslEnabled: Scalars['Boolean']['output'];
  /** The URL of the domain (for example, `https://example.com`). */
  url: Scalars['Shopify_URL']['output'];
};

/** The country and language settings assigned to a domain. */
export type Shopify_DomainLocalization = {
  __typename?: 'Shopify_DomainLocalization';
  /** The ISO codes for the domain’s alternate locales. For example, `["en"]`. */
  alternateLocales: Array<Scalars['String']['output']>;
  /** The ISO code for the country assigned to the domain. For example, `"CA"` or "*" for a domain set to "Rest of world". */
  country?: Maybe<Scalars['String']['output']>;
  /** The ISO code for the domain’s default locale. For example, `"en"`. */
  defaultLocale: Scalars['String']['output'];
};

/**
 * An order that a merchant creates on behalf of a customer. Draft orders are useful for merchants that need to do the following tasks:
 *
 * - Create new orders for sales made by phone, in person, by chat, or elsewhere. When a merchant accepts payment for a draft order, an order is created.
 * - Send invoices to customers to pay with a secure checkout link.
 * - Use custom items to represent additional costs or products that aren't displayed in a shop's inventory.
 * - Re-create orders manually from active sales channels.
 * - Sell products at discount or wholesale rates.
 * - Take pre-orders.
 * - Save an order as a draft and resume working on it later.
 *
 * For Draft orders in multiple currencies `presentment_money` is the source of truth for what a customer is going to be charged and `shop_money` is an estimate of what the merchant might receive in their local currency.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_DraftOrder = Shopify_CommentEventSubject & Shopify_HasEvents & Shopify_HasLocalizationExtensions & Shopify_HasMetafields & Shopify_LegacyInteroperability & Shopify_Navigable & Shopify_Node & {
  __typename?: 'Shopify_DraftOrder';
  /** The order-level discount applied to the draft order. */
  appliedDiscount?: Maybe<Shopify_DraftOrderAppliedDiscount>;
  /** The billing address of the customer. */
  billingAddress?: Maybe<Shopify_MailingAddress>;
  /** Whether the billing address matches the shipping address. */
  billingAddressMatchesShippingAddress: Scalars['Boolean']['output'];
  /**
   * The date and time when the draft order converted to a new order,
   * and the draft order's status changed to **Completed**.
   */
  completedAt?: Maybe<Scalars['DateTime']['output']>;
  /** The date and time when the draft order was created in Shopify. */
  createdAt: Scalars['DateTime']['output'];
  /** The three letter code for the currency of the store at the time of the most recent update to the draft order. */
  currencyCode: Shopify_CurrencyCode;
  /** The custom information added to the draft order on behalf of the customer. */
  customAttributes: Array<Shopify_Attribute>;
  /** The customer who will be sent an invoice for the draft order, if there is one. */
  customer?: Maybe<Shopify_Customer>;
  /** A default cursor that returns the single next record, sorted ascending by ID. */
  defaultCursor: Scalars['String']['output'];
  /** The email address of the customer, which is used to send notifications. */
  email?: Maybe<Scalars['String']['output']>;
  /** The list of events associated with the draft order. */
  events: Shopify_EventConnection;
  /** Whether the merchant has added timeline comments to the draft order. */
  hasTimelineComment: Scalars['Boolean']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The subject defined for the draft invoice email template. */
  invoiceEmailTemplateSubject: Scalars['String']['output'];
  /** The date and time when the invoice was last emailed to the customer. */
  invoiceSentAt?: Maybe<Scalars['DateTime']['output']>;
  /** The link to the checkout, which is sent to the customer in the invoice email. */
  invoiceUrl?: Maybe<Scalars['Shopify_URL']['output']>;
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['Shopify_UnsignedInt64']['output'];
  /** The list of the line items in the draft order. */
  lineItems: Shopify_DraftOrderLineItemConnection;
  /** The subtotal of the line items and corresponding discounts. The subtotal doesn't include shipping charges, shipping discounts, taxes, or order discounts. */
  lineItemsSubtotalPrice: Shopify_MoneyBag;
  /** List of localization extensions for the resource. */
  localizationExtensions: Shopify_LocalizationExtensionConnection;
  /** The name of the selected market. */
  marketName: Scalars['String']['output'];
  /** The selected country code that determines the pricing of the draft order. */
  marketRegionCountryCode: Shopify_CountryCode;
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /** The identifier for the draft order, which is unique within the store. For example, _#D1223_. */
  name: Scalars['String']['output'];
  /** The text from an optional note attached to the draft order. */
  note2?: Maybe<Scalars['String']['output']>;
  /** The order that was created from this draft order. */
  order?: Maybe<Shopify_Order>;
  /** The associated payment terms for this draft order. */
  paymentTerms?: Maybe<Shopify_PaymentTerms>;
  /** The phone number assigned to the draft order. */
  phone?: Maybe<Scalars['String']['output']>;
  /** The purchase order number. */
  poNumber?: Maybe<Scalars['String']['output']>;
  /** The payment currency of the customer for this draft order. */
  presentmentCurrencyCode: Shopify_CurrencyCode;
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafields: Shopify_PrivateMetafieldConnection;
  /** The purchasing entity for the draft order. */
  purchasingEntity?: Maybe<Shopify_PurchasingEntity>;
  /** Whether the Draft Order is ready and can be completed. Draft Orders might have asynchronous operations that can take time to finish. */
  ready: Scalars['Boolean']['output'];
  /** The time after which inventory will automatically be restocked. */
  reserveInventoryUntil?: Maybe<Scalars['DateTime']['output']>;
  /** The shipping address of the customer. */
  shippingAddress?: Maybe<Shopify_MailingAddress>;
  /** The line item that contains the shipping costs. */
  shippingLine?: Maybe<Shopify_ShippingLine>;
  /** Status of the draft order. */
  status: Shopify_DraftOrderStatus;
  /** The subtotal of the line items and their discounts. The subtotal doesn't include shipping charges, shipping discounts, or taxes. */
  subtotalPrice: Scalars['Shopify_Money']['output'];
  /** A subtotal of the line items and corresponding discounts. The subtotal doesn't include shipping charges, shipping discounts, or taxes. */
  subtotalPriceSet: Shopify_MoneyBag;
  /**
   * A comma separated list of tags associated with the draft order. Updating `tags` overwrites
   * any existing tags that were previously added to the draft order. To add new tags without overwriting
   * existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
   * mutation.
   */
  tags: Array<Scalars['String']['output']>;
  /** Whether the draft order is tax exempt. */
  taxExempt: Scalars['Boolean']['output'];
  /** Total amount of taxes charged for each line item and shipping line. */
  taxLines: Array<Shopify_TaxLine>;
  /** Whether the line item prices include taxes. */
  taxesIncluded: Scalars['Boolean']['output'];
  /** The total discounts for this draft order. */
  totalDiscountsSet: Shopify_MoneyBag;
  /** The total price of line items for this draft order. */
  totalLineItemsPriceSet: Shopify_MoneyBag;
  /** The total amount of the draft order, including taxes, shipping charges, and discounts. */
  totalPrice: Scalars['Shopify_Money']['output'];
  /** The total amount of the draft order including taxes, shipping charges, and discounts. */
  totalPriceSet: Shopify_MoneyBag;
  /** The total shipping charge for the draft order. */
  totalShippingPrice: Scalars['Shopify_Money']['output'];
  /** The total shipping charge for the draft order. */
  totalShippingPriceSet: Shopify_MoneyBag;
  /** The total amount of taxes for the draft order. */
  totalTax: Scalars['Shopify_Money']['output'];
  /** The total amount of taxes for the draft order. */
  totalTaxSet: Shopify_MoneyBag;
  /** The total weight in grams of the draft order. */
  totalWeight: Scalars['Shopify_UnsignedInt64']['output'];
  /**
   * The date and time when the draft order was last changed.
   * The format is YYYY-MM-DD HH:mm:ss. For example, 2016-02-05 17:04:01.
   */
  updatedAt: Scalars['DateTime']['output'];
  /** Whether the draft order will be visible to the customer on the self-serve portal. */
  visibleToCustomer: Scalars['Boolean']['output'];
};


/**
 * An order that a merchant creates on behalf of a customer. Draft orders are useful for merchants that need to do the following tasks:
 *
 * - Create new orders for sales made by phone, in person, by chat, or elsewhere. When a merchant accepts payment for a draft order, an order is created.
 * - Send invoices to customers to pay with a secure checkout link.
 * - Use custom items to represent additional costs or products that aren't displayed in a shop's inventory.
 * - Re-create orders manually from active sales channels.
 * - Sell products at discount or wholesale rates.
 * - Take pre-orders.
 * - Save an order as a draft and resume working on it later.
 *
 * For Draft orders in multiple currencies `presentment_money` is the source of truth for what a customer is going to be charged and `shop_money` is an estimate of what the merchant might receive in their local currency.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_DraftOrderEventsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_EventSortKeys>;
};


/**
 * An order that a merchant creates on behalf of a customer. Draft orders are useful for merchants that need to do the following tasks:
 *
 * - Create new orders for sales made by phone, in person, by chat, or elsewhere. When a merchant accepts payment for a draft order, an order is created.
 * - Send invoices to customers to pay with a secure checkout link.
 * - Use custom items to represent additional costs or products that aren't displayed in a shop's inventory.
 * - Re-create orders manually from active sales channels.
 * - Sell products at discount or wholesale rates.
 * - Take pre-orders.
 * - Save an order as a draft and resume working on it later.
 *
 * For Draft orders in multiple currencies `presentment_money` is the source of truth for what a customer is going to be charged and `shop_money` is an estimate of what the merchant might receive in their local currency.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_DraftOrderLineItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * An order that a merchant creates on behalf of a customer. Draft orders are useful for merchants that need to do the following tasks:
 *
 * - Create new orders for sales made by phone, in person, by chat, or elsewhere. When a merchant accepts payment for a draft order, an order is created.
 * - Send invoices to customers to pay with a secure checkout link.
 * - Use custom items to represent additional costs or products that aren't displayed in a shop's inventory.
 * - Re-create orders manually from active sales channels.
 * - Sell products at discount or wholesale rates.
 * - Take pre-orders.
 * - Save an order as a draft and resume working on it later.
 *
 * For Draft orders in multiple currencies `presentment_money` is the source of truth for what a customer is going to be charged and `shop_money` is an estimate of what the merchant might receive in their local currency.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_DraftOrderLocalizationExtensionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  countryCodes?: InputMaybe<Array<Shopify_CountryCode>>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  purposes?: InputMaybe<Array<Shopify_LocalizationExtensionPurpose>>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * An order that a merchant creates on behalf of a customer. Draft orders are useful for merchants that need to do the following tasks:
 *
 * - Create new orders for sales made by phone, in person, by chat, or elsewhere. When a merchant accepts payment for a draft order, an order is created.
 * - Send invoices to customers to pay with a secure checkout link.
 * - Use custom items to represent additional costs or products that aren't displayed in a shop's inventory.
 * - Re-create orders manually from active sales channels.
 * - Sell products at discount or wholesale rates.
 * - Take pre-orders.
 * - Save an order as a draft and resume working on it later.
 *
 * For Draft orders in multiple currencies `presentment_money` is the source of truth for what a customer is going to be charged and `shop_money` is an estimate of what the merchant might receive in their local currency.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_DraftOrderMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace?: InputMaybe<Scalars['String']['input']>;
};


/**
 * An order that a merchant creates on behalf of a customer. Draft orders are useful for merchants that need to do the following tasks:
 *
 * - Create new orders for sales made by phone, in person, by chat, or elsewhere. When a merchant accepts payment for a draft order, an order is created.
 * - Send invoices to customers to pay with a secure checkout link.
 * - Use custom items to represent additional costs or products that aren't displayed in a shop's inventory.
 * - Re-create orders manually from active sales channels.
 * - Sell products at discount or wholesale rates.
 * - Take pre-orders.
 * - Save an order as a draft and resume working on it later.
 *
 * For Draft orders in multiple currencies `presentment_money` is the source of truth for what a customer is going to be charged and `shop_money` is an estimate of what the merchant might receive in their local currency.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_DraftOrderMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * An order that a merchant creates on behalf of a customer. Draft orders are useful for merchants that need to do the following tasks:
 *
 * - Create new orders for sales made by phone, in person, by chat, or elsewhere. When a merchant accepts payment for a draft order, an order is created.
 * - Send invoices to customers to pay with a secure checkout link.
 * - Use custom items to represent additional costs or products that aren't displayed in a shop's inventory.
 * - Re-create orders manually from active sales channels.
 * - Sell products at discount or wholesale rates.
 * - Take pre-orders.
 * - Save an order as a draft and resume working on it later.
 *
 * For Draft orders in multiple currencies `presentment_money` is the source of truth for what a customer is going to be charged and `shop_money` is an estimate of what the merchant might receive in their local currency.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_DraftOrderPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace: Scalars['String']['input'];
};


/**
 * An order that a merchant creates on behalf of a customer. Draft orders are useful for merchants that need to do the following tasks:
 *
 * - Create new orders for sales made by phone, in person, by chat, or elsewhere. When a merchant accepts payment for a draft order, an order is created.
 * - Send invoices to customers to pay with a secure checkout link.
 * - Use custom items to represent additional costs or products that aren't displayed in a shop's inventory.
 * - Re-create orders manually from active sales channels.
 * - Sell products at discount or wholesale rates.
 * - Take pre-orders.
 * - Save an order as a draft and resume working on it later.
 *
 * For Draft orders in multiple currencies `presentment_money` is the source of truth for what a customer is going to be charged and `shop_money` is an estimate of what the merchant might receive in their local currency.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_DraftOrderPrivateMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The order-level discount applied to a draft order. */
export type Shopify_DraftOrderAppliedDiscount = {
  __typename?: 'Shopify_DraftOrderAppliedDiscount';
  /**
   * Amount of the order-level discount that's applied to the draft order.
   * @deprecated Use `amountV2` instead.
   */
  amount: Scalars['Shopify_Money']['output'];
  /** The amount of money discounted, with values shown in both shop currency and presentment currency. */
  amountSet: Shopify_MoneyBag;
  /** Amount of money discounted. */
  amountV2: Shopify_MoneyV2;
  /** Description of the order-level discount. */
  description: Scalars['String']['output'];
  /** Name of the order-level discount. */
  title?: Maybe<Scalars['String']['output']>;
  /**
   * The order level discount amount. If `valueType` is `"percentage"`,
   * then `value` is the percentage discount.
   */
  value: Scalars['Float']['output'];
  /** Type of the order-level discount. */
  valueType: Shopify_DraftOrderAppliedDiscountType;
};

/** The valid discount types that can be applied to a draft order. */
export enum Shopify_DraftOrderAppliedDiscountType {
  /** A fixed amount in the store's currency. */
  FixedAmount = 'FIXED_AMOUNT',
  /** A percentage of the order subtotal. */
  Percentage = 'PERCENTAGE'
}

/** An auto-generated type for paginating through multiple DraftOrders. */
export type Shopify_DraftOrderConnection = {
  __typename?: 'Shopify_DraftOrderConnection';
  /** A list of edges. */
  edges: Array<Shopify_DraftOrderEdge>;
  /** A list of the nodes contained in DraftOrderEdge. */
  nodes: Array<Shopify_DraftOrder>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one DraftOrder and a cursor during pagination. */
export type Shopify_DraftOrderEdge = {
  __typename?: 'Shopify_DraftOrderEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of DraftOrderEdge. */
  node: Shopify_DraftOrder;
};

/** A line item included in a draft order. */
export type Shopify_DraftOrderLineItem = Shopify_Node & {
  __typename?: 'Shopify_DraftOrderLineItem';
  /** The discount that will be applied to the line item or the overall order. */
  appliedDiscount?: Maybe<Shopify_DraftOrderAppliedDiscount>;
  /** Whether the line item is a custom line item (`true`) or a product variant line item (`false`). */
  custom: Scalars['Boolean']['output'];
  /** A list of attributes that represent custom features or special requests. */
  customAttributes: Array<Shopify_Attribute>;
  /** Additional information (metafields) about the line item with the associated types. */
  customAttributesV2: Array<Shopify_TypedAttribute>;
  /** The line item price after discounts are applied. */
  discountedTotal: Scalars['Shopify_Money']['output'];
  /** The line item price after discounts are applied. */
  discountedTotalSet: Shopify_MoneyBag;
  /** The `discountedTotal` divided by `quantity`, resulting in the value of the discount per unit. */
  discountedUnitPrice: Scalars['Shopify_Money']['output'];
  /** The `discountedTotal` divided by `quantity`, resulting in the value of the discount per unit. */
  discountedUnitPriceSet: Shopify_MoneyBag;
  /**
   * Name of the service provider who fulfilled the order.
   *
   * Valid values are either **manual** or the name of the provider.
   * For example, **amazon**, **shipwire**.
   *
   * Deleted fulfillment services will return null.
   */
  fulfillmentService?: Maybe<Shopify_FulfillmentService>;
  /**
   * The weight of the line item in grams. The weight can only be specified if the line item is a custom
   * line item.
   * @deprecated Use `weight` instead.
   */
  grams?: Maybe<Scalars['Int']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The image associated with the draft order line item. */
  image?: Maybe<Shopify_Image>;
  /** Whether the line item represents the purchase of a gift card. */
  isGiftCard: Scalars['Boolean']['output'];
  /** The name of the product. */
  name: Scalars['String']['output'];
  /** The total price (without discounts) of the line item, based on the original unit price of the variant x quantity. */
  originalTotal: Scalars['Shopify_Money']['output'];
  /** The total price (without discounts) of the line item,based on the original unit price of the variant x quantity. */
  originalTotalSet: Shopify_MoneyBag;
  /** The variant price without any discounts applied. */
  originalUnitPrice: Scalars['Shopify_Money']['output'];
  /** The variant price without any discounts applied. */
  originalUnitPriceSet: Shopify_MoneyBag;
  /** The product corresponding to the line item’s product variant. */
  product?: Maybe<Shopify_Product>;
  /** The number of product variants that are requested in the draft order. */
  quantity: Scalars['Int']['output'];
  /** Whether physical shipping is required for the variant. */
  requiresShipping: Scalars['Boolean']['output'];
  /** The SKU number of the product variant. */
  sku?: Maybe<Scalars['String']['output']>;
  /** A list of tax line objects, each of which details the total taxes applicable to the order. */
  taxLines: Array<Shopify_TaxLine>;
  /** Whether the variant is taxable. */
  taxable: Scalars['Boolean']['output'];
  /** The title of the product or variant. This field only applies to custom line items. */
  title: Scalars['String']['output'];
  /** The total value of the discount that's applied to the line item. */
  totalDiscount: Scalars['Shopify_Money']['output'];
  /** The total value of the discount that's applied to the line item. */
  totalDiscountSet: Shopify_MoneyBag;
  /** The associated variant for the line item. */
  variant?: Maybe<Shopify_ProductVariant>;
  /** The name of the variant. */
  variantTitle?: Maybe<Scalars['String']['output']>;
  /** The name of the vendor who created the product variant. */
  vendor?: Maybe<Scalars['String']['output']>;
  /** The weight unit and value for a draft order line item. */
  weight?: Maybe<Shopify_Weight>;
};

/** An auto-generated type for paginating through multiple DraftOrderLineItems. */
export type Shopify_DraftOrderLineItemConnection = {
  __typename?: 'Shopify_DraftOrderLineItemConnection';
  /** A list of edges. */
  edges: Array<Shopify_DraftOrderLineItemEdge>;
  /** A list of the nodes contained in DraftOrderLineItemEdge. */
  nodes: Array<Shopify_DraftOrderLineItem>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one DraftOrderLineItem and a cursor during pagination. */
export type Shopify_DraftOrderLineItemEdge = {
  __typename?: 'Shopify_DraftOrderLineItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of DraftOrderLineItemEdge. */
  node: Shopify_DraftOrderLineItem;
};

/** The set of valid sort keys for the DraftOrder query. */
export enum Shopify_DraftOrderSortKeys {
  /** Sort by the `customer_name` value. */
  CustomerName = 'CUSTOMER_NAME',
  /** Sort by the `id` value. */
  Id = 'ID',
  /** Sort by the `number` value. */
  Number = 'NUMBER',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE',
  /** Sort by the `status` value. */
  Status = 'STATUS',
  /** Sort by the `total_price` value. */
  TotalPrice = 'TOTAL_PRICE',
  /** Sort by the `updated_at` value. */
  UpdatedAt = 'UPDATED_AT'
}

/** The valid statuses for a draft order. */
export enum Shopify_DraftOrderStatus {
  /** The draft order has been paid. */
  Completed = 'COMPLETED',
  /** An invoice for the draft order has been sent to the customer. */
  InvoiceSent = 'INVOICE_SENT',
  /** The draft order is open. It has not been paid, and an invoice hasn't been sent. */
  Open = 'OPEN'
}

/** Represents a draft order tag. */
export type Shopify_DraftOrderTag = Shopify_Node & {
  __typename?: 'Shopify_DraftOrderTag';
  /** Handle of draft order tag. */
  handle: Scalars['String']['output'];
  /** ID of draft order tag. */
  id: Scalars['ID']['output'];
  /** Title of draft order tag. */
  title: Scalars['String']['output'];
};

/** The duty details for a line item. */
export type Shopify_Duty = Shopify_Node & {
  __typename?: 'Shopify_Duty';
  /** The ISO 3166-1 alpha-2 country code of the country of origin used in calculating the duty. */
  countryCodeOfOrigin?: Maybe<Shopify_CountryCode>;
  /** The harmonized system code of the item used in calculating the duty. */
  harmonizedSystemCode?: Maybe<Scalars['String']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The amount of the duty. */
  price: Shopify_MoneyBag;
  /** A list of taxes charged on the duty. */
  taxLines: Array<Shopify_TaxLine>;
};

/** A sale associated with a duty charge. */
export type Shopify_DutySale = Shopify_Sale & {
  __typename?: 'Shopify_DutySale';
  /** The type of order action that the sale represents. */
  actionType: Shopify_SaleActionType;
  /** The duty for the associated sale. */
  duty: Shopify_Duty;
  /** The unique ID for the sale. */
  id: Scalars['ID']['output'];
  /** The line type assocated with the sale. */
  lineType: Shopify_SaleLineType;
  /** The number of units either ordered or intended to be returned. */
  quantity?: Maybe<Scalars['Int']['output']>;
  /** All individual taxes associated with the sale. */
  taxes: Array<Shopify_SaleTax>;
  /** The total sale amount after taxes and discounts. */
  totalAmount: Shopify_MoneyBag;
  /** The total discounts allocated to the sale after taxes. */
  totalDiscountAmountAfterTaxes: Shopify_MoneyBag;
  /** The total discounts allocated to the sale before taxes. */
  totalDiscountAmountBeforeTaxes: Shopify_MoneyBag;
  /** The total amount of taxes for the sale. */
  totalTaxAmount: Shopify_MoneyBag;
};

/** The attribute editable information. */
export type Shopify_EditableProperty = {
  __typename?: 'Shopify_EditableProperty';
  /** Whether the attribute is locked for editing. */
  locked: Scalars['Boolean']['output'];
  /** The reason the attribute is locked for editing. */
  reason?: Maybe<Scalars['Shopify_FormattedString']['output']>;
};

/** An error that occurs during the execution of a server pixel mutation. */
export type Shopify_ErrorsServerPixelUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_ErrorsServerPixelUserError';
  /** The error code. */
  code?: Maybe<Shopify_ErrorsServerPixelUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `ErrorsServerPixelUserError`. */
export enum Shopify_ErrorsServerPixelUserErrorCode {
  /** A server pixel already exists for this app and shop. Only one server pixel can exist for any app and shop combination. */
  AlreadyExists = 'ALREADY_EXISTS',
  /** Server Pixel must be configured with a valid AWS Event Bridge or GCP pub/sub endpoint address to be connected. */
  NeedsConfigurationToConnect = 'NEEDS_CONFIGURATION_TO_CONNECT',
  /** A server pixel doesn't exist for this app and shop. */
  NotFound = 'NOT_FOUND',
  /** PubSubProject and PubSubTopic values resulted in an address that is not a valid GCP pub/sub format.Address format should be pubsub://project:topic. */
  PubSubError = 'PUB_SUB_ERROR'
}

/** An error that occurs during the execution of a web pixel mutation. */
export type Shopify_ErrorsWebPixelUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_ErrorsWebPixelUserError';
  /** The error code. */
  code?: Maybe<Shopify_ErrorsWebPixelUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `ErrorsWebPixelUserError`. */
export enum Shopify_ErrorsWebPixelUserErrorCode {
  /** The input value is blank. */
  Blank = 'BLANK',
  /** The provided settings ID does not match the expected settings definition on the app. */
  InvalidSettings = 'INVALID_SETTINGS',
  /** The record with the ID used as the input value couldn't be found. */
  NotFound = 'NOT_FOUND',
  /** The input value is already taken. */
  Taken = 'TAKEN',
  /** An error occurred and the web pixel couldnt be deleted. */
  UnableToDelete = 'UNABLE_TO_DELETE'
}

/**
 * Events chronicle resource activities such as the creation of an article, the fulfillment of an order, or the
 * addition of a product.
 */
export type Shopify_Event = {
  /** The name of the app that created the event. */
  appTitle?: Maybe<Scalars['String']['output']>;
  /** Whether the event was created by an app. */
  attributeToApp: Scalars['Boolean']['output'];
  /** Whether the event was caused by an admin user. */
  attributeToUser: Scalars['Boolean']['output'];
  /** The date and time when the event was created. */
  createdAt: Scalars['DateTime']['output'];
  /** Whether the event is critical. */
  criticalAlert: Scalars['Boolean']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** Human readable text that describes the event. */
  message: Scalars['Shopify_FormattedString']['output'];
};

/** An auto-generated type for paginating through multiple Events. */
export type Shopify_EventConnection = {
  __typename?: 'Shopify_EventConnection';
  /** A list of edges. */
  edges: Array<Shopify_EventEdge>;
  /** A list of the nodes contained in EventEdge. */
  nodes: Array<Shopify_Event>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one Event and a cursor during pagination. */
export type Shopify_EventEdge = {
  __typename?: 'Shopify_EventEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of EventEdge. */
  node: Shopify_Event;
};

/** The set of valid sort keys for the Event query. */
export enum Shopify_EventSortKeys {
  /** Sort by the `created_at` value. */
  CreatedAt = 'CREATED_AT',
  /** Sort by the `id` value. */
  Id = 'ID',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE'
}

/** An item for exchange. */
export type Shopify_ExchangeLineItem = Shopify_Node & {
  __typename?: 'Shopify_ExchangeLineItem';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The order line item for the exchange. */
  lineItem?: Maybe<Shopify_LineItem>;
};

/** An auto-generated type for paginating through multiple ExchangeLineItems. */
export type Shopify_ExchangeLineItemConnection = {
  __typename?: 'Shopify_ExchangeLineItemConnection';
  /** A list of edges. */
  edges: Array<Shopify_ExchangeLineItemEdge>;
  /** A list of the nodes contained in ExchangeLineItemEdge. */
  nodes: Array<Shopify_ExchangeLineItem>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one ExchangeLineItem and a cursor during pagination. */
export type Shopify_ExchangeLineItemEdge = {
  __typename?: 'Shopify_ExchangeLineItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of ExchangeLineItemEdge. */
  node: Shopify_ExchangeLineItem;
};

/** An exchange where existing items on an order are returned and new items are added to the order. */
export type Shopify_ExchangeV2 = Shopify_Node & {
  __typename?: 'Shopify_ExchangeV2';
  /** The details of the new items in the exchange. */
  additions: Shopify_ExchangeV2Additions;
  /** The date and time when the exchange was completed. */
  completedAt?: Maybe<Scalars['DateTime']['output']>;
  /** The date and time when the exchange was created. */
  createdAt: Scalars['DateTime']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The location where the exchange happened. */
  location?: Maybe<Shopify_Location>;
  /** The text of an optional note that a shop owner can attach to the exchange. */
  note?: Maybe<Scalars['String']['output']>;
  /** The refunds processed during the exchange. */
  refunds: Array<Shopify_Refund>;
  /** The details of the returned items in the exchange. */
  returns: Shopify_ExchangeV2Returns;
  /** The staff member associated with the exchange. */
  staffMember?: Maybe<Shopify_StaffMember>;
  /** The amount of money that was paid or refunded as part of the exchange. */
  totalAmountProcessedSet: Shopify_MoneyBag;
  /** The difference in values of the items that were exchanged. */
  totalPriceSet: Shopify_MoneyBag;
  /** The order transactions related to the exchange. */
  transactions: Array<Shopify_OrderTransaction>;
};

/** New items associated to the exchange. */
export type Shopify_ExchangeV2Additions = {
  __typename?: 'Shopify_ExchangeV2Additions';
  /** The list of new items for the exchange. */
  lineItems: Array<Shopify_ExchangeV2LineItem>;
  /** The subtotal of the items being added, including discounts. */
  subtotalPriceSet: Shopify_MoneyBag;
  /** The summary of all taxes of the items being added. */
  taxLines: Array<Shopify_TaxLine>;
  /** The total price of the items being added, including discounts and taxes. */
  totalPriceSet: Shopify_MoneyBag;
};

/** An auto-generated type for paginating through multiple ExchangeV2s. */
export type Shopify_ExchangeV2Connection = {
  __typename?: 'Shopify_ExchangeV2Connection';
  /** A list of edges. */
  edges: Array<Shopify_ExchangeV2Edge>;
  /** A list of the nodes contained in ExchangeV2Edge. */
  nodes: Array<Shopify_ExchangeV2>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one ExchangeV2 and a cursor during pagination. */
export type Shopify_ExchangeV2Edge = {
  __typename?: 'Shopify_ExchangeV2Edge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of ExchangeV2Edge. */
  node: Shopify_ExchangeV2;
};

/** Contains information about an item in the exchange. */
export type Shopify_ExchangeV2LineItem = {
  __typename?: 'Shopify_ExchangeV2LineItem';
  /** A list of attributes that represent custom features or special requests. */
  customAttributes: Array<Shopify_Attribute>;
  /** The total line price, in shop and presentment currencies, after discounts are applied. */
  discountedTotalSet: Shopify_MoneyBag;
  /**
   * The price, in shop and presentment currencies,
   * of a single variant unit after line item discounts are applied.
   */
  discountedUnitPriceSet: Shopify_MoneyBag;
  /**
   * Name of the service provider who fulfilled the order.
   *
   * Valid values are either **manual** or the name of the provider.
   * For example, **amazon**, **shipwire**.
   *
   * Deleted fulfillment services will return null.
   */
  fulfillmentService?: Maybe<Shopify_FulfillmentService>;
  /** Indiciates if this line item is a gift card. */
  giftCard: Scalars['Boolean']['output'];
  /** The gift cards associated with the line item. */
  giftCards: Array<Shopify_GiftCard>;
  /** Whether the line item represents the purchase of a gift card. */
  isGiftCard: Scalars['Boolean']['output'];
  /** The line item associated with this object. */
  lineItem?: Maybe<Shopify_LineItem>;
  /** The name of the product. */
  name: Scalars['String']['output'];
  /** The total price, in shop and presentment currencies, before discounts are applied. */
  originalTotalSet: Shopify_MoneyBag;
  /**
   * The price, in shop and presentment currencies,
   * of a single variant unit before line item discounts are applied.
   */
  originalUnitPriceSet: Shopify_MoneyBag;
  /** The number of products that were purchased. */
  quantity: Scalars['Int']['output'];
  /** Whether physical shipping is required for the variant. */
  requiresShipping: Scalars['Boolean']['output'];
  /** The SKU number of the product variant. */
  sku?: Maybe<Scalars['String']['output']>;
  /** The TaxLine object connected to this line item. */
  taxLines: Array<Shopify_TaxLine>;
  /** Whether the variant is taxable. */
  taxable: Scalars['Boolean']['output'];
  /** The title of the product or variant. This field only applies to custom line items. */
  title: Scalars['String']['output'];
  /** The product variant of the line item. */
  variant?: Maybe<Shopify_ProductVariant>;
  /** The name of the variant. */
  variantTitle?: Maybe<Scalars['String']['output']>;
  /** The name of the vendor who created the product variant. */
  vendor?: Maybe<Scalars['String']['output']>;
};

/** Return items associated to the exchange. */
export type Shopify_ExchangeV2Returns = {
  __typename?: 'Shopify_ExchangeV2Returns';
  /** The list of return items for the exchange. */
  lineItems: Array<Shopify_ExchangeV2LineItem>;
  /** The amount of the order-level discount for the items and shipping being returned, which doesn't contain any line item discounts. */
  orderDiscountAmountSet: Shopify_MoneyBag;
  /** The amount of money to be refunded for shipping. */
  shippingRefundAmountSet: Shopify_MoneyBag;
  /** The subtotal of the items being returned. */
  subtotalPriceSet: Shopify_MoneyBag;
  /** The summary of all taxes of the items being returned. */
  taxLines: Array<Shopify_TaxLine>;
  /** The amount of money to be refunded for tip. */
  tipRefundAmountSet: Shopify_MoneyBag;
  /** The total value of the items being returned. */
  totalPriceSet: Shopify_MoneyBag;
};

/** Represents a video hosted outside of Shopify. */
export type Shopify_ExternalVideo = Shopify_Media & Shopify_Node & {
  __typename?: 'Shopify_ExternalVideo';
  /** A word or phrase to share the nature or contents of a media. */
  alt?: Maybe<Scalars['String']['output']>;
  /** The embed URL of the video for the respective host. */
  embedUrl: Scalars['Shopify_URL']['output'];
  /**
   * The URL.
   * @deprecated Use `originUrl` instead.
   */
  embeddedUrl: Scalars['Shopify_URL']['output'];
  /** The host of the external video. */
  host: Shopify_MediaHost;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The media content type. */
  mediaContentType: Shopify_MediaContentType;
  /** Any errors which have occurred on the media. */
  mediaErrors: Array<Shopify_MediaError>;
  /** The warnings attached to the media. */
  mediaWarnings: Array<Shopify_MediaWarning>;
  /** The origin URL of the video on the respective host. */
  originUrl: Scalars['Shopify_URL']['output'];
  /** The preview image for the media. */
  preview?: Maybe<Shopify_MediaPreviewImage>;
  /** Current status of the media. */
  status: Shopify_MediaStatus;
};

/** Requirements that must be met before an app can be installed. */
export type Shopify_FailedRequirement = {
  __typename?: 'Shopify_FailedRequirement';
  /** Action to be taken to resolve a failed requirement, including URL link. */
  action?: Maybe<Shopify_NavigationItem>;
  /**
   * A concise set of copy strings to be displayed to merchants, to guide them in resolving problems your app
   * encounters when trying to make use of their Shop and its resources.
   */
  message: Scalars['String']['output'];
};

/** A additional cost, charged by the merchant, on an order. Examples include return shipping fees and restocking fees. */
export type Shopify_Fee = {
  /** The unique ID for the Fee. */
  id: Scalars['ID']['output'];
};

/** A sale associated with a fee. */
export type Shopify_FeeSale = Shopify_Sale & {
  __typename?: 'Shopify_FeeSale';
  /** The type of order action that the sale represents. */
  actionType: Shopify_SaleActionType;
  /** The fee associated with the sale. */
  fee: Shopify_Fee;
  /** The unique ID for the sale. */
  id: Scalars['ID']['output'];
  /** The line type assocated with the sale. */
  lineType: Shopify_SaleLineType;
  /** The number of units either ordered or intended to be returned. */
  quantity?: Maybe<Scalars['Int']['output']>;
  /** All individual taxes associated with the sale. */
  taxes: Array<Shopify_SaleTax>;
  /** The total sale amount after taxes and discounts. */
  totalAmount: Shopify_MoneyBag;
  /** The total discounts allocated to the sale after taxes. */
  totalDiscountAmountAfterTaxes: Shopify_MoneyBag;
  /** The total discounts allocated to the sale before taxes. */
  totalDiscountAmountBeforeTaxes: Shopify_MoneyBag;
  /** The total amount of taxes for the sale. */
  totalTaxAmount: Shopify_MoneyBag;
};

/** A file interface. */
export type Shopify_File = {
  /** A word or phrase to describe the contents or the function of a file. */
  alt?: Maybe<Scalars['String']['output']>;
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created. */
  createdAt: Scalars['DateTime']['output'];
  /** Any errors that have occurred on the file. */
  fileErrors: Array<Shopify_FileError>;
  /** The status of the file. */
  fileStatus: Shopify_FileStatus;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The preview image for the media. */
  preview?: Maybe<Shopify_MediaPreviewImage>;
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated. */
  updatedAt: Scalars['DateTime']['output'];
};

/**
 * A file error. This typically occurs when there is an issue with the file itself causing it to fail validation.
 * Check the file before attempting to upload again.
 */
export type Shopify_FileError = {
  __typename?: 'Shopify_FileError';
  /** Code representing the type of error. */
  code: Shopify_FileErrorCode;
  /** Additional details regarding the error. */
  details?: Maybe<Scalars['String']['output']>;
  /** Translated error message. */
  message: Scalars['String']['output'];
};

/** The error types for a file. */
export enum Shopify_FileErrorCode {
  /** File could not be created because a file with the same name already exists. */
  DuplicateFilenameError = 'DUPLICATE_FILENAME_ERROR',
  /** File could not be created because embed permissions are disabled for this video. */
  ExternalVideoEmbedDisabled = 'EXTERNAL_VIDEO_EMBED_DISABLED',
  /** File could not be created because video is either not found or still transcoding. */
  ExternalVideoEmbedNotFoundOrTranscoding = 'EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING',
  /** File could not be created because the external video has an invalid aspect ratio. */
  ExternalVideoInvalidAspectRatio = 'EXTERNAL_VIDEO_INVALID_ASPECT_RATIO',
  /** File could not be created because the external video could not be found. */
  ExternalVideoNotFound = 'EXTERNAL_VIDEO_NOT_FOUND',
  /** File could not be created because the external video is not listed or is private. */
  ExternalVideoUnlisted = 'EXTERNAL_VIDEO_UNLISTED',
  /** File could not be created because the cumulative file storage limit would be exceeded. */
  FileStorageLimitExceeded = 'FILE_STORAGE_LIMIT_EXCEEDED',
  /** File could not be processed because the source could not be downloaded. */
  GenericFileDownloadFailure = 'GENERIC_FILE_DOWNLOAD_FAILURE',
  /** File could not be created because the size is too large. */
  GenericFileInvalidSize = 'GENERIC_FILE_INVALID_SIZE',
  /** File could not be processed because the image could not be downloaded. */
  ImageDownloadFailure = 'IMAGE_DOWNLOAD_FAILURE',
  /** File could not be processed because the image could not be processed. */
  ImageProcessingFailure = 'IMAGE_PROCESSING_FAILURE',
  /** File could not be created because the image has an invalid aspect ratio. */
  InvalidImageAspectRatio = 'INVALID_IMAGE_ASPECT_RATIO',
  /** File could not be created because the image size is too large. */
  InvalidImageFileSize = 'INVALID_IMAGE_FILE_SIZE',
  /** File could not be created because the image's resolution exceeds the max limit. */
  InvalidImageResolution = 'INVALID_IMAGE_RESOLUTION',
  /** File could not be processed because the signed URL was invalid. */
  InvalidSignedUrl = 'INVALID_SIGNED_URL',
  /** File timed out because it is currently being modified by another operation. */
  MediaTimeoutError = 'MEDIA_TIMEOUT_ERROR',
  /** File could not be created because the model file failed processing. */
  Model3DGlbOutputCreationError = 'MODEL3D_GLB_OUTPUT_CREATION_ERROR',
  /** File could not be created because the model can't be converted to USDZ format. */
  Model3DGlbToUsdzConversionError = 'MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR',
  /** File could not be created because the model file failed processing. */
  Model3DProcessingFailure = 'MODEL3D_PROCESSING_FAILURE',
  /** File could not be created because the model's thumbnail generation failed. */
  Model3DThumbnailGenerationError = 'MODEL3D_THUMBNAIL_GENERATION_ERROR',
  /** There was an issue while trying to generate a new thumbnail. */
  Model3DThumbnailRegenerationError = 'MODEL3D_THUMBNAIL_REGENERATION_ERROR',
  /** Model failed validation. */
  Model3DValidationError = 'MODEL3D_VALIDATION_ERROR',
  /** File error has occurred for an unknown reason. */
  Unknown = 'UNKNOWN',
  /** File could not be created because the image is an unsupported file type. */
  UnsupportedImageFileType = 'UNSUPPORTED_IMAGE_FILE_TYPE',
  /** File could not be created because it has an invalid file type. */
  VideoInvalidFiletypeError = 'VIDEO_INVALID_FILETYPE_ERROR',
  /** File could not be created because it does not meet the maximum duration requirement. */
  VideoMaxDurationError = 'VIDEO_MAX_DURATION_ERROR',
  /** File could not be created because it does not meet the maximum height requirement. */
  VideoMaxHeightError = 'VIDEO_MAX_HEIGHT_ERROR',
  /** File could not be created because it does not meet the maximum width requirement. */
  VideoMaxWidthError = 'VIDEO_MAX_WIDTH_ERROR',
  /** File could not be created because the metadata could not be read. */
  VideoMetadataReadError = 'VIDEO_METADATA_READ_ERROR',
  /** File could not be created because it does not meet the minimum duration requirement. */
  VideoMinDurationError = 'VIDEO_MIN_DURATION_ERROR',
  /** File could not be created because it does not meet the minimum height requirement. */
  VideoMinHeightError = 'VIDEO_MIN_HEIGHT_ERROR',
  /** File could not be created because it does not meet the minimum width requirement. */
  VideoMinWidthError = 'VIDEO_MIN_WIDTH_ERROR',
  /** Video failed validation. */
  VideoValidationError = 'VIDEO_VALIDATION_ERROR'
}

/** The possible statuses for a file object. */
export enum Shopify_FileStatus {
  /** File processing has failed. */
  Failed = 'FAILED',
  /** File is being processed. */
  Processing = 'PROCESSING',
  /** File is ready to be displayed. */
  Ready = 'READY',
  /** File has been uploaded but hasn't been processed. */
  Uploaded = 'UPLOADED'
}

/** Possible error codes that can be returned by `FilesUserError`. */
export enum Shopify_FilesErrorCode {
  /** The alt value exceeds the maximum limit of 512 characters. */
  AltValueLimitExceeded = 'ALT_VALUE_LIMIT_EXCEEDED',
  /** The search term must not be blank. */
  BlankSearch = 'BLANK_SEARCH',
  /** The provided filename already exists. */
  FilenameAlreadyExists = 'FILENAME_ALREADY_EXISTS',
  /** File does not exist. */
  FileDoesNotExist = 'FILE_DOES_NOT_EXIST',
  /** File has a pending operation. */
  FileLocked = 'FILE_LOCKED',
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** Duplicate resolution mode is not supported for this file type. */
  InvalidDuplicateModeForType = 'INVALID_DUPLICATE_MODE_FOR_TYPE',
  /** The provided filename is invalid. */
  InvalidFilename = 'INVALID_FILENAME',
  /** Invalid filename extension. */
  InvalidFilenameExtension = 'INVALID_FILENAME_EXTENSION',
  /** Invalid image source url value provided. */
  InvalidImageSourceUrl = 'INVALID_IMAGE_SOURCE_URL',
  /** Search query isn't supported. */
  InvalidQuery = 'INVALID_QUERY',
  /** Cannot create file with custom filename which does not match original source extension. */
  MismatchedFilenameAndOriginalSource = 'MISMATCHED_FILENAME_AND_ORIGINAL_SOURCE',
  /** At least one argument is required. */
  MissingArguments = 'MISSING_ARGUMENTS',
  /** Duplicate resolution mode REPLACE cannot be used without specifying filename. */
  MissingFilenameForDuplicateModeReplace = 'MISSING_FILENAME_FOR_DUPLICATE_MODE_REPLACE',
  /** Exceeded the limit of non-image media per shop. */
  NonImageMediaPerShopLimitExceeded = 'NON_IMAGE_MEDIA_PER_SHOP_LIMIT_EXCEEDED',
  /** The file is not in the READY state. */
  NonReadyState = 'NON_READY_STATE',
  /** Exceeded the limit of media per product. */
  ProductMediaLimitExceeded = 'PRODUCT_MEDIA_LIMIT_EXCEEDED',
  /** Specify one argument: search, IDs, or deleteAll. */
  TooManyArguments = 'TOO_MANY_ARGUMENTS',
  /** The file type is not supported. */
  UnacceptableAsset = 'UNACCEPTABLE_ASSET',
  /** The file is not supported on trial accounts. Select a plan to upload this file. */
  UnacceptableTrialAsset = 'UNACCEPTABLE_TRIAL_ASSET',
  /** The file is not supported on trial accounts that have not validated their email. Either select a plan or verify the shop owner email to upload this file. */
  UnacceptableUnverifiedTrialAsset = 'UNACCEPTABLE_UNVERIFIED_TRIAL_ASSET',
  /** Filename update is only supported on Image and GenericFile. */
  UnsupportedMediaTypeForFilenameUpdate = 'UNSUPPORTED_MEDIA_TYPE_FOR_FILENAME_UPDATE'
}

/** An error that happens during the execution of a Files API query or mutation. */
export type Shopify_FilesUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_FilesUserError';
  /** The error code. */
  code?: Maybe<Shopify_FilesErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** A filter option is one possible value in a search filter. */
export type Shopify_FilterOption = {
  __typename?: 'Shopify_FilterOption';
  /** The filter option's label for display purposes. */
  label: Scalars['String']['output'];
  /** The filter option's value. */
  value: Scalars['String']['output'];
};

/** An amount that's allocated to a line item based on an associated discount application. */
export type Shopify_FinancialSummaryDiscountAllocation = {
  __typename?: 'Shopify_FinancialSummaryDiscountAllocation';
  /** The money amount that's allocated per unit on the associated line based on the discount application in shop and presentment currencies. If the allocated amount for the line cannot be evenly divided by the quantity, then this amount will be an approximate amount, avoiding fractional pennies. For example, if the associated line had a quantity of 3 with a discount of 4 cents, then the discount distribution would be [0.01, 0.01, 0.02]. This field returns the highest number of the distribution. In this example, this would be 0.02. */
  approximateAllocatedAmountPerItem: Shopify_MoneyBag;
  /** The discount application that the allocated amount originated from. */
  discountApplication: Shopify_FinancialSummaryDiscountApplication;
};

/**
 * Discount applications capture the intentions of a discount source at
 * the time of application on an order's line items or shipping lines.
 */
export type Shopify_FinancialSummaryDiscountApplication = {
  __typename?: 'Shopify_FinancialSummaryDiscountApplication';
  /** The method by which the discount's value is applied to its entitled items. */
  allocationMethod: Shopify_DiscountApplicationAllocationMethod;
  /** How the discount amount is distributed on the discounted lines. */
  targetSelection: Shopify_DiscountApplicationTargetSelection;
  /** Whether the discount is applied on line items or shipping lines. */
  targetType: Shopify_DiscountApplicationTargetType;
};

/**
 * Represents a fulfillment.
 * In Shopify, a fulfillment represents a shipment of one or more items in an order.
 * When an order has been completely fulfilled, it means that all the items that are included
 * in the order have been sent to the customer.
 * There can be more than one fulfillment for an order.
 */
export type Shopify_Fulfillment = Shopify_LegacyInteroperability & Shopify_Node & {
  __typename?: 'Shopify_Fulfillment';
  /** The date and time when the fulfillment was created. */
  createdAt: Scalars['DateTime']['output'];
  /** The date that this fulfillment was delivered. */
  deliveredAt?: Maybe<Scalars['DateTime']['output']>;
  /** Human readable display status for this fulfillment. */
  displayStatus?: Maybe<Shopify_FulfillmentDisplayStatus>;
  /** The estimated date that this fulfillment will arrive. */
  estimatedDeliveryAt?: Maybe<Scalars['DateTime']['output']>;
  /** The history of events associated with this fulfillment. */
  events: Shopify_FulfillmentEventConnection;
  /** List of the fulfillment's line items. */
  fulfillmentLineItems: Shopify_FulfillmentLineItemConnection;
  /** A paginated list of fulfillment orders for the fulfillment. */
  fulfillmentOrders: Shopify_FulfillmentOrderConnection;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The date and time when the fulfillment went into transit. */
  inTransitAt?: Maybe<Scalars['DateTime']['output']>;
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['Shopify_UnsignedInt64']['output'];
  /** The location that the fulfillment was processed at. */
  location?: Maybe<Shopify_Location>;
  /** Human readable reference identifier for this fulfillment. */
  name: Scalars['String']['output'];
  /** The order for which the fulfillment was created. */
  order: Shopify_Order;
  /** The address at which the fulfillment occurred. This field is intended for tax purposes, as a full address is required for tax providers to accurately calculate taxes. Typically this is the address of the warehouse or fulfillment center. To retrieve a fulfillment location's address, use the `assignedLocation` field on the [`FulfillmentOrder`](/docs/api/admin-graphql/latest/objects/FulfillmentOrder) object instead. */
  originAddress?: Maybe<Shopify_FulfillmentOriginAddress>;
  /** Whether any of the line items in the fulfillment require shipping. */
  requiresShipping: Scalars['Boolean']['output'];
  /** Fulfillment service associated with the fulfillment. */
  service?: Maybe<Shopify_FulfillmentService>;
  /** The optional shipping label for this fulfillment. */
  shippingLabel?: Maybe<Shopify_ShippingLabel>;
  /** The status of the fulfillment. */
  status: Shopify_FulfillmentStatus;
  /** Sum of all line item quantities for the fulfillment. */
  totalQuantity: Scalars['Int']['output'];
  /**
   * Tracking information associated with the fulfillment,
   * such as the tracking company, tracking number, and tracking URL.
   */
  trackingInfo: Array<Shopify_FulfillmentTrackingInfo>;
  /** The date and time when the fulfillment was last modified. */
  updatedAt: Scalars['DateTime']['output'];
};


/**
 * Represents a fulfillment.
 * In Shopify, a fulfillment represents a shipment of one or more items in an order.
 * When an order has been completely fulfilled, it means that all the items that are included
 * in the order have been sent to the customer.
 * There can be more than one fulfillment for an order.
 */
export type Shopify_FulfillmentEventsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_FulfillmentEventSortKeys>;
};


/**
 * Represents a fulfillment.
 * In Shopify, a fulfillment represents a shipment of one or more items in an order.
 * When an order has been completely fulfilled, it means that all the items that are included
 * in the order have been sent to the customer.
 * There can be more than one fulfillment for an order.
 */
export type Shopify_FulfillmentFulfillmentLineItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Represents a fulfillment.
 * In Shopify, a fulfillment represents a shipment of one or more items in an order.
 * When an order has been completely fulfilled, it means that all the items that are included
 * in the order have been sent to the customer.
 * There can be more than one fulfillment for an order.
 */
export type Shopify_FulfillmentFulfillmentOrdersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Represents a fulfillment.
 * In Shopify, a fulfillment represents a shipment of one or more items in an order.
 * When an order has been completely fulfilled, it means that all the items that are included
 * in the order have been sent to the customer.
 * There can be more than one fulfillment for an order.
 */
export type Shopify_FulfillmentTrackingInfoArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
};

/** An auto-generated type for paginating through multiple Fulfillments. */
export type Shopify_FulfillmentConnection = {
  __typename?: 'Shopify_FulfillmentConnection';
  /** A list of edges. */
  edges: Array<Shopify_FulfillmentEdge>;
  /** A list of the nodes contained in FulfillmentEdge. */
  nodes: Array<Shopify_Fulfillment>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** A fulfillment constraint rule. */
export type Shopify_FulfillmentConstraintRule = Shopify_HasMetafields & Shopify_Node & {
  __typename?: 'Shopify_FulfillmentConstraintRule';
  /** The ID for the fulfillment constraint function. */
  function: Shopify_ShopifyFunction;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafields: Shopify_PrivateMetafieldConnection;
};


/** A fulfillment constraint rule. */
export type Shopify_FulfillmentConstraintRuleMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace?: InputMaybe<Scalars['String']['input']>;
};


/** A fulfillment constraint rule. */
export type Shopify_FulfillmentConstraintRuleMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** A fulfillment constraint rule. */
export type Shopify_FulfillmentConstraintRulePrivateMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace: Scalars['String']['input'];
};


/** A fulfillment constraint rule. */
export type Shopify_FulfillmentConstraintRulePrivateMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** An error that occurs during the execution of `FulfillmentConstraintRuleCreate`. */
export type Shopify_FulfillmentConstraintRuleCreateUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_FulfillmentConstraintRuleCreateUserError';
  /** The error code. */
  code?: Maybe<Shopify_FulfillmentConstraintRuleCreateUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `FulfillmentConstraintRuleCreateUserError`. */
export enum Shopify_FulfillmentConstraintRuleCreateUserErrorCode {
  /** Shop must be on a Shopify Plus plan to activate functions from a custom app. */
  CustomAppFunctionNotEligible = 'CUSTOM_APP_FUNCTION_NOT_ELIGIBLE',
  /** A fulfillment constraint rule already exists for the provided function_id. */
  FunctionAlreadyRegistered = 'FUNCTION_ALREADY_REGISTERED',
  /** Function does not implement the required interface for this fulfillment constraint rule. */
  FunctionDoesNotImplement = 'FUNCTION_DOES_NOT_IMPLEMENT',
  /** No Shopify Function found for provided function_id. */
  FunctionNotFound = 'FUNCTION_NOT_FOUND',
  /** Function is pending deletion and cannot have new rules created against it. */
  FunctionPendingDeletion = 'FUNCTION_PENDING_DELETION',
  /** Failed to create fulfillment constraint rule due to invalid input. */
  InputInvalid = 'INPUT_INVALID'
}

/** An error that occurs during the execution of `FulfillmentConstraintRuleDelete`. */
export type Shopify_FulfillmentConstraintRuleDeleteUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_FulfillmentConstraintRuleDeleteUserError';
  /** The error code. */
  code?: Maybe<Shopify_FulfillmentConstraintRuleDeleteUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `FulfillmentConstraintRuleDeleteUserError`. */
export enum Shopify_FulfillmentConstraintRuleDeleteUserErrorCode {
  /** Could not find fulfillment constraint rule for provided id. */
  NotFound = 'NOT_FOUND',
  /** Unauthorized app scope. */
  UnauthorizedAppScope = 'UNAUTHORIZED_APP_SCOPE'
}

/** The display status of a fulfillment. */
export enum Shopify_FulfillmentDisplayStatus {
  /** Displayed as **Attempted delivery**. */
  AttemptedDelivery = 'ATTEMPTED_DELIVERY',
  /** Displayed as **Canceled**. */
  Canceled = 'CANCELED',
  /** Displayed as **Confirmed**. */
  Confirmed = 'CONFIRMED',
  /** Displayed as **Delivered**. */
  Delivered = 'DELIVERED',
  /** Displayed as **Failure**. */
  Failure = 'FAILURE',
  /** Displayed as **Fulfilled**. */
  Fulfilled = 'FULFILLED',
  /** Displayed as **In transit**. */
  InTransit = 'IN_TRANSIT',
  /** Displayed as **Label printed**. */
  LabelPrinted = 'LABEL_PRINTED',
  /** Displayed as **Label purchased**. */
  LabelPurchased = 'LABEL_PURCHASED',
  /** Displayed as **Label voided**. */
  LabelVoided = 'LABEL_VOIDED',
  /** Displayed as **Marked as fulfilled**. */
  MarkedAsFulfilled = 'MARKED_AS_FULFILLED',
  /** Displayed as **Not delivered**. */
  NotDelivered = 'NOT_DELIVERED',
  /** Displayed as **Out for delivery**. */
  OutForDelivery = 'OUT_FOR_DELIVERY',
  /** Displayed as **Picked up**. */
  PickedUp = 'PICKED_UP',
  /** Displayed as **Ready for pickup**. */
  ReadyForPickup = 'READY_FOR_PICKUP',
  /** Displayed as **Submitted**. */
  Submitted = 'SUBMITTED'
}

/** An auto-generated type which holds one Fulfillment and a cursor during pagination. */
export type Shopify_FulfillmentEdge = {
  __typename?: 'Shopify_FulfillmentEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of FulfillmentEdge. */
  node: Shopify_Fulfillment;
};

/** The fulfillment event that describes the fulfilllment status at a particular time. */
export type Shopify_FulfillmentEvent = Shopify_Node & {
  __typename?: 'Shopify_FulfillmentEvent';
  /** The street address where this fulfillment event occurred. */
  address1?: Maybe<Scalars['String']['output']>;
  /** The city where this fulfillment event occurred. */
  city?: Maybe<Scalars['String']['output']>;
  /** The country where this fulfillment event occurred. */
  country?: Maybe<Scalars['String']['output']>;
  /** The estimated delivery date and time of the fulfillment. */
  estimatedDeliveryAt?: Maybe<Scalars['DateTime']['output']>;
  /** The time at which this fulfillment event happened. */
  happenedAt: Scalars['DateTime']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The latitude where this fulfillment event occurred. */
  latitude?: Maybe<Scalars['Float']['output']>;
  /** The longitude where this fulfillment event occurred. */
  longitude?: Maybe<Scalars['Float']['output']>;
  /** A message associated with this fulfillment event. */
  message?: Maybe<Scalars['String']['output']>;
  /** The province where this fulfillment event occurred. */
  province?: Maybe<Scalars['String']['output']>;
  /** The status of this fulfillment event. */
  status: Shopify_FulfillmentEventStatus;
  /** The zip code of the location where this fulfillment event occurred. */
  zip?: Maybe<Scalars['String']['output']>;
};

/** An auto-generated type for paginating through multiple FulfillmentEvents. */
export type Shopify_FulfillmentEventConnection = {
  __typename?: 'Shopify_FulfillmentEventConnection';
  /** A list of edges. */
  edges: Array<Shopify_FulfillmentEventEdge>;
  /** A list of the nodes contained in FulfillmentEventEdge. */
  nodes: Array<Shopify_FulfillmentEvent>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one FulfillmentEvent and a cursor during pagination. */
export type Shopify_FulfillmentEventEdge = {
  __typename?: 'Shopify_FulfillmentEventEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of FulfillmentEventEdge. */
  node: Shopify_FulfillmentEvent;
};

/** The set of valid sort keys for the FulfillmentEvent query. */
export enum Shopify_FulfillmentEventSortKeys {
  /** Sort by the `happened_at` value. */
  HappenedAt = 'HAPPENED_AT',
  /** Sort by the `id` value. */
  Id = 'ID',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE'
}

/** The status that describes a fulfillment or delivery event. */
export enum Shopify_FulfillmentEventStatus {
  /** A delivery was attempted. */
  AttemptedDelivery = 'ATTEMPTED_DELIVERY',
  /** The fulfillment is confirmed. This is the default value when no other information is available. */
  Confirmed = 'CONFIRMED',
  /** The fulfillment was successfully delivered. */
  Delivered = 'DELIVERED',
  /** The fulfillment request failed. */
  Failure = 'FAILURE',
  /** The fulfillment is in transit. */
  InTransit = 'IN_TRANSIT',
  /** A purchased shipping label has been printed. */
  LabelPrinted = 'LABEL_PRINTED',
  /** A shipping label has been purchased. */
  LabelPurchased = 'LABEL_PURCHASED',
  /** The fulfillment is out for delivery. */
  OutForDelivery = 'OUT_FOR_DELIVERY',
  /** The fulfillment is ready to be picked up. */
  ReadyForPickup = 'READY_FOR_PICKUP'
}

/** A fulfillment hold currently applied on a fulfillment order. */
export type Shopify_FulfillmentHold = {
  __typename?: 'Shopify_FulfillmentHold';
  /** The name of the app or service that applied the fulfillment hold. */
  heldBy?: Maybe<Scalars['String']['output']>;
  /** The reason for the fulfillment hold. */
  reason: Shopify_FulfillmentHoldReason;
  /** Additional information about the fulfillment hold reason. */
  reasonNotes?: Maybe<Scalars['String']['output']>;
};

/** The reason for a fulfillment hold. */
export enum Shopify_FulfillmentHoldReason {
  /** The fulfillment hold is applied because payment is pending. */
  AwaitingPayment = 'AWAITING_PAYMENT',
  /** The fulfillment hold is applied because of return items not yet received during an exchange. */
  AwaitingReturnItems = 'AWAITING_RETURN_ITEMS',
  /** The fulfillment hold is applied because of a high risk of fraud. */
  HighRiskOfFraud = 'HIGH_RISK_OF_FRAUD',
  /** The fulfillment hold is applied because of an incorrect address. */
  IncorrectAddress = 'INCORRECT_ADDRESS',
  /** The fulfillment hold is applied because inventory is out of stock. */
  InventoryOutOfStock = 'INVENTORY_OUT_OF_STOCK',
  /** The fulfillment hold is applied because of a post purchase upsell offer. */
  OnlineStorePostPurchaseCrossSell = 'ONLINE_STORE_POST_PURCHASE_CROSS_SELL',
  /** The fulfillment hold is applied for another reason. */
  Other = 'OTHER',
  /** The fulfillment hold is applied because of an unknown delivery date. */
  UnknownDeliveryDate = 'UNKNOWN_DELIVERY_DATE'
}

/** Represents a line item from an order that's included in a fulfillment. */
export type Shopify_FulfillmentLineItem = Shopify_Node & {
  __typename?: 'Shopify_FulfillmentLineItem';
  /**
   * The total price after discounts are applied.
   * @deprecated Use `discountedTotalSet` instead.
   */
  discountedTotal: Scalars['Shopify_Money']['output'];
  /** The total price after discounts are applied in shop and presentment currencies. */
  discountedTotalSet: Shopify_MoneyBag;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The associated order's line item. */
  lineItem: Shopify_LineItem;
  /**
   * The total price before discounts are applied.
   * @deprecated Use `originalTotalSet` instead.
   */
  originalTotal: Scalars['Shopify_Money']['output'];
  /** The total price before discounts are applied in shop and presentment currencies. */
  originalTotalSet: Shopify_MoneyBag;
  /** Number of line items in the fulfillment. */
  quantity?: Maybe<Scalars['Int']['output']>;
};

/** An auto-generated type for paginating through multiple FulfillmentLineItems. */
export type Shopify_FulfillmentLineItemConnection = {
  __typename?: 'Shopify_FulfillmentLineItemConnection';
  /** A list of edges. */
  edges: Array<Shopify_FulfillmentLineItemEdge>;
  /** A list of the nodes contained in FulfillmentLineItemEdge. */
  nodes: Array<Shopify_FulfillmentLineItem>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one FulfillmentLineItem and a cursor during pagination. */
export type Shopify_FulfillmentLineItemEdge = {
  __typename?: 'Shopify_FulfillmentLineItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of FulfillmentLineItemEdge. */
  node: Shopify_FulfillmentLineItem;
};

/**
 * The FulfillmentOrder object represents either an item or a group of items in an
 * [Order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
 * that are expected to be fulfilled from the same location.
 * There can be more than one fulfillment order for an
 * [order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
 * at a given location.
 *
 * {{ '/api/reference/fulfillment_order_relationships.png' | image }}
 *
 * Fulfillment orders represent the work which is intended to be done in relation to an order.
 * When fulfillment has started for one or more line items, a
 * [Fulfillment](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment)
 * is created by a merchant or third party to represent the ongoing or completed work of fulfillment.
 *
 * [See below for more details on creating fulfillments](#the-lifecycle-of-a-fulfillment-order-at-a-location-which-is-managed-by-a-fulfillment-service).
 *
 * > Note:
 * > Shopify creates fulfillment orders automatically when an order is created.
 * > It is not possible to manually create fulfillment orders.
 * >
 * > [See below for more details on the lifecycle of a fulfillment order](#the-lifecycle-of-a-fulfillment-order).
 *
 * ## Retrieving fulfillment orders
 *
 * ### Fulfillment orders from an order
 *
 * All fulfillment orders related to a given order can be retrieved with the
 * [Order.fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Order#connection-order-fulfillmentorders)
 * connection.
 *
 * [API access scopes](#api-access-scopes)
 * govern which fulfillments orders are returned to clients.
 * An API client will only receive a subset of the fulfillment orders which belong to an order
 * if they don't have the necessary access scopes to view all of the fulfillment orders.
 *
 * ### Fulfillment orders assigned to the app for fulfillment
 *
 * Fulfillment service apps can retrieve the fulfillment orders which have been assigned to their locations with the
 * [Shop.assignedFulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Shop#connection-shop-assignedfulfillmentorders)
 * connection.
 * Use the `assignmentStatus` argument to control whether all assigned fulfillment orders
 * should be returned or only those where a merchant has sent a
 * [fulfillment request](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderMerchantRequest)
 * and it has yet to be responded to.
 *
 * The API client must be granted the `read_assigned_fulfillment_orders` access scope to access
 * the assigned fulfillment orders.
 *
 * ### All fulfillment orders
 *
 * Apps can retrieve all fulfillment orders with the
 * [fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/queries/fulfillmentOrders)
 * query. This query returns all assigned, merchant-managed, and third-party fulfillment orders on the shop,
 * which are accessible to the app according to the
 * [fulfillment order access scopes](#api-access-scopes) it was granted with.
 *
 * ## The lifecycle of a fulfillment order
 *
 * ### Fulfillment Order Creation
 *
 * After an order is created, a background worker performs the order routing process which determines
 * which locations will be responsible for fulfilling the purchased items.
 * Once the order routing process is complete, one or more fulfillment orders will be created
 * and assigned to these locations. It is not possible to manually create fulfillment orders.
 *
 * Once a fulfillment order has been created, it will have one of two different lifecycles depending on
 * the type of location which the fulfillment order is assigned to.
 *
 * ### The lifecycle of a fulfillment order at a merchant managed location
 *
 * Fulfillment orders are completed by creating
 * [fulfillments](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment).
 * Fulfillments represents the work done.
 *
 * For digital products a merchant or an order management app would create a fulfilment once the digital asset
 * has been provisioned.
 * For example, in the case of a digital gift card, a merchant would to do this once
 * the gift card has been activated - before the email has been shipped.
 *
 * On the other hand, for a traditional shipped order,
 * a merchant or an order management app would create a fulfillment after picking and packing the items relating
 * to a fulfillment order, but before the courier has collected the goods.
 *
 * [Learn about managing fulfillment orders as an order management app](https://shopify.dev/apps/fulfillment/order-management-apps/manage-fulfillments).
 *
 * ### The lifecycle of a fulfillment order at a location which is managed by a fulfillment service
 *
 * For fulfillment orders which are assigned to a location that is managed by a fulfillment service,
 * a merchant or an Order Management App can
 * [send a fulfillment request](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitFulfillmentRequest)
 * to the fulfillment service which operates the location to request that they fulfill the associated items.
 * A fulfillment service has the option to
 * [accept](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderAcceptFulfillmentRequest)
 * or [reject](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderRejectFulfillmentRequest)
 * this fulfillment request.
 *
 * Once the fulfillment service has accepted the request, the request can no longer be cancelled by the merchant
 * or order management app and instead a
 * [cancellation request must be submitted](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitCancellationRequest)
 * to the fulfillment service.
 *
 * Once a fulfillment service accepts a fulfillment request,
 * then after they are ready to pack items and send them for delivery, they create fulfillments with the
 * [fulfillmentCreateV2](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentCreateV2)
 * mutation.
 * They can provide tracking information right away or create fulfillments without it and then
 * update the tracking information for fulfillments with the
 * [fulfillmentTrackingInfoUpdateV2](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentTrackingInfoUpdateV2)
 * mutation.
 *
 * [Learn about managing fulfillment orders as a fulfillment service](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments).
 *
 * ## API access scopes
 *
 * Fulfillment orders are governed by the following API access scopes:
 *
 * * The `read_merchant_managed_fulfillment_orders` and
 *   `write_merchant_managed_fulfillment_orders` access scopes
 *   grant access to fulfillment orders assigned to merchant-managed locations.
 * * The `read_assigned_fulfillment_orders` and `write_assigned_fulfillment_orders`
 *   access scopes are intended for fulfillment services.
 *   These scopes grant access to fulfillment orders assigned to locations that are being managed
 *   by fulfillment services.
 * * The `read_third_party_fulfillment_orders` and `write_third_party_fulfillment_orders`
 *   access scopes grant access to fulfillment orders
 *   assigned to locations managed by other fulfillment services.
 *
 * ### Fulfillment service app access scopes
 *
 * Usually, **fulfillment services** have the `write_assigned_fulfillment_orders` access scope
 * and don't have the `*_third_party_fulfillment_orders`
 * or `*_merchant_managed_fulfillment_orders` access scopes.
 * The app will only have access to the fulfillment orders assigned to their location
 * (or multiple locations if the app registers multiple fulfillment services on the shop).
 * The app will not have access to fulfillment orders assigned to merchant-managed locations
 * or locations owned by other fulfillment service apps.
 *
 * ### Order management app access scopes
 *
 * **Order management apps** will usually request `write_merchant_managed_fulfillment_orders` and
 * `write_third_party_fulfillment_orders` access scopes. This will allow them to manage all fulfillment orders
 * on behalf of a merchant.
 *
 * If an app combines the functions of an order management app and a fulfillment service,
 * then the app should request all
 * access scopes to manage all assigned and all unassigned fulfillment orders.
 *
 * ## Notifications about fulfillment orders
 *
 * Fulfillment services are required to
 * [register](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)
 * a self-hosted callback URL which has a number of uses. One of these uses is that this callback URL will be notified
 * whenever a merchant submits a fulfillment or cancellation request.
 *
 * Both merchants and apps can
 * [subscribe](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#webhooks)
 * to the
 * [fulfillment order webhooks](https://shopify.dev/api/admin-graphql/latest/enums/WebhookSubscriptionTopic#value-fulfillmentorderscancellationrequestaccepted)
 * to be notified whenever fulfillment order related domain events occur.
 *
 * [Learn about fulfillment workflows](https://shopify.dev/apps/fulfillment).
 */
export type Shopify_FulfillmentOrder = Shopify_Node & {
  __typename?: 'Shopify_FulfillmentOrder';
  /**
   * The fulfillment order's assigned location. This is the location where the fulfillment is expected to happen.
   *
   * The fulfillment order's assigned location might change in the following cases:
   *
   * - The fulfillment order has been entirely moved to a new location. For example, the [fulfillmentOrderMove](
   *   https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
   *   ) mutation has been called, and you see the original fulfillment order in the [movedFulfillmentOrder](
   *   https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove#field-fulfillmentordermovepayload-movedfulfillmentorder
   *   ) field within the mutation's response.
   * - Work on the fulfillment order hasn't yet begun, which means that the fulfillment order has the
   *     [OPEN](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-open),
   *     [SCHEDULED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-scheduled), or
   *     [ON_HOLD](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-onhold)
   *     status, and the shop's location properties might be undergoing edits (for example, in the Shopify admin).
   */
  assignedLocation: Shopify_FulfillmentOrderAssignedLocation;
  /** ID of the channel that created the order. */
  channelId?: Maybe<Scalars['ID']['output']>;
  /** Date and time when the fulfillment order was created. */
  createdAt: Scalars['DateTime']['output'];
  /** Delivery method of this fulfillment order. */
  deliveryMethod?: Maybe<Shopify_DeliveryMethod>;
  /** The destination where the items should be sent. */
  destination?: Maybe<Shopify_FulfillmentOrderDestination>;
  /** The date and time at which the fulfillment order will be fulfillable. When this date and time is reached, the scheduled fulfillment order is automatically transitioned to open. For example, the `fulfill_at` date for a subscription order might be the 1st of each month, a pre-order `fulfill_at` date would be `nil`, and a standard order `fulfill_at` date would be the order creation date. */
  fulfillAt?: Maybe<Scalars['DateTime']['output']>;
  /** The latest date and time by which all items in the fulfillment order need to be fulfilled. */
  fulfillBy?: Maybe<Scalars['DateTime']['output']>;
  /** The fulfillment holds applied on the fulfillment order. */
  fulfillmentHolds: Array<Shopify_FulfillmentHold>;
  /** Fulfillment orders eligible for merging with the given fulfillment order. */
  fulfillmentOrdersForMerge: Shopify_FulfillmentOrderConnection;
  /** A list of fulfillments for the fulfillment order. */
  fulfillments: Shopify_FulfillmentConnection;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The duties delivery method of this fulfillment order. */
  internationalDuties?: Maybe<Shopify_FulfillmentOrderInternationalDuties>;
  /** A list of the fulfillment order's line items. */
  lineItems: Shopify_FulfillmentOrderLineItemConnection;
  /** A list of locations that the fulfillment order can potentially move to. */
  locationsForMove: Shopify_FulfillmentOrderLocationForMoveConnection;
  /** A list of requests sent by the merchant or an order management app to the fulfillment service for the fulfillment order. */
  merchantRequests: Shopify_FulfillmentOrderMerchantRequestConnection;
  /** The order that's associated with the fulfillment order. */
  order: Shopify_Order;
  /** ID of the order that's associated with the fulfillment order. */
  orderId: Scalars['ID']['output'];
  /**
   * The unique identifier for the order that appears on the order page in the Shopify admin and the <b>Order status</b> page.
   * For example, "#1001", "EN1001", or "1001-A".
   * This value isn't unique across multiple stores.
   */
  orderName: Scalars['String']['output'];
  /**
   * The date and time when the order was processed.
   * This date and time might not match the date and time when the order was created.
   */
  orderProcessedAt: Scalars['DateTime']['output'];
  /** The request status of the fulfillment order. */
  requestStatus: Shopify_FulfillmentOrderRequestStatus;
  /** The status of the fulfillment order. */
  status: Shopify_FulfillmentOrderStatus;
  /** The actions that can be performed on this fulfillment order. */
  supportedActions: Array<Shopify_FulfillmentOrderSupportedAction>;
  /** The date and time when the fulfillment order was last updated. */
  updatedAt: Scalars['DateTime']['output'];
};


/**
 * The FulfillmentOrder object represents either an item or a group of items in an
 * [Order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
 * that are expected to be fulfilled from the same location.
 * There can be more than one fulfillment order for an
 * [order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
 * at a given location.
 *
 * {{ '/api/reference/fulfillment_order_relationships.png' | image }}
 *
 * Fulfillment orders represent the work which is intended to be done in relation to an order.
 * When fulfillment has started for one or more line items, a
 * [Fulfillment](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment)
 * is created by a merchant or third party to represent the ongoing or completed work of fulfillment.
 *
 * [See below for more details on creating fulfillments](#the-lifecycle-of-a-fulfillment-order-at-a-location-which-is-managed-by-a-fulfillment-service).
 *
 * > Note:
 * > Shopify creates fulfillment orders automatically when an order is created.
 * > It is not possible to manually create fulfillment orders.
 * >
 * > [See below for more details on the lifecycle of a fulfillment order](#the-lifecycle-of-a-fulfillment-order).
 *
 * ## Retrieving fulfillment orders
 *
 * ### Fulfillment orders from an order
 *
 * All fulfillment orders related to a given order can be retrieved with the
 * [Order.fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Order#connection-order-fulfillmentorders)
 * connection.
 *
 * [API access scopes](#api-access-scopes)
 * govern which fulfillments orders are returned to clients.
 * An API client will only receive a subset of the fulfillment orders which belong to an order
 * if they don't have the necessary access scopes to view all of the fulfillment orders.
 *
 * ### Fulfillment orders assigned to the app for fulfillment
 *
 * Fulfillment service apps can retrieve the fulfillment orders which have been assigned to their locations with the
 * [Shop.assignedFulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Shop#connection-shop-assignedfulfillmentorders)
 * connection.
 * Use the `assignmentStatus` argument to control whether all assigned fulfillment orders
 * should be returned or only those where a merchant has sent a
 * [fulfillment request](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderMerchantRequest)
 * and it has yet to be responded to.
 *
 * The API client must be granted the `read_assigned_fulfillment_orders` access scope to access
 * the assigned fulfillment orders.
 *
 * ### All fulfillment orders
 *
 * Apps can retrieve all fulfillment orders with the
 * [fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/queries/fulfillmentOrders)
 * query. This query returns all assigned, merchant-managed, and third-party fulfillment orders on the shop,
 * which are accessible to the app according to the
 * [fulfillment order access scopes](#api-access-scopes) it was granted with.
 *
 * ## The lifecycle of a fulfillment order
 *
 * ### Fulfillment Order Creation
 *
 * After an order is created, a background worker performs the order routing process which determines
 * which locations will be responsible for fulfilling the purchased items.
 * Once the order routing process is complete, one or more fulfillment orders will be created
 * and assigned to these locations. It is not possible to manually create fulfillment orders.
 *
 * Once a fulfillment order has been created, it will have one of two different lifecycles depending on
 * the type of location which the fulfillment order is assigned to.
 *
 * ### The lifecycle of a fulfillment order at a merchant managed location
 *
 * Fulfillment orders are completed by creating
 * [fulfillments](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment).
 * Fulfillments represents the work done.
 *
 * For digital products a merchant or an order management app would create a fulfilment once the digital asset
 * has been provisioned.
 * For example, in the case of a digital gift card, a merchant would to do this once
 * the gift card has been activated - before the email has been shipped.
 *
 * On the other hand, for a traditional shipped order,
 * a merchant or an order management app would create a fulfillment after picking and packing the items relating
 * to a fulfillment order, but before the courier has collected the goods.
 *
 * [Learn about managing fulfillment orders as an order management app](https://shopify.dev/apps/fulfillment/order-management-apps/manage-fulfillments).
 *
 * ### The lifecycle of a fulfillment order at a location which is managed by a fulfillment service
 *
 * For fulfillment orders which are assigned to a location that is managed by a fulfillment service,
 * a merchant or an Order Management App can
 * [send a fulfillment request](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitFulfillmentRequest)
 * to the fulfillment service which operates the location to request that they fulfill the associated items.
 * A fulfillment service has the option to
 * [accept](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderAcceptFulfillmentRequest)
 * or [reject](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderRejectFulfillmentRequest)
 * this fulfillment request.
 *
 * Once the fulfillment service has accepted the request, the request can no longer be cancelled by the merchant
 * or order management app and instead a
 * [cancellation request must be submitted](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitCancellationRequest)
 * to the fulfillment service.
 *
 * Once a fulfillment service accepts a fulfillment request,
 * then after they are ready to pack items and send them for delivery, they create fulfillments with the
 * [fulfillmentCreateV2](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentCreateV2)
 * mutation.
 * They can provide tracking information right away or create fulfillments without it and then
 * update the tracking information for fulfillments with the
 * [fulfillmentTrackingInfoUpdateV2](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentTrackingInfoUpdateV2)
 * mutation.
 *
 * [Learn about managing fulfillment orders as a fulfillment service](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments).
 *
 * ## API access scopes
 *
 * Fulfillment orders are governed by the following API access scopes:
 *
 * * The `read_merchant_managed_fulfillment_orders` and
 *   `write_merchant_managed_fulfillment_orders` access scopes
 *   grant access to fulfillment orders assigned to merchant-managed locations.
 * * The `read_assigned_fulfillment_orders` and `write_assigned_fulfillment_orders`
 *   access scopes are intended for fulfillment services.
 *   These scopes grant access to fulfillment orders assigned to locations that are being managed
 *   by fulfillment services.
 * * The `read_third_party_fulfillment_orders` and `write_third_party_fulfillment_orders`
 *   access scopes grant access to fulfillment orders
 *   assigned to locations managed by other fulfillment services.
 *
 * ### Fulfillment service app access scopes
 *
 * Usually, **fulfillment services** have the `write_assigned_fulfillment_orders` access scope
 * and don't have the `*_third_party_fulfillment_orders`
 * or `*_merchant_managed_fulfillment_orders` access scopes.
 * The app will only have access to the fulfillment orders assigned to their location
 * (or multiple locations if the app registers multiple fulfillment services on the shop).
 * The app will not have access to fulfillment orders assigned to merchant-managed locations
 * or locations owned by other fulfillment service apps.
 *
 * ### Order management app access scopes
 *
 * **Order management apps** will usually request `write_merchant_managed_fulfillment_orders` and
 * `write_third_party_fulfillment_orders` access scopes. This will allow them to manage all fulfillment orders
 * on behalf of a merchant.
 *
 * If an app combines the functions of an order management app and a fulfillment service,
 * then the app should request all
 * access scopes to manage all assigned and all unassigned fulfillment orders.
 *
 * ## Notifications about fulfillment orders
 *
 * Fulfillment services are required to
 * [register](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)
 * a self-hosted callback URL which has a number of uses. One of these uses is that this callback URL will be notified
 * whenever a merchant submits a fulfillment or cancellation request.
 *
 * Both merchants and apps can
 * [subscribe](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#webhooks)
 * to the
 * [fulfillment order webhooks](https://shopify.dev/api/admin-graphql/latest/enums/WebhookSubscriptionTopic#value-fulfillmentorderscancellationrequestaccepted)
 * to be notified whenever fulfillment order related domain events occur.
 *
 * [Learn about fulfillment workflows](https://shopify.dev/apps/fulfillment).
 */
export type Shopify_FulfillmentOrderFulfillmentOrdersForMergeArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * The FulfillmentOrder object represents either an item or a group of items in an
 * [Order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
 * that are expected to be fulfilled from the same location.
 * There can be more than one fulfillment order for an
 * [order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
 * at a given location.
 *
 * {{ '/api/reference/fulfillment_order_relationships.png' | image }}
 *
 * Fulfillment orders represent the work which is intended to be done in relation to an order.
 * When fulfillment has started for one or more line items, a
 * [Fulfillment](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment)
 * is created by a merchant or third party to represent the ongoing or completed work of fulfillment.
 *
 * [See below for more details on creating fulfillments](#the-lifecycle-of-a-fulfillment-order-at-a-location-which-is-managed-by-a-fulfillment-service).
 *
 * > Note:
 * > Shopify creates fulfillment orders automatically when an order is created.
 * > It is not possible to manually create fulfillment orders.
 * >
 * > [See below for more details on the lifecycle of a fulfillment order](#the-lifecycle-of-a-fulfillment-order).
 *
 * ## Retrieving fulfillment orders
 *
 * ### Fulfillment orders from an order
 *
 * All fulfillment orders related to a given order can be retrieved with the
 * [Order.fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Order#connection-order-fulfillmentorders)
 * connection.
 *
 * [API access scopes](#api-access-scopes)
 * govern which fulfillments orders are returned to clients.
 * An API client will only receive a subset of the fulfillment orders which belong to an order
 * if they don't have the necessary access scopes to view all of the fulfillment orders.
 *
 * ### Fulfillment orders assigned to the app for fulfillment
 *
 * Fulfillment service apps can retrieve the fulfillment orders which have been assigned to their locations with the
 * [Shop.assignedFulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Shop#connection-shop-assignedfulfillmentorders)
 * connection.
 * Use the `assignmentStatus` argument to control whether all assigned fulfillment orders
 * should be returned or only those where a merchant has sent a
 * [fulfillment request](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderMerchantRequest)
 * and it has yet to be responded to.
 *
 * The API client must be granted the `read_assigned_fulfillment_orders` access scope to access
 * the assigned fulfillment orders.
 *
 * ### All fulfillment orders
 *
 * Apps can retrieve all fulfillment orders with the
 * [fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/queries/fulfillmentOrders)
 * query. This query returns all assigned, merchant-managed, and third-party fulfillment orders on the shop,
 * which are accessible to the app according to the
 * [fulfillment order access scopes](#api-access-scopes) it was granted with.
 *
 * ## The lifecycle of a fulfillment order
 *
 * ### Fulfillment Order Creation
 *
 * After an order is created, a background worker performs the order routing process which determines
 * which locations will be responsible for fulfilling the purchased items.
 * Once the order routing process is complete, one or more fulfillment orders will be created
 * and assigned to these locations. It is not possible to manually create fulfillment orders.
 *
 * Once a fulfillment order has been created, it will have one of two different lifecycles depending on
 * the type of location which the fulfillment order is assigned to.
 *
 * ### The lifecycle of a fulfillment order at a merchant managed location
 *
 * Fulfillment orders are completed by creating
 * [fulfillments](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment).
 * Fulfillments represents the work done.
 *
 * For digital products a merchant or an order management app would create a fulfilment once the digital asset
 * has been provisioned.
 * For example, in the case of a digital gift card, a merchant would to do this once
 * the gift card has been activated - before the email has been shipped.
 *
 * On the other hand, for a traditional shipped order,
 * a merchant or an order management app would create a fulfillment after picking and packing the items relating
 * to a fulfillment order, but before the courier has collected the goods.
 *
 * [Learn about managing fulfillment orders as an order management app](https://shopify.dev/apps/fulfillment/order-management-apps/manage-fulfillments).
 *
 * ### The lifecycle of a fulfillment order at a location which is managed by a fulfillment service
 *
 * For fulfillment orders which are assigned to a location that is managed by a fulfillment service,
 * a merchant or an Order Management App can
 * [send a fulfillment request](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitFulfillmentRequest)
 * to the fulfillment service which operates the location to request that they fulfill the associated items.
 * A fulfillment service has the option to
 * [accept](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderAcceptFulfillmentRequest)
 * or [reject](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderRejectFulfillmentRequest)
 * this fulfillment request.
 *
 * Once the fulfillment service has accepted the request, the request can no longer be cancelled by the merchant
 * or order management app and instead a
 * [cancellation request must be submitted](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitCancellationRequest)
 * to the fulfillment service.
 *
 * Once a fulfillment service accepts a fulfillment request,
 * then after they are ready to pack items and send them for delivery, they create fulfillments with the
 * [fulfillmentCreateV2](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentCreateV2)
 * mutation.
 * They can provide tracking information right away or create fulfillments without it and then
 * update the tracking information for fulfillments with the
 * [fulfillmentTrackingInfoUpdateV2](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentTrackingInfoUpdateV2)
 * mutation.
 *
 * [Learn about managing fulfillment orders as a fulfillment service](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments).
 *
 * ## API access scopes
 *
 * Fulfillment orders are governed by the following API access scopes:
 *
 * * The `read_merchant_managed_fulfillment_orders` and
 *   `write_merchant_managed_fulfillment_orders` access scopes
 *   grant access to fulfillment orders assigned to merchant-managed locations.
 * * The `read_assigned_fulfillment_orders` and `write_assigned_fulfillment_orders`
 *   access scopes are intended for fulfillment services.
 *   These scopes grant access to fulfillment orders assigned to locations that are being managed
 *   by fulfillment services.
 * * The `read_third_party_fulfillment_orders` and `write_third_party_fulfillment_orders`
 *   access scopes grant access to fulfillment orders
 *   assigned to locations managed by other fulfillment services.
 *
 * ### Fulfillment service app access scopes
 *
 * Usually, **fulfillment services** have the `write_assigned_fulfillment_orders` access scope
 * and don't have the `*_third_party_fulfillment_orders`
 * or `*_merchant_managed_fulfillment_orders` access scopes.
 * The app will only have access to the fulfillment orders assigned to their location
 * (or multiple locations if the app registers multiple fulfillment services on the shop).
 * The app will not have access to fulfillment orders assigned to merchant-managed locations
 * or locations owned by other fulfillment service apps.
 *
 * ### Order management app access scopes
 *
 * **Order management apps** will usually request `write_merchant_managed_fulfillment_orders` and
 * `write_third_party_fulfillment_orders` access scopes. This will allow them to manage all fulfillment orders
 * on behalf of a merchant.
 *
 * If an app combines the functions of an order management app and a fulfillment service,
 * then the app should request all
 * access scopes to manage all assigned and all unassigned fulfillment orders.
 *
 * ## Notifications about fulfillment orders
 *
 * Fulfillment services are required to
 * [register](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)
 * a self-hosted callback URL which has a number of uses. One of these uses is that this callback URL will be notified
 * whenever a merchant submits a fulfillment or cancellation request.
 *
 * Both merchants and apps can
 * [subscribe](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#webhooks)
 * to the
 * [fulfillment order webhooks](https://shopify.dev/api/admin-graphql/latest/enums/WebhookSubscriptionTopic#value-fulfillmentorderscancellationrequestaccepted)
 * to be notified whenever fulfillment order related domain events occur.
 *
 * [Learn about fulfillment workflows](https://shopify.dev/apps/fulfillment).
 */
export type Shopify_FulfillmentOrderFulfillmentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * The FulfillmentOrder object represents either an item or a group of items in an
 * [Order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
 * that are expected to be fulfilled from the same location.
 * There can be more than one fulfillment order for an
 * [order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
 * at a given location.
 *
 * {{ '/api/reference/fulfillment_order_relationships.png' | image }}
 *
 * Fulfillment orders represent the work which is intended to be done in relation to an order.
 * When fulfillment has started for one or more line items, a
 * [Fulfillment](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment)
 * is created by a merchant or third party to represent the ongoing or completed work of fulfillment.
 *
 * [See below for more details on creating fulfillments](#the-lifecycle-of-a-fulfillment-order-at-a-location-which-is-managed-by-a-fulfillment-service).
 *
 * > Note:
 * > Shopify creates fulfillment orders automatically when an order is created.
 * > It is not possible to manually create fulfillment orders.
 * >
 * > [See below for more details on the lifecycle of a fulfillment order](#the-lifecycle-of-a-fulfillment-order).
 *
 * ## Retrieving fulfillment orders
 *
 * ### Fulfillment orders from an order
 *
 * All fulfillment orders related to a given order can be retrieved with the
 * [Order.fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Order#connection-order-fulfillmentorders)
 * connection.
 *
 * [API access scopes](#api-access-scopes)
 * govern which fulfillments orders are returned to clients.
 * An API client will only receive a subset of the fulfillment orders which belong to an order
 * if they don't have the necessary access scopes to view all of the fulfillment orders.
 *
 * ### Fulfillment orders assigned to the app for fulfillment
 *
 * Fulfillment service apps can retrieve the fulfillment orders which have been assigned to their locations with the
 * [Shop.assignedFulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Shop#connection-shop-assignedfulfillmentorders)
 * connection.
 * Use the `assignmentStatus` argument to control whether all assigned fulfillment orders
 * should be returned or only those where a merchant has sent a
 * [fulfillment request](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderMerchantRequest)
 * and it has yet to be responded to.
 *
 * The API client must be granted the `read_assigned_fulfillment_orders` access scope to access
 * the assigned fulfillment orders.
 *
 * ### All fulfillment orders
 *
 * Apps can retrieve all fulfillment orders with the
 * [fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/queries/fulfillmentOrders)
 * query. This query returns all assigned, merchant-managed, and third-party fulfillment orders on the shop,
 * which are accessible to the app according to the
 * [fulfillment order access scopes](#api-access-scopes) it was granted with.
 *
 * ## The lifecycle of a fulfillment order
 *
 * ### Fulfillment Order Creation
 *
 * After an order is created, a background worker performs the order routing process which determines
 * which locations will be responsible for fulfilling the purchased items.
 * Once the order routing process is complete, one or more fulfillment orders will be created
 * and assigned to these locations. It is not possible to manually create fulfillment orders.
 *
 * Once a fulfillment order has been created, it will have one of two different lifecycles depending on
 * the type of location which the fulfillment order is assigned to.
 *
 * ### The lifecycle of a fulfillment order at a merchant managed location
 *
 * Fulfillment orders are completed by creating
 * [fulfillments](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment).
 * Fulfillments represents the work done.
 *
 * For digital products a merchant or an order management app would create a fulfilment once the digital asset
 * has been provisioned.
 * For example, in the case of a digital gift card, a merchant would to do this once
 * the gift card has been activated - before the email has been shipped.
 *
 * On the other hand, for a traditional shipped order,
 * a merchant or an order management app would create a fulfillment after picking and packing the items relating
 * to a fulfillment order, but before the courier has collected the goods.
 *
 * [Learn about managing fulfillment orders as an order management app](https://shopify.dev/apps/fulfillment/order-management-apps/manage-fulfillments).
 *
 * ### The lifecycle of a fulfillment order at a location which is managed by a fulfillment service
 *
 * For fulfillment orders which are assigned to a location that is managed by a fulfillment service,
 * a merchant or an Order Management App can
 * [send a fulfillment request](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitFulfillmentRequest)
 * to the fulfillment service which operates the location to request that they fulfill the associated items.
 * A fulfillment service has the option to
 * [accept](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderAcceptFulfillmentRequest)
 * or [reject](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderRejectFulfillmentRequest)
 * this fulfillment request.
 *
 * Once the fulfillment service has accepted the request, the request can no longer be cancelled by the merchant
 * or order management app and instead a
 * [cancellation request must be submitted](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitCancellationRequest)
 * to the fulfillment service.
 *
 * Once a fulfillment service accepts a fulfillment request,
 * then after they are ready to pack items and send them for delivery, they create fulfillments with the
 * [fulfillmentCreateV2](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentCreateV2)
 * mutation.
 * They can provide tracking information right away or create fulfillments without it and then
 * update the tracking information for fulfillments with the
 * [fulfillmentTrackingInfoUpdateV2](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentTrackingInfoUpdateV2)
 * mutation.
 *
 * [Learn about managing fulfillment orders as a fulfillment service](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments).
 *
 * ## API access scopes
 *
 * Fulfillment orders are governed by the following API access scopes:
 *
 * * The `read_merchant_managed_fulfillment_orders` and
 *   `write_merchant_managed_fulfillment_orders` access scopes
 *   grant access to fulfillment orders assigned to merchant-managed locations.
 * * The `read_assigned_fulfillment_orders` and `write_assigned_fulfillment_orders`
 *   access scopes are intended for fulfillment services.
 *   These scopes grant access to fulfillment orders assigned to locations that are being managed
 *   by fulfillment services.
 * * The `read_third_party_fulfillment_orders` and `write_third_party_fulfillment_orders`
 *   access scopes grant access to fulfillment orders
 *   assigned to locations managed by other fulfillment services.
 *
 * ### Fulfillment service app access scopes
 *
 * Usually, **fulfillment services** have the `write_assigned_fulfillment_orders` access scope
 * and don't have the `*_third_party_fulfillment_orders`
 * or `*_merchant_managed_fulfillment_orders` access scopes.
 * The app will only have access to the fulfillment orders assigned to their location
 * (or multiple locations if the app registers multiple fulfillment services on the shop).
 * The app will not have access to fulfillment orders assigned to merchant-managed locations
 * or locations owned by other fulfillment service apps.
 *
 * ### Order management app access scopes
 *
 * **Order management apps** will usually request `write_merchant_managed_fulfillment_orders` and
 * `write_third_party_fulfillment_orders` access scopes. This will allow them to manage all fulfillment orders
 * on behalf of a merchant.
 *
 * If an app combines the functions of an order management app and a fulfillment service,
 * then the app should request all
 * access scopes to manage all assigned and all unassigned fulfillment orders.
 *
 * ## Notifications about fulfillment orders
 *
 * Fulfillment services are required to
 * [register](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)
 * a self-hosted callback URL which has a number of uses. One of these uses is that this callback URL will be notified
 * whenever a merchant submits a fulfillment or cancellation request.
 *
 * Both merchants and apps can
 * [subscribe](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#webhooks)
 * to the
 * [fulfillment order webhooks](https://shopify.dev/api/admin-graphql/latest/enums/WebhookSubscriptionTopic#value-fulfillmentorderscancellationrequestaccepted)
 * to be notified whenever fulfillment order related domain events occur.
 *
 * [Learn about fulfillment workflows](https://shopify.dev/apps/fulfillment).
 */
export type Shopify_FulfillmentOrderLineItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * The FulfillmentOrder object represents either an item or a group of items in an
 * [Order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
 * that are expected to be fulfilled from the same location.
 * There can be more than one fulfillment order for an
 * [order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
 * at a given location.
 *
 * {{ '/api/reference/fulfillment_order_relationships.png' | image }}
 *
 * Fulfillment orders represent the work which is intended to be done in relation to an order.
 * When fulfillment has started for one or more line items, a
 * [Fulfillment](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment)
 * is created by a merchant or third party to represent the ongoing or completed work of fulfillment.
 *
 * [See below for more details on creating fulfillments](#the-lifecycle-of-a-fulfillment-order-at-a-location-which-is-managed-by-a-fulfillment-service).
 *
 * > Note:
 * > Shopify creates fulfillment orders automatically when an order is created.
 * > It is not possible to manually create fulfillment orders.
 * >
 * > [See below for more details on the lifecycle of a fulfillment order](#the-lifecycle-of-a-fulfillment-order).
 *
 * ## Retrieving fulfillment orders
 *
 * ### Fulfillment orders from an order
 *
 * All fulfillment orders related to a given order can be retrieved with the
 * [Order.fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Order#connection-order-fulfillmentorders)
 * connection.
 *
 * [API access scopes](#api-access-scopes)
 * govern which fulfillments orders are returned to clients.
 * An API client will only receive a subset of the fulfillment orders which belong to an order
 * if they don't have the necessary access scopes to view all of the fulfillment orders.
 *
 * ### Fulfillment orders assigned to the app for fulfillment
 *
 * Fulfillment service apps can retrieve the fulfillment orders which have been assigned to their locations with the
 * [Shop.assignedFulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Shop#connection-shop-assignedfulfillmentorders)
 * connection.
 * Use the `assignmentStatus` argument to control whether all assigned fulfillment orders
 * should be returned or only those where a merchant has sent a
 * [fulfillment request](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderMerchantRequest)
 * and it has yet to be responded to.
 *
 * The API client must be granted the `read_assigned_fulfillment_orders` access scope to access
 * the assigned fulfillment orders.
 *
 * ### All fulfillment orders
 *
 * Apps can retrieve all fulfillment orders with the
 * [fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/queries/fulfillmentOrders)
 * query. This query returns all assigned, merchant-managed, and third-party fulfillment orders on the shop,
 * which are accessible to the app according to the
 * [fulfillment order access scopes](#api-access-scopes) it was granted with.
 *
 * ## The lifecycle of a fulfillment order
 *
 * ### Fulfillment Order Creation
 *
 * After an order is created, a background worker performs the order routing process which determines
 * which locations will be responsible for fulfilling the purchased items.
 * Once the order routing process is complete, one or more fulfillment orders will be created
 * and assigned to these locations. It is not possible to manually create fulfillment orders.
 *
 * Once a fulfillment order has been created, it will have one of two different lifecycles depending on
 * the type of location which the fulfillment order is assigned to.
 *
 * ### The lifecycle of a fulfillment order at a merchant managed location
 *
 * Fulfillment orders are completed by creating
 * [fulfillments](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment).
 * Fulfillments represents the work done.
 *
 * For digital products a merchant or an order management app would create a fulfilment once the digital asset
 * has been provisioned.
 * For example, in the case of a digital gift card, a merchant would to do this once
 * the gift card has been activated - before the email has been shipped.
 *
 * On the other hand, for a traditional shipped order,
 * a merchant or an order management app would create a fulfillment after picking and packing the items relating
 * to a fulfillment order, but before the courier has collected the goods.
 *
 * [Learn about managing fulfillment orders as an order management app](https://shopify.dev/apps/fulfillment/order-management-apps/manage-fulfillments).
 *
 * ### The lifecycle of a fulfillment order at a location which is managed by a fulfillment service
 *
 * For fulfillment orders which are assigned to a location that is managed by a fulfillment service,
 * a merchant or an Order Management App can
 * [send a fulfillment request](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitFulfillmentRequest)
 * to the fulfillment service which operates the location to request that they fulfill the associated items.
 * A fulfillment service has the option to
 * [accept](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderAcceptFulfillmentRequest)
 * or [reject](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderRejectFulfillmentRequest)
 * this fulfillment request.
 *
 * Once the fulfillment service has accepted the request, the request can no longer be cancelled by the merchant
 * or order management app and instead a
 * [cancellation request must be submitted](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitCancellationRequest)
 * to the fulfillment service.
 *
 * Once a fulfillment service accepts a fulfillment request,
 * then after they are ready to pack items and send them for delivery, they create fulfillments with the
 * [fulfillmentCreateV2](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentCreateV2)
 * mutation.
 * They can provide tracking information right away or create fulfillments without it and then
 * update the tracking information for fulfillments with the
 * [fulfillmentTrackingInfoUpdateV2](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentTrackingInfoUpdateV2)
 * mutation.
 *
 * [Learn about managing fulfillment orders as a fulfillment service](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments).
 *
 * ## API access scopes
 *
 * Fulfillment orders are governed by the following API access scopes:
 *
 * * The `read_merchant_managed_fulfillment_orders` and
 *   `write_merchant_managed_fulfillment_orders` access scopes
 *   grant access to fulfillment orders assigned to merchant-managed locations.
 * * The `read_assigned_fulfillment_orders` and `write_assigned_fulfillment_orders`
 *   access scopes are intended for fulfillment services.
 *   These scopes grant access to fulfillment orders assigned to locations that are being managed
 *   by fulfillment services.
 * * The `read_third_party_fulfillment_orders` and `write_third_party_fulfillment_orders`
 *   access scopes grant access to fulfillment orders
 *   assigned to locations managed by other fulfillment services.
 *
 * ### Fulfillment service app access scopes
 *
 * Usually, **fulfillment services** have the `write_assigned_fulfillment_orders` access scope
 * and don't have the `*_third_party_fulfillment_orders`
 * or `*_merchant_managed_fulfillment_orders` access scopes.
 * The app will only have access to the fulfillment orders assigned to their location
 * (or multiple locations if the app registers multiple fulfillment services on the shop).
 * The app will not have access to fulfillment orders assigned to merchant-managed locations
 * or locations owned by other fulfillment service apps.
 *
 * ### Order management app access scopes
 *
 * **Order management apps** will usually request `write_merchant_managed_fulfillment_orders` and
 * `write_third_party_fulfillment_orders` access scopes. This will allow them to manage all fulfillment orders
 * on behalf of a merchant.
 *
 * If an app combines the functions of an order management app and a fulfillment service,
 * then the app should request all
 * access scopes to manage all assigned and all unassigned fulfillment orders.
 *
 * ## Notifications about fulfillment orders
 *
 * Fulfillment services are required to
 * [register](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)
 * a self-hosted callback URL which has a number of uses. One of these uses is that this callback URL will be notified
 * whenever a merchant submits a fulfillment or cancellation request.
 *
 * Both merchants and apps can
 * [subscribe](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#webhooks)
 * to the
 * [fulfillment order webhooks](https://shopify.dev/api/admin-graphql/latest/enums/WebhookSubscriptionTopic#value-fulfillmentorderscancellationrequestaccepted)
 * to be notified whenever fulfillment order related domain events occur.
 *
 * [Learn about fulfillment workflows](https://shopify.dev/apps/fulfillment).
 */
export type Shopify_FulfillmentOrderLocationsForMoveArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  lineItemIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  locationIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * The FulfillmentOrder object represents either an item or a group of items in an
 * [Order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
 * that are expected to be fulfilled from the same location.
 * There can be more than one fulfillment order for an
 * [order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
 * at a given location.
 *
 * {{ '/api/reference/fulfillment_order_relationships.png' | image }}
 *
 * Fulfillment orders represent the work which is intended to be done in relation to an order.
 * When fulfillment has started for one or more line items, a
 * [Fulfillment](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment)
 * is created by a merchant or third party to represent the ongoing or completed work of fulfillment.
 *
 * [See below for more details on creating fulfillments](#the-lifecycle-of-a-fulfillment-order-at-a-location-which-is-managed-by-a-fulfillment-service).
 *
 * > Note:
 * > Shopify creates fulfillment orders automatically when an order is created.
 * > It is not possible to manually create fulfillment orders.
 * >
 * > [See below for more details on the lifecycle of a fulfillment order](#the-lifecycle-of-a-fulfillment-order).
 *
 * ## Retrieving fulfillment orders
 *
 * ### Fulfillment orders from an order
 *
 * All fulfillment orders related to a given order can be retrieved with the
 * [Order.fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Order#connection-order-fulfillmentorders)
 * connection.
 *
 * [API access scopes](#api-access-scopes)
 * govern which fulfillments orders are returned to clients.
 * An API client will only receive a subset of the fulfillment orders which belong to an order
 * if they don't have the necessary access scopes to view all of the fulfillment orders.
 *
 * ### Fulfillment orders assigned to the app for fulfillment
 *
 * Fulfillment service apps can retrieve the fulfillment orders which have been assigned to their locations with the
 * [Shop.assignedFulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Shop#connection-shop-assignedfulfillmentorders)
 * connection.
 * Use the `assignmentStatus` argument to control whether all assigned fulfillment orders
 * should be returned or only those where a merchant has sent a
 * [fulfillment request](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderMerchantRequest)
 * and it has yet to be responded to.
 *
 * The API client must be granted the `read_assigned_fulfillment_orders` access scope to access
 * the assigned fulfillment orders.
 *
 * ### All fulfillment orders
 *
 * Apps can retrieve all fulfillment orders with the
 * [fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/queries/fulfillmentOrders)
 * query. This query returns all assigned, merchant-managed, and third-party fulfillment orders on the shop,
 * which are accessible to the app according to the
 * [fulfillment order access scopes](#api-access-scopes) it was granted with.
 *
 * ## The lifecycle of a fulfillment order
 *
 * ### Fulfillment Order Creation
 *
 * After an order is created, a background worker performs the order routing process which determines
 * which locations will be responsible for fulfilling the purchased items.
 * Once the order routing process is complete, one or more fulfillment orders will be created
 * and assigned to these locations. It is not possible to manually create fulfillment orders.
 *
 * Once a fulfillment order has been created, it will have one of two different lifecycles depending on
 * the type of location which the fulfillment order is assigned to.
 *
 * ### The lifecycle of a fulfillment order at a merchant managed location
 *
 * Fulfillment orders are completed by creating
 * [fulfillments](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment).
 * Fulfillments represents the work done.
 *
 * For digital products a merchant or an order management app would create a fulfilment once the digital asset
 * has been provisioned.
 * For example, in the case of a digital gift card, a merchant would to do this once
 * the gift card has been activated - before the email has been shipped.
 *
 * On the other hand, for a traditional shipped order,
 * a merchant or an order management app would create a fulfillment after picking and packing the items relating
 * to a fulfillment order, but before the courier has collected the goods.
 *
 * [Learn about managing fulfillment orders as an order management app](https://shopify.dev/apps/fulfillment/order-management-apps/manage-fulfillments).
 *
 * ### The lifecycle of a fulfillment order at a location which is managed by a fulfillment service
 *
 * For fulfillment orders which are assigned to a location that is managed by a fulfillment service,
 * a merchant or an Order Management App can
 * [send a fulfillment request](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitFulfillmentRequest)
 * to the fulfillment service which operates the location to request that they fulfill the associated items.
 * A fulfillment service has the option to
 * [accept](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderAcceptFulfillmentRequest)
 * or [reject](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderRejectFulfillmentRequest)
 * this fulfillment request.
 *
 * Once the fulfillment service has accepted the request, the request can no longer be cancelled by the merchant
 * or order management app and instead a
 * [cancellation request must be submitted](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitCancellationRequest)
 * to the fulfillment service.
 *
 * Once a fulfillment service accepts a fulfillment request,
 * then after they are ready to pack items and send them for delivery, they create fulfillments with the
 * [fulfillmentCreateV2](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentCreateV2)
 * mutation.
 * They can provide tracking information right away or create fulfillments without it and then
 * update the tracking information for fulfillments with the
 * [fulfillmentTrackingInfoUpdateV2](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentTrackingInfoUpdateV2)
 * mutation.
 *
 * [Learn about managing fulfillment orders as a fulfillment service](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments).
 *
 * ## API access scopes
 *
 * Fulfillment orders are governed by the following API access scopes:
 *
 * * The `read_merchant_managed_fulfillment_orders` and
 *   `write_merchant_managed_fulfillment_orders` access scopes
 *   grant access to fulfillment orders assigned to merchant-managed locations.
 * * The `read_assigned_fulfillment_orders` and `write_assigned_fulfillment_orders`
 *   access scopes are intended for fulfillment services.
 *   These scopes grant access to fulfillment orders assigned to locations that are being managed
 *   by fulfillment services.
 * * The `read_third_party_fulfillment_orders` and `write_third_party_fulfillment_orders`
 *   access scopes grant access to fulfillment orders
 *   assigned to locations managed by other fulfillment services.
 *
 * ### Fulfillment service app access scopes
 *
 * Usually, **fulfillment services** have the `write_assigned_fulfillment_orders` access scope
 * and don't have the `*_third_party_fulfillment_orders`
 * or `*_merchant_managed_fulfillment_orders` access scopes.
 * The app will only have access to the fulfillment orders assigned to their location
 * (or multiple locations if the app registers multiple fulfillment services on the shop).
 * The app will not have access to fulfillment orders assigned to merchant-managed locations
 * or locations owned by other fulfillment service apps.
 *
 * ### Order management app access scopes
 *
 * **Order management apps** will usually request `write_merchant_managed_fulfillment_orders` and
 * `write_third_party_fulfillment_orders` access scopes. This will allow them to manage all fulfillment orders
 * on behalf of a merchant.
 *
 * If an app combines the functions of an order management app and a fulfillment service,
 * then the app should request all
 * access scopes to manage all assigned and all unassigned fulfillment orders.
 *
 * ## Notifications about fulfillment orders
 *
 * Fulfillment services are required to
 * [register](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)
 * a self-hosted callback URL which has a number of uses. One of these uses is that this callback URL will be notified
 * whenever a merchant submits a fulfillment or cancellation request.
 *
 * Both merchants and apps can
 * [subscribe](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#webhooks)
 * to the
 * [fulfillment order webhooks](https://shopify.dev/api/admin-graphql/latest/enums/WebhookSubscriptionTopic#value-fulfillmentorderscancellationrequestaccepted)
 * to be notified whenever fulfillment order related domain events occur.
 *
 * [Learn about fulfillment workflows](https://shopify.dev/apps/fulfillment).
 */
export type Shopify_FulfillmentOrderMerchantRequestsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  kind?: InputMaybe<Shopify_FulfillmentOrderMerchantRequestKind>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The actions that can be taken on a fulfillment order. */
export enum Shopify_FulfillmentOrderAction {
  /** Cancels a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderCancel`. */
  CancelFulfillmentOrder = 'CANCEL_FULFILLMENT_ORDER',
  /** Creates a fulfillment for selected line items in the fulfillment order. The corresponding mutation for this action is `fulfillmentCreateV2`. */
  CreateFulfillment = 'CREATE_FULFILLMENT',
  /** Opens an external URL to initiate the fulfillment process outside Shopify. This action should be paired with `FulfillmentOrderSupportedAction.externalUrl`. */
  External = 'EXTERNAL',
  /** Applies a fulfillment hold on an open fulfillment order. The corresponding mutation for this action is `fulfillmentOrderHold`. */
  Hold = 'HOLD',
  /** Marks the fulfillment order as open. The corresponding mutation for this action is `fulfillmentOrderOpen`. */
  MarkAsOpen = 'MARK_AS_OPEN',
  /** Merges a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderMerge`. */
  Merge = 'MERGE',
  /** Moves a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderMove`. */
  Move = 'MOVE',
  /** Releases the fulfillment hold on the fulfillment order. The corresponding mutation for this action is `fulfillmentOrderReleaseHold`. */
  ReleaseHold = 'RELEASE_HOLD',
  /** Sends a cancellation request to the fulfillment service of a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderSubmitCancellationRequest`. */
  RequestCancellation = 'REQUEST_CANCELLATION',
  /** Sends a request for fulfilling selected line items in a fulfillment order to a fulfillment service. The corresponding mutation for this action is `fulfillmentOrderSubmitFulfillmentRequest`. */
  RequestFulfillment = 'REQUEST_FULFILLMENT',
  /** Splits a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderSplit`. */
  Split = 'SPLIT'
}

/**
 * The fulfillment order's assigned location. This is the location where the fulfillment is expected to happen.
 *
 *  The fulfillment order's assigned location might change in the following cases:
 *
 *   - The fulfillment order has been entirely moved to a new location. For example, the [fulfillmentOrderMove](
 *     https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
 *     ) mutation has been called, and you see the original fulfillment order in the [movedFulfillmentOrder](
 *     https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove#field-fulfillmentordermovepayload-movedfulfillmentorder
 *     ) field within the mutation's response.
 *
 *   - Work on the fulfillment order has not yet begun, which means that the fulfillment order has the
 *       [OPEN](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-open),
 *       [SCHEDULED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-scheduled), or
 *       [ON_HOLD](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-onhold)
 *       status, and the shop's location properties might be undergoing edits (for example, in the Shopify admin).
 *
 * If the [fulfillmentOrderMove](
 * https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
 * ) mutation has moved the fulfillment order's line items to a new location,
 * but hasn't moved the fulfillment order instance itself, then the original fulfillment order's assigned location
 * doesn't change.
 * This happens if the fulfillment order is being split during the move, or if all line items can be moved
 * to an existing fulfillment order at a new location.
 *
 * Once the fulfillment order has been taken into work or canceled,
 * which means that the fulfillment order has the
 * [IN_PROGRESS](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-inprogress),
 * [CLOSED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-closed),
 * [CANCELLED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-cancelled), or
 * [INCOMPLETE](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-incomplete)
 * status, `FulfillmentOrderAssignedLocation` acts as a snapshot of the shop's location content.
 * Up-to-date shop's location data may be queried through [location](
 *   https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderAssignedLocation#field-fulfillmentorderassignedlocation-location
 * ) connection.
 */
export type Shopify_FulfillmentOrderAssignedLocation = {
  __typename?: 'Shopify_FulfillmentOrderAssignedLocation';
  /** The first line of the address for the location. */
  address1?: Maybe<Scalars['String']['output']>;
  /** The second line of the address for the location. */
  address2?: Maybe<Scalars['String']['output']>;
  /** The city of the location. */
  city?: Maybe<Scalars['String']['output']>;
  /** The two-letter country code of the location. */
  countryCode: Shopify_CountryCode;
  /**
   * The location where the fulfillment is expected to happen. This value might be different from
   * `FulfillmentOrderAssignedLocation` if the location's attributes were updated
   * after the fulfillment order was taken into work of canceled.
   */
  location?: Maybe<Shopify_Location>;
  /** The name of the location. */
  name: Scalars['String']['output'];
  /** The phone number of the location. */
  phone?: Maybe<Scalars['String']['output']>;
  /** The province of the location. */
  province?: Maybe<Scalars['String']['output']>;
  /** The ZIP code of the location. */
  zip?: Maybe<Scalars['String']['output']>;
};

/** The assigment status to be used to filter fulfillment orders. */
export enum Shopify_FulfillmentOrderAssignmentStatus {
  /**
   * Fulfillment orders for which the merchant has requested cancellation of
   * the previously accepted fulfillment request.
   */
  CancellationRequested = 'CANCELLATION_REQUESTED',
  /**
   * Fulfillment orders for which the merchant's fulfillment request has been accepted.
   * Any number of fulfillments can be created on these fulfillment orders
   * to completely fulfill the requested items.
   */
  FulfillmentAccepted = 'FULFILLMENT_ACCEPTED',
  /** Fulfillment orders for which the merchant has requested fulfillment. */
  FulfillmentRequested = 'FULFILLMENT_REQUESTED',
  /** Fulfillment orders for which the merchant hasn't yet requested fulfillment. */
  FulfillmentUnsubmitted = 'FULFILLMENT_UNSUBMITTED'
}

/** An auto-generated type for paginating through multiple FulfillmentOrders. */
export type Shopify_FulfillmentOrderConnection = {
  __typename?: 'Shopify_FulfillmentOrderConnection';
  /** A list of edges. */
  edges: Array<Shopify_FulfillmentOrderEdge>;
  /** A list of the nodes contained in FulfillmentOrderEdge. */
  nodes: Array<Shopify_FulfillmentOrder>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** Represents the destination where the items should be sent upon fulfillment. */
export type Shopify_FulfillmentOrderDestination = Shopify_Node & {
  __typename?: 'Shopify_FulfillmentOrderDestination';
  /** The first line of the address of the destination. */
  address1?: Maybe<Scalars['String']['output']>;
  /** The second line of the address of the destination. */
  address2?: Maybe<Scalars['String']['output']>;
  /** The city of the destination. */
  city?: Maybe<Scalars['String']['output']>;
  /** The company of the destination. */
  company?: Maybe<Scalars['String']['output']>;
  /** The two-letter country code of the destination. */
  countryCode?: Maybe<Shopify_CountryCode>;
  /** The email of the customer at the destination. */
  email?: Maybe<Scalars['String']['output']>;
  /** The first name of the customer at the destination. */
  firstName?: Maybe<Scalars['String']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The last name of the customer at the destination. */
  lastName?: Maybe<Scalars['String']['output']>;
  /** The phone number of the customer at the destination. */
  phone?: Maybe<Scalars['String']['output']>;
  /** The province of the destination. */
  province?: Maybe<Scalars['String']['output']>;
  /** The ZIP code of the destination. */
  zip?: Maybe<Scalars['String']['output']>;
};

/** An auto-generated type which holds one FulfillmentOrder and a cursor during pagination. */
export type Shopify_FulfillmentOrderEdge = {
  __typename?: 'Shopify_FulfillmentOrderEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of FulfillmentOrderEdge. */
  node: Shopify_FulfillmentOrder;
};

/** An error that occurs during the execution of `FulfillmentOrderHold`. */
export type Shopify_FulfillmentOrderHoldUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_FulfillmentOrderHoldUserError';
  /** The error code. */
  code?: Maybe<Shopify_FulfillmentOrderHoldUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `FulfillmentOrderHoldUserError`. */
export enum Shopify_FulfillmentOrderHoldUserErrorCode {
  /** The fulfillment order could not be found. */
  FulfillmentOrderNotFound = 'FULFILLMENT_ORDER_NOT_FOUND',
  /** The fulfillment order line item quantity must be greater than 0. */
  GreaterThanZero = 'GREATER_THAN_ZERO',
  /** The fulfillment order line item quantity is invalid. */
  InvalidLineItemQuantity = 'INVALID_LINE_ITEM_QUANTITY',
  /** The input value is already taken. */
  Taken = 'TAKEN'
}

/** The international duties relevant to a fulfillment order. */
export type Shopify_FulfillmentOrderInternationalDuties = {
  __typename?: 'Shopify_FulfillmentOrderInternationalDuties';
  /** The method of duties payment. Example values: `DDP`, `DAP`. */
  incoterm: Scalars['String']['output'];
};

/** Associates an order line item with quantities requiring fulfillment from the respective fulfillment order. */
export type Shopify_FulfillmentOrderLineItem = Shopify_Node & {
  __typename?: 'Shopify_FulfillmentOrderLineItem';
  /** The financial summary for the Fulfillment Order's Line Items. */
  financialSummaries: Array<Shopify_FulfillmentOrderLineItemFinancialSummary>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The image associated to the line item's variant. */
  image?: Maybe<Shopify_Image>;
  /** The ID of the inventory item. */
  inventoryItemId?: Maybe<Scalars['ID']['output']>;
  /**
   * The associated order line item.
   * @deprecated           As of API version 2023-01, this field has been deprecated. The order line item associated with a `FulfillmentOrderLineItem`
   *           shouldn't be used to determine what to fulfill. Use the `FulfillmentOrderLineItem` and `FulfillmentOrder` objects
   *           instead. An order `LineItem` represents a single line item on an order, but it doesn't represent what should be fulfilled.
   *
   */
  lineItem: Shopify_LineItem;
  /**
   * The variant unit price without discounts applied, in shop and presentment currencies.
   * @deprecated Use `financialSummaries` instead.
   */
  originalUnitPriceSet: Shopify_MoneyBag;
  /** The title of the product. */
  productTitle: Scalars['String']['output'];
  /** The number of units remaining to be fulfilled. */
  remainingQuantity: Scalars['Int']['output'];
  /** Whether physical shipping is required for the variant. */
  requiresShipping: Scalars['Boolean']['output'];
  /** The variant SKU number. */
  sku?: Maybe<Scalars['String']['output']>;
  /** The total number of units to be fulfilled. */
  totalQuantity: Scalars['Int']['output'];
  /** The name of the variant. */
  variantTitle?: Maybe<Scalars['String']['output']>;
  /** The name of the vendor who made the variant. */
  vendor?: Maybe<Scalars['String']['output']>;
  /** Warning messages for a fulfillment order line item. */
  warnings: Array<Shopify_FulfillmentOrderLineItemWarning>;
  /** The weight of a line item unit. */
  weight?: Maybe<Shopify_Weight>;
};

/** An auto-generated type for paginating through multiple FulfillmentOrderLineItems. */
export type Shopify_FulfillmentOrderLineItemConnection = {
  __typename?: 'Shopify_FulfillmentOrderLineItemConnection';
  /** A list of edges. */
  edges: Array<Shopify_FulfillmentOrderLineItemEdge>;
  /** A list of the nodes contained in FulfillmentOrderLineItemEdge. */
  nodes: Array<Shopify_FulfillmentOrderLineItem>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one FulfillmentOrderLineItem and a cursor during pagination. */
export type Shopify_FulfillmentOrderLineItemEdge = {
  __typename?: 'Shopify_FulfillmentOrderLineItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of FulfillmentOrderLineItemEdge. */
  node: Shopify_FulfillmentOrderLineItem;
};

/** The financial details of a fulfillment order line item. */
export type Shopify_FulfillmentOrderLineItemFinancialSummary = {
  __typename?: 'Shopify_FulfillmentOrderLineItemFinancialSummary';
  /** The approximate split price of a line item unit, in shop and presentment currencies. This value doesn't include discounts applied to the entire order.For the full picture of applied discounts, see discountAllocations. */
  approximateDiscountedUnitPriceSet: Shopify_MoneyBag;
  /** The discounts that have been allocated onto the line item by discount applications, not including order edits and refunds. */
  discountAllocations: Array<Shopify_FinancialSummaryDiscountAllocation>;
  /** The variant unit price without discounts applied, in shop and presentment currencies. */
  originalUnitPriceSet: Shopify_MoneyBag;
  /** Number of line items that this financial summary applies to. */
  quantity: Scalars['Int']['output'];
};

/** A fulfillment order line item warning. For example, a warning about why a fulfillment request was rejected. */
export type Shopify_FulfillmentOrderLineItemWarning = {
  __typename?: 'Shopify_FulfillmentOrderLineItemWarning';
  /** The description of warning. */
  description?: Maybe<Scalars['String']['output']>;
  /** The title of warning. */
  title?: Maybe<Scalars['String']['output']>;
};

/** An error that occurs during the execution of `FulfillmentOrderLineItemsPreparedForPickup`. */
export type Shopify_FulfillmentOrderLineItemsPreparedForPickupUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_FulfillmentOrderLineItemsPreparedForPickupUserError';
  /** The error code. */
  code?: Maybe<Shopify_FulfillmentOrderLineItemsPreparedForPickupUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `FulfillmentOrderLineItemsPreparedForPickupUserError`. */
export enum Shopify_FulfillmentOrderLineItemsPreparedForPickupUserErrorCode {
  /** Invalid fulfillment order ID provided. */
  FulfillmentOrderInvalid = 'FULFILLMENT_ORDER_INVALID',
  /** The fulfillment order does not have any line items that can be prepared. */
  NoLineItemsToPrepareForFulfillmentOrder = 'NO_LINE_ITEMS_TO_PREPARE_FOR_FULFILLMENT_ORDER',
  /** Unable to prepare quantity. */
  UnableToPrepareQuantity = 'UNABLE_TO_PREPARE_QUANTITY'
}

/** A location that a fulfillment order can potentially move to. */
export type Shopify_FulfillmentOrderLocationForMove = {
  __typename?: 'Shopify_FulfillmentOrderLocationForMove';
  /** Fulfillment order line items that can be moved from their current location to the given location. */
  availableLineItems: Shopify_FulfillmentOrderLineItemConnection;
  /**
   * Total number of fulfillment order line items that can be moved from their current assigned location to the
   * given location.
   */
  availableLineItemsCount?: Maybe<Shopify_Count>;
  /** The location being considered as the fulfillment order's new assigned location. */
  location: Shopify_Location;
  /**
   * A human-readable string with the reason why the fulfillment order, or some of its line items, can't be
   * moved to the location.
   */
  message?: Maybe<Scalars['String']['output']>;
  /** Whether the fulfillment order can be moved to the location. */
  movable: Scalars['Boolean']['output'];
  /** Fulfillment order line items that cannot be moved from their current location to the given location. */
  unavailableLineItems: Shopify_FulfillmentOrderLineItemConnection;
  /**
   * Total number of fulfillment order line items that can't be moved from their current assigned location to the
   * given location.
   */
  unavailableLineItemsCount?: Maybe<Shopify_Count>;
};


/** A location that a fulfillment order can potentially move to. */
export type Shopify_FulfillmentOrderLocationForMoveAvailableLineItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** A location that a fulfillment order can potentially move to. */
export type Shopify_FulfillmentOrderLocationForMoveUnavailableLineItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** An auto-generated type for paginating through multiple FulfillmentOrderLocationForMoves. */
export type Shopify_FulfillmentOrderLocationForMoveConnection = {
  __typename?: 'Shopify_FulfillmentOrderLocationForMoveConnection';
  /** A list of edges. */
  edges: Array<Shopify_FulfillmentOrderLocationForMoveEdge>;
  /** A list of the nodes contained in FulfillmentOrderLocationForMoveEdge. */
  nodes: Array<Shopify_FulfillmentOrderLocationForMove>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one FulfillmentOrderLocationForMove and a cursor during pagination. */
export type Shopify_FulfillmentOrderLocationForMoveEdge = {
  __typename?: 'Shopify_FulfillmentOrderLocationForMoveEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of FulfillmentOrderLocationForMoveEdge. */
  node: Shopify_FulfillmentOrderLocationForMove;
};

/**
 * A request made by the merchant or an order management app to a fulfillment service
 * for a fulfillment order.
 */
export type Shopify_FulfillmentOrderMerchantRequest = Shopify_Node & {
  __typename?: 'Shopify_FulfillmentOrderMerchantRequest';
  /** The fulfillment order associated with the merchant request. */
  fulfillmentOrder: Shopify_FulfillmentOrder;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The kind of request made. */
  kind: Shopify_FulfillmentOrderMerchantRequestKind;
  /** The optional message that the merchant included in the request. */
  message?: Maybe<Scalars['String']['output']>;
  /**
   * Additional options requested by the merchant. These depend on the `kind` of the request.
   * For example, for a `FULFILLMENT_REQUEST`, one option is `notify_customer`, which indicates whether the
   * merchant intends to notify the customer upon fulfillment. The fulfillment service can then set
   * `notifyCustomer` when making calls to `FulfillmentCreateV2`.
   */
  requestOptions?: Maybe<Scalars['Shopify_JSON']['output']>;
  /** The response from the fulfillment service. */
  responseData?: Maybe<Scalars['Shopify_JSON']['output']>;
  /** The timestamp when the request was made. */
  sentAt: Scalars['DateTime']['output'];
};

/** An auto-generated type for paginating through multiple FulfillmentOrderMerchantRequests. */
export type Shopify_FulfillmentOrderMerchantRequestConnection = {
  __typename?: 'Shopify_FulfillmentOrderMerchantRequestConnection';
  /** A list of edges. */
  edges: Array<Shopify_FulfillmentOrderMerchantRequestEdge>;
  /** A list of the nodes contained in FulfillmentOrderMerchantRequestEdge. */
  nodes: Array<Shopify_FulfillmentOrderMerchantRequest>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one FulfillmentOrderMerchantRequest and a cursor during pagination. */
export type Shopify_FulfillmentOrderMerchantRequestEdge = {
  __typename?: 'Shopify_FulfillmentOrderMerchantRequestEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of FulfillmentOrderMerchantRequestEdge. */
  node: Shopify_FulfillmentOrderMerchantRequest;
};

/** The kinds of request merchants can make to a fulfillment service. */
export enum Shopify_FulfillmentOrderMerchantRequestKind {
  /** The merchant requests cancellation of an `IN_PROGRESS` fulfillment order. */
  CancellationRequest = 'CANCELLATION_REQUEST',
  /** The merchant requests fulfillment for an `OPEN` fulfillment order. */
  FulfillmentRequest = 'FULFILLMENT_REQUEST'
}

/** An error that occurs during the execution of `FulfillmentOrderMerge`. */
export type Shopify_FulfillmentOrderMergeUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_FulfillmentOrderMergeUserError';
  /** The error code. */
  code?: Maybe<Shopify_FulfillmentOrderMergeUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `FulfillmentOrderMergeUserError`. */
export enum Shopify_FulfillmentOrderMergeUserErrorCode {
  /** The fulfillment order could not be found. */
  FulfillmentOrderNotFound = 'FULFILLMENT_ORDER_NOT_FOUND',
  /** The fulfillment order line item quantity must be greater than 0. */
  GreaterThan = 'GREATER_THAN',
  /** The fulfillment order line item quantity is invalid. */
  InvalidLineItemQuantity = 'INVALID_LINE_ITEM_QUANTITY'
}

/** An error that occurs during the execution of `FulfillmentOrderReleaseHold`. */
export type Shopify_FulfillmentOrderReleaseHoldUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_FulfillmentOrderReleaseHoldUserError';
  /** The error code. */
  code?: Maybe<Shopify_FulfillmentOrderReleaseHoldUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `FulfillmentOrderReleaseHoldUserError`. */
export enum Shopify_FulfillmentOrderReleaseHoldUserErrorCode {
  /** The fulfillment order wasn't found. */
  FulfillmentOrderNotFound = 'FULFILLMENT_ORDER_NOT_FOUND',
  /** The fulfillment order line item quantity must be greater than 0. */
  GreaterThanZero = 'GREATER_THAN_ZERO',
  /** The fulfillment order line item quantity is invalid. */
  InvalidLineItemQuantity = 'INVALID_LINE_ITEM_QUANTITY'
}

/** The request status of a fulfillment order. */
export enum Shopify_FulfillmentOrderRequestStatus {
  /** The fulfillment service accepted the merchant's fulfillment request. */
  Accepted = 'ACCEPTED',
  /** The fulfillment service accepted the merchant's fulfillment cancellation request. */
  CancellationAccepted = 'CANCELLATION_ACCEPTED',
  /** The fulfillment service rejected the merchant's fulfillment cancellation request. */
  CancellationRejected = 'CANCELLATION_REJECTED',
  /** The merchant requested a cancellation of the fulfillment request for this fulfillment order. */
  CancellationRequested = 'CANCELLATION_REQUESTED',
  /** The fulfillment service closed the fulfillment order without completing it. */
  Closed = 'CLOSED',
  /** The fulfillment service rejected the merchant's fulfillment request. */
  Rejected = 'REJECTED',
  /** The merchant requested fulfillment for this fulfillment order. */
  Submitted = 'SUBMITTED',
  /**
   * The initial request status for the newly-created fulfillment orders. This is the only valid
   * request status for fulfillment orders that aren't assigned to a fulfillment service.
   */
  Unsubmitted = 'UNSUBMITTED'
}

/** An error that occurs during the execution of `FulfillmentOrderReschedule`. */
export type Shopify_FulfillmentOrderRescheduleUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_FulfillmentOrderRescheduleUserError';
  /** The error code. */
  code?: Maybe<Shopify_FulfillmentOrderRescheduleUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `FulfillmentOrderRescheduleUserError`. */
export enum Shopify_FulfillmentOrderRescheduleUserErrorCode {
  /** Fulfillment order could not be found. */
  FulfillmentOrderNotFound = 'FULFILLMENT_ORDER_NOT_FOUND'
}

/** The set of valid sort keys for the FulfillmentOrder query. */
export enum Shopify_FulfillmentOrderSortKeys {
  /** Sort by the `id` value. */
  Id = 'ID',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE',
  /** Sort by the `updated_at` value. */
  UpdatedAt = 'UPDATED_AT'
}

/** An error that occurs during the execution of `FulfillmentOrderSplit`. */
export type Shopify_FulfillmentOrderSplitUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_FulfillmentOrderSplitUserError';
  /** The error code. */
  code?: Maybe<Shopify_FulfillmentOrderSplitUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `FulfillmentOrderSplitUserError`. */
export enum Shopify_FulfillmentOrderSplitUserErrorCode {
  /** The fulfillment order could not be found. */
  FulfillmentOrderNotFound = 'FULFILLMENT_ORDER_NOT_FOUND',
  /** The fulfillment order line item quantity must be greater than 0. */
  GreaterThan = 'GREATER_THAN',
  /** The fulfillment order line item quantity is invalid. */
  InvalidLineItemQuantity = 'INVALID_LINE_ITEM_QUANTITY',
  /** The fulfillment order must have at least one line item input to split. */
  NoLineItemsProvidedToSplit = 'NO_LINE_ITEMS_PROVIDED_TO_SPLIT'
}

/** The status of a fulfillment order. */
export enum Shopify_FulfillmentOrderStatus {
  /** The fulfillment order has been cancelled by the merchant. */
  Cancelled = 'CANCELLED',
  /** The fulfillment order has been completed and closed. */
  Closed = 'CLOSED',
  /** The fulfillment order cannot be completed as requested. */
  Incomplete = 'INCOMPLETE',
  /** The fulfillment order is being processed. */
  InProgress = 'IN_PROGRESS',
  /** The fulfillment order is on hold. The fulfillment process can't be initiated until the hold on the fulfillment order is released. */
  OnHold = 'ON_HOLD',
  /** The fulfillment order is ready for fulfillment. */
  Open = 'OPEN',
  /** The fulfillment order is deferred and will be ready for fulfillment after the date and time specified in `fulfill_at`. */
  Scheduled = 'SCHEDULED'
}

/** One of the actions that the fulfillment order supports in its current state. */
export type Shopify_FulfillmentOrderSupportedAction = {
  __typename?: 'Shopify_FulfillmentOrderSupportedAction';
  /** The action value. */
  action: Shopify_FulfillmentOrderAction;
  /**
   * The external URL to be used to initiate the fulfillment process outside Shopify.
   * Applicable only when the `action` value is `EXTERNAL`.
   */
  externalUrl?: Maybe<Scalars['Shopify_URL']['output']>;
};

/** An error that occurs during the execution of `FulfillmentOrdersReleaseHolds`. */
export type Shopify_FulfillmentOrdersReleaseHoldsUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_FulfillmentOrdersReleaseHoldsUserError';
  /** The error code. */
  code?: Maybe<Shopify_FulfillmentOrdersReleaseHoldsUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `FulfillmentOrdersReleaseHoldsUserError`. */
export enum Shopify_FulfillmentOrdersReleaseHoldsUserErrorCode {
  /** Failed to create release fulfillment order holds job. */
  FailedToCreateJob = 'FAILED_TO_CREATE_JOB'
}

/** An error that occurs during the execution of `FulfillmentOrdersSetFulfillmentDeadline`. */
export type Shopify_FulfillmentOrdersSetFulfillmentDeadlineUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_FulfillmentOrdersSetFulfillmentDeadlineUserError';
  /** The error code. */
  code?: Maybe<Shopify_FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `FulfillmentOrdersSetFulfillmentDeadlineUserError`. */
export enum Shopify_FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode {
  /** The fulfillment orders could not be found. */
  FulfillmentOrdersNotFound = 'FULFILLMENT_ORDERS_NOT_FOUND'
}

/** The address at which the fulfillment occurred. This object is intended for tax purposes, as a full address is required for tax providers to accurately calculate taxes. Typically this is the address of the warehouse or fulfillment center. To retrieve a fulfillment location's address, use the `assignedLocation` field on the [`FulfillmentOrder`](/docs/api/admin-graphql/latest/objects/FulfillmentOrder) object instead. */
export type Shopify_FulfillmentOriginAddress = {
  __typename?: 'Shopify_FulfillmentOriginAddress';
  /** The street address of the fulfillment location. */
  address1?: Maybe<Scalars['String']['output']>;
  /** The second line of the address. Typically the number of the apartment, suite, or unit. */
  address2?: Maybe<Scalars['String']['output']>;
  /** The city in which the fulfillment location is located. */
  city?: Maybe<Scalars['String']['output']>;
  /** The country code of the fulfillment location. */
  countryCode: Scalars['String']['output'];
  /** The province code of the fulfillment location. */
  provinceCode?: Maybe<Scalars['String']['output']>;
  /** The zip code of the fulfillment location. */
  zip?: Maybe<Scalars['String']['output']>;
};

/**
 * A **Fulfillment Service** is a third party warehouse that prepares and ships orders
 * on behalf of the store owner. Fulfillment services charge a fee to package and ship items
 * and update product inventory levels. Some well known fulfillment services with Shopify integrations
 * include: Amazon, Shipwire, and Rakuten. When an app registers a new `FulfillmentService` on a store,
 * Shopify automatically creates a `Location` that's associated to the fulfillment service.
 * To learn more about fulfillment services, refer to
 * [Manage fulfillments as a fulfillment service app](https://shopify.dev/apps/fulfillment/fulfillment-service-apps)
 * guide.
 *
 * ## Mutations
 *
 * You can work with the `FulfillmentService` object with the
 * [fulfillmentServiceCreate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceCreate),
 * [fulfillmentServiceUpdate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceUpdate),
 * and [fulfillmentServiceDelete](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceDelete)
 * mutations.
 *
 * ## Hosted endpoints
 *
 * Fulfillment service providers integrate with Shopify by providing Shopify with a set of hosted endpoints that
 * Shopify can query on certain conditions.
 * These endpoints must have a common prefix, and this prefix should be supplied in the `callbackUrl` parameter
 * in the
 * [fulfillmentServiceCreate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceCreate)
 * mutation.
 *
 * - Shopify sends POST requests to the `<callbackUrl>/fulfillment_order_notification` endpoint
 *   to notify the fulfillment service about fulfillment requests and fulfillment cancellation requests,
 *   if `fulfillment_orders_opt_in` is set to `true`.
 *
 *   [As of the 2022-07 API version](https://shopify.dev/changelog/legacy-fulfillment-api-deprecation),
 *   it's mandatory for a fulfillment service to follow a fulfillment order based workflow by
 *   having `fulfillment_orders_opt_in` set to `true`,
 *   hosting the `<callbackUrl>/fulfillment_order_notification` endpoint, and acting on fulfillment requests and cancellations.
 *
 *   For more information, refer to
 *   [Receive fulfillment requests and cancellations](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-2-receive-fulfillment-requests-and-cancellations).
 * - Shopify sends GET requests to the `<callbackUrl>/fetch_tracking_numbers` endpoint to retrieve tracking numbers for orders,
 *   if `trackingSupport` is set to `true`.
 *
 *   For more information, refer to
 *   [Enable tracking support](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-8-enable-tracking-support-optional).
 *
 *   Fulfillment services can also update tracking information with the
 *   [fulfillmentTrackingInfoUpdateV2](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentTrackingInfoUpdateV2) mutation,
 *   rather than waiting for Shopify to ask for tracking numbers.
 * - Shopify sends GET requests to the `<callbackUrl>/fetch_stock` endpoint to retrieve inventory levels,
 *   if `inventoryManagement` is set to `true`.
 *
 *   For more information, refer to
 *   [Sharing inventory levels with Shopify](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-9-share-inventory-levels-with-shopify-optional).
 *
 * To make sure you have everything set up correctly, you can test the `callbackUrl`-prefixed endpoints
 * in your development store.
 *
 * ## Resources and webhooks
 *
 * There are a variety of objects and webhooks that enable a fulfillment service to work.
 * To exchange fulfillment information with Shopify, fulfillment services use the
 * [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder),
 * [Fulfillment](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment) and
 * [Order](https://shopify.dev/api/admin-graphql/latest/objects/Order) objects and related mutations.
 * To act on fulfillment process events that happen on the Shopify side,
 * besides awaiting calls to `callbackUrl`-prefixed endpoints,
 * fulfillment services can subscribe to the
 * [fulfillment order](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#webhooks)
 * and [order](https://shopify.dev/api/admin-rest/latest/resources/webhook)
 * webhooks.
 */
export type Shopify_FulfillmentService = {
  __typename?: 'Shopify_FulfillmentService';
  /**
   * The callback URL that the fulfillment service has registered for requests. The following considerations apply:
   *
   * - Shopify queries the `<callbackUrl>/fetch_tracking_numbers` endpoint to retrieve tracking numbers
   *     for orders, if `trackingSupport` is set to `true`.
   * - Shopify queries the `<callbackUrl>/fetch_stock` endpoint to retrieve inventory levels,
   *     if `inventoryManagement` is set to `true`.
   * - Shopify uses the `<callbackUrl>/fulfillment_order_notification` endpoint to send
   *     [fulfillment and cancellation requests](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-2-receive-fulfillment-requests-and-cancellations),
   *     if the fulfillment service has opted in to the fulfillment order based workflow for managing fulfillments
   *     (`fulfillmentOrdersOptIn` is set to `true`).
   */
  callbackUrl?: Maybe<Scalars['Shopify_URL']['output']>;
  /**
   * Whether the fulfillment service uses the [fulfillment order based workflow](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments) for managing fulfillments.
   *
   * As the migration is now finished, the `fulfillmentOrdersOptIn` property is [deprecated](
   * https://shopify.dev/changelog/deprecation-of-the-fulfillmentservice-fulfillmentordersoptin-field)
   * and is always set to `true` on correctly functioning fulfillment services.
   * @deprecated Migration period ended. All correctly functioning fulfillment services have `fulfillmentOrdersOptIn` set to `true`.
   */
  fulfillmentOrdersOptIn: Scalars['Boolean']['output'];
  /** Human-readable unique identifier for this fulfillment service. */
  handle: Scalars['String']['output'];
  /** The ID of the fulfillment service. */
  id: Scalars['ID']['output'];
  /** Whether the fulfillment service tracks product inventory and provides updates to Shopify. */
  inventoryManagement: Scalars['Boolean']['output'];
  /** Location associated with the fulfillment service. */
  location?: Maybe<Shopify_Location>;
  /** Whether the fulfillment service can stock inventory alongside other locations. */
  permitsSkuSharing: Scalars['Boolean']['output'];
  /** Whether the fulfillment service supports local deliveries. */
  productBased: Scalars['Boolean']['output'];
  /** The name of the fulfillment service as seen by merchants. */
  serviceName: Scalars['String']['output'];
  /**
   * Shipping methods associated with the fulfillment service provider. Applies only to Fulfill By Amazon fulfillment service.
   * @deprecated The Fulfillment by Amazon feature will no longer be supported from March 30, 2023. To continue using Amazon fulfillment, merchants need to set up a Multi-Channel Fulfillment solution recommended by Amazon: https://help.shopify.com/manual/shipping/fulfillment-services/amazon#activate-fulfillment-by-amazon
   */
  shippingMethods: Array<Shopify_ShippingMethod>;
  /** Type associated with the fulfillment service. */
  type: Shopify_FulfillmentServiceType;
};

/** The type of a fulfillment service. */
export enum Shopify_FulfillmentServiceType {
  /** Fulfillment by gift card. */
  GiftCard = 'GIFT_CARD',
  /** Manual fulfillment by the merchant. */
  Manual = 'MANUAL',
  /** Fullfillment by a third-party fulfillment service. */
  ThirdParty = 'THIRD_PARTY'
}

/** The status of a fulfillment. */
export enum Shopify_FulfillmentStatus {
  /** The fulfillment was canceled. */
  Cancelled = 'CANCELLED',
  /** There was an error with the fulfillment request. */
  Error = 'ERROR',
  /** The fulfillment request failed. */
  Failure = 'FAILURE',
  /**
   * The third-party fulfillment service has acknowledged the fulfillment and is processing it.
   * @deprecated This is a legacy status and is due to be deprecated.
   */
  Open = 'OPEN',
  /**
   * Shopify has created the fulfillment and is waiting for the third-party fulfillment service to transition it to `open` or `success`.
   * @deprecated This is a legacy status and is due to be deprecated.
   */
  Pending = 'PENDING',
  /** The fulfillment was completed successfully. */
  Success = 'SUCCESS'
}

/** Represents the tracking information for a fulfillment. */
export type Shopify_FulfillmentTrackingInfo = {
  __typename?: 'Shopify_FulfillmentTrackingInfo';
  /**
   * The name of the tracking company.
   *
   * For tracking company names from the list below
   * Shopify will automatically build tracking URLs for all provided tracking numbers,
   * which will make the tracking numbers clickable in the interface.
   *
   * Additionally, for the tracking companies listed on the
   * [Shipping Carriers help page](https://help.shopify.com/manual/shipping/understanding-shipping/shipping-carriers#integrated-shipping-carriers)
   * Shopify will automatically update the fulfillment's `shipment_status` field during the fulfillment process.
   *
   * ### Supported tracking companies
   *
   * The following tracking companies display for shops located in any country:
   *
   *   * 4PX
   *   * AGS
   *   * Amazon Logistics UK
   *   * Amazon Logistics US
   *   * An Post
   *   * Anjun Logistics
   *   * APC
   *   * Asendia USA
   *   * Australia Post
   *   * Bonshaw
   *   * BPost
   *   * BPost International
   *   * Canada Post
   *   * Canpar
   *   * CDL Last Mile
   *   * China Post
   *   * Chronopost
   *   * Chukou1
   *   * Colissimo
   *   * Comingle
   *   * Coordinadora
   *   * Correios
   *   * Correos
   *   * CTT
   *   * CTT Express
   *   * Cyprus Post
   *   * Delnext
   *   * Deutsche Post
   *   * DHL eCommerce
   *   * DHL eCommerce Asia
   *   * DHL Express
   *   * DPD
   *   * DPD Local
   *   * DPD UK
   *   * DTD Express
   *   * DX
   *   * Eagle
   *   * Estes
   *   * Evri
   *   * FedEx
   *   * First Global Logistics
   *   * First Line
   *   * FSC
   *   * Fulfilla
   *   * GLS
   *   * Guangdong Weisuyi Information Technology (WSE)
   *   * Heppner Internationale Spedition GmbH & Co.
   *   * Iceland Post
   *   * IDEX
   *   * Israel Post
   *   * Japan Post (EN)
   *   * Japan Post (JA)
   *   * La Poste
   *   * Lasership
   *   * Latvia Post
   *   * Lietuvos Paštas
   *   * Logisters
   *   * Lone Star Overnight
   *   * M3 Logistics
   *   * Meteor Space
   *   * Mondial Relay
   *   * New Zealand Post
   *   * NinjaVan
   *   * North Russia Supply Chain (Shenzhen) Co.
   *   * OnTrac
   *   * Packeta
   *   * Pago Logistics
   *   * Ping An Da Tengfei Express
   *   * Pitney Bowes
   *   * Portal PostNord
   *   * Poste Italiane
   *   * PostNL
   *   * PostNord DK
   *   * PostNord NO
   *   * PostNord SE
   *   * Purolator
   *   * Qxpress
   *   * Qyun Express
   *   * Royal Mail
   *   * Royal Shipments
   *   * Sagawa (EN)
   *   * Sagawa (JA)
   *   * Sendle
   *   * SF Express
   *   * SFC Fulfillment
   *   * SHREE NANDAN COURIER
   *   * Singapore Post
   *   * Southwest Air Cargo
   *   * StarTrack
   *   * Step Forward Freight
   *   * Swiss Post
   *   * TForce Final Mile
   *   * Tinghao
   *   * TNT
   *   * Toll IPEC
   *   * United Delivery Service
   *   * UPS
   *   * USPS
   *   * Venipak
   *   * We Post
   *   * Whistl
   *   * Wizmo
   *   * WMYC
   *   * Xpedigo
   *   * XPO Logistics
   *   * Yamato (EN)
   *   * Yamato (JA)
   *   * YiFan Express
   *   * YunExpress
   *
   * The following tracking companies are displayed for shops located in specific countries:
   *
   *   * **Australia**: Australia Post, Sendle, Aramex Australia, TNT Australia, Hunter Express, Couriers Please, Bonds, Allied Express, Direct Couriers, Northline, GO Logistics
   *   * **Austria**: Österreichische Post
   *   * **Bulgaria**: Speedy
   *   * **Canada**: Intelcom, BoxKnight, Loomis, GLS
   *   * **China**: China Post, DHL eCommerce Asia, WanbExpress, YunExpress, Anjun Logistics, SFC Fulfillment, FSC
   *   * **Czechia**: Zásilkovna
   *   * **Germany**: Deutsche Post (DE), Deutsche Post (EN), DHL, DHL Express, Swiship, Hermes, GLS
   *   * **Spain**: SEUR
   *   * **France**: Colissimo, Mondial Relay, Colis Privé, GLS
   *   * **United Kingdom**: Evri, DPD UK, Parcelforce, Yodel, DHL Parcel, Tuffnells
   *   * **Greece**: ACS Courier
   *   * **Hong Kong SAR**: SF Express
   *   * **Ireland**: Fastway, DPD Ireland
   *   * **India**: DTDC, India Post, Delhivery, Gati KWE, Professional Couriers, XpressBees, Ecom Express, Ekart, Shadowfax, Bluedart
   *   * **Italy**: BRT, GLS Italy
   *   * **Japan**: エコ配, 西濃運輸, 西濃スーパーエキスプレス, 福山通運, 日本通運, 名鉄運輸, 第一貨物
   *   * **Netherlands**: DHL Parcel, DPD
   *   * **Norway**: Bring
   *   * **Poland**: Inpost
   *   * **Turkey**: PTT, Yurtiçi Kargo, Aras Kargo, Sürat Kargo
   *   * **United States**: GLS, Alliance Air Freight, Pilot Freight, LSO, Old Dominion, R+L Carriers, Southwest Air Cargo
   *   * **South Africa**: Fastway, Skynet.
   */
  company?: Maybe<Scalars['String']['output']>;
  /**
   * The tracking number of the fulfillment.
   *
   * The tracking number is clickable in the interface if one of the following applies
   * (the highest in the list has the highest priority):
   *
   * * Tracking url provided in the `url` field.
   * * [Shopify-known tracking company name](#supported-tracking-companies) specified in the `company` field.
   *   Shopify will build the tracking URL automatically based on the tracking number specified.
   * * The tracking number has a Shopify-known format.
   *   Shopify will guess the tracking provider and build the tracking url based on the tracking number format.
   *   Not all tracking carriers are supported, and multiple tracking carriers may use similarly formatted tracking numbers.
   *   This can result in an invalid tracking URL.
   *   It is highly recommended that you send the tracking company and the tracking URL.
   */
  number?: Maybe<Scalars['String']['output']>;
  /**
   * The URLs to track the fulfillment.
   *
   * The tracking URL is displayed in the merchant's admin on the order page.
   * The tracking URL is displayed in the shipping confirmation email, which can optionally be sent to the customer.
   * When accounts are enabled, it's also displayed in the customer's order history.
   */
  url?: Maybe<Scalars['Shopify_URL']['output']>;
};

/** The App Bridge information for a Shopify Function. */
export type Shopify_FunctionsAppBridge = {
  __typename?: 'Shopify_FunctionsAppBridge';
  /** The relative path for creating a customization. */
  createPath: Scalars['String']['output'];
  /** The relative path for viewing a customization. */
  detailsPath: Scalars['String']['output'];
};

/** The error history from running a Shopify Function. */
export type Shopify_FunctionsErrorHistory = {
  __typename?: 'Shopify_FunctionsErrorHistory';
  /** The date and time that the first error occurred. */
  errorsFirstOccurredAt: Scalars['DateTime']['output'];
  /** The date and time that the first error occurred. */
  firstOccurredAt: Scalars['DateTime']['output'];
  /** Whether the merchant has shared all the recent errors with the developer. */
  hasBeenSharedSinceLastError: Scalars['Boolean']['output'];
  /** Whether the merchant has shared all the recent errors with the developer. */
  hasSharedRecentErrors: Scalars['Boolean']['output'];
};

/** Represents any file other than HTML. */
export type Shopify_GenericFile = Shopify_File & Shopify_Node & {
  __typename?: 'Shopify_GenericFile';
  /** A word or phrase to describe the contents or the function of a file. */
  alt?: Maybe<Scalars['String']['output']>;
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created. */
  createdAt: Scalars['DateTime']['output'];
  /** Any errors that have occurred on the file. */
  fileErrors: Array<Shopify_FileError>;
  /** The status of the file. */
  fileStatus: Shopify_FileStatus;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The generic file's MIME type. */
  mimeType?: Maybe<Scalars['String']['output']>;
  /** The generic file's size in bytes. */
  originalFileSize?: Maybe<Scalars['Int']['output']>;
  /** The preview image for the media. */
  preview?: Maybe<Shopify_MediaPreviewImage>;
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated. */
  updatedAt: Scalars['DateTime']['output'];
  /** The generic file's URL. */
  url?: Maybe<Scalars['Shopify_URL']['output']>;
};

/** Represents an issued gift card. */
export type Shopify_GiftCard = Shopify_Node & {
  __typename?: 'Shopify_GiftCard';
  /** The gift card's remaining balance. */
  balance: Shopify_MoneyV2;
  /** The date and time at which the gift card was created. */
  createdAt: Scalars['DateTime']['output'];
  /** The customer who will receive the gift card. */
  customer?: Maybe<Shopify_Customer>;
  /** The date and time at which the gift card was disabled. */
  disabledAt?: Maybe<Scalars['DateTime']['output']>;
  /** Whether the gift card is enabled. */
  enabled: Scalars['Boolean']['output'];
  /** The date at which the gift card will expire. */
  expiresOn?: Maybe<Scalars['Date']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The initial value of the gift card. */
  initialValue: Shopify_MoneyV2;
  /** The final four characters of the gift card code. */
  lastCharacters: Scalars['String']['output'];
  /** The gift card code. Everything but the final four characters is masked. */
  maskedCode: Scalars['String']['output'];
  /** The note associated with the gift card, which isn't visible to the customer. */
  note?: Maybe<Scalars['String']['output']>;
  /** The order associated with the gift card. This value is `null` if the gift card was issued manually. */
  order?: Maybe<Shopify_Order>;
};

/** Possible error codes that can be returned by `GiftCardUserError`. */
export enum Shopify_GiftCardErrorCode {
  /** The input value should be greater than the minimum allowed value. */
  GreaterThan = 'GREATER_THAN',
  /** Unexpected internal error happened. */
  InternalError = 'INTERNAL_ERROR',
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** Missing a required argument. */
  MissingArgument = 'MISSING_ARGUMENT',
  /** The input value is already taken. */
  Taken = 'TAKEN',
  /** The input value is too long. */
  TooLong = 'TOO_LONG',
  /** The input value is too short. */
  TooShort = 'TOO_SHORT'
}

/** A sale associated with a gift card. */
export type Shopify_GiftCardSale = Shopify_Sale & {
  __typename?: 'Shopify_GiftCardSale';
  /** The type of order action that the sale represents. */
  actionType: Shopify_SaleActionType;
  /** The unique ID for the sale. */
  id: Scalars['ID']['output'];
  /** The line item for the associated sale. */
  lineItem: Shopify_LineItem;
  /** The line type assocated with the sale. */
  lineType: Shopify_SaleLineType;
  /** The number of units either ordered or intended to be returned. */
  quantity?: Maybe<Scalars['Int']['output']>;
  /** All individual taxes associated with the sale. */
  taxes: Array<Shopify_SaleTax>;
  /** The total sale amount after taxes and discounts. */
  totalAmount: Shopify_MoneyBag;
  /** The total discounts allocated to the sale after taxes. */
  totalDiscountAmountAfterTaxes: Shopify_MoneyBag;
  /** The total discounts allocated to the sale before taxes. */
  totalDiscountAmountBeforeTaxes: Shopify_MoneyBag;
  /** The total amount of taxes for the sale. */
  totalTaxAmount: Shopify_MoneyBag;
};

/** Represents an error that happens during the execution of a gift card mutation. */
export type Shopify_GiftCardUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_GiftCardUserError';
  /** The error code. */
  code?: Maybe<Shopify_GiftCardErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Represents an object that has a list of events. */
export type Shopify_HasEvents = {
  /** The paginated list of events associated with the host subject. */
  events: Shopify_EventConnection;
};


/** Represents an object that has a list of events. */
export type Shopify_HasEventsEventsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_EventSortKeys>;
};

/** Localization extensions associated with the specified resource. For example, the tax id for government invoice. */
export type Shopify_HasLocalizationExtensions = {
  /** List of localization extensions for the resource. */
  localizationExtensions: Shopify_LocalizationExtensionConnection;
};


/** Localization extensions associated with the specified resource. For example, the tax id for government invoice. */
export type Shopify_HasLocalizationExtensionsLocalizationExtensionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  countryCodes?: InputMaybe<Array<Shopify_CountryCode>>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  purposes?: InputMaybe<Array<Shopify_LocalizationExtensionPurpose>>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Resources that metafield definitions can be applied to. */
export type Shopify_HasMetafieldDefinitions = {
  /** List of metafield definitions. */
  metafieldDefinitions: Shopify_MetafieldDefinitionConnection;
};


/** Resources that metafield definitions can be applied to. */
export type Shopify_HasMetafieldDefinitionsMetafieldDefinitionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  pinnedStatus?: InputMaybe<Shopify_MetafieldDefinitionPinnedStatus>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_MetafieldDefinitionSortKeys>;
};

/** Represents information about the metafields associated to the specified resource. */
export type Shopify_HasMetafields = {
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafields: Shopify_PrivateMetafieldConnection;
};


/** Represents information about the metafields associated to the specified resource. */
export type Shopify_HasMetafieldsMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace?: InputMaybe<Scalars['String']['input']>;
};


/** Represents information about the metafields associated to the specified resource. */
export type Shopify_HasMetafieldsMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents information about the metafields associated to the specified resource. */
export type Shopify_HasMetafieldsPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace: Scalars['String']['input'];
};


/** Represents information about the metafields associated to the specified resource. */
export type Shopify_HasMetafieldsPrivateMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Published translations associated with the resource. */
export type Shopify_HasPublishedTranslations = {
  /** The translations associated with the resource. */
  translations: Array<Shopify_Translation>;
};


/** Published translations associated with the resource. */
export type Shopify_HasPublishedTranslationsTranslationsArgs = {
  locale: Scalars['String']['input'];
  marketId?: InputMaybe<Scalars['ID']['input']>;
};

/** Represents an image resource. */
export type Shopify_Image = Shopify_HasMetafields & {
  __typename?: 'Shopify_Image';
  /** A word or phrase to share the nature or contents of an image. */
  altText?: Maybe<Scalars['String']['output']>;
  /** The original height of the image in pixels. Returns `null` if the image isn't hosted by Shopify. */
  height?: Maybe<Scalars['Int']['output']>;
  /** A unique ID for the image. */
  id?: Maybe<Scalars['ID']['output']>;
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /**
   * The location of the original image as a URL.
   *
   * If there are any existing transformations in the original source URL, they will remain and not be stripped.
   * @deprecated Use `url` instead.
   */
  originalSrc: Scalars['Shopify_URL']['output'];
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafields: Shopify_PrivateMetafieldConnection;
  /**
   * The location of the image as a URL.
   * @deprecated Use `url` instead.
   */
  src: Scalars['Shopify_URL']['output'];
  /**
   * The location of the transformed image as a URL.
   *
   * All transformation arguments are considered "best-effort". If they can be applied to an image, they will be.
   * Otherwise any transformations which an image type doesn't support will be ignored.
   * @deprecated Use `url(transform:)` instead
   */
  transformedSrc: Scalars['Shopify_URL']['output'];
  /**
   * The location of the image as a URL.
   *
   * If no transform options are specified, then the original image will be preserved including any pre-applied transforms.
   *
   * All transformation options are considered "best-effort". Any transformation that the original image type doesn't support will be ignored.
   *
   * If you need multiple variations of the same image, then you can use [GraphQL aliases](https://graphql.org/learn/queries/#aliases).
   */
  url: Scalars['Shopify_URL']['output'];
  /** The original width of the image in pixels. Returns `null` if the image isn't hosted by Shopify. */
  width?: Maybe<Scalars['Int']['output']>;
};


/** Represents an image resource. */
export type Shopify_ImageMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace?: InputMaybe<Scalars['String']['input']>;
};


/** Represents an image resource. */
export type Shopify_ImageMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents an image resource. */
export type Shopify_ImagePrivateMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace: Scalars['String']['input'];
};


/** Represents an image resource. */
export type Shopify_ImagePrivateMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents an image resource. */
export type Shopify_ImageTransformedSrcArgs = {
  crop?: InputMaybe<Shopify_CropRegion>;
  maxHeight?: InputMaybe<Scalars['Int']['input']>;
  maxWidth?: InputMaybe<Scalars['Int']['input']>;
  preferredContentType?: InputMaybe<Shopify_ImageContentType>;
  scale?: InputMaybe<Scalars['Int']['input']>;
};


/** Represents an image resource. */
export type Shopify_ImageUrlArgs = {
  transform?: InputMaybe<Shopify_ImageTransformInput>;
};

/** An auto-generated type for paginating through multiple Images. */
export type Shopify_ImageConnection = {
  __typename?: 'Shopify_ImageConnection';
  /** A list of edges. */
  edges: Array<Shopify_ImageEdge>;
  /** A list of the nodes contained in ImageEdge. */
  nodes: Array<Shopify_Image>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** List of supported image content types. */
export enum Shopify_ImageContentType {
  /** A JPG image. */
  Jpg = 'JPG',
  /** A PNG image. */
  Png = 'PNG',
  /** A WEBP image. */
  Webp = 'WEBP'
}

/** An auto-generated type which holds one Image and a cursor during pagination. */
export type Shopify_ImageEdge = {
  __typename?: 'Shopify_ImageEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of ImageEdge. */
  node: Shopify_Image;
};

/**
 * The available options for transforming an image.
 *
 * All transformation options are considered best effort. Any transformation that the original image type doesn't support will be ignored.
 */
export type Shopify_ImageTransformInput = {
  /**
   * The region of the image to remain after cropping.
   * Must be used in conjunction with the `maxWidth` and/or `maxHeight` fields, where the `maxWidth` and `maxHeight` aren't equal.
   * The `crop` argument should coincide with the smaller value. A smaller `maxWidth` indicates a `LEFT` or `RIGHT` crop, while
   * a smaller `maxHeight` indicates a `TOP` or `BOTTOM` crop. For example, `{ maxWidth: 5, maxHeight: 10, crop: LEFT }` will result
   * in an image with a width of 5 and height of 10, where the right side of the image is removed.
   */
  crop?: InputMaybe<Shopify_CropRegion>;
  /** Image height in pixels between 1 and 5760. */
  maxHeight?: InputMaybe<Scalars['Int']['input']>;
  /** Image width in pixels between 1 and 5760. */
  maxWidth?: InputMaybe<Scalars['Int']['input']>;
  /**
   * Convert the source image into the preferred content type.
   * Supported conversions: `.svg` to `.png`, any file type to `.jpg`, and any file type to `.webp`.
   */
  preferredContentType?: InputMaybe<Shopify_ImageContentType>;
  /** Image size multiplier for high-resolution retina displays. Must be within 1..3. */
  scale?: InputMaybe<Scalars['Int']['input']>;
};

/** An error that occurs during the execution of `InventoryAdjustQuantities`. */
export type Shopify_InventoryAdjustQuantitiesUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_InventoryAdjustQuantitiesUserError';
  /** The error code. */
  code?: Maybe<Shopify_InventoryAdjustQuantitiesUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `InventoryAdjustQuantitiesUserError`. */
export enum Shopify_InventoryAdjustQuantitiesUserErrorCode {
  /** The quantities couldn't be adjusted. Try again. */
  AdjustQuantitiesFailed = 'ADJUST_QUANTITIES_FAILED',
  /** Internal (gid://shopify/) ledger documents are not allowed to be adjusted via API. */
  InternalLedgerDocument = 'INTERNAL_LEDGER_DOCUMENT',
  /** A ledger document URI is not allowed when adjusting available. */
  InvalidAvailableDocument = 'INVALID_AVAILABLE_DOCUMENT',
  /** The specified inventory item could not be found. */
  InvalidInventoryItem = 'INVALID_INVENTORY_ITEM',
  /** The specified ledger document is invalid. */
  InvalidLedgerDocument = 'INVALID_LEDGER_DOCUMENT',
  /** The specified location could not be found. */
  InvalidLocation = 'INVALID_LOCATION',
  /** A ledger document URI is required except when adjusting available. */
  InvalidQuantityDocument = 'INVALID_QUANTITY_DOCUMENT',
  /** The specified quantity name is invalid. */
  InvalidQuantityName = 'INVALID_QUANTITY_NAME',
  /** The quantity can't be higher than 2,000,000,000. */
  InvalidQuantityTooHigh = 'INVALID_QUANTITY_TOO_HIGH',
  /** The quantity can't be lower than -2,000,000,000. */
  InvalidQuantityTooLow = 'INVALID_QUANTITY_TOO_LOW',
  /** The specified reason is invalid. */
  InvalidReason = 'INVALID_REASON',
  /** The specified reference document is invalid. */
  InvalidReferenceDocument = 'INVALID_REFERENCE_DOCUMENT',
  /** The inventory item is not stocked at the location. */
  ItemNotStockedAtLocation = 'ITEM_NOT_STOCKED_AT_LOCATION',
  /** All changes must have the same ledger document URI or, in the case of adjusting available, no ledger document URI. */
  MaxOneLedgerDocument = 'MAX_ONE_LEDGER_DOCUMENT',
  /** The specified inventory item is not allowed to be adjusted via API. */
  NonMutableInventoryItem = 'NON_MUTABLE_INVENTORY_ITEM'
}

/** Represents a group of adjustments made as part of the same operation. */
export type Shopify_InventoryAdjustmentGroup = Shopify_Node & {
  __typename?: 'Shopify_InventoryAdjustmentGroup';
  /** The app that triggered the inventory event, if one exists. */
  app?: Maybe<Shopify_App>;
  /** The set of inventory quantity changes that occurred in the inventory event. */
  changes: Array<Shopify_InventoryChange>;
  /** The date and time the inventory adjustment group was created. */
  createdAt: Scalars['DateTime']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The reason for the group of adjustments. */
  reason: Scalars['String']['output'];
  /** The reference document URI for the changes. Denotes what's causing the change. */
  referenceDocumentUri?: Maybe<Scalars['String']['output']>;
  /** The staff member associated with the inventory event. */
  staffMember?: Maybe<Shopify_StaffMember>;
};


/** Represents a group of adjustments made as part of the same operation. */
export type Shopify_InventoryAdjustmentGroupChangesArgs = {
  inventoryItemIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  locationIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  quantityNames?: InputMaybe<Array<Scalars['String']['input']>>;
};

/** An error that occurred while setting the activation status of an inventory item. */
export type Shopify_InventoryBulkToggleActivationUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_InventoryBulkToggleActivationUserError';
  /** The error code. */
  code?: Maybe<Shopify_InventoryBulkToggleActivationUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `InventoryBulkToggleActivationUserError`. */
export enum Shopify_InventoryBulkToggleActivationUserErrorCode {
  /** Cannot unstock an inventory item from the only location at which it is stocked. */
  CannotDeactivateFromOnlyLocation = 'CANNOT_DEACTIVATE_FROM_ONLY_LOCATION',
  /**
   * Cannot unstock this inventory item from this location because it has committed and incoming quantities.
   * @deprecated This error code is deprecated. Both INCOMING_INVENTORY_AT_LOCATION and COMMITTED_INVENTORY_AT_LOCATION codes will be returned as individual errors instead.
   */
  CommittedAndIncomingInventoryAtLocation = 'COMMITTED_AND_INCOMING_INVENTORY_AT_LOCATION',
  /** Cannot unstock this inventory item from this location because it has committed quantities. */
  CommittedInventoryAtLocation = 'COMMITTED_INVENTORY_AT_LOCATION',
  /** Failed to stock this inventory item at this location. */
  FailedToStockAtLocation = 'FAILED_TO_STOCK_AT_LOCATION',
  /** Failed to unstock this inventory item from this location. */
  FailedToUnstockFromLocation = 'FAILED_TO_UNSTOCK_FROM_LOCATION',
  /** An error occurred while setting the activation status. */
  GenericError = 'GENERIC_ERROR',
  /** Cannot unstock this inventory item from this location because it has incoming quantities. */
  IncomingInventoryAtLocation = 'INCOMING_INVENTORY_AT_LOCATION',
  /** The inventory item was not found. */
  InventoryItemNotFound = 'INVENTORY_ITEM_NOT_FOUND',
  /** Cannot stock this inventory item at this location because it is managed by a third-party fulfillment service. */
  InventoryManagedBy_3RdParty = 'INVENTORY_MANAGED_BY_3RD_PARTY',
  /** Cannot stock this inventory item at this location because it is managed by Shopify. */
  InventoryManagedByShopify = 'INVENTORY_MANAGED_BY_SHOPIFY',
  /** The location was not found. */
  LocationNotFound = 'LOCATION_NOT_FOUND',
  /** Cannot stock this inventory item at this location because the variant is missing a SKU. */
  MissingSku = 'MISSING_SKU',
  /** Cannot unstock this inventory item from this location because it has unavailable quantities. */
  ReservedInventoryAtLocation = 'RESERVED_INVENTORY_AT_LOCATION'
}

/** Represents a change in an inventory quantity of an inventory item at a location. */
export type Shopify_InventoryChange = {
  __typename?: 'Shopify_InventoryChange';
  /** The amount by which the inventory quantity was changed. */
  delta: Scalars['Int']['output'];
  /** The inventory item associated with this inventory change. */
  item?: Maybe<Shopify_InventoryItem>;
  /** The ledger document URI for the change. Denotes who the change is applied to. */
  ledgerDocumentUri?: Maybe<Scalars['String']['output']>;
  /** The location associated with this inventory change. */
  location?: Maybe<Shopify_Location>;
  /**
   * The [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps#inventory-states)
   * of the inventory quantity that was changed.
   */
  name: Scalars['String']['output'];
  /** The quantity of named inventory after the change. */
  quantityAfterChange?: Maybe<Scalars['Int']['output']>;
};

/**
 * Represents the goods available to be shipped to a customer.
 * It holds essential information about the goods, including SKU and whether it is tracked.
 */
export type Shopify_InventoryItem = Shopify_LegacyInteroperability & Shopify_Node & {
  __typename?: 'Shopify_InventoryItem';
  /** The ISO 3166-1 alpha-2 country code of where the item originated from. */
  countryCodeOfOrigin?: Maybe<Shopify_CountryCode>;
  /** A list of country specific harmonized system codes. */
  countryHarmonizedSystemCodes: Shopify_CountryHarmonizedSystemCodeConnection;
  /** The date and time when the inventory item was created. */
  createdAt: Scalars['DateTime']['output'];
  /** The number of inventory items that share the same SKU with this item. */
  duplicateSkuCount: Scalars['Int']['output'];
  /** The harmonized system code of the item. */
  harmonizedSystemCode?: Maybe<Scalars['String']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The URL that points to the inventory history for the item. */
  inventoryHistoryUrl?: Maybe<Scalars['Shopify_URL']['output']>;
  /** The inventory item's quantities at the specified location. */
  inventoryLevel?: Maybe<Shopify_InventoryLevel>;
  /** A list of the inventory item's quantities for each location that the inventory item can be stocked at. */
  inventoryLevels: Shopify_InventoryLevelConnection;
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['Shopify_UnsignedInt64']['output'];
  /** The number of locations where this inventory item is stocked. */
  locationsCount?: Maybe<Shopify_Count>;
  /** The packaging dimensions of the inventory item. */
  measurement: Shopify_InventoryItemMeasurement;
  /** The ISO 3166-2 alpha-2 province code of where the item originated from. */
  provinceCodeOfOrigin?: Maybe<Scalars['String']['output']>;
  /** Whether the inventory item requires shipping. */
  requiresShipping: Scalars['Boolean']['output'];
  /** Inventory item SKU. Case-sensitive string. */
  sku?: Maybe<Scalars['String']['output']>;
  /** Whether inventory levels are tracked for the item. */
  tracked: Scalars['Boolean']['output'];
  /** Whether the value of the `tracked` field for the inventory item can be changed. */
  trackedEditable: Shopify_EditableProperty;
  /** Unit cost associated with the inventory item. Note: the user must have "View product costs" permission granted in order to access this field once product granular permissions are enabled. */
  unitCost?: Maybe<Shopify_MoneyV2>;
  /** The date and time when the inventory item was updated. */
  updatedAt: Scalars['DateTime']['output'];
  /** The variant that owns this inventory item. */
  variant: Shopify_ProductVariant;
};


/**
 * Represents the goods available to be shipped to a customer.
 * It holds essential information about the goods, including SKU and whether it is tracked.
 */
export type Shopify_InventoryItemCountryHarmonizedSystemCodesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Represents the goods available to be shipped to a customer.
 * It holds essential information about the goods, including SKU and whether it is tracked.
 */
export type Shopify_InventoryItemInventoryLevelArgs = {
  locationId: Scalars['ID']['input'];
};


/**
 * Represents the goods available to be shipped to a customer.
 * It holds essential information about the goods, including SKU and whether it is tracked.
 */
export type Shopify_InventoryItemInventoryLevelsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** An auto-generated type for paginating through multiple InventoryItems. */
export type Shopify_InventoryItemConnection = {
  __typename?: 'Shopify_InventoryItemConnection';
  /** A list of edges. */
  edges: Array<Shopify_InventoryItemEdge>;
  /** A list of the nodes contained in InventoryItemEdge. */
  nodes: Array<Shopify_InventoryItem>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one InventoryItem and a cursor during pagination. */
export type Shopify_InventoryItemEdge = {
  __typename?: 'Shopify_InventoryItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of InventoryItemEdge. */
  node: Shopify_InventoryItem;
};

/** Represents the packaged dimension for an inventory item. */
export type Shopify_InventoryItemMeasurement = Shopify_Node & {
  __typename?: 'Shopify_InventoryItemMeasurement';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The weight of the inventory item. */
  weight?: Maybe<Shopify_Weight>;
};

/** The quantities of an inventory item that are related to a specific location. */
export type Shopify_InventoryLevel = Shopify_Node & {
  __typename?: 'Shopify_InventoryLevel';
  /** Whether the inventory items associated with the inventory level can be deactivated. */
  canDeactivate: Scalars['Boolean']['output'];
  /** The date and time when the inventory level was created. */
  createdAt: Scalars['DateTime']['output'];
  /** Describes either the impact of deactivating the inventory level, or why the inventory level can't be deactivated. */
  deactivationAlert?: Maybe<Scalars['String']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** Inventory item associated with the inventory level. */
  item: Shopify_InventoryItem;
  /** The location associated with the inventory level. */
  location: Shopify_Location;
  /** Quantities for the requested names. */
  quantities: Array<Shopify_InventoryQuantity>;
  /** Scheduled changes for the requested quantity names. */
  scheduledChanges: Shopify_InventoryScheduledChangeConnection;
  /** The date and time when the inventory level was updated. */
  updatedAt: Scalars['DateTime']['output'];
};


/** The quantities of an inventory item that are related to a specific location. */
export type Shopify_InventoryLevelQuantitiesArgs = {
  names: Array<Scalars['String']['input']>;
};


/** The quantities of an inventory item that are related to a specific location. */
export type Shopify_InventoryLevelScheduledChangesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_ScheduledChangeSortKeys>;
};

/** An auto-generated type for paginating through multiple InventoryLevels. */
export type Shopify_InventoryLevelConnection = {
  __typename?: 'Shopify_InventoryLevelConnection';
  /** A list of edges. */
  edges: Array<Shopify_InventoryLevelEdge>;
  /** A list of the nodes contained in InventoryLevelEdge. */
  nodes: Array<Shopify_InventoryLevel>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one InventoryLevel and a cursor during pagination. */
export type Shopify_InventoryLevelEdge = {
  __typename?: 'Shopify_InventoryLevelEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of InventoryLevelEdge. */
  node: Shopify_InventoryLevel;
};

/** An error that occurs during the execution of `InventoryMoveQuantities`. */
export type Shopify_InventoryMoveQuantitiesUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_InventoryMoveQuantitiesUserError';
  /** The error code. */
  code?: Maybe<Shopify_InventoryMoveQuantitiesUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `InventoryMoveQuantitiesUserError`. */
export enum Shopify_InventoryMoveQuantitiesUserErrorCode {
  /** The quantities can't be moved between different locations. */
  DifferentLocations = 'DIFFERENT_LOCATIONS',
  /** Internal (gid://shopify/) ledger documents are not allowed to be adjusted via API. */
  InternalLedgerDocument = 'INTERNAL_LEDGER_DOCUMENT',
  /** A ledger document URI is not allowed when adjusting available. */
  InvalidAvailableDocument = 'INVALID_AVAILABLE_DOCUMENT',
  /** The specified inventory item could not be found. */
  InvalidInventoryItem = 'INVALID_INVENTORY_ITEM',
  /** The specified ledger document is invalid. */
  InvalidLedgerDocument = 'INVALID_LEDGER_DOCUMENT',
  /** The specified location could not be found. */
  InvalidLocation = 'INVALID_LOCATION',
  /** A ledger document URI is required except when adjusting available. */
  InvalidQuantityDocument = 'INVALID_QUANTITY_DOCUMENT',
  /** The specified quantity name is invalid. */
  InvalidQuantityName = 'INVALID_QUANTITY_NAME',
  /** The quantity can't be negative. */
  InvalidQuantityNegative = 'INVALID_QUANTITY_NEGATIVE',
  /** The quantity can't be higher than 2,000,000,000. */
  InvalidQuantityTooHigh = 'INVALID_QUANTITY_TOO_HIGH',
  /** The specified reason is invalid. */
  InvalidReason = 'INVALID_REASON',
  /** The specified reference document is invalid. */
  InvalidReferenceDocument = 'INVALID_REFERENCE_DOCUMENT',
  /** The inventory item is not stocked at the location. */
  ItemNotStockedAtLocation = 'ITEM_NOT_STOCKED_AT_LOCATION',
  /** Only a maximum of 2 ledger document URIs across all changes is allowed. */
  MaximumLedgerDocumentUris = 'MAXIMUM_LEDGER_DOCUMENT_URIS',
  /** The quantities couldn't be moved. Try again. */
  MoveQuantitiesFailed = 'MOVE_QUANTITIES_FAILED',
  /** The specified inventory item is not allowed to be adjusted via API. */
  NonMutableInventoryItem = 'NON_MUTABLE_INVENTORY_ITEM',
  /** The quantity names for each change can't be the same. */
  SameQuantityName = 'SAME_QUANTITY_NAME'
}

/** Represents a quantity of an inventory item at a specific location, for a specific name. */
export type Shopify_InventoryQuantity = Shopify_Node & {
  __typename?: 'Shopify_InventoryQuantity';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /**
   * The [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps#inventory-states)
   * that identifies the inventory quantity.
   */
  name: Scalars['String']['output'];
  /** The quantity for the quantity name. */
  quantity: Scalars['Int']['output'];
  /** When the quantity was last updated. */
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

/** Returns the scheduled changes to inventory states related to the ledger document. */
export type Shopify_InventoryScheduledChange = {
  __typename?: 'Shopify_InventoryScheduledChange';
  /** The date and time that the scheduled change is expected to happen. */
  expectedAt: Scalars['DateTime']['output'];
  /**
   * The quantity
   * [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps/quantities-states#move-inventory-quantities-between-states)
   * to transition from.
   */
  fromName: Scalars['String']['output'];
  /** The quantities of an inventory item that are related to a specific location. */
  inventoryLevel: Shopify_InventoryLevel;
  /** An active reference document associated with the inventory quantity. Must be a valid URI. */
  ledgerDocumentUri: Scalars['Shopify_URL']['output'];
  /** The quantity of the scheduled change associated with the ledger document in the `from_name` state. */
  quantity: Scalars['Int']['output'];
  /**
   * The quantity
   * [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps/quantities-states#move-inventory-quantities-between-states)
   * to transition to.
   */
  toName: Scalars['String']['output'];
};

/** An auto-generated type for paginating through multiple InventoryScheduledChanges. */
export type Shopify_InventoryScheduledChangeConnection = {
  __typename?: 'Shopify_InventoryScheduledChangeConnection';
  /** A list of edges. */
  edges: Array<Shopify_InventoryScheduledChangeEdge>;
  /** A list of the nodes contained in InventoryScheduledChangeEdge. */
  nodes: Array<Shopify_InventoryScheduledChange>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one InventoryScheduledChange and a cursor during pagination. */
export type Shopify_InventoryScheduledChangeEdge = {
  __typename?: 'Shopify_InventoryScheduledChangeEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of InventoryScheduledChangeEdge. */
  node: Shopify_InventoryScheduledChange;
};

/** An error that occurs during the execution of `InventorySetOnHandQuantities`. */
export type Shopify_InventorySetOnHandQuantitiesUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_InventorySetOnHandQuantitiesUserError';
  /** The error code. */
  code?: Maybe<Shopify_InventorySetOnHandQuantitiesUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `InventorySetOnHandQuantitiesUserError`. */
export enum Shopify_InventorySetOnHandQuantitiesUserErrorCode {
  /** The specified inventory item could not be found. */
  InvalidInventoryItem = 'INVALID_INVENTORY_ITEM',
  /** The specified location could not be found. */
  InvalidLocation = 'INVALID_LOCATION',
  /** The quantity can't be negative. */
  InvalidQuantityNegative = 'INVALID_QUANTITY_NEGATIVE',
  /** The total quantity can't be higher than 1,000,000,000. */
  InvalidQuantityTooHigh = 'INVALID_QUANTITY_TOO_HIGH',
  /** The specified reason is invalid. */
  InvalidReason = 'INVALID_REASON',
  /** The specified reference document is invalid. */
  InvalidReferenceDocument = 'INVALID_REFERENCE_DOCUMENT',
  /** The inventory item is not stocked at the location. */
  ItemNotStockedAtLocation = 'ITEM_NOT_STOCKED_AT_LOCATION',
  /** The specified inventory item is not allowed to be adjusted via API. */
  NonMutableInventoryItem = 'NON_MUTABLE_INVENTORY_ITEM',
  /** The on-hand quantities couldn't be set. Try again. */
  SetOnHandQuantitiesFailed = 'SET_ON_HAND_QUANTITIES_FAILED'
}

/** An error that occurs during the execution of `InventorySetScheduledChanges`. */
export type Shopify_InventorySetScheduledChangesUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_InventorySetScheduledChangesUserError';
  /** The error code. */
  code?: Maybe<Shopify_InventorySetScheduledChangesUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `InventorySetScheduledChangesUserError`. */
export enum Shopify_InventorySetScheduledChangesUserErrorCode {
  /** The item can only have one scheduled change for %{from_name} as the fromName. */
  DuplicateFromName = 'DUPLICATE_FROM_NAME',
  /** The item can only have one scheduled change for %{to_name} as the to_name. */
  DuplicateToName = 'DUPLICATE_TO_NAME',
  /** There was an error updating the scheduled changes. */
  ErrorUpdatingScheduled = 'ERROR_UPDATING_SCHEDULED',
  /** The specified field is invalid. */
  Inclusion = 'INCLUSION',
  /** The specified fromName is invalid. */
  InvalidFromName = 'INVALID_FROM_NAME',
  /** The specified reason is invalid. Valid values: %{reasons}. */
  InvalidReason = 'INVALID_REASON',
  /** The specified toName is invalid. */
  InvalidToName = 'INVALID_TO_NAME',
  /** The inventory item was not found. */
  InventoryItemNotFound = 'INVENTORY_ITEM_NOT_FOUND',
  /** The inventory item was not found at the location specified. */
  InventoryStateNotFound = 'INVENTORY_STATE_NOT_FOUND',
  /** At least 1 item must be provided. */
  ItemsEmpty = 'ITEMS_EMPTY',
  /** The location couldn't be found. */
  LocationNotFound = 'LOCATION_NOT_FOUND',
  /** The from_name and to_name can't be the same. */
  SameFromToNames = 'SAME_FROM_TO_NAMES'
}

/** A job corresponds to some long running task that the client should poll for status. */
export type Shopify_JobResult = {
  /** This indicates if the job is still queued or has been run. */
  done: Scalars['Boolean']['output'];
  /** A globally-unique ID that's returned when running an asynchronous mutation. */
  id: Scalars['ID']['output'];
};

/** ISO 639-1 language codes supported by Shopify. */
export enum Shopify_LanguageCode {
  /** Afrikaans. */
  Af = 'AF',
  /** Akan. */
  Ak = 'AK',
  /** Amharic. */
  Am = 'AM',
  /** Arabic. */
  Ar = 'AR',
  /** Assamese. */
  As = 'AS',
  /** Azerbaijani. */
  Az = 'AZ',
  /** Belarusian. */
  Be = 'BE',
  /** Bulgarian. */
  Bg = 'BG',
  /** Bambara. */
  Bm = 'BM',
  /** Bangla. */
  Bn = 'BN',
  /** Tibetan. */
  Bo = 'BO',
  /** Breton. */
  Br = 'BR',
  /** Bosnian. */
  Bs = 'BS',
  /** Catalan. */
  Ca = 'CA',
  /** Chechen. */
  Ce = 'CE',
  /** Czech. */
  Cs = 'CS',
  /** Church Slavic. */
  Cu = 'CU',
  /** Welsh. */
  Cy = 'CY',
  /** Danish. */
  Da = 'DA',
  /** German. */
  De = 'DE',
  /** Dzongkha. */
  Dz = 'DZ',
  /** Ewe. */
  Ee = 'EE',
  /** Greek. */
  El = 'EL',
  /** English. */
  En = 'EN',
  /** Esperanto. */
  Eo = 'EO',
  /** Spanish. */
  Es = 'ES',
  /** Estonian. */
  Et = 'ET',
  /** Basque. */
  Eu = 'EU',
  /** Persian. */
  Fa = 'FA',
  /** Fulah. */
  Ff = 'FF',
  /** Finnish. */
  Fi = 'FI',
  /** Faroese. */
  Fo = 'FO',
  /** French. */
  Fr = 'FR',
  /** Western Frisian. */
  Fy = 'FY',
  /** Irish. */
  Ga = 'GA',
  /** Scottish Gaelic. */
  Gd = 'GD',
  /** Galician. */
  Gl = 'GL',
  /** Gujarati. */
  Gu = 'GU',
  /** Manx. */
  Gv = 'GV',
  /** Hausa. */
  Ha = 'HA',
  /** Hebrew. */
  He = 'HE',
  /** Hindi. */
  Hi = 'HI',
  /** Croatian. */
  Hr = 'HR',
  /** Hungarian. */
  Hu = 'HU',
  /** Armenian. */
  Hy = 'HY',
  /** Interlingua. */
  Ia = 'IA',
  /** Indonesian. */
  Id = 'ID',
  /** Igbo. */
  Ig = 'IG',
  /** Sichuan Yi. */
  Ii = 'II',
  /** Icelandic. */
  Is = 'IS',
  /** Italian. */
  It = 'IT',
  /** Japanese. */
  Ja = 'JA',
  /** Javanese. */
  Jv = 'JV',
  /** Georgian. */
  Ka = 'KA',
  /** Kikuyu. */
  Ki = 'KI',
  /** Kazakh. */
  Kk = 'KK',
  /** Kalaallisut. */
  Kl = 'KL',
  /** Khmer. */
  Km = 'KM',
  /** Kannada. */
  Kn = 'KN',
  /** Korean. */
  Ko = 'KO',
  /** Kashmiri. */
  Ks = 'KS',
  /** Kurdish. */
  Ku = 'KU',
  /** Cornish. */
  Kw = 'KW',
  /** Kyrgyz. */
  Ky = 'KY',
  /** Luxembourgish. */
  Lb = 'LB',
  /** Ganda. */
  Lg = 'LG',
  /** Lingala. */
  Ln = 'LN',
  /** Lao. */
  Lo = 'LO',
  /** Lithuanian. */
  Lt = 'LT',
  /** Luba-Katanga. */
  Lu = 'LU',
  /** Latvian. */
  Lv = 'LV',
  /** Malagasy. */
  Mg = 'MG',
  /** Māori. */
  Mi = 'MI',
  /** Macedonian. */
  Mk = 'MK',
  /** Malayalam. */
  Ml = 'ML',
  /** Mongolian. */
  Mn = 'MN',
  /** Marathi. */
  Mr = 'MR',
  /** Malay. */
  Ms = 'MS',
  /** Maltese. */
  Mt = 'MT',
  /** Burmese. */
  My = 'MY',
  /** Norwegian (Bokmål). */
  Nb = 'NB',
  /** North Ndebele. */
  Nd = 'ND',
  /** Nepali. */
  Ne = 'NE',
  /** Dutch. */
  Nl = 'NL',
  /** Norwegian Nynorsk. */
  Nn = 'NN',
  /** Norwegian. */
  No = 'NO',
  /** Oromo. */
  Om = 'OM',
  /** Odia. */
  Or = 'OR',
  /** Ossetic. */
  Os = 'OS',
  /** Punjabi. */
  Pa = 'PA',
  /** Polish. */
  Pl = 'PL',
  /** Pashto. */
  Ps = 'PS',
  /** Portuguese. */
  Pt = 'PT',
  /** Portuguese (Brazil). */
  PtBr = 'PT_BR',
  /** Portuguese (Portugal). */
  PtPt = 'PT_PT',
  /** Quechua. */
  Qu = 'QU',
  /** Romansh. */
  Rm = 'RM',
  /** Rundi. */
  Rn = 'RN',
  /** Romanian. */
  Ro = 'RO',
  /** Russian. */
  Ru = 'RU',
  /** Kinyarwanda. */
  Rw = 'RW',
  /** Sindhi. */
  Sd = 'SD',
  /** Northern Sami. */
  Se = 'SE',
  /** Sango. */
  Sg = 'SG',
  /** Sinhala. */
  Si = 'SI',
  /** Slovak. */
  Sk = 'SK',
  /** Slovenian. */
  Sl = 'SL',
  /** Shona. */
  Sn = 'SN',
  /** Somali. */
  So = 'SO',
  /** Albanian. */
  Sq = 'SQ',
  /** Serbian. */
  Sr = 'SR',
  /** Sundanese. */
  Su = 'SU',
  /** Swedish. */
  Sv = 'SV',
  /** Swahili. */
  Sw = 'SW',
  /** Tamil. */
  Ta = 'TA',
  /** Telugu. */
  Te = 'TE',
  /** Tajik. */
  Tg = 'TG',
  /** Thai. */
  Th = 'TH',
  /** Tigrinya. */
  Ti = 'TI',
  /** Turkmen. */
  Tk = 'TK',
  /** Tongan. */
  To = 'TO',
  /** Turkish. */
  Tr = 'TR',
  /** Tatar. */
  Tt = 'TT',
  /** Uyghur. */
  Ug = 'UG',
  /** Ukrainian. */
  Uk = 'UK',
  /** Urdu. */
  Ur = 'UR',
  /** Uzbek. */
  Uz = 'UZ',
  /** Vietnamese. */
  Vi = 'VI',
  /** Volapük. */
  Vo = 'VO',
  /** Wolof. */
  Wo = 'WO',
  /** Xhosa. */
  Xh = 'XH',
  /** Yiddish. */
  Yi = 'YI',
  /** Yoruba. */
  Yo = 'YO',
  /** Chinese. */
  Zh = 'ZH',
  /** Chinese (Simplified). */
  ZhCn = 'ZH_CN',
  /** Chinese (Traditional). */
  ZhTw = 'ZH_TW',
  /** Zulu. */
  Zu = 'ZU'
}

/**
 * Interoperability metadata for types that directly correspond to a REST Admin API resource.
 * For example, on the Product type, LegacyInteroperability returns metadata for the corresponding [Product object](https://shopify.dev/api/admin-graphql/latest/objects/product) in the REST Admin API.
 */
export type Shopify_LegacyInteroperability = {
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['Shopify_UnsignedInt64']['output'];
};

/**
 * The total number of pending orders on a shop if less then a maximum, or that maximum.
 * The atMax field indicates when this maximum has been reached.
 */
export type Shopify_LimitedPendingOrderCount = {
  __typename?: 'Shopify_LimitedPendingOrderCount';
  /** This is set when the number of pending orders has reached the maximum. */
  atMax: Scalars['Boolean']['output'];
  /**
   * The number of pendings orders on the shop.
   * Limited to a maximum of 10000.
   */
  count: Scalars['Int']['output'];
};

/** Represents individual products and quantities purchased in the associated order. */
export type Shopify_LineItem = Shopify_Node & {
  __typename?: 'Shopify_LineItem';
  /**
   * Whether the line item can be restocked.
   * @deprecated Use `restockable` instead.
   */
  canRestock: Scalars['Boolean']['output'];
  /** The subscription contract associated with this line item. */
  contract?: Maybe<Shopify_SubscriptionContract>;
  /** The number of units ordered, excluding refunded and removed units. */
  currentQuantity: Scalars['Int']['output'];
  /** A list of attributes that represent custom features or special requests. */
  customAttributes: Array<Shopify_Attribute>;
  /** The discounts that have been allocated to the line item by discount applications, including discounts allocated to refunded and removed quantities. */
  discountAllocations: Array<Shopify_DiscountAllocation>;
  /**
   * The total discounted price of the line item in shop currency, including refunded and removed quantities. This value doesn't include order-level discounts.
   * @deprecated Use `discountedTotalSet` instead.
   */
  discountedTotal: Scalars['Shopify_Money']['output'];
  /** The total discounted price of the line item in shop and presentment currencies, including refunded and removed quantities. This value doesn't include order-level discounts. Code-based discounts aren't included by default. */
  discountedTotalSet: Shopify_MoneyBag;
  /**
   * The approximate unit price of the line item in shop currency. This value includes line-level discounts and discounts applied to refunded and removed quantities. It doesn't include order-level discounts.
   * @deprecated Use `discountedUnitPriceSet` instead.
   */
  discountedUnitPrice: Scalars['Shopify_Money']['output'];
  /** The approximate unit price of the line item in shop and presentment currencies. This value includes discounts applied to refunded and removed quantities. */
  discountedUnitPriceAfterAllDiscountsSet: Shopify_MoneyBag;
  /** The approximate unit price of the line item in shop and presentment currencies. This value includes line-level discounts and discounts applied to refunded and removed quantities. It doesn't include order-level discounts. */
  discountedUnitPriceSet: Shopify_MoneyBag;
  /** The duties associated with the line item. */
  duties: Array<Shopify_Duty>;
  /**
   * The total number of units to fulfill.
   * @deprecated Use [FulfillmentOrderLineItem#remainingQuantity](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderLineItem#field-fulfillmentorderlineitem-remainingquantity) instead.
   */
  fulfillableQuantity: Scalars['Int']['output'];
  /**
   * The fulfillment service that stocks the product variant belonging to a line item.
   *
   * This is a third-party fulfillment service in the following scenarios:
   *
   * **Scenario 1**
   * - The product variant is stocked by a single fulfillment service.
   * - The [FulfillmentService](/api/admin-graphql/latest/objects/FulfillmentService) is a third-party fulfillment service. Third-party fulfillment services don't have a handle with the value `manual`.
   *
   * **Scenario 2**
   * - Multiple fulfillment services stock the product variant.
   * - The last time that the line item was unfulfilled, it was awaiting fulfillment by a third-party fulfillment service. Third-party fulfillment services don't have a handle with the value `manual`.
   *
   * If none of the above conditions are met, then the fulfillment service has the `manual` handle.
   * @deprecated
   * The [relationship between a product variant and a fulfillment service was changed in the `2022-07` API version](/changelog/fulfillment-service-sku-sharing). A [ProductVariant](/api/admin-graphql/latest/objects/ProductVariant) can be stocked by multiple fulfillment services. As a result, we recommend that you use the [inventoryItem field](/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-inventoryitem) if you need to determine where a product variant is stocked.
   *
   * If you need to determine whether a product is a gift card, then you should continue to use this field until an alternative is available.
   *
   * Altering the locations which stock a product variant won't change the value of this field for existing orders.
   *
   * Learn about [managing inventory quantities and states](/apps/fulfillment/inventory-management-apps/quantities-states).
   *
   */
  fulfillmentService?: Maybe<Shopify_FulfillmentService>;
  /**
   * The line item's fulfillment status. Returns 'fulfilled' if fulfillableQuantity >= quantity,
   * 'partial' if  fulfillableQuantity > 0, and 'unfulfilled' otherwise.
   * @deprecated Use [FulfillmentOrderLineItem#remainingQuantity](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderLineItem#field-fulfillmentorderlineitem-remainingquantity) instead
   */
  fulfillmentStatus: Scalars['String']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The image associated to the line item's variant. */
  image?: Maybe<Shopify_Image>;
  /** Whether the line item represents the purchase of a gift card. */
  isGiftCard: Scalars['Boolean']['output'];
  /** The line item group associated to the line item. */
  lineItemGroup?: Maybe<Shopify_LineItemGroup>;
  /** Whether the line item can be edited or not. */
  merchantEditable: Scalars['Boolean']['output'];
  /** The title of the product, optionally appended with the title of the variant (if applicable). */
  name: Scalars['String']['output'];
  /** The total number of units that can't be fulfilled. For example, if items have been refunded, or the item is not something that can be fulfilled, like a tip. Please see the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object for more fulfillment details. */
  nonFulfillableQuantity: Scalars['Int']['output'];
  /**
   * In shop currency, the total price of the line item when the order was created.
   * This value doesn't include discounts.
   * @deprecated Use `originalTotalSet` instead.
   */
  originalTotal: Scalars['Shopify_Money']['output'];
  /**
   * In shop and presentment currencies, the total price of the line item when the order was created.
   * This value doesn't include discounts.
   */
  originalTotalSet: Shopify_MoneyBag;
  /**
   * In shop currency, the unit price of the line item when the order was created. This value doesn't include discounts.
   * @deprecated Use `originalUnitPriceSet` instead.
   */
  originalUnitPrice: Scalars['Shopify_Money']['output'];
  /** In shop and presentment currencies, the unit price of the line item when the order was created. This value doesn't include discounts. */
  originalUnitPriceSet: Shopify_MoneyBag;
  /** The Product object associated with this line item's variant. */
  product?: Maybe<Shopify_Product>;
  /** The number of units ordered, including refunded and removed units. */
  quantity: Scalars['Int']['output'];
  /** The number of units ordered, excluding refunded units. */
  refundableQuantity: Scalars['Int']['output'];
  /** Whether physical shipping is required for the variant. */
  requiresShipping: Scalars['Boolean']['output'];
  /** Whether the line item can be restocked. */
  restockable: Scalars['Boolean']['output'];
  /** The selling plan details associated with the line item. */
  sellingPlan?: Maybe<Shopify_LineItemSellingPlan>;
  /** The variant SKU number. */
  sku?: Maybe<Scalars['String']['output']>;
  /** Staff attributed to the line item. */
  staffMember?: Maybe<Shopify_StaffMember>;
  /** The taxes charged for the line item, including taxes charged for refunded and removed quantities. */
  taxLines: Array<Shopify_TaxLine>;
  /** Whether the variant is taxable. */
  taxable: Scalars['Boolean']['output'];
  /** The title of the product at time of order creation. */
  title: Scalars['String']['output'];
  /**
   * The total discount allocated to the line item in shop currency, including the total allocated to refunded and removed quantities. This value doesn't include order-level discounts.
   * @deprecated Use `totalDiscountSet` instead.
   */
  totalDiscount: Scalars['Shopify_Money']['output'];
  /** The total discount allocated to the line item in shop and presentment currencies, including the total allocated to refunded and removed quantities. This value doesn't include order-level discounts. */
  totalDiscountSet: Shopify_MoneyBag;
  /**
   * In shop currency, the total discounted price of the unfulfilled quantity for the line item.
   * @deprecated Use `unfulfilledDiscountedTotalSet` instead.
   */
  unfulfilledDiscountedTotal: Scalars['Shopify_Money']['output'];
  /** In shop and presentment currencies, the total discounted price of the unfulfilled quantity for the line item. */
  unfulfilledDiscountedTotalSet: Shopify_MoneyBag;
  /**
   * In shop currency, the total price of the unfulfilled quantity for the line item. This value doesn't include discounts.
   * @deprecated Use `unfulfilledOriginalTotalSet` instead.
   */
  unfulfilledOriginalTotal: Scalars['Shopify_Money']['output'];
  /** In shop and presentment currencies, the total price of the unfulfilled quantity for the line item. This value doesn't include discounts. */
  unfulfilledOriginalTotalSet: Shopify_MoneyBag;
  /** The number of units not yet fulfilled. */
  unfulfilledQuantity: Scalars['Int']['output'];
  /** The Variant object associated with this line item. */
  variant?: Maybe<Shopify_ProductVariant>;
  /** The title of the variant at time of order creation. */
  variantTitle?: Maybe<Scalars['String']['output']>;
  /** The name of the vendor who made the variant. */
  vendor?: Maybe<Scalars['String']['output']>;
};


/** Represents individual products and quantities purchased in the associated order. */
export type Shopify_LineItemDiscountedTotalSetArgs = {
  withCodeDiscounts?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents individual products and quantities purchased in the associated order. */
export type Shopify_LineItemTaxLinesArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
};

/** An auto-generated type for paginating through multiple LineItems. */
export type Shopify_LineItemConnection = {
  __typename?: 'Shopify_LineItemConnection';
  /** A list of edges. */
  edges: Array<Shopify_LineItemEdge>;
  /** A list of the nodes contained in LineItemEdge. */
  nodes: Array<Shopify_LineItem>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one LineItem and a cursor during pagination. */
export type Shopify_LineItemEdge = {
  __typename?: 'Shopify_LineItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of LineItemEdge. */
  node: Shopify_LineItem;
};

/** A line item group (bundle) to which a line item belongs to. */
export type Shopify_LineItemGroup = {
  __typename?: 'Shopify_LineItemGroup';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** Quantity of the line item group on the order. */
  quantity: Scalars['Int']['output'];
  /** Title of the line item group. */
  title: Scalars['String']['output'];
  /** ID of the variant of the line item group. */
  variantId?: Maybe<Scalars['ID']['output']>;
  /** SKU of the variant of the line item group. */
  variantSku?: Maybe<Scalars['String']['output']>;
};

/** Represents a single line item on an order. */
export type Shopify_LineItemMutable = Shopify_Node & {
  __typename?: 'Shopify_LineItemMutable';
  /**
   * Whether the line item can be restocked.
   * @deprecated Use `restockable` instead.
   */
  canRestock: Scalars['Boolean']['output'];
  /** A list of attributes that represent custom features or special requests. */
  customAttributes: Array<Shopify_Attribute>;
  /** The discounts that have been allocated onto the line item by discount applications. */
  discountAllocations: Array<Shopify_DiscountAllocation>;
  /**
   * The total line price after discounts are applied, in shop currency.
   * @deprecated Use `discountedTotalSet` instead.
   */
  discountedTotal: Scalars['Shopify_Money']['output'];
  /** The total line price after discounts are applied, in shop and presentment currencies. */
  discountedTotalSet: Shopify_MoneyBag;
  /**
   * The approximate split price of a line item unit, in shop currency. This value doesn't include discounts applied to the entire order.
   * @deprecated Use `discountedUnitPriceSet` instead.
   */
  discountedUnitPrice: Scalars['Shopify_Money']['output'];
  /** The approximate split price of a line item unit, in shop and presentment currencies. This value doesn't include discounts applied to the entire order. */
  discountedUnitPriceSet: Shopify_MoneyBag;
  /** The total number of units to fulfill. */
  fulfillableQuantity: Scalars['Int']['output'];
  /**
   * The service provider that fulfills the line item.
   *
   * Deleted fulfillment services will return null.
   */
  fulfillmentService?: Maybe<Shopify_FulfillmentService>;
  /**
   * The line item's fulfillment status. Returns 'fulfilled' if fulfillableQuantity >= quantity,
   * 'partial' if  fulfillableQuantity > 0, and 'unfulfilled' otherwise.
   */
  fulfillmentStatus: Scalars['String']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The image associated to the line item's variant. */
  image?: Maybe<Shopify_Image>;
  /** Whether the line item represents the purchase of a gift card. */
  isGiftCard: Scalars['Boolean']['output'];
  /** Whether the line item can be edited or not. */
  merchantEditable: Scalars['Boolean']['output'];
  /** The name of the product. */
  name: Scalars['String']['output'];
  /** The total number of units that can't be fulfilled. For example, if items have been refunded, or the item isn't something that can be fulfilled, like a tip. */
  nonFulfillableQuantity: Scalars['Int']['output'];
  /**
   * The total price without any discounts applied, in shop currency. ""This value is based on the unit price of the variant x quantity.
   * @deprecated Use `originalTotalSet` instead.
   */
  originalTotal: Scalars['Shopify_Money']['output'];
  /** The total price in shop and presentment currencies, without discounts applied. This value is based on the unit price of the variant x quantity. */
  originalTotalSet: Shopify_MoneyBag;
  /**
   * The variant unit price without discounts applied, in shop currency.
   * @deprecated Use `originalUnitPriceSet` instead.
   */
  originalUnitPrice: Scalars['Shopify_Money']['output'];
  /** The variant unit price without discounts applied, in shop and presentment currencies. */
  originalUnitPriceSet: Shopify_MoneyBag;
  /** The Product object associated with this line item's variant. */
  product?: Maybe<Shopify_Product>;
  /** The number of variant units ordered. */
  quantity: Scalars['Int']['output'];
  /** The line item's quantity, minus the refunded quantity. */
  refundableQuantity: Scalars['Int']['output'];
  /** Whether physical shipping is required for the variant. */
  requiresShipping: Scalars['Boolean']['output'];
  /** Whether the line item can be restocked. */
  restockable: Scalars['Boolean']['output'];
  /** The variant SKU number. */
  sku?: Maybe<Scalars['String']['output']>;
  /** Staff attributed to the line item. */
  staffMember?: Maybe<Shopify_StaffMember>;
  /** The TaxLine object connected to this line item. */
  taxLines: Array<Shopify_TaxLine>;
  /** Whether the variant is taxable. */
  taxable: Scalars['Boolean']['output'];
  /** The title of the product. */
  title: Scalars['String']['output'];
  /**
   * The total amount of the discount allocated to the line item in the shop currency. This field must be explicitly set using draft orders, Shopify scripts, or the API. Instead of using this field, Shopify recommends using `discountAllocations`, which provides the same information.
   * @deprecated Use `totalDiscountSet` instead.
   */
  totalDiscount: Scalars['Shopify_Money']['output'];
  /** The total amount of the discount allocated to the line item in the presentment currency. This field must be explicitly set using draft orders, Shopify scripts, or the API. Instead of using this field, Shopify recommends using `discountAllocations`, which provides the same information. */
  totalDiscountSet: Shopify_MoneyBag;
  /**
   * The total discounted value of unfulfilled units, in shop currency.
   * @deprecated Use `unfulfilledDiscountedTotalSet` instead.
   */
  unfulfilledDiscountedTotal: Scalars['Shopify_Money']['output'];
  /** The total discounted value of unfulfilled units, in shop and presentment currencies. */
  unfulfilledDiscountedTotalSet: Shopify_MoneyBag;
  /**
   * The total price without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop currency.
   * @deprecated Use `unfulfilledOriginalTotalSet` instead.
   */
  unfulfilledOriginalTotal: Scalars['Shopify_Money']['output'];
  /** The total price without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop and presentment currencies. */
  unfulfilledOriginalTotalSet: Shopify_MoneyBag;
  /** The number of units not yet fulfilled. */
  unfulfilledQuantity: Scalars['Int']['output'];
  /** The Variant object associated with this line item. */
  variant?: Maybe<Shopify_ProductVariant>;
  /** The name of the variant. */
  variantTitle?: Maybe<Scalars['String']['output']>;
  /** The name of the vendor who made the variant. */
  vendor?: Maybe<Scalars['String']['output']>;
};


/** Represents a single line item on an order. */
export type Shopify_LineItemMutableTaxLinesArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
};

/** An auto-generated type for paginating through multiple LineItemMutables. */
export type Shopify_LineItemMutableConnection = {
  __typename?: 'Shopify_LineItemMutableConnection';
  /** A list of edges. */
  edges: Array<Shopify_LineItemMutableEdge>;
  /** A list of the nodes contained in LineItemMutableEdge. */
  nodes: Array<Shopify_LineItemMutable>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one LineItemMutable and a cursor during pagination. */
export type Shopify_LineItemMutableEdge = {
  __typename?: 'Shopify_LineItemMutableEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of LineItemMutableEdge. */
  node: Shopify_LineItemMutable;
};

/** Represents the selling plan for a line item. */
export type Shopify_LineItemSellingPlan = {
  __typename?: 'Shopify_LineItemSellingPlan';
  /** The name of the selling plan for display purposes. */
  name: Scalars['String']['output'];
  /** The ID of the selling plan associated with the line item. */
  sellingPlanId?: Maybe<Scalars['ID']['output']>;
};

/** A link to direct users to. */
export type Shopify_Link = Shopify_HasPublishedTranslations & {
  __typename?: 'Shopify_Link';
  /** A context-sensitive label for the link. */
  label: Scalars['String']['output'];
  /** The translations associated with the resource. */
  translations: Array<Shopify_Translation>;
  /** The URL that the link visits. */
  url: Scalars['Shopify_URL']['output'];
};


/** A link to direct users to. */
export type Shopify_LinkTranslationsArgs = {
  locale: Scalars['String']['input'];
  marketId?: InputMaybe<Scalars['ID']['input']>;
};

/**
 * The identifier for the metafield linked to this option.
 *
 * This API is currently in early access. See [Metafield-linked product options](https://shopify.dev/docs/api/admin/migrate/new-product-model/metafield-linked) for more details.
 */
export type Shopify_LinkedMetafield = {
  __typename?: 'Shopify_LinkedMetafield';
  /** Key of the metafield the option is linked to. */
  key?: Maybe<Scalars['String']['output']>;
  /** Namespace of the metafield the option is linked to. */
  namespace?: Maybe<Scalars['String']['output']>;
};

/** Represents the value captured by a localization extension. Localization extensions are additional fields required by certain countries on international orders. For example, some countries require additional fields for customs information or tax identification numbers. */
export type Shopify_LocalizationExtension = {
  __typename?: 'Shopify_LocalizationExtension';
  /** Country ISO 3166-1 alpha-2 code. */
  countryCode: Shopify_CountryCode;
  /** The localized extension keys that are allowed. */
  key: Shopify_LocalizationExtensionKey;
  /** The purpose of this localization extension. */
  purpose: Shopify_LocalizationExtensionPurpose;
  /** The localized extension title. */
  title: Scalars['String']['output'];
  /** The value of the field. */
  value: Scalars['String']['output'];
};

/** An auto-generated type for paginating through multiple LocalizationExtensions. */
export type Shopify_LocalizationExtensionConnection = {
  __typename?: 'Shopify_LocalizationExtensionConnection';
  /** A list of edges. */
  edges: Array<Shopify_LocalizationExtensionEdge>;
  /** A list of the nodes contained in LocalizationExtensionEdge. */
  nodes: Array<Shopify_LocalizationExtension>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one LocalizationExtension and a cursor during pagination. */
export type Shopify_LocalizationExtensionEdge = {
  __typename?: 'Shopify_LocalizationExtensionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of LocalizationExtensionEdge. */
  node: Shopify_LocalizationExtension;
};

/** The key of a localization extension. */
export enum Shopify_LocalizationExtensionKey {
  /** Extension key 'shipping_credential_br' for country BR. */
  ShippingCredentialBr = 'SHIPPING_CREDENTIAL_BR',
  /** Extension key 'shipping_credential_cn' for country CN. */
  ShippingCredentialCn = 'SHIPPING_CREDENTIAL_CN',
  /** Extension key 'shipping_credential_kr' for country KR. */
  ShippingCredentialKr = 'SHIPPING_CREDENTIAL_KR',
  /** Extension key 'tax_credential_br' for country BR. */
  TaxCredentialBr = 'TAX_CREDENTIAL_BR',
  /** Extension key 'tax_credential_it' for country IT. */
  TaxCredentialIt = 'TAX_CREDENTIAL_IT',
  /** Extension key 'tax_email_it' for country IT. */
  TaxEmailIt = 'TAX_EMAIL_IT'
}

/** The purpose of a localization extension. */
export enum Shopify_LocalizationExtensionPurpose {
  /** Extensions that are used for shipping purposes, for example, customs clearance. */
  Shipping = 'SHIPPING',
  /** Extensions that are used for taxes purposes, for example, invoicing. */
  Tax = 'TAX'
}

/** Represents the location where the physical good resides. */
export type Shopify_Location = Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_LegacyInteroperability & Shopify_Node & {
  __typename?: 'Shopify_Location';
  /** Whether this location can be reactivated. */
  activatable: Scalars['Boolean']['output'];
  /** The address of this location. */
  address: Shopify_LocationAddress;
  /** Whether the location address has been verified. */
  addressVerified: Scalars['Boolean']['output'];
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) that the location was added to a shop. */
  createdAt: Scalars['DateTime']['output'];
  /** Whether this location can be deactivated. */
  deactivatable: Scalars['Boolean']['output'];
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) that the location was deactivated at. For example, 3:30 pm on September 7, 2019 in the time zone of UTC (Universal Time Coordinated) is represented as `"2019-09-07T15:50:00Z`". */
  deactivatedAt?: Maybe<Scalars['String']['output']>;
  /** Whether this location can be deleted. */
  deletable: Scalars['Boolean']['output'];
  /** Name of the service provider that fulfills from this location. */
  fulfillmentService?: Maybe<Shopify_FulfillmentService>;
  /** Whether this location can fulfill online orders. */
  fulfillsOnlineOrders: Scalars['Boolean']['output'];
  /** Whether this location has active inventory. */
  hasActiveInventory: Scalars['Boolean']['output'];
  /** Whether this location has orders that need to be fulfilled. */
  hasUnfulfilledOrders: Scalars['Boolean']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The quantities of an inventory item at this location. */
  inventoryLevel?: Maybe<Shopify_InventoryLevel>;
  /** A list of the quantities of the inventory items that can be stocked at this location. */
  inventoryLevels: Shopify_InventoryLevelConnection;
  /** Whether the location is active. */
  isActive: Scalars['Boolean']['output'];
  /** Whether this location is a fulfillment service. */
  isFulfillmentService: Scalars['Boolean']['output'];
  /**
   * Whether the location is your primary location for shipping inventory.
   * @deprecated The concept of a primary location is deprecated, shipsInventory can be used to get a fallback location
   */
  isPrimary: Scalars['Boolean']['output'];
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['Shopify_UnsignedInt64']['output'];
  /** Local pickup settings for the location. */
  localPickupSettingsV2?: Maybe<Shopify_DeliveryLocalPickupSettings>;
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafield definitions. */
  metafieldDefinitions: Shopify_MetafieldDefinitionConnection;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /** The name of the location. */
  name: Scalars['String']['output'];
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafields: Shopify_PrivateMetafieldConnection;
  /** Whether this location is used for calculating shipping rates. In multi-origin shipping mode, this flag is ignored. */
  shipsInventory: Scalars['Boolean']['output'];
  /** List of suggested addresses for this location (empty if none). */
  suggestedAddresses: Array<Shopify_LocationSuggestedAddress>;
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the location was last updated. */
  updatedAt: Scalars['DateTime']['output'];
};


/** Represents the location where the physical good resides. */
export type Shopify_LocationInventoryLevelArgs = {
  inventoryItemId: Scalars['ID']['input'];
};


/** Represents the location where the physical good resides. */
export type Shopify_LocationInventoryLevelsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents the location where the physical good resides. */
export type Shopify_LocationMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace?: InputMaybe<Scalars['String']['input']>;
};


/** Represents the location where the physical good resides. */
export type Shopify_LocationMetafieldDefinitionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  pinnedStatus?: InputMaybe<Shopify_MetafieldDefinitionPinnedStatus>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_MetafieldDefinitionSortKeys>;
};


/** Represents the location where the physical good resides. */
export type Shopify_LocationMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents the location where the physical good resides. */
export type Shopify_LocationPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace: Scalars['String']['input'];
};


/** Represents the location where the physical good resides. */
export type Shopify_LocationPrivateMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** An error that occurs while activating a location. */
export type Shopify_LocationActivateUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_LocationActivateUserError';
  /** The error code. */
  code?: Maybe<Shopify_LocationActivateUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `LocationActivateUserError`. */
export enum Shopify_LocationActivateUserErrorCode {
  /** An error occurred while activating the location. */
  GenericError = 'GENERIC_ERROR',
  /** There is already an active location with this name. */
  HasNonUniqueName = 'HAS_NON_UNIQUE_NAME',
  /** This location currently cannot be activated as inventory, pending orders or transfers are being relocated from this location. */
  HasOngoingRelocation = 'HAS_ONGOING_RELOCATION',
  /** Shop has reached its location limit. */
  LocationLimit = 'LOCATION_LIMIT',
  /** Location not found. */
  LocationNotFound = 'LOCATION_NOT_FOUND'
}

/** An error that occurs while adding a location. */
export type Shopify_LocationAddUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_LocationAddUserError';
  /** The error code. */
  code?: Maybe<Shopify_LocationAddUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `LocationAddUserError`. */
export enum Shopify_LocationAddUserErrorCode {
  /** ApiPermission metafields can only be created or updated by the app owner. */
  AppNotAuthorized = 'APP_NOT_AUTHORIZED',
  /** The input value is blank. */
  Blank = 'BLANK',
  /** The metafield violates a capability restriction. */
  CapabilityViolation = 'CAPABILITY_VIOLATION',
  /** Owner type can't be used in this mutation. */
  DisallowedOwnerType = 'DISALLOWED_OWNER_TYPE',
  /** An error occurred while adding the location. */
  GenericError = 'GENERIC_ERROR',
  /** The input value isn't included in the list. */
  Inclusion = 'INCLUSION',
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** The type is invalid. */
  InvalidType = 'INVALID_TYPE',
  /** The ZIP code is not a valid US ZIP code. */
  InvalidUsZipcode = 'INVALID_US_ZIPCODE',
  /** The value is invalid for the metafield type or for the definition options. */
  InvalidValue = 'INVALID_VALUE',
  /** The input value needs to be blank. */
  Present = 'PRESENT',
  /** The input value is already taken. */
  Taken = 'TAKEN',
  /** The input value is too long. */
  TooLong = 'TOO_LONG',
  /** The input value is too short. */
  TooShort = 'TOO_SHORT',
  /** Unstructured reserved namespace. */
  UnstructuredReservedNamespace = 'UNSTRUCTURED_RESERVED_NAMESPACE'
}

/** Represents the address of a location. */
export type Shopify_LocationAddress = {
  __typename?: 'Shopify_LocationAddress';
  /** The first line of the address for the location. */
  address1?: Maybe<Scalars['String']['output']>;
  /** The second line of the address for the location. */
  address2?: Maybe<Scalars['String']['output']>;
  /** The city of the location. */
  city?: Maybe<Scalars['String']['output']>;
  /** The country of the location. */
  country?: Maybe<Scalars['String']['output']>;
  /** The country code of the location. */
  countryCode?: Maybe<Scalars['String']['output']>;
  /** A formatted version of the address for the location. */
  formatted: Array<Scalars['String']['output']>;
  /** The approximate latitude coordinates of the location. */
  latitude?: Maybe<Scalars['Float']['output']>;
  /** The approximate longitude coordinates of the location. */
  longitude?: Maybe<Scalars['Float']['output']>;
  /** The phone number of the location. */
  phone?: Maybe<Scalars['String']['output']>;
  /** The province of the location. */
  province?: Maybe<Scalars['String']['output']>;
  /** The code for the province, state, or district of the address of the location. */
  provinceCode?: Maybe<Scalars['String']['output']>;
  /** The ZIP code of the location. */
  zip?: Maybe<Scalars['String']['output']>;
};

/** An auto-generated type for paginating through multiple Locations. */
export type Shopify_LocationConnection = {
  __typename?: 'Shopify_LocationConnection';
  /** A list of edges. */
  edges: Array<Shopify_LocationEdge>;
  /** A list of the nodes contained in LocationEdge. */
  nodes: Array<Shopify_Location>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** The possible errors that can be returned when executing the `locationDeactivate` mutation. */
export type Shopify_LocationDeactivateUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_LocationDeactivateUserError';
  /** The error code. */
  code?: Maybe<Shopify_LocationDeactivateUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `LocationDeactivateUserError`. */
export enum Shopify_LocationDeactivateUserErrorCode {
  /** At least one location must fulfill online orders. */
  CannotDisableOnlineOrderFulfillment = 'CANNOT_DISABLE_ONLINE_ORDER_FULFILLMENT',
  /** Destination location is the same as the location to be deactivated. */
  DestinationLocationIsTheSameLocation = 'DESTINATION_LOCATION_IS_THE_SAME_LOCATION',
  /** Destination location is not found or inactive. */
  DestinationLocationNotFoundOrInactive = 'DESTINATION_LOCATION_NOT_FOUND_OR_INACTIVE',
  /** Failed to relocate active inventories to the destination location. */
  FailedToRelocateActiveInventories = 'FAILED_TO_RELOCATE_ACTIVE_INVENTORIES',
  /** Failed to relocate incoming movements to the destination location. */
  FailedToRelocateIncomingMovements = 'FAILED_TO_RELOCATE_INCOMING_MOVEMENTS',
  /** Failed to relocate open purchase orders to the destination location. */
  FailedToRelocateOpenPurchaseOrders = 'FAILED_TO_RELOCATE_OPEN_PURCHASE_ORDERS',
  /** Failed to relocate open transfers to the destination location. */
  FailedToRelocateOpenTransfers = 'FAILED_TO_RELOCATE_OPEN_TRANSFERS',
  /** Location could not be deactivated without specifying where to relocate inventory at the location. */
  HasActiveInventoryError = 'HAS_ACTIVE_INVENTORY_ERROR',
  /** Location needs to be removed from Shopify POS for Retail subscription in Point of Sale channel. */
  HasActiveRetailSubscriptions = 'HAS_ACTIVE_RETAIL_SUBSCRIPTIONS',
  /** Location could not be deactivated because it has pending orders. */
  HasFulfillmentOrdersError = 'HAS_FULFILLMENT_ORDERS_ERROR',
  /** Location could not be deactivated because it has open Shopify Fulfillment Network transfers. */
  HasIncomingMovementsError = 'HAS_INCOMING_MOVEMENTS_ERROR',
  /** Location could not be deactivated because it has open purchase orders. */
  HasOpenPurchaseOrdersError = 'HAS_OPEN_PURCHASE_ORDERS_ERROR',
  /** Location could not be deactivated because it has open transfers. */
  HasOpenTransfersError = 'HAS_OPEN_TRANSFERS_ERROR',
  /** Location not found. */
  LocationNotFound = 'LOCATION_NOT_FOUND',
  /** Location either has a fulfillment service or is the only location with a shipping address. */
  PermanentlyBlockedFromDeactivationError = 'PERMANENTLY_BLOCKED_FROM_DEACTIVATION_ERROR',
  /** Location has incoming inventory. The location can be deactivated after the inventory has been received. */
  TemporarilyBlockedFromDeactivationError = 'TEMPORARILY_BLOCKED_FROM_DEACTIVATION_ERROR'
}

/** An error that occurs while deleting a location. */
export type Shopify_LocationDeleteUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_LocationDeleteUserError';
  /** The error code. */
  code?: Maybe<Shopify_LocationDeleteUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `LocationDeleteUserError`. */
export enum Shopify_LocationDeleteUserErrorCode {
  /** An error occurred while deleting the location. */
  GenericError = 'GENERIC_ERROR',
  /** The location cannot be deleted while it has any active Retail subscriptions in the Point of Sale channel. */
  LocationHasActiveRetailSubscription = 'LOCATION_HAS_ACTIVE_RETAIL_SUBSCRIPTION',
  /** The location cannot be deleted while it has inventory. */
  LocationHasInventory = 'LOCATION_HAS_INVENTORY',
  /** The location cannot be deleted while it has pending orders. */
  LocationHasPendingOrders = 'LOCATION_HAS_PENDING_ORDERS',
  /** The location cannot be deleted while it is active. */
  LocationIsActive = 'LOCATION_IS_ACTIVE',
  /** Location not found. */
  LocationNotFound = 'LOCATION_NOT_FOUND'
}

/** An auto-generated type which holds one Location and a cursor during pagination. */
export type Shopify_LocationEdge = {
  __typename?: 'Shopify_LocationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of LocationEdge. */
  node: Shopify_Location;
};

/** An error that occurs while editing a location. */
export type Shopify_LocationEditUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_LocationEditUserError';
  /** The error code. */
  code?: Maybe<Shopify_LocationEditUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `LocationEditUserError`. */
export enum Shopify_LocationEditUserErrorCode {
  /** ApiPermission metafields can only be created or updated by the app owner. */
  AppNotAuthorized = 'APP_NOT_AUTHORIZED',
  /** The input value is blank. */
  Blank = 'BLANK',
  /** At least one location must fulfill online orders. */
  CannotDisableOnlineOrderFulfillment = 'CANNOT_DISABLE_ONLINE_ORDER_FULFILLMENT',
  /** Cannot modify the online order fulfillment preference for fulfillment service locations. */
  CannotModifyOnlineOrderFulfillmentForFsLocation = 'CANNOT_MODIFY_ONLINE_ORDER_FULFILLMENT_FOR_FS_LOCATION',
  /** The metafield violates a capability restriction. */
  CapabilityViolation = 'CAPABILITY_VIOLATION',
  /** Owner type can't be used in this mutation. */
  DisallowedOwnerType = 'DISALLOWED_OWNER_TYPE',
  /** An error occurred while editing the location. */
  GenericError = 'GENERIC_ERROR',
  /** The input value isn't included in the list. */
  Inclusion = 'INCLUSION',
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** The type is invalid. */
  InvalidType = 'INVALID_TYPE',
  /** The ZIP code is not a valid US ZIP code. */
  InvalidUsZipcode = 'INVALID_US_ZIPCODE',
  /** The value is invalid for the metafield type or for the definition options. */
  InvalidValue = 'INVALID_VALUE',
  /** The record with the ID used as the input value couldn't be found. */
  NotFound = 'NOT_FOUND',
  /** The input value needs to be blank. */
  Present = 'PRESENT',
  /** The input value is already taken. */
  Taken = 'TAKEN',
  /** The input value is too long. */
  TooLong = 'TOO_LONG',
  /** The input value is too short. */
  TooShort = 'TOO_SHORT',
  /** Unstructured reserved namespace. */
  UnstructuredReservedNamespace = 'UNSTRUCTURED_RESERVED_NAMESPACE'
}

/** The set of valid sort keys for the Location query. */
export enum Shopify_LocationSortKeys {
  /** Sort by the `id` value. */
  Id = 'ID',
  /** Sort by the `name` value. */
  Name = 'NAME',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE'
}

/** Represents a suggested address for a location. */
export type Shopify_LocationSuggestedAddress = {
  __typename?: 'Shopify_LocationSuggestedAddress';
  /** The first line of the suggested address. */
  address1?: Maybe<Scalars['String']['output']>;
  /** The second line of the suggested address. */
  address2?: Maybe<Scalars['String']['output']>;
  /** The city of the suggested address. */
  city?: Maybe<Scalars['String']['output']>;
  /** The country of the suggested address. */
  country?: Maybe<Scalars['String']['output']>;
  /** The country code of the suggested address. */
  countryCode?: Maybe<Shopify_CountryCode>;
  /** A formatted version of the suggested address. */
  formatted: Array<Scalars['String']['output']>;
  /** The province of the suggested address. */
  province?: Maybe<Scalars['String']['output']>;
  /** The code for the province, state, or district of the suggested address. */
  provinceCode?: Maybe<Scalars['String']['output']>;
  /** The ZIP code of the suggested address. */
  zip?: Maybe<Scalars['String']['output']>;
};

/**
 * Represents a customer mailing address.
 *
 * For example, a customer's default address and an order's billing address are both mailling addresses.
 */
export type Shopify_MailingAddress = Shopify_Node & {
  __typename?: 'Shopify_MailingAddress';
  /** The first line of the address. Typically the street address or PO Box number. */
  address1?: Maybe<Scalars['String']['output']>;
  /** The second line of the address. Typically the number of the apartment, suite, or unit. */
  address2?: Maybe<Scalars['String']['output']>;
  /** The name of the city, district, village, or town. */
  city?: Maybe<Scalars['String']['output']>;
  /** The name of the customer's company or organization. */
  company?: Maybe<Scalars['String']['output']>;
  /** Whether the address coordinates are valid. */
  coordinatesValidated: Scalars['Boolean']['output'];
  /** The name of the country. */
  country?: Maybe<Scalars['String']['output']>;
  /**
   * The two-letter code for the country of the address.
   *
   * For example, US.
   * @deprecated Use `countryCodeV2` instead.
   */
  countryCode?: Maybe<Scalars['String']['output']>;
  /**
   * The two-letter code for the country of the address.
   *
   * For example, US.
   */
  countryCodeV2?: Maybe<Shopify_CountryCode>;
  /** The first name of the customer. */
  firstName?: Maybe<Scalars['String']['output']>;
  /** A formatted version of the address, customized by the provided arguments. */
  formatted: Array<Scalars['String']['output']>;
  /** A comma-separated list of the values for city, province, and country. */
  formattedArea?: Maybe<Scalars['String']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The last name of the customer. */
  lastName?: Maybe<Scalars['String']['output']>;
  /** The latitude coordinate of the customer address. */
  latitude?: Maybe<Scalars['Float']['output']>;
  /** The longitude coordinate of the customer address. */
  longitude?: Maybe<Scalars['Float']['output']>;
  /** The full name of the customer, based on firstName and lastName. */
  name?: Maybe<Scalars['String']['output']>;
  /**
   * A unique phone number for the customer.
   *
   * Formatted using E.164 standard. For example, _+16135551111_.
   */
  phone?: Maybe<Scalars['String']['output']>;
  /** The region of the address, such as the province, state, or district. */
  province?: Maybe<Scalars['String']['output']>;
  /**
   * The two-letter code for the region.
   *
   * For example, ON.
   */
  provinceCode?: Maybe<Scalars['String']['output']>;
  /** The time zone of the address. */
  timeZone?: Maybe<Scalars['String']['output']>;
  /** The zip or postal code of the address. */
  zip?: Maybe<Scalars['String']['output']>;
};


/**
 * Represents a customer mailing address.
 *
 * For example, a customer's default address and an order's billing address are both mailling addresses.
 */
export type Shopify_MailingAddressFormattedArgs = {
  withCompany?: InputMaybe<Scalars['Boolean']['input']>;
  withName?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The input fields to create or update a mailing address. */
export type Shopify_MailingAddressInput = {
  /** The first line of the address. Typically the street address or PO Box number. */
  address1?: InputMaybe<Scalars['String']['input']>;
  /** The second line of the address. Typically the number of the apartment, suite, or unit. */
  address2?: InputMaybe<Scalars['String']['input']>;
  /** The name of the city, district, village, or town. */
  city?: InputMaybe<Scalars['String']['input']>;
  /** The name of the customer's company or organization. */
  company?: InputMaybe<Scalars['String']['input']>;
  /** The two-letter code for the country of the address. */
  countryCode?: InputMaybe<Shopify_CountryCode>;
  /** The first name of the customer. */
  firstName?: InputMaybe<Scalars['String']['input']>;
  /** The last name of the customer. */
  lastName?: InputMaybe<Scalars['String']['input']>;
  /**
   * A unique phone number for the customer.
   *
   * Formatted using E.164 standard. For example, _+16135551111_.
   */
  phone?: InputMaybe<Scalars['String']['input']>;
  /**
   * The code for the region of the address, such as the province, state, or district.
   * For example QC for Quebec, Canada.
   */
  provinceCode?: InputMaybe<Scalars['String']['input']>;
  /** The zip or postal code of the address. */
  zip?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Manual discount applications capture the intentions of a discount that was manually created for an order.
 *
 * Discount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
 */
export type Shopify_ManualDiscountApplication = Shopify_DiscountApplication & {
  __typename?: 'Shopify_ManualDiscountApplication';
  /** The method by which the discount's value is applied to its entitled items. */
  allocationMethod: Shopify_DiscountApplicationAllocationMethod;
  /** The description of the discount application. */
  description?: Maybe<Scalars['String']['output']>;
  /**
   * An ordered index that can be used to identify the discount application and indicate the precedence
   * of the discount application for calculations.
   */
  index: Scalars['Int']['output'];
  /** How the discount amount is distributed on the discounted lines. */
  targetSelection: Shopify_DiscountApplicationTargetSelection;
  /** Whether the discount is applied on line items or shipping lines. */
  targetType: Shopify_DiscountApplicationTargetType;
  /** The title of the discount application. */
  title: Scalars['String']['output'];
  /** The value of the discount application. */
  value: Shopify_PricingValue;
};

/**
 * A market is a group of one or more regions that you want to target for international sales.
 * By creating a market, you can configure a distinct, localized shopping experience for
 * customers from a specific area of the world. For example, you can
 * [change currency](https://shopify.dev/api/admin-graphql/current/mutations/marketCurrencySettingsUpdate),
 * [configure international pricing](https://shopify.dev/apps/internationalization/product-price-lists),
 * or [add market-specific domains or subfolders](https://shopify.dev/api/admin-graphql/current/objects/MarketWebPresence).
 */
export type Shopify_Market = Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_Node & {
  __typename?: 'Shopify_Market';
  /** The catalogs that belong to the market. */
  catalogs: Shopify_MarketCatalogConnection;
  /** The number of catalogs that belong to the market. */
  catalogsCount?: Maybe<Shopify_Count>;
  /** The market’s currency settings. */
  currencySettings: Shopify_MarketCurrencySettings;
  /**
   * Whether the market is enabled to receive visitors and sales. **Note**: Regions in inactive
   * markets can't be selected on the storefront or in checkout.
   */
  enabled: Scalars['Boolean']['output'];
  /** A short, human-readable unique identifier for the market. This is changeable by the merchant. */
  handle: Scalars['String']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafield definitions. */
  metafieldDefinitions: Shopify_MetafieldDefinitionConnection;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /** The name of the market. Not shown to customers. */
  name: Scalars['String']['output'];
  /**
   * The market’s price list, which specifies a percentage-based price adjustment as well as
   * fixed price overrides for specific variants.
   *
   * Markets with multiple catalogs can have multiple price lists. To query which price lists are connected to
   * a market, please query for price lists through the catalogs connection.
   * @deprecated Use `catalogs` instead.
   */
  priceList?: Maybe<Shopify_PriceList>;
  /** Whether the market is the shop’s primary market. */
  primary: Scalars['Boolean']['output'];
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafields: Shopify_PrivateMetafieldConnection;
  /** The regions that comprise the market. */
  regions: Shopify_MarketRegionConnection;
  /**
   * The market’s web presence, which defines its SEO strategy. This can be a different domain,
   * subdomain, or subfolders of the primary domain. Each web presence comprises one or more
   * language variants. If a market doesn't have its own web presence, then the market is accessible on the
   * primary market's domains using [country
   * selectors](https://shopify.dev/themes/internationalization/multiple-currencies-languages#the-country-selector).
   * If it's the primary market and it has multiple web presences, then this field will return the primary domain web presence.
   */
  webPresence?: Maybe<Shopify_MarketWebPresence>;
  /**
   * The market’s web presences, which defines its SEO strategy. This can be a different domain,
   * subdomain, or subfolders of the primary domain. Each web presence comprises one or more
   * language variants. If a market doesn't have any web presences, then the market is accessible on the
   * primary market's domains using [country
   * selectors](https://shopify.dev/themes/internationalization/multiple-currencies-languages#the-country-selector).
   */
  webPresences: Shopify_MarketWebPresenceConnection;
};


/**
 * A market is a group of one or more regions that you want to target for international sales.
 * By creating a market, you can configure a distinct, localized shopping experience for
 * customers from a specific area of the world. For example, you can
 * [change currency](https://shopify.dev/api/admin-graphql/current/mutations/marketCurrencySettingsUpdate),
 * [configure international pricing](https://shopify.dev/apps/internationalization/product-price-lists),
 * or [add market-specific domains or subfolders](https://shopify.dev/api/admin-graphql/current/objects/MarketWebPresence).
 */
export type Shopify_MarketCatalogsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * A market is a group of one or more regions that you want to target for international sales.
 * By creating a market, you can configure a distinct, localized shopping experience for
 * customers from a specific area of the world. For example, you can
 * [change currency](https://shopify.dev/api/admin-graphql/current/mutations/marketCurrencySettingsUpdate),
 * [configure international pricing](https://shopify.dev/apps/internationalization/product-price-lists),
 * or [add market-specific domains or subfolders](https://shopify.dev/api/admin-graphql/current/objects/MarketWebPresence).
 */
export type Shopify_MarketMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace?: InputMaybe<Scalars['String']['input']>;
};


/**
 * A market is a group of one or more regions that you want to target for international sales.
 * By creating a market, you can configure a distinct, localized shopping experience for
 * customers from a specific area of the world. For example, you can
 * [change currency](https://shopify.dev/api/admin-graphql/current/mutations/marketCurrencySettingsUpdate),
 * [configure international pricing](https://shopify.dev/apps/internationalization/product-price-lists),
 * or [add market-specific domains or subfolders](https://shopify.dev/api/admin-graphql/current/objects/MarketWebPresence).
 */
export type Shopify_MarketMetafieldDefinitionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  pinnedStatus?: InputMaybe<Shopify_MetafieldDefinitionPinnedStatus>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_MetafieldDefinitionSortKeys>;
};


/**
 * A market is a group of one or more regions that you want to target for international sales.
 * By creating a market, you can configure a distinct, localized shopping experience for
 * customers from a specific area of the world. For example, you can
 * [change currency](https://shopify.dev/api/admin-graphql/current/mutations/marketCurrencySettingsUpdate),
 * [configure international pricing](https://shopify.dev/apps/internationalization/product-price-lists),
 * or [add market-specific domains or subfolders](https://shopify.dev/api/admin-graphql/current/objects/MarketWebPresence).
 */
export type Shopify_MarketMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * A market is a group of one or more regions that you want to target for international sales.
 * By creating a market, you can configure a distinct, localized shopping experience for
 * customers from a specific area of the world. For example, you can
 * [change currency](https://shopify.dev/api/admin-graphql/current/mutations/marketCurrencySettingsUpdate),
 * [configure international pricing](https://shopify.dev/apps/internationalization/product-price-lists),
 * or [add market-specific domains or subfolders](https://shopify.dev/api/admin-graphql/current/objects/MarketWebPresence).
 */
export type Shopify_MarketPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace: Scalars['String']['input'];
};


/**
 * A market is a group of one or more regions that you want to target for international sales.
 * By creating a market, you can configure a distinct, localized shopping experience for
 * customers from a specific area of the world. For example, you can
 * [change currency](https://shopify.dev/api/admin-graphql/current/mutations/marketCurrencySettingsUpdate),
 * [configure international pricing](https://shopify.dev/apps/internationalization/product-price-lists),
 * or [add market-specific domains or subfolders](https://shopify.dev/api/admin-graphql/current/objects/MarketWebPresence).
 */
export type Shopify_MarketPrivateMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * A market is a group of one or more regions that you want to target for international sales.
 * By creating a market, you can configure a distinct, localized shopping experience for
 * customers from a specific area of the world. For example, you can
 * [change currency](https://shopify.dev/api/admin-graphql/current/mutations/marketCurrencySettingsUpdate),
 * [configure international pricing](https://shopify.dev/apps/internationalization/product-price-lists),
 * or [add market-specific domains or subfolders](https://shopify.dev/api/admin-graphql/current/objects/MarketWebPresence).
 */
export type Shopify_MarketRegionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * A market is a group of one or more regions that you want to target for international sales.
 * By creating a market, you can configure a distinct, localized shopping experience for
 * customers from a specific area of the world. For example, you can
 * [change currency](https://shopify.dev/api/admin-graphql/current/mutations/marketCurrencySettingsUpdate),
 * [configure international pricing](https://shopify.dev/apps/internationalization/product-price-lists),
 * or [add market-specific domains or subfolders](https://shopify.dev/api/admin-graphql/current/objects/MarketWebPresence).
 */
export type Shopify_MarketWebPresencesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** A list of products with publishing and pricing information associated with markets. */
export type Shopify_MarketCatalog = Shopify_Catalog & Shopify_Node & {
  __typename?: 'Shopify_MarketCatalog';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The markets associated with the catalog. */
  markets: Shopify_MarketConnection;
  /** Most recent catalog operations. */
  operations: Array<Shopify_ResourceOperation>;
  /** The price list associated with the catalog. */
  priceList?: Maybe<Shopify_PriceList>;
  /** A group of products and collections that's published to a catalog. */
  publication?: Maybe<Shopify_Publication>;
  /** The status of the catalog. */
  status: Shopify_CatalogStatus;
  /** The name of the catalog. */
  title: Scalars['String']['output'];
};


/** A list of products with publishing and pricing information associated with markets. */
export type Shopify_MarketCatalogMarketsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** An auto-generated type for paginating through multiple MarketCatalogs. */
export type Shopify_MarketCatalogConnection = {
  __typename?: 'Shopify_MarketCatalogConnection';
  /** A list of edges. */
  edges: Array<Shopify_MarketCatalogEdge>;
  /** A list of the nodes contained in MarketCatalogEdge. */
  nodes: Array<Shopify_MarketCatalog>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one MarketCatalog and a cursor during pagination. */
export type Shopify_MarketCatalogEdge = {
  __typename?: 'Shopify_MarketCatalogEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of MarketCatalogEdge. */
  node: Shopify_MarketCatalog;
};

/** An auto-generated type for paginating through multiple Markets. */
export type Shopify_MarketConnection = {
  __typename?: 'Shopify_MarketConnection';
  /** A list of edges. */
  edges: Array<Shopify_MarketEdge>;
  /** A list of the nodes contained in MarketEdge. */
  nodes: Array<Shopify_Market>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** A market's currency settings. */
export type Shopify_MarketCurrencySettings = {
  __typename?: 'Shopify_MarketCurrencySettings';
  /**
   * The currency which this market's prices are defined in, and the
   * currency which its customers must use if local currencies are disabled.
   */
  baseCurrency: Shopify_CurrencySetting;
  /**
   * Whether or not local currencies are enabled. If enabled, then prices will
   * be converted to give each customer the best experience based on their
   * region. If disabled, then all customers in this market will see prices
   * in the market's base currency. For single country markets this will be true when
   * the market's base currency is the same as the default currency for the region.
   */
  localCurrencies: Scalars['Boolean']['output'];
};

/** Error codes for failed market multi-currency operations. */
export type Shopify_MarketCurrencySettingsUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_MarketCurrencySettingsUserError';
  /** The error code. */
  code?: Maybe<Shopify_MarketCurrencySettingsUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `MarketCurrencySettingsUserError`. */
export enum Shopify_MarketCurrencySettingsUserErrorCode {
  /** The currency settings of the given market cannot be changed because the market manager has exclusive control of pricing. */
  ManagedMarket = 'MANAGED_MARKET',
  /** The specified market wasn't found. */
  MarketNotFound = 'MARKET_NOT_FOUND',
  /** The shop's payment gateway does not support enabling more than one currency. */
  MultipleCurrenciesNotSupported = 'MULTIPLE_CURRENCIES_NOT_SUPPORTED',
  /** Can't enable or disable local currencies on a single country market. */
  NoLocalCurrenciesOnSingleCountryMarket = 'NO_LOCAL_CURRENCIES_ON_SINGLE_COUNTRY_MARKET',
  /** The primary market must use the shop currency. */
  PrimaryMarketUsesShopCurrency = 'PRIMARY_MARKET_USES_SHOP_CURRENCY',
  /** The specified currency is not supported. */
  UnsupportedCurrency = 'UNSUPPORTED_CURRENCY'
}

/** An auto-generated type which holds one Market and a cursor during pagination. */
export type Shopify_MarketEdge = {
  __typename?: 'Shopify_MarketEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of MarketEdge. */
  node: Shopify_Market;
};

/** A geographic region which comprises a market. */
export type Shopify_MarketRegion = {
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The name of the region. */
  name: Scalars['String']['output'];
};

/** An auto-generated type for paginating through multiple MarketRegions. */
export type Shopify_MarketRegionConnection = {
  __typename?: 'Shopify_MarketRegionConnection';
  /** A list of edges. */
  edges: Array<Shopify_MarketRegionEdge>;
  /** A list of the nodes contained in MarketRegionEdge. */
  nodes: Array<Shopify_MarketRegion>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** A country which comprises a market. */
export type Shopify_MarketRegionCountry = Shopify_MarketRegion & Shopify_Node & {
  __typename?: 'Shopify_MarketRegionCountry';
  /** The ISO code identifying the country. */
  code: Shopify_CountryCode;
  /** The currency which this country uses given its market settings. */
  currency: Shopify_CurrencySetting;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The name of the region. */
  name: Scalars['String']['output'];
};

/** An auto-generated type which holds one MarketRegion and a cursor during pagination. */
export type Shopify_MarketRegionEdge = {
  __typename?: 'Shopify_MarketRegionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of MarketRegionEdge. */
  node: Shopify_MarketRegion;
};

/** Defines errors encountered while managing a Market. */
export type Shopify_MarketUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_MarketUserError';
  /** The error code. */
  code?: Maybe<Shopify_MarketUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `MarketUserError`. */
export enum Shopify_MarketUserErrorCode {
  /** The input value is blank. */
  Blank = 'BLANK',
  /** Can't add customer account domain to a market. */
  CannotAddCustomerDomain = 'CANNOT_ADD_CUSTOMER_DOMAIN',
  /** Can't add regions to the primary market. */
  CannotAddRegionsToPrimaryMarket = 'CANNOT_ADD_REGIONS_TO_PRIMARY_MARKET',
  /** Can't add the web presence to the primary market. */
  CannotAddWebPresenceToPrimaryMarket = 'CANNOT_ADD_WEB_PRESENCE_TO_PRIMARY_MARKET',
  /** Can't delete the only region in a market. */
  CannotDeleteOnlyRegion = 'CANNOT_DELETE_ONLY_REGION',
  /** Can't delete the primary market. */
  CannotDeletePrimaryMarket = 'CANNOT_DELETE_PRIMARY_MARKET',
  /** Can't delete the primary market's web presence. */
  CannotDeletePrimaryMarketWebPresence = 'CANNOT_DELETE_PRIMARY_MARKET_WEB_PRESENCE',
  /** Can't disable the primary market. */
  CannotDisablePrimaryMarket = 'CANNOT_DISABLE_PRIMARY_MARKET',
  /** Can't have both subfolder and domain web presences. */
  CannotHaveBothSubfolderAndDomainWebPresences = 'CANNOT_HAVE_BOTH_SUBFOLDER_AND_DOMAIN_WEB_PRESENCES',
  /** Can't have multiple subfolder web presences per market. */
  CannotHaveMultipleSubfoldersPerMarket = 'CANNOT_HAVE_MULTIPLE_SUBFOLDERS_PER_MARKET',
  /** Can't pass both `subfolderSuffix` and `domainId`. */
  CannotHaveSubfolderAndDomain = 'CANNOT_HAVE_SUBFOLDER_AND_DOMAIN',
  /** Can't set default locale to null. */
  CannotSetDefaultLocaleToNull = 'CANNOT_SET_DEFAULT_LOCALE_TO_NULL',
  /** The language isn't enabled on the store. */
  DisabledLanguage = 'DISABLED_LANGUAGE',
  /** Domain was not found. */
  DomainNotFound = 'DOMAIN_NOT_FOUND',
  /** Duplicates found in languages. */
  DuplicateLanguages = 'DUPLICATE_LANGUAGES',
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** The market wasn't found. */
  MarketNotFound = 'MARKET_NOT_FOUND',
  /** Can't add another web presence to the market. */
  MarketReachedWebPresenceLimit = 'MARKET_REACHED_WEB_PRESENCE_LIMIT',
  /** No languages selected. */
  NoLanguages = 'NO_LANGUAGES',
  /** The primary market must use the primary domain. */
  PrimaryMarketMustUsePrimaryDomain = 'PRIMARY_MARKET_MUST_USE_PRIMARY_DOMAIN',
  /** The market region wasn't found. */
  RegionNotFound = 'REGION_NOT_FOUND',
  /** Cannot add region-specific language. */
  RegionSpecificLanguage = 'REGION_SPECIFIC_LANGUAGE',
  /** One of `subfolderSuffix` or `domainId` is required. */
  RequiresDomainOrSubfolder = 'REQUIRES_DOMAIN_OR_SUBFOLDER',
  /** Exactly one input option is required. */
  RequiresExactlyOneOption = 'REQUIRES_EXACTLY_ONE_OPTION',
  /** Can't have more than 50 markets. */
  ShopReachedMarketsLimit = 'SHOP_REACHED_MARKETS_LIMIT',
  /** The subfolder suffix is invalid, please provide a different value. */
  SubfolderSuffixCannotBeScriptCode = 'SUBFOLDER_SUFFIX_CANNOT_BE_SCRIPT_CODE',
  /** The subfolder suffix must contain only letters. */
  SubfolderSuffixMustContainOnlyLetters = 'SUBFOLDER_SUFFIX_MUST_CONTAIN_ONLY_LETTERS',
  /** The input value is already taken. */
  Taken = 'TAKEN',
  /** The input value is too long. */
  TooLong = 'TOO_LONG',
  /** The input value is too short. */
  TooShort = 'TOO_SHORT',
  /** The language isn't published to the store. */
  UnpublishedLanguage = 'UNPUBLISHED_LANGUAGE',
  /** Can't add unsupported country or region. */
  UnsupportedCountryRegion = 'UNSUPPORTED_COUNTRY_REGION',
  /** The market web presence wasn't found. */
  WebPresenceNotFound = 'WEB_PRESENCE_NOT_FOUND'
}

/**
 * The market’s web presence, which defines its SEO strategy. This can be a different domain
 * (e.g. `example.ca`), subdomain (e.g. `ca.example.com`), or subfolders of the primary
 * domain (e.g. `example.com/en-ca`). Each web presence comprises one or more language
 * variants. If a market does not have its own web presence, it is accessible on the shop’s
 * primary domain via [country
 * selectors](https://shopify.dev/themes/internationalization/multiple-currencies-languages#the-country-selector).
 *
 * Note: while the domain/subfolders defined by a market’s web presence are not applicable to
 * custom storefronts, which must manage their own domains and routing, the languages chosen
 * here do govern [the languages available on the Storefront
 * API](https://shopify.dev/custom-storefronts/internationalization/multiple-languages) for the countries in
 * this market.
 */
export type Shopify_MarketWebPresence = Shopify_Node & {
  __typename?: 'Shopify_MarketWebPresence';
  /**
   * The ShopLocale object for the alternate locales. When a domain is used, these locales will be
   * available as language-specific subfolders. For example, if English is an
   * alternate locale, and `example.ca` is the market’s domain, then
   * `example.ca/en` will load in English.
   */
  alternateLocales: Array<Shopify_ShopLocale>;
  /**
   * The ShopLocale object for the default locale. When a domain is used, this is the locale that will
   * be used when the domain root is accessed. For example, if French is the default locale,
   * and `example.ca` is the market’s domain, then `example.ca` will load in French.
   */
  defaultLocale: Shopify_ShopLocale;
  /**
   * The web presence’s domain.
   * This field will be null if `subfolderSuffix` isn't null.
   */
  domain?: Maybe<Shopify_Domain>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The associated market. */
  market: Shopify_Market;
  /** The list of root URLs for each of the web presence’s locales. As of version `2024-04` this value will no longer have a trailing slash. */
  rootUrls: Array<Shopify_MarketWebPresenceRootUrl>;
  /** The market-specific suffix of the subfolders defined by the web presence. Example: in `/en-us` the subfolder suffix is `us`. This field will be null if `domain` isn't null. */
  subfolderSuffix?: Maybe<Scalars['String']['output']>;
};

/** An auto-generated type for paginating through multiple MarketWebPresences. */
export type Shopify_MarketWebPresenceConnection = {
  __typename?: 'Shopify_MarketWebPresenceConnection';
  /** A list of edges. */
  edges: Array<Shopify_MarketWebPresenceEdge>;
  /** A list of the nodes contained in MarketWebPresenceEdge. */
  nodes: Array<Shopify_MarketWebPresence>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one MarketWebPresence and a cursor during pagination. */
export type Shopify_MarketWebPresenceEdge = {
  __typename?: 'Shopify_MarketWebPresenceEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of MarketWebPresenceEdge. */
  node: Shopify_MarketWebPresence;
};

/**
 * The URL for the homepage of the online store in the context of a particular market and a
 * particular locale.
 */
export type Shopify_MarketWebPresenceRootUrl = {
  __typename?: 'Shopify_MarketWebPresenceRootUrl';
  /** The locale that the storefront loads in. */
  locale: Scalars['String']['output'];
  /** The URL. */
  url: Scalars['Shopify_URL']['output'];
};

/**
 * The marketing activity resource represents marketing that a
 *         merchant created through an app.
 */
export type Shopify_MarketingActivity = Shopify_Node & {
  __typename?: 'Shopify_MarketingActivity';
  /** The URL of the marketing activity listing page in the marketing section. */
  activityListUrl?: Maybe<Scalars['Shopify_URL']['output']>;
  /** The amount spent on the marketing activity. */
  adSpend?: Maybe<Shopify_MoneyV2>;
  /** The app which created this marketing activity. */
  app: Shopify_App;
  /** The errors generated when an app publishes the marketing activity. */
  appErrors?: Maybe<Shopify_MarketingActivityExtensionAppErrors>;
  /** The allocated budget for the marketing activity. */
  budget?: Maybe<Shopify_MarketingBudget>;
  /** The date and time when the marketing activity was created. */
  createdAt: Scalars['DateTime']['output'];
  /** The completed content in the marketing activity creation form. */
  formData?: Maybe<Scalars['String']['output']>;
  /** The hierarchy level of the marketing activity. */
  hierarchyLevel?: Maybe<Shopify_MarketingActivityHierarchyLevel>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** Whether the marketing activity is in the main workflow version of the marketing automation. */
  inMainWorkflowVersion: Scalars['Boolean']['output'];
  /** The marketing activity represents an external marketing activity. */
  isExternal: Scalars['Boolean']['output'];
  /**
   * The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation.
   * @deprecated Use `marketingChannelType` instead.
   */
  marketingChannel: Shopify_MarketingChannel;
  /** The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation. */
  marketingChannelType: Shopify_MarketingChannel;
  /** Associated marketing event of this marketing activity. */
  marketingEvent?: Maybe<Shopify_MarketingEvent>;
  /** ID of the parent activity of this marketing activity. */
  parentActivityId?: Maybe<Scalars['ID']['output']>;
  /** ID of the parent activity of this marketing activity. */
  parentRemoteId?: Maybe<Scalars['String']['output']>;
  /** A contextual description of the marketing activity based on the platform and tactic used. */
  sourceAndMedium: Scalars['String']['output'];
  /** The current state of the marketing activity. */
  status: Shopify_MarketingActivityStatus;
  /**
   * The severity of the marketing activity's status.
   * @deprecated Use `statusBadgeTypeV2` instead.
   */
  statusBadgeType?: Maybe<Shopify_MarketingActivityStatusBadgeType>;
  /** The severity of the marketing activity's status. */
  statusBadgeTypeV2?: Maybe<Shopify_BadgeType>;
  /** The rendered status of the marketing activity. */
  statusLabel: Scalars['String']['output'];
  /**
   * The [date and time](
   *           https://help.shopify.com/https://en.wikipedia.org/wiki/ISO_8601
   *           ) when the activity's status last changed.
   */
  statusTransitionedAt?: Maybe<Scalars['DateTime']['output']>;
  /** The method of marketing used for this marketing activity. */
  tactic: Shopify_MarketingTactic;
  /** The status to which the marketing activity is currently transitioning. */
  targetStatus?: Maybe<Shopify_MarketingActivityStatus>;
  /** The marketing activity's title, which is rendered on the marketing listing page. */
  title: Scalars['String']['output'];
  /** The date and time when the marketing activity was updated. */
  updatedAt: Scalars['DateTime']['output'];
  /** A URL parameter value associated with this marketing activity. */
  urlParameterValue?: Maybe<Scalars['String']['output']>;
  /**
   * The set of [Urchin Tracking Module](
   *           https://help.shopify.com/https://en.wikipedia.org/wiki/UTM_parameters
   *           ) used in the URL for tracking this marketing activity.
   */
  utmParameters?: Maybe<Shopify_UtmParameters>;
};

/** The error code resulted from the marketing activity extension integration. */
export enum Shopify_MarketingActivityExtensionAppErrorCode {
  /** The app is either not responding or returning unexpected data. */
  ApiError = 'API_ERROR',
  /** The app needs to be installed. */
  InstallRequiredError = 'INSTALL_REQUIRED_ERROR',
  /** The shop/user must be onboarded to use the app. */
  NotOnboardedError = 'NOT_ONBOARDED_ERROR',
  /** The app has returned an error when invoking the platform. */
  PlatformError = 'PLATFORM_ERROR',
  /** The app has returned validation errors. */
  ValidationError = 'VALIDATION_ERROR'
}

/** Represents errors returned from apps when using the marketing activity extension. */
export type Shopify_MarketingActivityExtensionAppErrors = {
  __typename?: 'Shopify_MarketingActivityExtensionAppErrors';
  /** The app error type. */
  code: Shopify_MarketingActivityExtensionAppErrorCode;
  /** The list of errors returned by the app. */
  userErrors: Array<Shopify_UserError>;
};

/** Hierarchy levels for external marketing activities. */
export enum Shopify_MarketingActivityHierarchyLevel {
  /** An advertisement activity. Must be parented by an ad group or a campaign activity, and must be assigned tracking parameters (URL or UTM). */
  Ad = 'AD',
  /** A group of advertisement activities. Must be parented by a campaign activity. */
  AdGroup = 'AD_GROUP',
  /** A campaign activity. May contain either ad groups or ads as child activities. If childless, then the campaign activity should have tracking parameters assigned (URL or UTM) otherwise it won't appear in marketing reports. */
  Campaign = 'CAMPAIGN'
}

/** Status helps to identify if this marketing activity has been completed, queued, failed etc. */
export enum Shopify_MarketingActivityStatus {
  /** This marketing activity is currently running. */
  Active = 'ACTIVE',
  /** This marketing activity is permanently unavailable. */
  Deleted = 'DELETED',
  /** This marketing activity was deleted and it was triggered from outside of Shopify. */
  DeletedExternally = 'DELETED_EXTERNALLY',
  /** This marketing activity is disconnected and no longer editable. */
  Disconnected = 'DISCONNECTED',
  /** This marketing activity has been edited, but it is not yet created. */
  Draft = 'DRAFT',
  /** This marketing activity is unable to run. */
  Failed = 'FAILED',
  /** This marketing activity has completed running. */
  Inactive = 'INACTIVE',
  /** This marketing activity is currently not running. */
  Paused = 'PAUSED',
  /** This marketing activity is pending creation on the app's marketing platform. */
  Pending = 'PENDING',
  /** This marketing activity is scheduled to run. */
  Scheduled = 'SCHEDULED',
  /** The marketing activity's status is unknown. */
  Undefined = 'UNDEFINED'
}

/** StatusBadgeType helps to identify the color of the status badge. */
export enum Shopify_MarketingActivityStatusBadgeType {
  /** This status badge has type attention. */
  Attention = 'ATTENTION',
  /** This status badge has type default. */
  Default = 'DEFAULT',
  /** This status badge has type info. */
  Info = 'INFO',
  /** This status badge has type success. */
  Success = 'SUCCESS',
  /** This status badge has type warning. */
  Warning = 'WARNING'
}

/** An error that occurs during the execution of marketing activity and engagement mutations. */
export type Shopify_MarketingActivityUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_MarketingActivityUserError';
  /** The error code. */
  code?: Maybe<Shopify_MarketingActivityUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `MarketingActivityUserError`. */
export enum Shopify_MarketingActivityUserErrorCode {
  /** The marketing activity must be an external activity. */
  ActivityNotExternal = 'ACTIVITY_NOT_EXTERNAL',
  /** This activity has child activities and thus cannot be deleted. Child activities must be deleted before a parent activity. */
  CannotDeleteActivityWithChildEvents = 'CANNOT_DELETE_ACTIVITY_WITH_CHILD_EVENTS',
  /** The activity's tactic can not be updated from STOREFRONT_APP. */
  CannotUpdateTacticIfOriginallyStorefrontApp = 'CANNOT_UPDATE_TACTIC_IF_ORIGINALLY_STOREFRONT_APP',
  /** The activity's tactic can not be updated to STOREFRONT_APP. This type of tactic can only be specified when creating a new activity. */
  CannotUpdateTacticToStorefrontApp = 'CANNOT_UPDATE_TACTIC_TO_STOREFRONT_APP',
  /** All currency codes provided in the input need to match. */
  CurrencyCodeMismatchInput = 'CURRENCY_CODE_MISMATCH_INPUT',
  /** A mutation can not be ran because a job to delete all external activities has been enqueued, which happens either from calling the marketingActivitiesDeleteAllExternal mutation or as a result of an app uninstall. */
  DeleteJobEnqueued = 'DELETE_JOB_ENQUEUED',
  /** The job to delete all external activities failed to enqueue. */
  DeleteJobFailedToEnqueue = 'DELETE_JOB_FAILED_TO_ENQUEUE',
  /** The channel handle value cannot be modified. */
  ImmutableChannelHandle = 'IMMUTABLE_CHANNEL_HANDLE',
  /** The hierarchy level cannot be modified. */
  ImmutableHierarchyLevel = 'IMMUTABLE_HIERARCHY_LEVEL',
  /** The parent activity cannot be modified. */
  ImmutableParentId = 'IMMUTABLE_PARENT_ID',
  /** The URL parameter value cannot be modified. */
  ImmutableUrlParameter = 'IMMUTABLE_URL_PARAMETER',
  /** The UTM parameters cannot be modified. */
  ImmutableUtmParameters = 'IMMUTABLE_UTM_PARAMETERS',
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** The channel handle is not recognized. */
  InvalidChannelHandle = 'INVALID_CHANNEL_HANDLE',
  /** Either the marketing activity ID or remote ID must be provided for the activity to be deleted. */
  InvalidDeleteActivityExternalArguments = 'INVALID_DELETE_ACTIVITY_EXTERNAL_ARGUMENTS',
  /** Either the channel_handle or delete_engagements_for_all_channels must be provided when deleting a marketing engagement. */
  InvalidDeleteEngagementsArguments = 'INVALID_DELETE_ENGAGEMENTS_ARGUMENTS',
  /** Either the marketing activity ID, remote ID, or UTM must be provided. */
  InvalidMarketingActivityExternalArguments = 'INVALID_MARKETING_ACTIVITY_EXTERNAL_ARGUMENTS',
  /** For activity level engagement, either the marketing activity ID or remote ID must be provided. For channel level engagement, the channel handle must be provided. */
  InvalidMarketingEngagementArguments = 'INVALID_MARKETING_ENGAGEMENT_ARGUMENTS',
  /** No identifier found. For activity level engagement, either the marketing activity ID or remote ID must be provided. For channel level engagement, the channel handle must be provided. */
  InvalidMarketingEngagementArgumentMissing = 'INVALID_MARKETING_ENGAGEMENT_ARGUMENT_MISSING',
  /** The remote ID does not correspond to an existing activity. */
  InvalidRemoteId = 'INVALID_REMOTE_ID',
  /** The currency codes provided need to match the referenced marketing activity's currency code. */
  MarketingActivityCurrencyCodeMismatch = 'MARKETING_ACTIVITY_CURRENCY_CODE_MISMATCH',
  /** Marketing activity does not exist. */
  MarketingActivityDoesNotExist = 'MARKETING_ACTIVITY_DOES_NOT_EXIST',
  /** Marketing activity is not valid, the associated marketing event does not exist. */
  MarketingEventDoesNotExist = 'MARKETING_EVENT_DOES_NOT_EXIST',
  /** Non-hierarchical marketing activities must have UTM parameters or a URL parameter value. */
  NonHierarchialRequiresUtmUrlParameter = 'NON_HIERARCHIAL_REQUIRES_UTM_URL_PARAMETER',
  /** The input value is already taken. */
  Taken = 'TAKEN'
}

/** This type combines budget amount and its marketing budget type. */
export type Shopify_MarketingBudget = {
  __typename?: 'Shopify_MarketingBudget';
  /** The budget type for a marketing activity. */
  budgetType: Shopify_MarketingBudgetBudgetType;
  /** The amount of budget for marketing activity. */
  total: Shopify_MoneyV2;
};

/** The budget type for a marketing activity. */
export enum Shopify_MarketingBudgetBudgetType {
  /** A daily budget. */
  Daily = 'DAILY',
  /** A budget for the lifetime of a marketing activity. */
  Lifetime = 'LIFETIME'
}

/** The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation. */
export enum Shopify_MarketingChannel {
  /** Displayed ads. */
  Display = 'DISPLAY',
  /** Email. */
  Email = 'EMAIL',
  /** Referral links. */
  Referral = 'REFERRAL',
  /** Paid search. */
  Search = 'SEARCH',
  /** Social media. */
  Social = 'SOCIAL'
}

/** Represents actions that market a merchant's store or products. */
export type Shopify_MarketingEvent = Shopify_LegacyInteroperability & Shopify_Node & {
  __typename?: 'Shopify_MarketingEvent';
  /** The app that the marketing event is attributed to. */
  app: Shopify_App;
  /**
   * The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation.
   * @deprecated Use `marketingChannelType` instead.
   */
  channel?: Maybe<Shopify_MarketingChannel>;
  /** The unique string identifier of the channel to which this activity belongs. For the correct handle for your channel, contact your partner manager. */
  channelHandle?: Maybe<Scalars['String']['output']>;
  /** A human-readable description of the marketing event. */
  description?: Maybe<Scalars['String']['output']>;
  /** The date and time when the marketing event ended. */
  endedAt?: Maybe<Scalars['DateTime']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['Shopify_UnsignedInt64']['output'];
  /** The URL where the marketing event can be managed. */
  manageUrl?: Maybe<Scalars['Shopify_URL']['output']>;
  /** The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation. */
  marketingChannelType?: Maybe<Shopify_MarketingChannel>;
  /** The URL where the marketing event can be previewed. */
  previewUrl?: Maybe<Scalars['Shopify_URL']['output']>;
  /** An optional ID that helps Shopify validate engagement data. */
  remoteId?: Maybe<Scalars['String']['output']>;
  /** The date and time when the marketing event is scheduled to end. */
  scheduledToEndAt?: Maybe<Scalars['DateTime']['output']>;
  /**
   * Where the `MarketingEvent` occurred and what kind of content was used.
   * Because `utmSource` and `utmMedium` are often used interchangeably, this is
   * based on a combination of `marketingChannel`, `referringDomain`, and `type` to
   * provide a consistent representation for any given piece of marketing
   * regardless of the app that created it.
   */
  sourceAndMedium: Scalars['String']['output'];
  /** The date and time when the marketing event started. */
  startedAt: Scalars['DateTime']['output'];
  /**
   * The display text for the marketing event type.
   * @deprecated Use `sourceAndMedium` instead.
   */
  targetTypeDisplayText: Scalars['String']['output'];
  /** The marketing event type. */
  type: Shopify_MarketingTactic;
  /** The name of the marketing campaign. */
  utmCampaign?: Maybe<Scalars['String']['output']>;
  /** The medium that the marketing campaign is using. Example values: `cpc`, `banner`. */
  utmMedium?: Maybe<Scalars['String']['output']>;
  /** The referrer of the marketing event. Example values: `google`, `newsletter`. */
  utmSource?: Maybe<Scalars['String']['output']>;
};

/** An auto-generated type for paginating through multiple MarketingEvents. */
export type Shopify_MarketingEventConnection = {
  __typename?: 'Shopify_MarketingEventConnection';
  /** A list of edges. */
  edges: Array<Shopify_MarketingEventEdge>;
  /** A list of the nodes contained in MarketingEventEdge. */
  nodes: Array<Shopify_MarketingEvent>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one MarketingEvent and a cursor during pagination. */
export type Shopify_MarketingEventEdge = {
  __typename?: 'Shopify_MarketingEventEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of MarketingEventEdge. */
  node: Shopify_MarketingEvent;
};

/** The set of valid sort keys for the MarketingEvent query. */
export enum Shopify_MarketingEventSortKeys {
  /** Sort by the `id` value. */
  Id = 'ID',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE',
  /** Sort by the `started_at` value. */
  StartedAt = 'STARTED_AT'
}

/** The available types of tactics for a marketing activity. */
export enum Shopify_MarketingTactic {
  /** An abandoned cart recovery email. */
  AbandonedCart = 'ABANDONED_CART',
  /** An ad, such as a Facebook ad. */
  Ad = 'AD',
  /** An affiliate link. */
  Affiliate = 'AFFILIATE',
  /** A link. */
  Link = 'LINK',
  /** A loyalty program. */
  Loyalty = 'LOYALTY',
  /** A messaging app, such as Facebook Messenger. */
  Message = 'MESSAGE',
  /** A newsletter. */
  Newsletter = 'NEWSLETTER',
  /** A notification in the Shopify admin. */
  Notification = 'NOTIFICATION',
  /** A blog post. */
  Post = 'POST',
  /** A retargeting ad. */
  Retargeting = 'RETARGETING',
  /** A popup on the online store. */
  StorefrontApp = 'STOREFRONT_APP',
  /** A transactional email. */
  Transactional = 'TRANSACTIONAL'
}

/** Represents a media interface. */
export type Shopify_Media = {
  /** A word or phrase to share the nature or contents of a media. */
  alt?: Maybe<Scalars['String']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The media content type. */
  mediaContentType: Shopify_MediaContentType;
  /** Any errors which have occurred on the media. */
  mediaErrors: Array<Shopify_MediaError>;
  /** The warnings attached to the media. */
  mediaWarnings: Array<Shopify_MediaWarning>;
  /** The preview image for the media. */
  preview?: Maybe<Shopify_MediaPreviewImage>;
  /** Current status of the media. */
  status: Shopify_MediaStatus;
};

/** An auto-generated type for paginating through multiple Media. */
export type Shopify_MediaConnection = {
  __typename?: 'Shopify_MediaConnection';
  /** A list of edges. */
  edges: Array<Shopify_MediaEdge>;
  /** A list of the nodes contained in MediaEdge. */
  nodes: Array<Shopify_Media>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** The possible content types for a media object. */
export enum Shopify_MediaContentType {
  /** An externally hosted video. */
  ExternalVideo = 'EXTERNAL_VIDEO',
  /** A Shopify-hosted image. */
  Image = 'IMAGE',
  /** A 3d model. */
  Model_3D = 'MODEL_3D',
  /** A Shopify-hosted video. */
  Video = 'VIDEO'
}

/** An auto-generated type which holds one Media and a cursor during pagination. */
export type Shopify_MediaEdge = {
  __typename?: 'Shopify_MediaEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of MediaEdge. */
  node: Shopify_Media;
};

/**
 * Represents a media error. This typically occurs when there is an issue with the media itself causing it to fail validation.
 * Check the media before attempting to upload again.
 */
export type Shopify_MediaError = {
  __typename?: 'Shopify_MediaError';
  /** Code representing the type of error. */
  code: Shopify_MediaErrorCode;
  /** Additional details regarding the error. */
  details?: Maybe<Scalars['String']['output']>;
  /** Translated error message. */
  message: Scalars['String']['output'];
};

/** Error types for media. */
export enum Shopify_MediaErrorCode {
  /** Media could not be created because a file with the same name already exists. */
  DuplicateFilenameError = 'DUPLICATE_FILENAME_ERROR',
  /** Media could not be created because embed permissions are disabled for this video. */
  ExternalVideoEmbedDisabled = 'EXTERNAL_VIDEO_EMBED_DISABLED',
  /** Media could not be created because video is either not found or still transcoding. */
  ExternalVideoEmbedNotFoundOrTranscoding = 'EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING',
  /** Media could not be created because the external video has an invalid aspect ratio. */
  ExternalVideoInvalidAspectRatio = 'EXTERNAL_VIDEO_INVALID_ASPECT_RATIO',
  /** Media could not be created because the external video could not be found. */
  ExternalVideoNotFound = 'EXTERNAL_VIDEO_NOT_FOUND',
  /** Media could not be created because the external video is not listed or is private. */
  ExternalVideoUnlisted = 'EXTERNAL_VIDEO_UNLISTED',
  /** Media could not be created because the cumulative file storage limit would be exceeded. */
  FileStorageLimitExceeded = 'FILE_STORAGE_LIMIT_EXCEEDED',
  /** File could not be processed because the source could not be downloaded. */
  GenericFileDownloadFailure = 'GENERIC_FILE_DOWNLOAD_FAILURE',
  /** File could not be created because the size is too large. */
  GenericFileInvalidSize = 'GENERIC_FILE_INVALID_SIZE',
  /** Media could not be processed because the image could not be downloaded. */
  ImageDownloadFailure = 'IMAGE_DOWNLOAD_FAILURE',
  /** Media could not be processed because the image could not be processed. */
  ImageProcessingFailure = 'IMAGE_PROCESSING_FAILURE',
  /** Media could not be created because the image has an invalid aspect ratio. */
  InvalidImageAspectRatio = 'INVALID_IMAGE_ASPECT_RATIO',
  /** Media could not be created because the image size is too large. */
  InvalidImageFileSize = 'INVALID_IMAGE_FILE_SIZE',
  /** Media could not be created because the image's resolution exceeds the max limit. */
  InvalidImageResolution = 'INVALID_IMAGE_RESOLUTION',
  /** Media could not be processed because the signed URL was invalid. */
  InvalidSignedUrl = 'INVALID_SIGNED_URL',
  /** Media timed out because it is currently being modified by another operation. */
  MediaTimeoutError = 'MEDIA_TIMEOUT_ERROR',
  /** Media could not be created because the model file failed processing. */
  Model3DGlbOutputCreationError = 'MODEL3D_GLB_OUTPUT_CREATION_ERROR',
  /** Media could not be created because the model can't be converted to USDZ format. */
  Model3DGlbToUsdzConversionError = 'MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR',
  /** Media could not be created because the model file failed processing. */
  Model3DProcessingFailure = 'MODEL3D_PROCESSING_FAILURE',
  /** Media could not be created because the model's thumbnail generation failed. */
  Model3DThumbnailGenerationError = 'MODEL3D_THUMBNAIL_GENERATION_ERROR',
  /** There was an issue while trying to generate a new thumbnail. */
  Model3DThumbnailRegenerationError = 'MODEL3D_THUMBNAIL_REGENERATION_ERROR',
  /** Model failed validation. */
  Model3DValidationError = 'MODEL3D_VALIDATION_ERROR',
  /** Media error has occured for unknown reason. */
  Unknown = 'UNKNOWN',
  /** Media could not be created because the image is an unsupported file type. */
  UnsupportedImageFileType = 'UNSUPPORTED_IMAGE_FILE_TYPE',
  /** Media could not be created because it has an invalid file type. */
  VideoInvalidFiletypeError = 'VIDEO_INVALID_FILETYPE_ERROR',
  /** Media could not be created because it does not meet the maximum duration requirement. */
  VideoMaxDurationError = 'VIDEO_MAX_DURATION_ERROR',
  /** Media could not be created because it does not meet the maximum height requirement. */
  VideoMaxHeightError = 'VIDEO_MAX_HEIGHT_ERROR',
  /** Media could not be created because it does not meet the maximum width requirement. */
  VideoMaxWidthError = 'VIDEO_MAX_WIDTH_ERROR',
  /** Media could not be created because the metadata could not be read. */
  VideoMetadataReadError = 'VIDEO_METADATA_READ_ERROR',
  /** Media could not be created because it does not meet the minimum duration requirement. */
  VideoMinDurationError = 'VIDEO_MIN_DURATION_ERROR',
  /** Media could not be created because it does not meet the minimum height requirement. */
  VideoMinHeightError = 'VIDEO_MIN_HEIGHT_ERROR',
  /** Media could not be created because it does not meet the minimum width requirement. */
  VideoMinWidthError = 'VIDEO_MIN_WIDTH_ERROR',
  /** Video failed validation. */
  VideoValidationError = 'VIDEO_VALIDATION_ERROR'
}

/** Host for a Media Resource. */
export enum Shopify_MediaHost {
  /** Host for Vimeo embedded videos. */
  Vimeo = 'VIMEO',
  /** Host for YouTube embedded videos. */
  Youtube = 'YOUTUBE'
}

/** An image hosted on Shopify. */
export type Shopify_MediaImage = Shopify_File & Shopify_HasMetafields & Shopify_Media & Shopify_Node & {
  __typename?: 'Shopify_MediaImage';
  /** A word or phrase to share the nature or contents of a media. */
  alt?: Maybe<Scalars['String']['output']>;
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created. */
  createdAt: Scalars['DateTime']['output'];
  /** Any errors that have occurred on the file. */
  fileErrors: Array<Shopify_FileError>;
  /** The status of the file. */
  fileStatus: Shopify_FileStatus;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The image for the media. Returns `null` until `status` is `READY`. */
  image?: Maybe<Shopify_Image>;
  /** The media content type. */
  mediaContentType: Shopify_MediaContentType;
  /** Any errors which have occurred on the media. */
  mediaErrors: Array<Shopify_MediaError>;
  /** The warnings attached to the media. */
  mediaWarnings: Array<Shopify_MediaWarning>;
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /** The MIME type of the image. */
  mimeType?: Maybe<Scalars['String']['output']>;
  /** The original source of the image. */
  originalSource?: Maybe<Shopify_MediaImageOriginalSource>;
  /** The preview image for the media. */
  preview?: Maybe<Shopify_MediaPreviewImage>;
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafields: Shopify_PrivateMetafieldConnection;
  /** Current status of the media. */
  status: Shopify_MediaStatus;
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated. */
  updatedAt: Scalars['DateTime']['output'];
};


/** An image hosted on Shopify. */
export type Shopify_MediaImageMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace?: InputMaybe<Scalars['String']['input']>;
};


/** An image hosted on Shopify. */
export type Shopify_MediaImageMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** An image hosted on Shopify. */
export type Shopify_MediaImagePrivateMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace: Scalars['String']['input'];
};


/** An image hosted on Shopify. */
export type Shopify_MediaImagePrivateMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The original source for an image. */
export type Shopify_MediaImageOriginalSource = {
  __typename?: 'Shopify_MediaImageOriginalSource';
  /** The size of the original file in bytes. */
  fileSize?: Maybe<Scalars['Int']['output']>;
  /** The URL of the original image, valid only for a short period. */
  url?: Maybe<Scalars['Shopify_URL']['output']>;
};

/** Represents the preview image for a media. */
export type Shopify_MediaPreviewImage = {
  __typename?: 'Shopify_MediaPreviewImage';
  /** The preview image for the media. Returns `null` until `status` is `READY`. */
  image?: Maybe<Shopify_Image>;
  /** Current status of the preview image. */
  status: Shopify_MediaPreviewImageStatus;
};

/** The possible statuses for a media preview image. */
export enum Shopify_MediaPreviewImageStatus {
  /** Preview image processing has failed. */
  Failed = 'FAILED',
  /** Preview image is being processed. */
  Processing = 'PROCESSING',
  /** Preview image is ready to be displayed. */
  Ready = 'READY',
  /** Preview image is uploaded but not yet processed. */
  Uploaded = 'UPLOADED'
}

/** The possible statuses for a media object. */
export enum Shopify_MediaStatus {
  /** Media processing has failed. */
  Failed = 'FAILED',
  /** Media is being processed. */
  Processing = 'PROCESSING',
  /** Media is ready to be displayed. */
  Ready = 'READY',
  /** Media has been uploaded but not yet processed. */
  Uploaded = 'UPLOADED'
}

/** Represents an error that happens during execution of a Media query or mutation. */
export type Shopify_MediaUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_MediaUserError';
  /** The error code. */
  code?: Maybe<Shopify_MediaUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `MediaUserError`. */
export enum Shopify_MediaUserErrorCode {
  /** The input value is blank. */
  Blank = 'BLANK',
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** Invalid media type. */
  InvalidMediaType = 'INVALID_MEDIA_TYPE',
  /** Exceeded the maximum number of 100 variant-media pairs per mutation call. */
  MaximumVariantMediaPairsExceeded = 'MAXIMUM_VARIANT_MEDIA_PAIRS_EXCEEDED',
  /** Media cannot be modified. It is currently being modified by another operation. */
  MediaCannotBeModified = 'MEDIA_CANNOT_BE_MODIFIED',
  /** Media does not exist. */
  MediaDoesNotExist = 'MEDIA_DOES_NOT_EXIST',
  /** Media does not exist on the given product. */
  MediaDoesNotExistOnProduct = 'MEDIA_DOES_NOT_EXIST_ON_PRODUCT',
  /** The specified media is not attached to the specified variant. */
  MediaIsNotAttachedToVariant = 'MEDIA_IS_NOT_ATTACHED_TO_VARIANT',
  /** Missing arguments. */
  MissingArguments = 'MISSING_ARGUMENTS',
  /** Model3d creation throttle was exceeded. */
  Model3DThrottleExceeded = 'MODEL3D_THROTTLE_EXCEEDED',
  /** Model validation failed. */
  Model3DValidationError = 'MODEL3D_VALIDATION_ERROR',
  /** Non-ready media are not supported. */
  NonReadyMedia = 'NON_READY_MEDIA',
  /** Product does not exist. */
  ProductDoesNotExist = 'PRODUCT_DOES_NOT_EXIST',
  /** Exceeded the limit of media per product. */
  ProductMediaLimitExceeded = 'PRODUCT_MEDIA_LIMIT_EXCEEDED',
  /** Product variant already has attached media. */
  ProductVariantAlreadyHasMedia = 'PRODUCT_VARIANT_ALREADY_HAS_MEDIA',
  /** Variant does not exist on the given product. */
  ProductVariantDoesNotExistOnProduct = 'PRODUCT_VARIANT_DOES_NOT_EXIST_ON_PRODUCT',
  /** Variant specified in more than one pair. */
  ProductVariantSpecifiedMultipleTimes = 'PRODUCT_VARIANT_SPECIFIED_MULTIPLE_TIMES',
  /** Exceeded the limit of media per shop. */
  ShopMediaLimitExceeded = 'SHOP_MEDIA_LIMIT_EXCEEDED',
  /** Only one mediaId is allowed per variant-media input pair. */
  TooManyMediaPerInputPair = 'TOO_MANY_MEDIA_PER_INPUT_PAIR',
  /** Video creation throttle was exceeded. */
  VideoThrottleExceeded = 'VIDEO_THROTTLE_EXCEEDED',
  /** Video validation failed. */
  VideoValidationError = 'VIDEO_VALIDATION_ERROR'
}

/**
 * Represents a media warning. This occurs when there is a non-blocking concern regarding your media.
 * Consider reviewing your media to ensure it is correct and its parameters are as expected.
 */
export type Shopify_MediaWarning = {
  __typename?: 'Shopify_MediaWarning';
  /** The code representing the type of warning. */
  code: Shopify_MediaWarningCode;
  /** Translated warning message. */
  message?: Maybe<Scalars['String']['output']>;
};

/** Warning types for media. */
export enum Shopify_MediaWarningCode {
  /** 3D model physical size might be invalid. The dimensions of your model are very large. Consider reviewing your model to ensure they are correct. */
  ModelLargePhysicalSize = 'MODEL_LARGE_PHYSICAL_SIZE',
  /** 3D model physical size might be invalid. The dimensions of your model are very small. Consider reviewing your model to ensure they are correct. */
  ModelSmallPhysicalSize = 'MODEL_SMALL_PHYSICAL_SIZE'
}

/** The class of the discount for combining purposes. */
export enum Shopify_MerchandiseDiscountClass {
  /** Combined as an order discount. */
  Order = 'ORDER',
  /** Combined as a product discount. */
  Product = 'PRODUCT'
}

/** Merchant approval for accelerated onboarding to channel integration apps. */
export type Shopify_MerchantApprovalSignals = {
  __typename?: 'Shopify_MerchantApprovalSignals';
  /** Whether the shop's Shopify Payments account identity is verified. Returns `false` if the identity is unverified or if the shop doesn't have a Shopify Payments account. */
  identityVerified: Scalars['Boolean']['output'];
  /** Whether Shopify has pre-verified the merchant's business for onboarding to channel integration apps. Returns `false` if the shop isn't marked for verification. */
  verifiedByShopify: Scalars['Boolean']['output'];
  /** Which tier of the Shopify verification was determined for the merchant's business for onboarding to channel integration apps. */
  verifiedByShopifyTier: Scalars['String']['output'];
};

/**
 * Metafields enable you to attach additional information to a Shopify resource, such as a [Product](https://shopify.dev/api/admin-graphql/latest/objects/product) or a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection).
 * For more information about where you can attach metafields refer to [HasMetafields](https://shopify.dev/api/admin/graphql/reference/common-objects/HasMetafields).
 * Some examples of the data that metafields enable you to store are specifications, size charts, downloadable documents, release dates, images, or part numbers.
 * Metafields are identified by an owner resource, namespace, and key. and store a value along with type information for that value.
 */
export type Shopify_Metafield = Shopify_LegacyInteroperability & Shopify_Node & {
  __typename?: 'Shopify_Metafield';
  /** The date and time when the metafield was created. */
  createdAt: Scalars['DateTime']['output'];
  /** The metafield definition that the metafield belongs to, if any. */
  definition?: Maybe<Shopify_MetafieldDefinition>;
  /** The description of the metafield. */
  description?: Maybe<Scalars['String']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The unique identifier for the metafield within its namespace. */
  key: Scalars['String']['output'];
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['Shopify_UnsignedInt64']['output'];
  /** The container for a group of metafields that the metafield is associated with. */
  namespace: Scalars['String']['output'];
  /** The resource that the metafield is attached to. */
  owner: Shopify_HasMetafields;
  /** The type of resource that the metafield is attached to. */
  ownerType: Shopify_MetafieldOwnerType;
  /** Returns a reference object if the metafield definition's type is a resource reference. */
  reference?: Maybe<Shopify_MetafieldReference>;
  /** A list of reference objects if the metafield's type is a resource reference list. */
  references?: Maybe<Shopify_MetafieldReferenceConnection>;
  /**
   * The type of data that is stored in the metafield.
   * Refer to the list of [supported types](https://shopify.dev/apps/metafields/types).
   */
  type: Scalars['String']['output'];
  /** The date and time when the metafield was updated. */
  updatedAt: Scalars['DateTime']['output'];
  /** The data stored in the metafield. Always stored as a string, regardless of the metafield's type. */
  value: Scalars['String']['output'];
};


/**
 * Metafields enable you to attach additional information to a Shopify resource, such as a [Product](https://shopify.dev/api/admin-graphql/latest/objects/product) or a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection).
 * For more information about where you can attach metafields refer to [HasMetafields](https://shopify.dev/api/admin/graphql/reference/common-objects/HasMetafields).
 * Some examples of the data that metafields enable you to store are specifications, size charts, downloadable documents, release dates, images, or part numbers.
 * Metafields are identified by an owner resource, namespace, and key. and store a value along with type information for that value.
 */
export type Shopify_MetafieldReferencesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The access settings for this metafield definition. */
export type Shopify_MetafieldAccess = {
  __typename?: 'Shopify_MetafieldAccess';
  /** The default admin access setting used for the metafields under this definition. */
  admin?: Maybe<Shopify_MetafieldAdminAccess>;
  /**
   * The explicit grants for this metafield definition, superseding the default admin access
   * for the specified grantees.
   */
  grants: Array<Shopify_MetafieldAccessGrant>;
  /** The storefront access setting used for the metafields under this definition. */
  storefront?: Maybe<Shopify_MetafieldStorefrontAccess>;
};

/** An explicit access grant for the metafields under this definition. */
export type Shopify_MetafieldAccessGrant = {
  __typename?: 'Shopify_MetafieldAccessGrant';
  /** The level of access the grantee has. */
  access: Shopify_MetafieldGrantAccessLevel;
  /** The grantee being granted access. */
  grantee: Scalars['String']['output'];
};

/** Possible admin access settings for metafields. */
export enum Shopify_MetafieldAdminAccess {
  /** Owner gets full access. The merchant has read-only access. No one else has access rights. */
  MerchantRead = 'MERCHANT_READ',
  /** Owner gets full access. The merchant has read and write access. No one else has access rights. */
  MerchantReadWrite = 'MERCHANT_READ_WRITE',
  /** Owner gets full access. No one else has access rights. */
  Private = 'PRIVATE',
  /** Owner gets full access. All applications and the merchant have read-only access. */
  PublicRead = 'PUBLIC_READ'
}

/** An auto-generated type for paginating through multiple Metafields. */
export type Shopify_MetafieldConnection = {
  __typename?: 'Shopify_MetafieldConnection';
  /** A list of edges. */
  edges: Array<Shopify_MetafieldEdge>;
  /** A list of the nodes contained in MetafieldEdge. */
  nodes: Array<Shopify_Metafield>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/**
 * Metafield definitions enable you to define additional validation constraints for metafields, and enable the
 * merchant to edit metafield values in context.
 */
export type Shopify_MetafieldDefinition = Shopify_Node & {
  __typename?: 'Shopify_MetafieldDefinition';
  /** The access settings associated with the metafield definition. */
  access: Shopify_MetafieldAccess;
  /** The description of the metafield definition. */
  description?: Maybe<Scalars['String']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The unique identifier for the metafield definition within its namespace. */
  key: Scalars['String']['output'];
  /** The metafields that belong to the metafield definition. */
  metafields: Shopify_MetafieldConnection;
  /** The count of the metafields that belong to the metafield definition. */
  metafieldsCount: Scalars['Int']['output'];
  /** The human-readable name of the metafield definition. */
  name: Scalars['String']['output'];
  /** The container for a group of metafields that the metafield definition is associated with. */
  namespace: Scalars['String']['output'];
  /** The resource type that the metafield definition is attached to. */
  ownerType: Shopify_MetafieldOwnerType;
  /** The position of the metafield definition in the pinned list. */
  pinnedPosition?: Maybe<Scalars['Int']['output']>;
  /** The standard metafield definition template associated with the metafield definition. */
  standardTemplate?: Maybe<Shopify_StandardMetafieldDefinitionTemplate>;
  /**
   * The type of data that each of the metafields that belong to the metafield definition will store.
   * Refer to the list of [supported types](https://shopify.dev/apps/metafields/types).
   */
  type: Shopify_MetafieldDefinitionType;
  /** Whether the metafield definition can be used as a collection condition. */
  useAsCollectionCondition: Scalars['Boolean']['output'];
  /** The validation status for the metafields that belong to the metafield definition. */
  validationStatus: Shopify_MetafieldDefinitionValidationStatus;
  /**
   * A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for
   * the metafields that belong to the metafield definition. For example, for a metafield definition with the
   * type `date`, you can set a minimum date validation so that each of the metafields that belong to it can only
   * store dates after the specified minimum.
   */
  validations: Array<Shopify_MetafieldDefinitionValidation>;
  /**
   * Whether each of the metafields that belong to the metafield definition are visible from the Storefront API.
   * @deprecated Use `access.storefront` instead.
   */
  visibleToStorefrontApi: Scalars['Boolean']['output'];
};


/**
 * Metafield definitions enable you to define additional validation constraints for metafields, and enable the
 * merchant to edit metafield values in context.
 */
export type Shopify_MetafieldDefinitionMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  validationStatus?: InputMaybe<Shopify_MetafieldValidationStatus>;
};


/**
 * Metafield definitions enable you to define additional validation constraints for metafields, and enable the
 * merchant to edit metafield values in context.
 */
export type Shopify_MetafieldDefinitionMetafieldsCountArgs = {
  validationStatus?: InputMaybe<Shopify_MetafieldValidationStatus>;
};

/** An auto-generated type for paginating through multiple MetafieldDefinitions. */
export type Shopify_MetafieldDefinitionConnection = {
  __typename?: 'Shopify_MetafieldDefinitionConnection';
  /** A list of edges. */
  edges: Array<Shopify_MetafieldDefinitionEdge>;
  /** A list of the nodes contained in MetafieldDefinitionEdge. */
  nodes: Array<Shopify_MetafieldDefinition>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An error that occurs during the execution of `MetafieldDefinitionCreate`. */
export type Shopify_MetafieldDefinitionCreateUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_MetafieldDefinitionCreateUserError';
  /** The error code. */
  code?: Maybe<Shopify_MetafieldDefinitionCreateUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `MetafieldDefinitionCreateUserError`. */
export enum Shopify_MetafieldDefinitionCreateUserErrorCode {
  /** A duplicate option. */
  DuplicateOption = 'DUPLICATE_OPTION',
  /** The maximum limit of grants per definition type has been exceeded. */
  GrantLimitExceeded = 'GRANT_LIMIT_EXCEEDED',
  /** The input value isn't included in the list. */
  Inclusion = 'INCLUSION',
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** A field contains an invalid character. */
  InvalidCharacter = 'INVALID_CHARACTER',
  /** The input combination is invalid. */
  InvalidInputCombination = 'INVALID_INPUT_COMBINATION',
  /** An invalid option. */
  InvalidOption = 'INVALID_OPTION',
  /** The maximum limit of definitions per owner type has exceeded. */
  LimitExceeded = 'LIMIT_EXCEEDED',
  /** You have reached the maximum allowed definitions for automated collections. */
  OwnerTypeLimitExceededForAutomatedCollections = 'OWNER_TYPE_LIMIT_EXCEEDED_FOR_AUTOMATED_COLLECTIONS',
  /** The pinned limit has been reached for the owner type. */
  PinnedLimitReached = 'PINNED_LIMIT_REACHED',
  /** The input value needs to be blank. */
  Present = 'PRESENT',
  /** This namespace and key combination is reserved for standard definitions. */
  ReservedNamespaceKey = 'RESERVED_NAMESPACE_KEY',
  /** The definition limit per owner type has exceeded. */
  ResourceTypeLimitExceeded = 'RESOURCE_TYPE_LIMIT_EXCEEDED',
  /** The input value is already taken. */
  Taken = 'TAKEN',
  /** The input value is too long. */
  TooLong = 'TOO_LONG',
  /** The input value is too short. */
  TooShort = 'TOO_SHORT',
  /** The definition type is not eligible to be used as collection condition. */
  TypeNotAllowedForConditions = 'TYPE_NOT_ALLOWED_FOR_CONDITIONS',
  /** This namespace and key combination is already in use for a set of your metafields. */
  UnstructuredAlreadyExists = 'UNSTRUCTURED_ALREADY_EXISTS'
}

/** An error that occurs during the execution of `MetafieldDefinitionDelete`. */
export type Shopify_MetafieldDefinitionDeleteUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_MetafieldDefinitionDeleteUserError';
  /** The error code. */
  code?: Maybe<Shopify_MetafieldDefinitionDeleteUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `MetafieldDefinitionDeleteUserError`. */
export enum Shopify_MetafieldDefinitionDeleteUserErrorCode {
  /** Owner type can't be used in this mutation. */
  DisallowedOwnerType = 'DISALLOWED_OWNER_TYPE',
  /** An internal error occurred. */
  InternalError = 'INTERNAL_ERROR',
  /** Action cannot proceed. Definition is currently in use. */
  MetafieldDefinitionInUse = 'METAFIELD_DEFINITION_IN_USE',
  /** Definition not found. */
  NotFound = 'NOT_FOUND',
  /** The input value needs to be blank. */
  Present = 'PRESENT',
  /** Deleting a reference type metafield definition requires deletion of its associated metafields. */
  ReferenceTypeDeletionError = 'REFERENCE_TYPE_DELETION_ERROR'
}

/** An auto-generated type which holds one MetafieldDefinition and a cursor during pagination. */
export type Shopify_MetafieldDefinitionEdge = {
  __typename?: 'Shopify_MetafieldDefinitionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of MetafieldDefinitionEdge. */
  node: Shopify_MetafieldDefinition;
};

/** An error that occurs during the execution of `MetafieldDefinitionPin`. */
export type Shopify_MetafieldDefinitionPinUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_MetafieldDefinitionPinUserError';
  /** The error code. */
  code?: Maybe<Shopify_MetafieldDefinitionPinUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `MetafieldDefinitionPinUserError`. */
export enum Shopify_MetafieldDefinitionPinUserErrorCode {
  /** The metafield definition is already pinned. */
  AlreadyPinned = 'ALREADY_PINNED',
  /** Owner type can't be used in this mutation. */
  DisallowedOwnerType = 'DISALLOWED_OWNER_TYPE',
  /** An internal error occurred. */
  InternalError = 'INTERNAL_ERROR',
  /** The metafield definition was not found. */
  NotFound = 'NOT_FOUND',
  /** The pinned limit has been reached for owner type. */
  PinnedLimitReached = 'PINNED_LIMIT_REACHED'
}

/** Possible metafield definition pinned statuses. */
export enum Shopify_MetafieldDefinitionPinnedStatus {
  /** All metafield definitions. */
  Any = 'ANY',
  /** Only metafield definitions that are pinned. */
  Pinned = 'PINNED',
  /** Only metafield definitions that are not pinned. */
  Unpinned = 'UNPINNED'
}

/** The set of valid sort keys for the MetafieldDefinition query. */
export enum Shopify_MetafieldDefinitionSortKeys {
  /** Sort by the `id` value. */
  Id = 'ID',
  /** Sort by the `name` value. */
  Name = 'NAME',
  /** Sort by the `pinned_position` value. */
  PinnedPosition = 'PINNED_POSITION',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE'
}

/**
 * The type and name for the optional validation configuration of a metafield.
 *
 * For example, a supported validation might consist of a `max` name and a `number_integer` type.
 * This validation can then be used to enforce a maximum character length for a `single_line_text_field` metafield.
 */
export type Shopify_MetafieldDefinitionSupportedValidation = {
  __typename?: 'Shopify_MetafieldDefinitionSupportedValidation';
  /** The name of the metafield definition validation. */
  name: Scalars['String']['output'];
  /** The type of input for the validation. */
  type: Scalars['String']['output'];
};

/** A metafield definition type provides basic foundation and validation for a metafield. */
export type Shopify_MetafieldDefinitionType = {
  __typename?: 'Shopify_MetafieldDefinitionType';
  /** The category associated with the metafield definition type. */
  category: Scalars['String']['output'];
  /**
   * The name of the type for the metafield definition.
   * See the list of [supported types](https://shopify.dev/apps/metafields/types).
   */
  name: Scalars['String']['output'];
  /** The supported validations for a metafield definition type. */
  supportedValidations: Array<Shopify_MetafieldDefinitionSupportedValidation>;
  /** Whether metafields without a definition can be migrated to a definition of this type. */
  supportsDefinitionMigrations: Scalars['Boolean']['output'];
  /**
   * The value type for a metafield created with this definition type.
   * @deprecated `valueType` is deprecated and `name` should be used for type information.
   */
  valueType: Shopify_MetafieldValueType;
};

/** An error that occurs during the execution of `MetafieldDefinitionUnpin`. */
export type Shopify_MetafieldDefinitionUnpinUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_MetafieldDefinitionUnpinUserError';
  /** The error code. */
  code?: Maybe<Shopify_MetafieldDefinitionUnpinUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `MetafieldDefinitionUnpinUserError`. */
export enum Shopify_MetafieldDefinitionUnpinUserErrorCode {
  /** Owner type can't be used in this mutation. */
  DisallowedOwnerType = 'DISALLOWED_OWNER_TYPE',
  /** An internal error occurred. */
  InternalError = 'INTERNAL_ERROR',
  /** The metafield definition was not found. */
  NotFound = 'NOT_FOUND',
  /** The metafield definition isn't pinned. */
  NotPinned = 'NOT_PINNED'
}

/** An error that occurs during the execution of `MetafieldDefinitionUpdate`. */
export type Shopify_MetafieldDefinitionUpdateUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_MetafieldDefinitionUpdateUserError';
  /** The error code. */
  code?: Maybe<Shopify_MetafieldDefinitionUpdateUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `MetafieldDefinitionUpdateUserError`. */
export enum Shopify_MetafieldDefinitionUpdateUserErrorCode {
  /** The maximum limit of grants per definition type has been exceeded. */
  GrantLimitExceeded = 'GRANT_LIMIT_EXCEEDED',
  /** An internal error occurred. */
  InternalError = 'INTERNAL_ERROR',
  /** An invalid input. */
  InvalidInput = 'INVALID_INPUT',
  /** The input combination is invalid. */
  InvalidInputCombination = 'INVALID_INPUT_COMBINATION',
  /** Action cannot proceed. Definition is currently in use. */
  MetafieldDefinitionInUse = 'METAFIELD_DEFINITION_IN_USE',
  /** You cannot change the metaobject definition pointed to by a metaobject reference metafield definition. */
  MetaobjectDefinitionChanged = 'METAOBJECT_DEFINITION_CHANGED',
  /** The metafield definition wasn't found. */
  NotFound = 'NOT_FOUND',
  /** You have reached the maximum allowed definitions for automated collections. */
  OwnerTypeLimitExceededForAutomatedCollections = 'OWNER_TYPE_LIMIT_EXCEEDED_FOR_AUTOMATED_COLLECTIONS',
  /** The pinned limit has been reached for the owner type. */
  PinnedLimitReached = 'PINNED_LIMIT_REACHED',
  /** The input value needs to be blank. */
  Present = 'PRESENT',
  /** The input value is too long. */
  TooLong = 'TOO_LONG',
  /** The definition type is not eligible to be used as collection condition. */
  TypeNotAllowedForConditions = 'TYPE_NOT_ALLOWED_FOR_CONDITIONS'
}

/**
 * A configured metafield definition validation.
 *
 * For example, for a metafield definition of `number_integer` type, you can set a validation with the name `max`
 * and a value of `15`. This validation will ensure that the value of the metafield is a number less than or equal to 15.
 *
 * Refer to the [list of supported validations](https://shopify.dev/api/admin/graphql/reference/common-objects/metafieldDefinitionTypes#examples-Fetch_all_metafield_definition_types).
 */
export type Shopify_MetafieldDefinitionValidation = {
  __typename?: 'Shopify_MetafieldDefinitionValidation';
  /** The validation name. */
  name: Scalars['String']['output'];
  /** The name for the metafield type of this validation. */
  type: Scalars['String']['output'];
  /** The validation value. */
  value?: Maybe<Scalars['String']['output']>;
};

/** Possible metafield definition validation statuses. */
export enum Shopify_MetafieldDefinitionValidationStatus {
  /** All of this definition's metafields are valid. */
  AllValid = 'ALL_VALID',
  /** Asynchronous validation of this definition's metafields is in progress. */
  InProgress = 'IN_PROGRESS',
  /** Some of this definition's metafields are invalid. */
  SomeInvalid = 'SOME_INVALID'
}

/** An auto-generated type which holds one Metafield and a cursor during pagination. */
export type Shopify_MetafieldEdge = {
  __typename?: 'Shopify_MetafieldEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of MetafieldEdge. */
  node: Shopify_Metafield;
};

/** Possible access levels for explicit metafield access grants. */
export enum Shopify_MetafieldGrantAccessLevel {
  /** Read metafield access. */
  Read = 'READ',
  /** Read and write metafield access. */
  ReadWrite = 'READ_WRITE'
}

/** Possible types of a metafield's owner resource. */
export enum Shopify_MetafieldOwnerType {
  /** The Api Permission metafield owner type. */
  ApiPermission = 'API_PERMISSION',
  /** The Article metafield owner type. */
  Article = 'ARTICLE',
  /** The Blog metafield owner type. */
  Blog = 'BLOG',
  /** The Cart Transform metafield owner type. */
  Carttransform = 'CARTTRANSFORM',
  /** The Collection metafield owner type. */
  Collection = 'COLLECTION',
  /** The Company metafield owner type. */
  Company = 'COMPANY',
  /** The Company Location metafield owner type. */
  CompanyLocation = 'COMPANY_LOCATION',
  /** The Customer metafield owner type. */
  Customer = 'CUSTOMER',
  /** The Delivery Customization metafield owner type. */
  DeliveryCustomization = 'DELIVERY_CUSTOMIZATION',
  /** The Discount metafield owner type. */
  Discount = 'DISCOUNT',
  /** The Draft Order metafield owner type. */
  Draftorder = 'DRAFTORDER',
  /** The Fulfillment Constraint Rule metafield owner type. */
  FulfillmentConstraintRule = 'FULFILLMENT_CONSTRAINT_RULE',
  /** The Location metafield owner type. */
  Location = 'LOCATION',
  /** The Market metafield owner type. */
  Market = 'MARKET',
  /** The Media Image metafield owner type. */
  MediaImage = 'MEDIA_IMAGE',
  /** The Order metafield owner type. */
  Order = 'ORDER',
  /** The Order Routing Location Rule metafield owner type. */
  OrderRoutingLocationRule = 'ORDER_ROUTING_LOCATION_RULE',
  /** The Page metafield owner type. */
  Page = 'PAGE',
  /** The Payment Customization metafield owner type. */
  PaymentCustomization = 'PAYMENT_CUSTOMIZATION',
  /** The Product metafield owner type. */
  Product = 'PRODUCT',
  /**
   * The Product Image metafield owner type.
   * @deprecated `PRODUCTIMAGE` is deprecated. Use `MEDIA_IMAGE` instead.
   */
  Productimage = 'PRODUCTIMAGE',
  /** The Product Variant metafield owner type. */
  Productvariant = 'PRODUCTVARIANT',
  /** The Shop metafield owner type. */
  Shop = 'SHOP',
  /** The Validation metafield owner type. */
  Validation = 'VALIDATION'
}

/** The resource referenced by the metafield value. */
export type Shopify_MetafieldReference = Shopify_Collection | Shopify_GenericFile | Shopify_MediaImage | Shopify_Metaobject | Shopify_Model3d | Shopify_OnlineStorePage | Shopify_Product | Shopify_ProductVariant | Shopify_Video;

/** An auto-generated type for paginating through multiple MetafieldReferences. */
export type Shopify_MetafieldReferenceConnection = {
  __typename?: 'Shopify_MetafieldReferenceConnection';
  /** A list of edges. */
  edges: Array<Shopify_MetafieldReferenceEdge>;
  /** A list of the nodes contained in MetafieldReferenceEdge. */
  nodes: Array<Maybe<Shopify_MetafieldReference>>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one MetafieldReference and a cursor during pagination. */
export type Shopify_MetafieldReferenceEdge = {
  __typename?: 'Shopify_MetafieldReferenceEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of MetafieldReferenceEdge. */
  node?: Maybe<Shopify_MetafieldReference>;
};

/** Types of resources that may use metafields to reference other resources. */
export type Shopify_MetafieldReferencer = Shopify_AppInstallation | Shopify_Collection | Shopify_Company | Shopify_CompanyLocation | Shopify_Customer | Shopify_DeliveryCustomization | Shopify_DiscountAutomaticNode | Shopify_DiscountCodeNode | Shopify_DiscountNode | Shopify_DraftOrder | Shopify_FulfillmentOrder | Shopify_Location | Shopify_Market | Shopify_Metaobject | Shopify_OnlineStoreArticle | Shopify_OnlineStoreBlog | Shopify_OnlineStorePage | Shopify_Order | Shopify_PaymentCustomization | Shopify_Product | Shopify_ProductVariant | Shopify_Shop;

/**
 * Defines a relation between two resources via a reference metafield.
 * The referencer owns the joining field with a given namespace and key,
 * while the target is referenced by the field.
 */
export type Shopify_MetafieldRelation = {
  __typename?: 'Shopify_MetafieldRelation';
  /** The key of the field making the reference. */
  key: Scalars['String']['output'];
  /** The name of the field making the reference. */
  name: Scalars['String']['output'];
  /** The namespace of the metafield making the reference, or type of the metaobject. */
  namespace: Scalars['String']['output'];
  /** The resource making the reference. */
  referencer: Shopify_MetafieldReferencer;
  /** The referenced resource. */
  target: Shopify_MetafieldReference;
};

/** An auto-generated type for paginating through multiple MetafieldRelations. */
export type Shopify_MetafieldRelationConnection = {
  __typename?: 'Shopify_MetafieldRelationConnection';
  /** A list of edges. */
  edges: Array<Shopify_MetafieldRelationEdge>;
  /** A list of the nodes contained in MetafieldRelationEdge. */
  nodes: Array<Shopify_MetafieldRelation>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one MetafieldRelation and a cursor during pagination. */
export type Shopify_MetafieldRelationEdge = {
  __typename?: 'Shopify_MetafieldRelationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of MetafieldRelationEdge. */
  node: Shopify_MetafieldRelation;
};

/** Defines how the metafields of a definition can be accessed in Storefront API surface areas, including Liquid and the GraphQL Storefront API. */
export enum Shopify_MetafieldStorefrontAccess {
  /** Metafields are not accessible in any Storefront API surface area. */
  None = 'NONE',
  /** Metafields are accessible in the GraphQL Storefront API and online store Liquid templates. */
  PublicRead = 'PUBLIC_READ'
}

/**
 * By default, the Storefront API can't read metafields. To make specific metafields visible in the Storefront API,
 * you need to create a `MetafieldStorefrontVisibility` record. A `MetafieldStorefrontVisibility` record is a list
 * of the metafields, defined by the `owner_type`, `namespace`, and `key`, to make visible in the Storefront API.
 *
 * Learn about [exposing metafields in the Storefront API]
 * (https://shopify.dev/custom-storefronts/products-collections/metafields)
 * for more details.
 */
export type Shopify_MetafieldStorefrontVisibility = Shopify_LegacyInteroperability & Shopify_Node & {
  __typename?: 'Shopify_MetafieldStorefrontVisibility';
  /** The date and time when the metafield was set to visible in the Storefront API. */
  createdAt: Scalars['DateTime']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The key of a metafield to make visible in the Storefront API. */
  key: Scalars['String']['output'];
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['Shopify_UnsignedInt64']['output'];
  /** The namespace of a metafield to make visible in the Storefront API. */
  namespace: Scalars['String']['output'];
  /** The owner type of a metafield to make visible in the Storefront API. */
  ownerType: Shopify_MetafieldOwnerType;
  /** The date and time when the `MetafieldStorefrontVisilibty` record was updated. */
  updatedAt: Scalars['DateTime']['output'];
};

/** Possible metafield validation statuses. */
export enum Shopify_MetafieldValidationStatus {
  /** Any validation status (valid or invalid). */
  Any = 'ANY',
  /** Invalid (according to definition). */
  Invalid = 'INVALID',
  /** Valid (according to definition). */
  Valid = 'VALID'
}

/**
 * Legacy type information for the stored value.
 * Replaced by `type`.
 */
export enum Shopify_MetafieldValueType {
  /** A `true` or `false` value. */
  Boolean = 'BOOLEAN',
  /** A whole number. */
  Integer = 'INTEGER',
  /** A JSON string. */
  JsonString = 'JSON_STRING',
  /** A text field. */
  String = 'STRING'
}

/** An error that occurs during the execution of `MetafieldsSet`. */
export type Shopify_MetafieldsSetUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_MetafieldsSetUserError';
  /** The error code. */
  code?: Maybe<Shopify_MetafieldsSetUserErrorCode>;
  /** The index of the array element that's causing the error. */
  elementIndex?: Maybe<Scalars['Int']['output']>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `MetafieldsSetUserError`. */
export enum Shopify_MetafieldsSetUserErrorCode {
  /** ApiPermission metafields can only be created or updated by the app owner. */
  AppNotAuthorized = 'APP_NOT_AUTHORIZED',
  /** The input value is blank. */
  Blank = 'BLANK',
  /** The metafield violates a capability restriction. */
  CapabilityViolation = 'CAPABILITY_VIOLATION',
  /** The input value isn't included in the list. */
  Inclusion = 'INCLUSION',
  /** The type is invalid. */
  InvalidType = 'INVALID_TYPE',
  /** The value is invalid for metafield type or for definition options. */
  InvalidValue = 'INVALID_VALUE',
  /** The input value should be less than or equal to the maximum value allowed. */
  LessThanOrEqualTo = 'LESS_THAN_OR_EQUAL_TO',
  /** The input value needs to be blank. */
  Present = 'PRESENT',
  /** The input value is too long. */
  TooLong = 'TOO_LONG',
  /** The input value is too short. */
  TooShort = 'TOO_SHORT'
}

/** Provides an object instance represented by a MetaobjectDefinition. */
export type Shopify_Metaobject = Shopify_Node & {
  __typename?: 'Shopify_Metaobject';
  /** Metaobject capabilities for this Metaobject. */
  capabilities: Shopify_MetaobjectCapabilityData;
  /** The app used to create the object. */
  createdBy: Shopify_App;
  /** The app used to create the object. */
  createdByApp: Shopify_App;
  /** The staff member who created the metaobject. */
  createdByStaff?: Maybe<Shopify_StaffMember>;
  /** The MetaobjectDefinition that models this object type. */
  definition: Shopify_MetaobjectDefinition;
  /** The preferred display name field value of the metaobject. */
  displayName: Scalars['String']['output'];
  /** The field for an object key, or null if the key has no field definition. */
  field?: Maybe<Shopify_MetaobjectField>;
  /** All ordered fields of the metaobject with their definitions and values. */
  fields: Array<Shopify_MetaobjectField>;
  /** The unique handle of the object, useful as a custom ID. */
  handle: Scalars['String']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** List of back references metafields that belong to the resource. */
  referencedBy: Shopify_MetafieldRelationConnection;
  /**
   * The staff member who created the metaobject.
   * @deprecated Use `createdByStaff` instead.
   */
  staffMember?: Maybe<Shopify_StaffMember>;
  /** The recommended field to visually represent this metaobject. May be a file reference or color         field. */
  thumbnailField?: Maybe<Shopify_MetaobjectField>;
  /** The type of the metaobject. */
  type: Scalars['String']['output'];
  /** When the object was last updated. */
  updatedAt: Scalars['DateTime']['output'];
};


/** Provides an object instance represented by a MetaobjectDefinition. */
export type Shopify_MetaobjectFieldArgs = {
  key: Scalars['String']['input'];
};


/** Provides an object instance represented by a MetaobjectDefinition. */
export type Shopify_MetaobjectReferencedByArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Provides metaobject definition's access configuration. */
export type Shopify_MetaobjectAccess = {
  __typename?: 'Shopify_MetaobjectAccess';
  /** Access configuration for Admin API surface areas, including the GraphQL Admin API. */
  admin: Shopify_MetaobjectAdminAccess;
  /** Access configuration for Storefront surface areas, including the GraphQL Storefront API and Liquid. */
  storefront: Shopify_MetaobjectStorefrontAccess;
};

/** Defines how the metaobjects of a definition can be accessed in admin API surface areas. */
export enum Shopify_MetaobjectAdminAccess {
  /**
   * Applications that act on behalf of merchants can read metaobjects.
   * Only the owning application can write metaobjects.
   */
  MerchantRead = 'MERCHANT_READ',
  /**
   * The owning application, as well as applications that act on behalf of merchants can read and write metaobjects.
   * No other applications can read or write metaobjects.
   */
  MerchantReadWrite = 'MERCHANT_READ_WRITE',
  /** Only the application that owns a metaobject can read and write to it. */
  Private = 'PRIVATE',
  /**
   * All applications with the `metaobjects` access scope can read metaobjects.
   * Only the owning application can write metaobjects.
   */
  PublicRead = 'PUBLIC_READ',
  /** All applications with the `metaobjects` access scope can read and write metaobjects. */
  PublicReadWrite = 'PUBLIC_READ_WRITE'
}

/** Provides the capabilities of a metaobject definition. */
export type Shopify_MetaobjectCapabilities = {
  __typename?: 'Shopify_MetaobjectCapabilities';
  /** Indicates whether a metaobject definition can be displayed as a page on the Online Store. */
  onlineStore?: Maybe<Shopify_MetaobjectCapabilitiesOnlineStore>;
  /** Indicate whether a metaobject definition is publishable. */
  publishable: Shopify_MetaobjectCapabilitiesPublishable;
  /** Indicate whether a metaobject definition is renderable and exposes SEO data. */
  renderable?: Maybe<Shopify_MetaobjectCapabilitiesRenderable>;
  /** Indicate whether a metaobject definition is translatable. */
  translatable: Shopify_MetaobjectCapabilitiesTranslatable;
};

/** The Online Store capability of a metaobject definition. */
export type Shopify_MetaobjectCapabilitiesOnlineStore = {
  __typename?: 'Shopify_MetaobjectCapabilitiesOnlineStore';
  /** The data associated with the Online Store capability. */
  data?: Maybe<Shopify_MetaobjectCapabilityDefinitionDataOnlineStore>;
  /** Indicates if the capability is enabled. */
  enabled: Scalars['Boolean']['output'];
};

/** The publishable capability of a metaobject definition. */
export type Shopify_MetaobjectCapabilitiesPublishable = {
  __typename?: 'Shopify_MetaobjectCapabilitiesPublishable';
  /** Indicates if the capability is enabled. */
  enabled: Scalars['Boolean']['output'];
};

/** The renderable capability of a metaobject definition. */
export type Shopify_MetaobjectCapabilitiesRenderable = {
  __typename?: 'Shopify_MetaobjectCapabilitiesRenderable';
  /** The data associated with the renderable capability. */
  data?: Maybe<Shopify_MetaobjectCapabilityDefinitionDataRenderable>;
  /** Indicates if the capability is enabled. */
  enabled: Scalars['Boolean']['output'];
};

/** The translatable capability of a metaobject definition. */
export type Shopify_MetaobjectCapabilitiesTranslatable = {
  __typename?: 'Shopify_MetaobjectCapabilitiesTranslatable';
  /** Indicates if the capability is enabled. */
  enabled: Scalars['Boolean']['output'];
};

/** Provides the capabilities of a metaobject. */
export type Shopify_MetaobjectCapabilityData = {
  __typename?: 'Shopify_MetaobjectCapabilityData';
  /** The Online Store capability for this metaobject. */
  onlineStore?: Maybe<Shopify_MetaobjectCapabilityDataOnlineStore>;
  /** The publishable capability for this metaobject. */
  publishable?: Maybe<Shopify_MetaobjectCapabilityDataPublishable>;
};

/** The Online Store capability for the parent metaobject. */
export type Shopify_MetaobjectCapabilityDataOnlineStore = {
  __typename?: 'Shopify_MetaobjectCapabilityDataOnlineStore';
  /** The theme template used when viewing the metaobject in a store. */
  templateSuffix?: Maybe<Scalars['String']['output']>;
};

/** The publishable capability for the parent metaobject. */
export type Shopify_MetaobjectCapabilityDataPublishable = {
  __typename?: 'Shopify_MetaobjectCapabilityDataPublishable';
  /** The visibility status of this metaobject across all channels. */
  status: Shopify_MetaobjectStatus;
};

/** The Online Store capability data for the metaobject definition. */
export type Shopify_MetaobjectCapabilityDefinitionDataOnlineStore = {
  __typename?: 'Shopify_MetaobjectCapabilityDefinitionDataOnlineStore';
  /** Flag indicating if a sufficient number of redirects are available to redirect all published entries. */
  canCreateRedirects: Scalars['Boolean']['output'];
  /** The URL handle for accessing pages of this metaobject type in the Online Store. */
  urlHandle: Scalars['String']['output'];
};

/** The renderable capability data for the metaobject definition. */
export type Shopify_MetaobjectCapabilityDefinitionDataRenderable = {
  __typename?: 'Shopify_MetaobjectCapabilityDefinitionDataRenderable';
  /** The metaobject field used as an alias for the SEO page description. */
  metaDescriptionKey?: Maybe<Scalars['String']['output']>;
  /** The metaobject field used as an alias for the SEO page title. */
  metaTitleKey?: Maybe<Scalars['String']['output']>;
};

/** An auto-generated type for paginating through multiple Metaobjects. */
export type Shopify_MetaobjectConnection = {
  __typename?: 'Shopify_MetaobjectConnection';
  /** A list of edges. */
  edges: Array<Shopify_MetaobjectEdge>;
  /** A list of the nodes contained in MetaobjectEdge. */
  nodes: Array<Shopify_Metaobject>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** Provides the definition of a generic object structure composed of metafields. */
export type Shopify_MetaobjectDefinition = Shopify_Node & {
  __typename?: 'Shopify_MetaobjectDefinition';
  /** Access configuration for the metaobject definition. */
  access: Shopify_MetaobjectAccess;
  /** The capabilities of the metaobject definition. */
  capabilities: Shopify_MetaobjectCapabilities;
  /** The app used to create the metaobject definition. */
  createdByApp: Shopify_App;
  /** The staff member who created the metaobject definition. */
  createdByStaff?: Maybe<Shopify_StaffMember>;
  /** The administrative description. */
  description?: Maybe<Scalars['String']['output']>;
  /** The key of a field to reference as the display name for each object. */
  displayNameKey?: Maybe<Scalars['String']['output']>;
  /** The fields defined for this object type. */
  fieldDefinitions: Array<Shopify_MetaobjectFieldDefinition>;
  /** Whether this metaobject definition has field whose type can visually represent a metaobject with        the `thumbnailField`. */
  hasThumbnailField: Scalars['Boolean']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** A paginated connection to the metaobjects associated with the definition. */
  metaobjects: Shopify_MetaobjectConnection;
  /** The count of metaobjects created for the definition. */
  metaobjectsCount: Scalars['Int']['output'];
  /** The human-readable name. */
  name: Scalars['String']['output'];
  /** The type of the object definition. Defines the namespace of associated metafields. */
  type: Scalars['String']['output'];
};


/** Provides the definition of a generic object structure composed of metafields. */
export type Shopify_MetaobjectDefinitionMetaobjectsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** An auto-generated type which holds one Metaobject and a cursor during pagination. */
export type Shopify_MetaobjectEdge = {
  __typename?: 'Shopify_MetaobjectEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of MetaobjectEdge. */
  node: Shopify_Metaobject;
};

/** Provides a field definition and the data value assigned to it. */
export type Shopify_MetaobjectField = {
  __typename?: 'Shopify_MetaobjectField';
  /** The field definition for this object key. */
  definition: Shopify_MetaobjectFieldDefinition;
  /** The object key of this field. */
  key: Scalars['String']['output'];
  /** For resource reference fields, provides the referenced object. */
  reference?: Maybe<Shopify_MetafieldReference>;
  /** For resource reference list fields, provides the list of referenced objects. */
  references?: Maybe<Shopify_MetafieldReferenceConnection>;
  /** For file reference or color fields, provides visual attributes for this field. */
  thumbnail?: Maybe<Shopify_MetaobjectThumbnail>;
  /** The type of the field. */
  type: Scalars['String']['output'];
  /** The assigned field value, always stored as a string regardless of the field type. */
  value?: Maybe<Scalars['String']['output']>;
};


/** Provides a field definition and the data value assigned to it. */
export type Shopify_MetaobjectFieldReferencesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/**
 * Defines a field for a MetaobjectDefinition with properties
 * such as the field's data type and validations.
 */
export type Shopify_MetaobjectFieldDefinition = {
  __typename?: 'Shopify_MetaobjectFieldDefinition';
  /** The administrative description. */
  description?: Maybe<Scalars['String']['output']>;
  /** A key name used to identify the field within the metaobject composition. */
  key: Scalars['String']['output'];
  /** The human-readable name. */
  name: Scalars['String']['output'];
  /** Required status of the field within the metaobject composition. */
  required: Scalars['Boolean']['output'];
  /** The type of data that the field stores. */
  type: Shopify_MetafieldDefinitionType;
  /**
   * A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for
   * the field. For example, a field with the type `date` can set a minimum date requirement.
   */
  validations: Array<Shopify_MetafieldDefinitionValidation>;
};

/** Defines visibility status for metaobjects. */
export enum Shopify_MetaobjectStatus {
  /** The metaobjects is active for public use. */
  Active = 'ACTIVE',
  /** The metaobjects is an internal record. */
  Draft = 'DRAFT'
}

/** Defines how the metaobjects of a definition can be accessed in Storefront API surface areas, including Liquid and the GraphQL Storefront API. */
export enum Shopify_MetaobjectStorefrontAccess {
  /** Metaobjects are not accessible in any Storefront API surface area. */
  None = 'NONE',
  /**
   * Metaobjects are accessible in the GraphQL Storefront API by any application with the `unauthenticated_read_metaobjects` access scope.
   * Metaobjects are accessible in online store Liquid templates.
   */
  PublicRead = 'PUBLIC_READ'
}

/** Provides attributes for visual representation. */
export type Shopify_MetaobjectThumbnail = {
  __typename?: 'Shopify_MetaobjectThumbnail';
  /** The file to be used for visual representation of this metaobject. */
  file?: Maybe<Shopify_File>;
  /** The hexadecimal color code to be used for respresenting this metaobject. */
  hex?: Maybe<Scalars['String']['output']>;
};

/** Defines errors encountered while managing metaobject resources. */
export type Shopify_MetaobjectUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_MetaobjectUserError';
  /** The error code. */
  code?: Maybe<Shopify_MetaobjectUserErrorCode>;
  /** The index of the failing list element in an array. */
  elementIndex?: Maybe<Scalars['Int']['output']>;
  /** The key of the failing object element. */
  elementKey?: Maybe<Scalars['String']['output']>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `MetaobjectUserError`. */
export enum Shopify_MetaobjectUserErrorCode {
  /** The input value is blank. */
  Blank = 'BLANK',
  /** The capability you are using is not enabled. */
  CapabilityNotEnabled = 'CAPABILITY_NOT_ENABLED',
  /** Duplicate inputs were provided for this field key. */
  DuplicateFieldInput = 'DUPLICATE_FIELD_INPUT',
  /** Renderable data input is referencing an invalid field. */
  FieldTypeInvalid = 'FIELD_TYPE_INVALID',
  /** The targeted object cannot be modified. */
  Immutable = 'IMMUTABLE',
  /** The input value isn't included in the list. */
  Inclusion = 'INCLUSION',
  /** An unexpected error occurred. */
  InternalError = 'INTERNAL_ERROR',
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** The value for the metafield definition option was invalid. */
  InvalidOption = 'INVALID_OPTION',
  /** The metafield type is invalid. */
  InvalidType = 'INVALID_TYPE',
  /** The value is invalid for the metafield type or the definition options. */
  InvalidValue = 'INVALID_VALUE',
  /** The maximum number of metaobjects definitions has been exceeded. */
  MaxDefinitionsExceeded = 'MAX_DEFINITIONS_EXCEEDED',
  /** The maximum number of metaobjects per shop has been exceeded. */
  MaxObjectsExceeded = 'MAX_OBJECTS_EXCEEDED',
  /** The input is missing required keys. */
  MissingRequiredKeys = 'MISSING_REQUIRED_KEYS',
  /** Not authorized. */
  NotAuthorized = 'NOT_AUTHORIZED',
  /** Missing required fields were found for this object. */
  ObjectFieldRequired = 'OBJECT_FIELD_REQUIRED',
  /** The specified field key is already in use. */
  ObjectFieldTaken = 'OBJECT_FIELD_TAKEN',
  /** The input value needs to be blank. */
  Present = 'PRESENT',
  /** The requested record couldn't be found. */
  RecordNotFound = 'RECORD_NOT_FOUND',
  /** The provided name is reserved for system use. */
  ReservedName = 'RESERVED_NAME',
  /** The input value is already taken. */
  Taken = 'TAKEN',
  /** The input value is too long. */
  TooLong = 'TOO_LONG',
  /** The input value is too short. */
  TooShort = 'TOO_SHORT',
  /** No field definition found for this key. */
  UndefinedObjectField = 'UNDEFINED_OBJECT_FIELD',
  /** No metaobject definition found for this type. */
  UndefinedObjectType = 'UNDEFINED_OBJECT_TYPE',
  /** The Online Store URL handle cannot be blank. */
  UrlHandleBlank = 'URL_HANDLE_BLANK',
  /** The Online Store URL handle is invalid. */
  UrlHandleInvalid = 'URL_HANDLE_INVALID',
  /** The Online Store URL handle is already taken. */
  UrlHandleTaken = 'URL_HANDLE_TAKEN'
}

/** The set of valid sort keys for the MethodDefinition query. */
export enum Shopify_MethodDefinitionSortKeys {
  /** Sort by the `id` value. */
  Id = 'ID',
  /** Sort by the `rate_provider_type` value. */
  RateProviderType = 'RATE_PROVIDER_TYPE',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE'
}

/** Represents a Shopify hosted 3D model. */
export type Shopify_Model3d = Shopify_Media & Shopify_Node & {
  __typename?: 'Shopify_Model3d';
  /** A word or phrase to share the nature or contents of a media. */
  alt?: Maybe<Scalars['String']['output']>;
  /** The 3d model's bounding box information. */
  boundingBox?: Maybe<Shopify_Model3dBoundingBox>;
  /** The 3d model's filename. */
  filename: Scalars['String']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The media content type. */
  mediaContentType: Shopify_MediaContentType;
  /** Any errors which have occurred on the media. */
  mediaErrors: Array<Shopify_MediaError>;
  /** The warnings attached to the media. */
  mediaWarnings: Array<Shopify_MediaWarning>;
  /** The 3d model's original source. */
  originalSource?: Maybe<Shopify_Model3dSource>;
  /** The preview image for the media. */
  preview?: Maybe<Shopify_MediaPreviewImage>;
  /** The 3d model's sources. */
  sources: Array<Shopify_Model3dSource>;
  /** Current status of the media. */
  status: Shopify_MediaStatus;
};

/** Bounding box information of a 3d model. */
export type Shopify_Model3dBoundingBox = {
  __typename?: 'Shopify_Model3dBoundingBox';
  /** Size in meters of the smallest volume which contains the 3d model. */
  size: Shopify_Vector3;
};

/**
 * A source for a Shopify-hosted 3d model.
 *
 * Types of sources include GLB and USDZ formatted 3d models, where the former
 * is an original 3d model and the latter has been converted from the original.
 *
 * If the original source is in GLB format and over 15 MBs in size, then both the
 * original and the USDZ formatted source are optimized to reduce the file size.
 */
export type Shopify_Model3dSource = {
  __typename?: 'Shopify_Model3dSource';
  /** The 3d model source's filesize. */
  filesize: Scalars['Int']['output'];
  /** The 3d model source's format. */
  format: Scalars['String']['output'];
  /** The 3d model source's MIME type. */
  mimeType: Scalars['String']['output'];
  /** The 3d model source's URL. */
  url: Scalars['String']['output'];
};

/**
 * A collection of monetary values in their respective currencies. Typically used in the context of multi-currency pricing and transactions,
 * when an amount in the shop's currency is converted to the customer's currency of choice (the presentment currency).
 */
export type Shopify_MoneyBag = {
  __typename?: 'Shopify_MoneyBag';
  /** Amount in presentment currency. */
  presentmentMoney: Shopify_MoneyV2;
  /** Amount in shop currency. */
  shopMoney: Shopify_MoneyV2;
};

/** The input fields for a monetary value with currency. */
export type Shopify_MoneyInput = {
  /** Decimal money amount. */
  amount: Scalars['Shopify_Decimal']['input'];
  /** Currency of the money. */
  currencyCode: Shopify_CurrencyCode;
};

/** A monetary value with currency. */
export type Shopify_MoneyV2 = {
  __typename?: 'Shopify_MoneyV2';
  /** Decimal money amount. */
  amount: Scalars['Shopify_Decimal']['output'];
  /** Currency of the money. */
  currencyCode: Shopify_CurrencyCode;
};

/**
 * A default cursor that you can use in queries to paginate your results. Each edge in a connection can
 * return a cursor, which is a reference to the edge's position in the connection. You can use an edge's cursor as
 * the starting point to retrieve the nodes before or after it in a connection.
 *
 * To learn more about using cursor-based pagination, refer to
 * [Paginating results with GraphQL](https://shopify.dev/api/usage/pagination-graphql).
 */
export type Shopify_Navigable = {
  /** A default cursor that returns the single next record, sorted ascending by ID. */
  defaultCursor: Scalars['String']['output'];
};

/** A navigation item, holding basic link attributes. */
export type Shopify_NavigationItem = {
  __typename?: 'Shopify_NavigationItem';
  /** The unique identifier of the navigation item. */
  id: Scalars['String']['output'];
  /** The name of the navigation item. */
  title: Scalars['String']['output'];
  /** The URL of the page that the navigation item links to. */
  url: Scalars['Shopify_URL']['output'];
};

/**
 * An object with an ID field to support global identification, in accordance with the
 * [Relay specification](https://relay.dev/graphql/objectidentification.htm#sec-Node-Interface).
 * This interface is used by the [node](https://shopify.dev/api/admin-graphql/unstable/queries/node)
 * and [nodes](https://shopify.dev/api/admin-graphql/unstable/queries/nodes) queries.
 */
export type Shopify_Node = {
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
};

/**
 * An article in the blogging system. You can query articles from
 * [the REST API](https://shopify.dev/api/admin-rest/latest/resources/article)
 * if you need to access more information about an article. Currently, `OnlineStoreArticle` is
 * only useful to pass an article `id` to the `tagsAdd` mutation. For more information, refer to
 * the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd) mutation.
 */
export type Shopify_OnlineStoreArticle = Shopify_HasPublishedTranslations & Shopify_Navigable & Shopify_Node & {
  __typename?: 'Shopify_OnlineStoreArticle';
  /** A default cursor that returns the single next record, sorted ascending by ID. */
  defaultCursor: Scalars['String']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The translations associated with the resource. */
  translations: Array<Shopify_Translation>;
};


/**
 * An article in the blogging system. You can query articles from
 * [the REST API](https://shopify.dev/api/admin-rest/latest/resources/article)
 * if you need to access more information about an article. Currently, `OnlineStoreArticle` is
 * only useful to pass an article `id` to the `tagsAdd` mutation. For more information, refer to
 * the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd) mutation.
 */
export type Shopify_OnlineStoreArticleTranslationsArgs = {
  locale: Scalars['String']['input'];
  marketId?: InputMaybe<Scalars['ID']['input']>;
};

/**
 * Shopify stores come with a built-in blogging engine, allowing a shop to have one or more blogs.  Blogs are meant
 * to be used as a type of magazine or newsletter for the shop, with content that changes over time.
 */
export type Shopify_OnlineStoreBlog = Shopify_HasPublishedTranslations & Shopify_Node & {
  __typename?: 'Shopify_OnlineStoreBlog';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The translations associated with the resource. */
  translations: Array<Shopify_Translation>;
};


/**
 * Shopify stores come with a built-in blogging engine, allowing a shop to have one or more blogs.  Blogs are meant
 * to be used as a type of magazine or newsletter for the shop, with content that changes over time.
 */
export type Shopify_OnlineStoreBlogTranslationsArgs = {
  locale: Scalars['String']['input'];
  marketId?: InputMaybe<Scalars['ID']['input']>;
};

/** A custom page on the Online Store. */
export type Shopify_OnlineStorePage = Shopify_HasPublishedTranslations & Shopify_Navigable & Shopify_Node & {
  __typename?: 'Shopify_OnlineStorePage';
  /** A default cursor that returns the single next record, sorted ascending by ID. */
  defaultCursor: Scalars['String']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The translations associated with the resource. */
  translations: Array<Shopify_Translation>;
};


/** A custom page on the Online Store. */
export type Shopify_OnlineStorePageTranslationsArgs = {
  locale: Scalars['String']['input'];
  marketId?: InputMaybe<Scalars['ID']['input']>;
};

/** Online Store preview URL of the object. */
export type Shopify_OnlineStorePreviewable = {
  /** The online store preview URL. */
  onlineStorePreviewUrl?: Maybe<Scalars['Shopify_URL']['output']>;
};

/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the `Order` object.
 * Learn more about
 * [editing an existing order with the GraphQL Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/api/usage/access-scopes#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_Order = Shopify_CommentEventSubject & Shopify_HasEvents & Shopify_HasLocalizationExtensions & Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_LegacyInteroperability & Shopify_Node & {
  __typename?: 'Shopify_Order';
  /** A list of addtional fees applied to the order. */
  additionalFees: Array<Shopify_AdditionalFee>;
  /** A list of sales agreements associated with the order. */
  agreements: Shopify_SalesAgreementConnection;
  /** A list of messages that appear on the order page in the Shopify admin. */
  alerts: Array<Shopify_ResourceAlert>;
  /** The application that created the order. */
  app?: Maybe<Shopify_OrderApp>;
  /** The billing address of the customer. */
  billingAddress?: Maybe<Shopify_MailingAddress>;
  /** Whether the billing address matches the shipping address. */
  billingAddressMatchesShippingAddress: Scalars['Boolean']['output'];
  /** Whether the order can be manually marked as paid. */
  canMarkAsPaid: Scalars['Boolean']['output'];
  /** Whether a customer email exists for the order. */
  canNotifyCustomer: Scalars['Boolean']['output'];
  /**
   * The reason provided when the order was canceled.
   * Returns `null` if the order wasn't canceled.
   */
  cancelReason?: Maybe<Shopify_OrderCancelReason>;
  /** Cancellation details for the order. */
  cancellation?: Maybe<Shopify_OrderCancellation>;
  /**
   * The date and time when the order was canceled.
   * Returns `null` if the order wasn't canceled.
   */
  cancelledAt?: Maybe<Scalars['DateTime']['output']>;
  /** Whether payment for the order can be captured. */
  capturable: Scalars['Boolean']['output'];
  /**
   * The total order-level discount amount, before returns, in shop currency.
   * @deprecated Use `cartDiscountAmountSet` instead.
   */
  cartDiscountAmount?: Maybe<Scalars['Shopify_Money']['output']>;
  /** The total order-level discount amount, before returns, in shop and presentment currencies. */
  cartDiscountAmountSet?: Maybe<Shopify_MoneyBag>;
  /**
   * The channel that created the order.
   * @deprecated Use `publication` instead.
   */
  channel?: Maybe<Shopify_Channel>;
  /** Details about the channel that created the order. */
  channelInformation?: Maybe<Shopify_ChannelInformation>;
  /** The IP address of the API client that created the order. */
  clientIp?: Maybe<Scalars['String']['output']>;
  /** Whether the order is closed. */
  closed: Scalars['Boolean']['output'];
  /**
   * The date and time when the order was closed.
   * Returns `null` if the order isn't closed.
   */
  closedAt?: Maybe<Scalars['DateTime']['output']>;
  /**
   * A randomly generated alpha-numeric identifier for the order that may be shown to the customer
   * instead of the sequential order name. For example, "XPAV284CT", "R50KELTJP" or "35PKUN0UJ".
   * This value isn't guaranteed to be unique.
   */
  confirmationNumber?: Maybe<Scalars['String']['output']>;
  /** Whether inventory has been reserved for the order. */
  confirmed: Scalars['Boolean']['output'];
  /** Date and time when the order was created in Shopify. */
  createdAt: Scalars['DateTime']['output'];
  /** The shop currency when the order was placed. */
  currencyCode: Shopify_CurrencyCode;
  /** The current order-level discount amount after all order updates, in shop and presentment currencies. */
  currentCartDiscountAmountSet: Shopify_MoneyBag;
  /** The sum of the quantities for all line items that contribute to the order's current subtotal price. */
  currentSubtotalLineItemsQuantity: Scalars['Int']['output'];
  /**
   * The sum of the prices for all line items after discounts and returns, in shop and presentment currencies.
   * If `taxesIncluded` is `true`, then the subtotal also includes tax.
   */
  currentSubtotalPriceSet: Shopify_MoneyBag;
  /**
   * A list of all tax lines applied to line items on the order, after returns.
   * Tax line prices represent the total price for all tax lines with the same `rate` and `title`.
   */
  currentTaxLines: Array<Shopify_TaxLine>;
  /**
   * The total amount of additional fees after returns, in shop and presentment currencies.
   * Returns `null` if there are no additional fees for the order.
   */
  currentTotalAdditionalFeesSet?: Maybe<Shopify_MoneyBag>;
  /**
   * The total amount discounted on the order after returns, in shop and presentment currencies.
   * This includes both order and line level discounts.
   */
  currentTotalDiscountsSet: Shopify_MoneyBag;
  /**
   * The total amount of duties after returns, in shop and presentment currencies.
   * Returns `null` if duties aren't applicable.
   */
  currentTotalDutiesSet?: Maybe<Shopify_MoneyBag>;
  /**
   * The total price of the order, after returns, in shop and presentment currencies.
   * This includes taxes and discounts.
   */
  currentTotalPriceSet: Shopify_MoneyBag;
  /** The sum of the prices of all tax lines applied to line items on the order, after returns, in shop and presentment currencies. */
  currentTotalTaxSet: Shopify_MoneyBag;
  /** The total weight of the order after returns, in grams. */
  currentTotalWeight: Scalars['Shopify_UnsignedInt64']['output'];
  /** A list of the custom attributes added to the order. */
  customAttributes: Array<Shopify_Attribute>;
  /** The customer that placed the order. */
  customer?: Maybe<Shopify_Customer>;
  /** Whether the customer agreed to receive marketing materials. */
  customerAcceptsMarketing: Scalars['Boolean']['output'];
  /**
   * The customer's visits and interactions with the online store before placing the order.
   * @deprecated Use `customerJourneySummary` instead.
   */
  customerJourney?: Maybe<Shopify_CustomerJourney>;
  /** The customer's visits and interactions with the online store before placing the order. */
  customerJourneySummary?: Maybe<Shopify_CustomerJourneySummary>;
  /** A two-letter or three-letter language code, optionally followed by a region modifier. */
  customerLocale?: Maybe<Scalars['String']['output']>;
  /** A list of discounts that are applied to the order, not including order edits and refunds. */
  discountApplications: Shopify_DiscountApplicationConnection;
  /** The discount code used for the order. */
  discountCode?: Maybe<Scalars['String']['output']>;
  /** The discount codes used for the order. */
  discountCodes: Array<Scalars['String']['output']>;
  /**
   * The primary address of the customer.
   * Returns `null` if neither the shipping address nor the billing address was provided.
   */
  displayAddress?: Maybe<Shopify_MailingAddress>;
  /**
   * The financial status of the order that can be shown to the merchant.
   * This field doesn't capture all the details of an order's financial state. It should only be used for display summary purposes.
   */
  displayFinancialStatus?: Maybe<Shopify_OrderDisplayFinancialStatus>;
  /**
   * The fulfillment status for the order that can be shown to the merchant.
   * This field does not capture all the details of an order's fulfillment state. It should only be used for display summary purposes.
   * For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
   */
  displayFulfillmentStatus: Shopify_OrderDisplayFulfillmentStatus;
  /** A list of the disputes associated with the order. */
  disputes: Array<Shopify_OrderDisputeSummary>;
  /** Whether the order has had any edits applied. */
  edited: Scalars['Boolean']['output'];
  /** The email address associated with the customer. */
  email?: Maybe<Scalars['String']['output']>;
  /**
   * Whether taxes on the order are estimated.
   * This field returns `false` when taxes on the order are finalized and aren't subject to any changes.
   */
  estimatedTaxes: Scalars['Boolean']['output'];
  /** A list of events associated with the order. */
  events: Shopify_EventConnection;
  /** A list of ExchangeV2s for the order. */
  exchangeV2s: Shopify_ExchangeV2Connection;
  /**
   * Whether there are line items that can be fulfilled.
   * This field returns `false` when the order has no fulfillable line items.
   * For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
   */
  fulfillable: Scalars['Boolean']['output'];
  /**
   * A list of fulfillment orders for a specific order.
   *
   * [FulfillmentOrder API access scopes](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder#api-access-scopes)
   * govern which fulfillments orders are returned.
   * An API client will only receive a subset of the fulfillment orders which belong to an order
   * if they don't have the necessary access scopes to view all of the fulfillment orders.
   * In the case that an API client does not have the access scopes necessary to view
   * any of the fulfillment orders that belong to an order, an empty array will be returned.
   */
  fulfillmentOrders: Shopify_FulfillmentOrderConnection;
  /** List of shipments for the order. */
  fulfillments: Array<Shopify_Fulfillment>;
  /** Whether the order has been paid in full. */
  fullyPaid: Scalars['Boolean']['output'];
  /** Whether the merchant added a timeline comment to the order. */
  hasTimelineComment: Scalars['Boolean']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /**
   * The URL of the first page of the online store that the customer visited before they submitted the order.
   * @deprecated Use `customerJourneySummary.lastVisit.landingPageHtml` instead
   */
  landingPageDisplayText?: Maybe<Scalars['String']['output']>;
  /**
   * The first page of the online store that the customer visited before they submitted the order.
   * @deprecated Use `customerJourneySummary.lastVisit.landingPage` instead
   */
  landingPageUrl?: Maybe<Scalars['Shopify_URL']['output']>;
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['Shopify_UnsignedInt64']['output'];
  /** A list of the order's line items. */
  lineItems: Shopify_LineItemConnection;
  /**
   * A list of the order's line items.
   * @deprecated Use `lineItems` instead.
   */
  lineItemsMutable: Shopify_LineItemMutableConnection;
  /** List of localization extensions for the resource. */
  localizationExtensions: Shopify_LocalizationExtensionConnection;
  /**
   * The fulfillment location that was assigned when the order was created.
   * Orders can have multiple fulfillment orders. These fulfillment orders can each be assigned to a different location which is responsible for fulfilling a subset of the items in an order. The `Order.location` field will only point to one of these locations.
   * Use the [`FulfillmentOrder`](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder)
   * object for up-to-date fulfillment location information.
   * @deprecated Use `physicalLocation` instead.
   */
  location?: Maybe<Scalars['String']['output']>;
  /** Whether the order can be edited by the merchant. For example, canceled orders can’t be edited. */
  merchantEditable: Scalars['Boolean']['output'];
  /** A list of reasons why the order can't be edited. For example, "Canceled orders can't be edited". */
  merchantEditableErrors: Array<Scalars['String']['output']>;
  /** The application acting as the Merchant of Record for the order. */
  merchantOfRecordApp?: Maybe<Shopify_OrderApp>;
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafield definitions. */
  metafieldDefinitions: Shopify_MetafieldDefinitionConnection;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /**
   * The unique identifier for the order that appears on the order page in the Shopify admin and the <b>Order status</b> page.
   * For example, "#1001", "EN1001", or "1001-A".
   * This value isn't unique across multiple stores.
   */
  name: Scalars['String']['output'];
  /**
   * The net payment for the order, based on the total amount received minus the total amount refunded, in shop currency.
   * @deprecated Use `netPaymentSet` instead.
   */
  netPayment: Scalars['Shopify_Money']['output'];
  /** The net payment for the order, based on the total amount received minus the total amount refunded, in shop and presentment currencies. */
  netPaymentSet: Shopify_MoneyBag;
  /**
   * A list of line items that can't be fulfilled.
   * For example, tips and fully refunded line items can't be fulfilled.
   * For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
   */
  nonFulfillableLineItems: Shopify_LineItemConnection;
  /** The contents of the note associated with the order. */
  note?: Maybe<Scalars['String']['output']>;
  /**
   * The total amount of additional fees after returns, in shop and presentment currencies.
   * Returns `null` if there are no additional fees for the order.
   */
  originalTotalAdditionalFeesSet?: Maybe<Shopify_MoneyBag>;
  /**
   * The total amount of duties before returns, in shop and presentment currencies.
   * Returns `null` if duties aren't applicable.
   */
  originalTotalDutiesSet?: Maybe<Shopify_MoneyBag>;
  /** The total price of the order at the time of order creation, in shop and presentment currencies. */
  originalTotalPriceSet: Shopify_MoneyBag;
  /** The payment collection details for the order. */
  paymentCollectionDetails: Shopify_OrderPaymentCollectionDetails;
  /**
   * A list of the names of all payment gateways used for the order.
   * For example, "Shopify Payments" and "Cash on Delivery (COD)".
   */
  paymentGatewayNames: Array<Scalars['String']['output']>;
  /** The payment terms associated with the order. */
  paymentTerms?: Maybe<Shopify_PaymentTerms>;
  /** The phone number associated with the customer. */
  phone?: Maybe<Scalars['String']['output']>;
  /**
   * The fulfillment location that was assigned when the order was created.
   * Orders can have multiple fulfillment orders. These fulfillment orders can each be assigned to a different location which is responsible for fulfilling a subset of the items in an order. The `Order.physicalLocation` field will only point to one of these locations.
   * Use the [`FulfillmentOrder`](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder)
   * object for up to date fulfillment location information.
   * @deprecated Use `fulfillmentOrders` to get the fulfillment location for the order
   */
  physicalLocation?: Maybe<Shopify_Location>;
  /** The PO number associated with the order. */
  poNumber?: Maybe<Scalars['String']['output']>;
  /** The payment `CurrencyCode` of the customer for the order. */
  presentmentCurrencyCode: Shopify_CurrencyCode;
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafields: Shopify_PrivateMetafieldConnection;
  /**
   * The date and time when the order was processed.
   * This date and time might not match the date and time when the order was created.
   */
  processedAt: Scalars['DateTime']['output'];
  /** The publication that the order was created from. */
  publication?: Maybe<Shopify_Publication>;
  /** The purchasing entity for the order. */
  purchasingEntity?: Maybe<Shopify_PurchasingEntity>;
  /**
   * The marketing referral code from the link that the customer clicked to visit the store.
   * Supports the following URL attributes: "ref", "source", or "r".
   * For example, if the URL is `{shop}.myshopify.com/products/slide?ref=j2tj1tn2`, then this value is `j2tj1tn2`.
   * @deprecated Use `customerJourneySummary.lastVisit.referralCode` instead
   */
  referralCode?: Maybe<Scalars['String']['output']>;
  /**
   * A web domain or short description of the source that sent the customer to your online store. For example, "shopify.com" or "email".
   * @deprecated Use `customerJourneySummary.lastVisit.referralInfoHtml` instead
   */
  referrerDisplayText?: Maybe<Scalars['String']['output']>;
  /**
   * The URL of the webpage where the customer clicked a link that sent them to your online store.
   * @deprecated Use `customerJourneySummary.lastVisit.referrerUrl` instead
   */
  referrerUrl?: Maybe<Scalars['Shopify_URL']['output']>;
  /** The difference between the suggested and actual refund amount of all refunds that have been applied to the order. A positive value indicates a difference in the merchant's favor, and a negative value indicates a difference in the customer's favor. */
  refundDiscrepancySet: Shopify_MoneyBag;
  /** Whether the order can be refunded. */
  refundable: Scalars['Boolean']['output'];
  /** A list of refunds that have been applied to the order. */
  refunds: Array<Shopify_Refund>;
  /** The URL of the source that the order originated from, if found in the domain registry. */
  registeredSourceUrl?: Maybe<Scalars['Shopify_URL']['output']>;
  /** Whether the order has shipping lines or at least one line item on the order that requires shipping. */
  requiresShipping: Scalars['Boolean']['output'];
  /** Whether any line item on the order can be restocked. */
  restockable: Scalars['Boolean']['output'];
  /** The order's aggregated return status for display purposes. */
  returnStatus: Shopify_OrderReturnStatus;
  /** A list of returns for the order. */
  returns: Shopify_ReturnConnection;
  /** The risk characteristics for the order. */
  risk: Shopify_OrderRiskSummary;
  /**
   * The fraud risk level of the order.
   * @deprecated This field is deprecated in version 2024-04. Please use OrderRiskAssessment.riskLevel
   */
  riskLevel: Shopify_OrderRiskLevel;
  /**
   * A list of risks associated with the order.
   * @deprecated This field is deprecated in version 2024-04. Please use OrderRiskAssessment
   */
  risks: Array<Shopify_OrderRisk>;
  /** The mailing address of the customer. */
  shippingAddress?: Maybe<Shopify_MailingAddress>;
  /** A summary of all shipping costs on the order. */
  shippingLine?: Maybe<Shopify_ShippingLine>;
  /** A list of the order's shipping lines. */
  shippingLines: Shopify_ShippingLineConnection;
  /** The Shopify Protect details for the order. If Shopify Protect is disabled for the shop, then this will be null. */
  shopifyProtect?: Maybe<Shopify_ShopifyProtectOrderSummary>;
  /**
   * A unique POS or third party order identifier.
   * For example, "1234-12-1000" or "111-98567-54". The `receipt_number` field is derived from this value for POS orders.
   */
  sourceIdentifier?: Maybe<Scalars['String']['output']>;
  /** The sum of the quantities for all line items that contribute to the order's subtotal price. */
  subtotalLineItemsQuantity: Scalars['Int']['output'];
  /**
   * The sum of the prices for all line items after discounts and before returns, in shop currency.
   * If `taxesIncluded` is `true`, then the subtotal also includes tax.
   * @deprecated Use `subtotalPriceSet` instead.
   */
  subtotalPrice?: Maybe<Scalars['Shopify_Money']['output']>;
  /**
   * The sum of the prices for all line items after discounts and before returns, in shop and presentment currencies.
   * If `taxesIncluded` is `true`, then the subtotal also includes tax.
   */
  subtotalPriceSet?: Maybe<Shopify_MoneyBag>;
  /** A suggested refund for the order. */
  suggestedRefund?: Maybe<Shopify_SuggestedRefund>;
  /**
   * A comma separated list of tags associated with the order. Updating `tags` overwrites
   * any existing tags that were previously added to the order. To add new tags without overwriting
   * existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
   * mutation.
   */
  tags: Array<Scalars['String']['output']>;
  /** Whether taxes are exempt on the order. */
  taxExempt: Scalars['Boolean']['output'];
  /**
   * A list of all tax lines applied to line items on the order, before returns.
   * Tax line prices represent the total price for all tax lines with the same `rate` and `title`.
   */
  taxLines: Array<Shopify_TaxLine>;
  /** Whether taxes are included in the subtotal price of the order. */
  taxesIncluded: Scalars['Boolean']['output'];
  /**
   * Whether the order is a test.
   * Test orders are made using the Shopify Bogus Gateway or a payment provider with test mode enabled.
   * A test order can't be converted into a real order and vice versa.
   */
  test: Scalars['Boolean']['output'];
  /**
   * The authorized amount that's uncaptured or undercaptured, in shop currency.
   * This amount isn't adjusted for returns.
   * @deprecated Use `totalCapturableSet` instead.
   */
  totalCapturable: Scalars['Shopify_Money']['output'];
  /**
   * The authorized amount that's uncaptured or undercaptured, in shop and presentment currencies.
   * This amount isn't adjusted for returns.
   */
  totalCapturableSet: Shopify_MoneyBag;
  /**
   * The total amount discounted on the order before returns, in shop currency.
   * This includes both order and line level discounts.
   * @deprecated Use `totalDiscountsSet` instead.
   */
  totalDiscounts?: Maybe<Scalars['Shopify_Money']['output']>;
  /**
   * The total amount discounted on the order before returns, in shop and presentment currencies.
   * This includes both order and line level discounts.
   */
  totalDiscountsSet?: Maybe<Shopify_MoneyBag>;
  /**
   * The total amount not yet transacted for the order, in shop and presentment currencies.
   * A positive value indicates a difference in the merchant's favor (payment from customer to merchant) and a negative value indicates a difference in the customer's favor (refund from merchant to customer).
   */
  totalOutstandingSet: Shopify_MoneyBag;
  /**
   * The total price of the order, before returns, in shop currency.
   * This includes taxes and discounts.
   * @deprecated Use `totalPriceSet` instead.
   */
  totalPrice: Scalars['Shopify_Money']['output'];
  /**
   * The total price of the order, before returns, in shop and presentment currencies.
   * This includes taxes and discounts.
   */
  totalPriceSet: Shopify_MoneyBag;
  /**
   * The total amount received from the customer before returns, in shop currency.
   * @deprecated Use `totalReceivedSet` instead.
   */
  totalReceived: Scalars['Shopify_Money']['output'];
  /** The total amount received from the customer before returns, in shop and presentment currencies. */
  totalReceivedSet: Shopify_MoneyBag;
  /**
   * The total amount that was refunded, in shop currency.
   * @deprecated Use `totalRefundedSet` instead.
   */
  totalRefunded: Scalars['Shopify_Money']['output'];
  /** The total amount that was refunded, in shop and presentment currencies. */
  totalRefundedSet: Shopify_MoneyBag;
  /** The total amount of shipping that was refunded, in shop and presentment currencies. */
  totalRefundedShippingSet: Shopify_MoneyBag;
  /**
   * The total shipping amount before discounts and returns, in shop currency.
   * @deprecated Use `totalShippingPriceSet` instead.
   */
  totalShippingPrice: Scalars['Shopify_Money']['output'];
  /** The total shipping amount before discounts and returns, in shop and presentment currencies. */
  totalShippingPriceSet: Shopify_MoneyBag;
  /**
   * The total tax amount before returns, in shop currency.
   * @deprecated Use `totalTaxSet` instead.
   */
  totalTax?: Maybe<Scalars['Shopify_Money']['output']>;
  /** The total tax amount before returns, in shop and presentment currencies. */
  totalTaxSet?: Maybe<Shopify_MoneyBag>;
  /**
   * The sum of all tip amounts for the order, in shop currency.
   * @deprecated Use `totalTipReceivedSet` instead.
   */
  totalTipReceived: Shopify_MoneyV2;
  /** The sum of all tip amounts for the order, in shop and presentment currencies. */
  totalTipReceivedSet: Shopify_MoneyBag;
  /** The total weight of the order before returns, in grams. */
  totalWeight?: Maybe<Scalars['Shopify_UnsignedInt64']['output']>;
  /** A list of transactions associated with the order. */
  transactions: Array<Shopify_OrderTransaction>;
  /** Whether no payments have been made for the order. */
  unpaid: Scalars['Boolean']['output'];
  /** The date and time when the order was modified last. */
  updatedAt: Scalars['DateTime']['output'];
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the `Order` object.
 * Learn more about
 * [editing an existing order with the GraphQL Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/api/usage/access-scopes#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderAgreementsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the `Order` object.
 * Learn more about
 * [editing an existing order with the GraphQL Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/api/usage/access-scopes#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderDiscountApplicationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the `Order` object.
 * Learn more about
 * [editing an existing order with the GraphQL Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/api/usage/access-scopes#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderEventsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_EventSortKeys>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the `Order` object.
 * Learn more about
 * [editing an existing order with the GraphQL Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/api/usage/access-scopes#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderExchangeV2sArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the `Order` object.
 * Learn more about
 * [editing an existing order with the GraphQL Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/api/usage/access-scopes#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderFulfillmentOrdersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  displayable?: InputMaybe<Scalars['Boolean']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the `Order` object.
 * Learn more about
 * [editing an existing order with the GraphQL Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/api/usage/access-scopes#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderFulfillmentsArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the `Order` object.
 * Learn more about
 * [editing an existing order with the GraphQL Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/api/usage/access-scopes#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderLineItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the `Order` object.
 * Learn more about
 * [editing an existing order with the GraphQL Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/api/usage/access-scopes#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderLineItemsMutableArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the `Order` object.
 * Learn more about
 * [editing an existing order with the GraphQL Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/api/usage/access-scopes#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderLocalizationExtensionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  countryCodes?: InputMaybe<Array<Shopify_CountryCode>>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  purposes?: InputMaybe<Array<Shopify_LocalizationExtensionPurpose>>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the `Order` object.
 * Learn more about
 * [editing an existing order with the GraphQL Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/api/usage/access-scopes#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace?: InputMaybe<Scalars['String']['input']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the `Order` object.
 * Learn more about
 * [editing an existing order with the GraphQL Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/api/usage/access-scopes#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderMetafieldDefinitionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  pinnedStatus?: InputMaybe<Shopify_MetafieldDefinitionPinnedStatus>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_MetafieldDefinitionSortKeys>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the `Order` object.
 * Learn more about
 * [editing an existing order with the GraphQL Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/api/usage/access-scopes#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the `Order` object.
 * Learn more about
 * [editing an existing order with the GraphQL Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/api/usage/access-scopes#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderNonFulfillableLineItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the `Order` object.
 * Learn more about
 * [editing an existing order with the GraphQL Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/api/usage/access-scopes#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace: Scalars['String']['input'];
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the `Order` object.
 * Learn more about
 * [editing an existing order with the GraphQL Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/api/usage/access-scopes#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderPrivateMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the `Order` object.
 * Learn more about
 * [editing an existing order with the GraphQL Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/api/usage/access-scopes#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderRefundsArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the `Order` object.
 * Learn more about
 * [editing an existing order with the GraphQL Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/api/usage/access-scopes#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderReturnsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the `Order` object.
 * Learn more about
 * [editing an existing order with the GraphQL Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/api/usage/access-scopes#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderRisksArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the `Order` object.
 * Learn more about
 * [editing an existing order with the GraphQL Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/api/usage/access-scopes#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderShippingLinesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  includeRemovals?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the `Order` object.
 * Learn more about
 * [editing an existing order with the GraphQL Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/api/usage/access-scopes#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderSuggestedRefundArgs = {
  refundDuties?: InputMaybe<Array<Shopify_RefundDutyInput>>;
  refundLineItems?: InputMaybe<Array<Shopify_RefundLineItemInput>>;
  refundShipping?: InputMaybe<Scalars['Boolean']['input']>;
  shippingAmount?: InputMaybe<Scalars['Shopify_Money']['input']>;
  suggestFullRefund?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the `Order` object.
 * Learn more about
 * [editing an existing order with the GraphQL Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 *
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/api/usage/access-scopes#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export type Shopify_OrderTransactionsArgs = {
  capturable?: InputMaybe<Scalars['Boolean']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  manuallyResolvable?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * The possible order action types for a
 * [sales agreement](https://shopify.dev/api/admin-graphql/latest/interfaces/salesagreement).
 */
export enum Shopify_OrderActionType {
  /** An order with a purchase or charge. */
  Order = 'ORDER',
  /** An edit to the order. */
  OrderEdit = 'ORDER_EDIT',
  /** A refund on the order. */
  Refund = 'REFUND',
  /** A return on the order. */
  Return = 'RETURN',
  /** An unknown agreement action. Represents new actions that may be added in future versions. */
  Unknown = 'UNKNOWN'
}

/** An agreement associated with an order placement. */
export type Shopify_OrderAgreement = Shopify_SalesAgreement & {
  __typename?: 'Shopify_OrderAgreement';
  /** The application that created the agreement. */
  app?: Maybe<Shopify_App>;
  /** The date and time at which the agreement occured. */
  happenedAt: Scalars['DateTime']['output'];
  /** The unique ID for the agreement. */
  id: Scalars['ID']['output'];
  /** The order associated with the agreement. */
  order: Shopify_Order;
  /** The reason the agremeent was created. */
  reason: Shopify_OrderActionType;
  /** The sales associated with the agreement. */
  sales: Shopify_SaleConnection;
  /** The staff member associated with the agreement. */
  user?: Maybe<Shopify_StaffMember>;
};


/** An agreement associated with an order placement. */
export type Shopify_OrderAgreementSalesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The [application](https://shopify.dev/apps) that created the order. */
export type Shopify_OrderApp = {
  __typename?: 'Shopify_OrderApp';
  /** The application icon. */
  icon: Shopify_Image;
  /** The application ID. */
  id: Scalars['ID']['output'];
  /** The name of the application. */
  name: Scalars['String']['output'];
};

/** Represents the reason for the order's cancellation. */
export enum Shopify_OrderCancelReason {
  /** The customer wanted to cancel the order. */
  Customer = 'CUSTOMER',
  /** Payment was declined. */
  Declined = 'DECLINED',
  /** The order was fraudulent. */
  Fraud = 'FRAUD',
  /** There was insufficient inventory. */
  Inventory = 'INVENTORY',
  /** The order was canceled for an unlisted reason. */
  Other = 'OTHER',
  /** Staff made an error. */
  Staff = 'STAFF'
}

/** Errors related to order cancellation. */
export type Shopify_OrderCancelUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_OrderCancelUserError';
  /** The error code. */
  code?: Maybe<Shopify_OrderCancelUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `OrderCancelUserError`. */
export enum Shopify_OrderCancelUserErrorCode {
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** The record with the ID used as the input value couldn't be found. */
  NotFound = 'NOT_FOUND',
  /** An order refund was requested but the user does not have the refund_orders permission. */
  NoRefundPermission = 'NO_REFUND_PERMISSION'
}

/** Details about the order cancellation. */
export type Shopify_OrderCancellation = {
  __typename?: 'Shopify_OrderCancellation';
  /** Staff provided note for the order cancellation. */
  staffNote?: Maybe<Scalars['String']['output']>;
};

/** An auto-generated type for paginating through multiple Orders. */
export type Shopify_OrderConnection = {
  __typename?: 'Shopify_OrderConnection';
  /** A list of edges. */
  edges: Array<Shopify_OrderEdge>;
  /** A list of the nodes contained in OrderEdge. */
  nodes: Array<Shopify_Order>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An error that occurs during the execution of `OrderCreateMandatePayment`. */
export type Shopify_OrderCreateMandatePaymentUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_OrderCreateMandatePaymentUserError';
  /** The error code. */
  code?: Maybe<Shopify_OrderCreateMandatePaymentUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `OrderCreateMandatePaymentUserError`. */
export enum Shopify_OrderCreateMandatePaymentUserErrorCode {
  /** Errors for mandate payment on order. */
  OrderMandatePaymentErrorCode = 'ORDER_MANDATE_PAYMENT_ERROR_CODE'
}

/** Represents the order's current financial status. */
export enum Shopify_OrderDisplayFinancialStatus {
  /** Displayed as **Authorized**. */
  Authorized = 'AUTHORIZED',
  /** Displayed as **Expired**. */
  Expired = 'EXPIRED',
  /** Displayed as **Paid**. */
  Paid = 'PAID',
  /** Displayed as **Partially paid**. */
  PartiallyPaid = 'PARTIALLY_PAID',
  /** Displayed as **Partially refunded**. */
  PartiallyRefunded = 'PARTIALLY_REFUNDED',
  /** Displayed as **Pending**. */
  Pending = 'PENDING',
  /** Displayed as **Refunded**. */
  Refunded = 'REFUNDED',
  /** Displayed as **Voided**. */
  Voided = 'VOIDED'
}

/** Represents the order's aggregated fulfillment status for display purposes. */
export enum Shopify_OrderDisplayFulfillmentStatus {
  /** Displayed as **Fulfilled**. All the items in the order have been fulfilled. */
  Fulfilled = 'FULFILLED',
  /** Displayed as **In progress**. Some of the items in the order have been fulfilled, or a request for fulfillment has been sent to the fulfillment service. */
  InProgress = 'IN_PROGRESS',
  /** Displayed as **On hold**. All of the unfulfilled items in this order are on hold. */
  OnHold = 'ON_HOLD',
  /** Displayed as **Open**. None of the items in the order have been fulfilled. Replaced by "UNFULFILLED" status. */
  Open = 'OPEN',
  /** Displayed as **Partially fulfilled**. Some of the items in the order have been fulfilled. */
  PartiallyFulfilled = 'PARTIALLY_FULFILLED',
  /** Displayed as **Pending fulfillment**. A request for fulfillment of some items awaits a response from the fulfillment service. Replaced by the "IN_PROGRESS" status. */
  PendingFulfillment = 'PENDING_FULFILLMENT',
  /** Displayed as **Restocked**. All the items in the order have been restocked. Replaced by the "UNFULFILLED" status. */
  Restocked = 'RESTOCKED',
  /** Displayed as **Scheduled**. All of the unfulfilled items in this order are scheduled for fulfillment at later time. */
  Scheduled = 'SCHEDULED',
  /** Displayed as **Unfulfilled**. None of the items in the order have been fulfilled. */
  Unfulfilled = 'UNFULFILLED'
}

/** A summary of the important details for a dispute on an order. */
export type Shopify_OrderDisputeSummary = Shopify_Node & {
  __typename?: 'Shopify_OrderDisputeSummary';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The type that the dispute was initiated as. */
  initiatedAs: Shopify_DisputeType;
  /** The current status of the dispute. */
  status: Shopify_DisputeStatus;
};

/** An auto-generated type which holds one Order and a cursor during pagination. */
export type Shopify_OrderEdge = {
  __typename?: 'Shopify_OrderEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of OrderEdge. */
  node: Shopify_Order;
};

/** An error that occurs during the execution of `OrderEditAddShippingLine`. */
export type Shopify_OrderEditAddShippingLineUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_OrderEditAddShippingLineUserError';
  /** The error code. */
  code?: Maybe<Shopify_OrderEditAddShippingLineUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `OrderEditAddShippingLineUserError`. */
export enum Shopify_OrderEditAddShippingLineUserErrorCode {
  /** The input value is invalid. */
  Invalid = 'INVALID'
}

/** An agreement associated with an edit to the order. */
export type Shopify_OrderEditAgreement = Shopify_SalesAgreement & {
  __typename?: 'Shopify_OrderEditAgreement';
  /** The application that created the agreement. */
  app?: Maybe<Shopify_App>;
  /** The date and time at which the agreement occured. */
  happenedAt: Scalars['DateTime']['output'];
  /** The unique ID for the agreement. */
  id: Scalars['ID']['output'];
  /** The reason the agremeent was created. */
  reason: Shopify_OrderActionType;
  /** The sales associated with the agreement. */
  sales: Shopify_SaleConnection;
  /** The staff member associated with the agreement. */
  user?: Maybe<Shopify_StaffMember>;
};


/** An agreement associated with an edit to the order. */
export type Shopify_OrderEditAgreementSalesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** An error that occurs during the execution of `OrderEditRemoveDiscount`. */
export type Shopify_OrderEditRemoveDiscountUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_OrderEditRemoveDiscountUserError';
  /** The error code. */
  code?: Maybe<Shopify_OrderEditRemoveDiscountUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `OrderEditRemoveDiscountUserError`. */
export enum Shopify_OrderEditRemoveDiscountUserErrorCode {
  /** The input value is invalid. */
  Invalid = 'INVALID'
}

/** An error that occurs during the execution of `OrderEditRemoveShippingLine`. */
export type Shopify_OrderEditRemoveShippingLineUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_OrderEditRemoveShippingLineUserError';
  /** The error code. */
  code?: Maybe<Shopify_OrderEditRemoveShippingLineUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `OrderEditRemoveShippingLineUserError`. */
export enum Shopify_OrderEditRemoveShippingLineUserErrorCode {
  /** The input value is invalid. */
  Invalid = 'INVALID'
}

/** An error that occurs during the execution of `OrderEditUpdateDiscount`. */
export type Shopify_OrderEditUpdateDiscountUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_OrderEditUpdateDiscountUserError';
  /** The error code. */
  code?: Maybe<Shopify_OrderEditUpdateDiscountUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `OrderEditUpdateDiscountUserError`. */
export enum Shopify_OrderEditUpdateDiscountUserErrorCode {
  /** The input value is invalid. */
  Invalid = 'INVALID'
}

/** An error that occurs during the execution of `OrderEditUpdateShippingLine`. */
export type Shopify_OrderEditUpdateShippingLineUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_OrderEditUpdateShippingLineUserError';
  /** The error code. */
  code?: Maybe<Shopify_OrderEditUpdateShippingLineUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `OrderEditUpdateShippingLineUserError`. */
export enum Shopify_OrderEditUpdateShippingLineUserErrorCode {
  /** The input value is invalid. */
  Invalid = 'INVALID'
}

/** An error that occurs during the execution of `OrderInvoiceSend`. */
export type Shopify_OrderInvoiceSendUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_OrderInvoiceSendUserError';
  /** The error code. */
  code?: Maybe<Shopify_OrderInvoiceSendUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `OrderInvoiceSendUserError`. */
export enum Shopify_OrderInvoiceSendUserErrorCode {
  /** An error occurred while sending the invoice. */
  OrderInvoiceSendUnsuccessful = 'ORDER_INVOICE_SEND_UNSUCCESSFUL'
}

/** The payment collection details for an order that requires additional payment following an edit to the order. */
export type Shopify_OrderPaymentCollectionDetails = {
  __typename?: 'Shopify_OrderPaymentCollectionDetails';
  /** The URL to use for collecting an additional payment on the order. */
  additionalPaymentCollectionUrl?: Maybe<Scalars['Shopify_URL']['output']>;
  /** The list of vaulted payment methods for the order with their permissions. */
  vaultedPaymentMethods?: Maybe<Array<Shopify_PaymentMandate>>;
};

/**
 * The order's aggregated return status that's used for display purposes.
 * An order might have multiple returns, so this field communicates the prioritized return status.
 * The `OrderReturnStatus` enum is a supported filter parameter in the [`orders` query](https://shopify.dev/api/admin-graphql/latest/queries/orders#:~:text=reference_location_id-,return_status,-risk_level).
 */
export enum Shopify_OrderReturnStatus {
  /** All return shipments from a return in this order were inspected. */
  InspectionComplete = 'INSPECTION_COMPLETE',
  /** Some items in the order are being returned. */
  InProgress = 'IN_PROGRESS',
  /** No items in the order were returned. */
  NoReturn = 'NO_RETURN',
  /** Some items in the order were returned. */
  Returned = 'RETURNED',
  /** Some returns in the order were not completed successfully. */
  ReturnFailed = 'RETURN_FAILED',
  /** A return was requested for some items in the order. */
  ReturnRequested = 'RETURN_REQUESTED'
}

/**
 * Represents a fraud check on an order.
 * As of version 2024-04 this resource is deprecated. Risk Assessments can be queried via the
 * [OrderRisk Assessments API](https://shopify.dev/api/admin-graphql/2024-04/objects/OrderRiskAssessment).
 */
export type Shopify_OrderRisk = {
  __typename?: 'Shopify_OrderRisk';
  /**
   * Whether the risk level is shown in the Shopify admin. If false, then this order risk is ignored when Shopify determines the overall risk level for the order.
   * @deprecated This field is deprecated in version 2024-04
   */
  display: Scalars['Boolean']['output'];
  /**
   * The likelihood that an order is fraudulent, based on this order risk.
   *
   * The level can be set by Shopify risk analysis or by an app.
   * @deprecated This field is deprecated in version 2024-04. Please use OrderRiskAssessment.riskLevel
   */
  level?: Maybe<Shopify_OrderRiskLevel>;
  /**
   * The risk message that's shown to the merchant in the Shopify admin.
   * @deprecated This field is deprecated in version 2024-04
   */
  message?: Maybe<Scalars['String']['output']>;
};

/** The risk assessments for an order. */
export type Shopify_OrderRiskAssessment = {
  __typename?: 'Shopify_OrderRiskAssessment';
  /**
   * Optional facts used to describe the risk assessment. The values in here are specific to the provider.
   * See the [examples for the mutation orderRiskAssessmentCreate](https://shopify.dev/api/admin-graphql/unstable/mutations/orderRiskAssessmentCreate#section-examples).
   */
  facts: Array<Shopify_RiskFact>;
  /** The app that provided the assessment, `null` if the assessment was provided by Shopify. */
  provider?: Maybe<Shopify_App>;
  /** The likelihood that the order is fraudulent, based on this risk assessment. */
  riskLevel: Shopify_RiskAssessmentResult;
};

/** An error that occurs during the execution of `OrderRiskAssessmentCreate`. */
export type Shopify_OrderRiskAssessmentCreateUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_OrderRiskAssessmentCreateUserError';
  /** The error code. */
  code?: Maybe<Shopify_OrderRiskAssessmentCreateUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `OrderRiskAssessmentCreateUserError`. */
export enum Shopify_OrderRiskAssessmentCreateUserErrorCode {
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** The record with the ID used as the input value couldn't be found. */
  NotFound = 'NOT_FOUND',
  /** The order is marked as fulfilled and can no longer accept new risk assessments. */
  OrderAlreadyFulfilled = 'ORDER_ALREADY_FULFILLED',
  /** Too many facts were provided for the risk assessment. */
  TooManyFacts = 'TOO_MANY_FACTS'
}

/** The likelihood that an order is fraudulent. */
export enum Shopify_OrderRiskLevel {
  /** There is a high level of risk that this order is fraudulent. */
  High = 'HIGH',
  /** There is a low level of risk that this order is fraudulent. */
  Low = 'LOW',
  /** There is a medium level of risk that this order is fraudulent. */
  Medium = 'MEDIUM'
}

/** List of possible values for an OrderRiskRecommendation recommendation. */
export enum Shopify_OrderRiskRecommendationResult {
  /** Recommends fulfilling the order. */
  Accept = 'ACCEPT',
  /** Recommends cancelling the order. */
  Cancel = 'CANCEL',
  /** Recommends investigating the order by contacting buyers. */
  Investigate = 'INVESTIGATE',
  /** There is no recommended action for the order. */
  None = 'NONE'
}

/** Summary of risk characteristics for an order. */
export type Shopify_OrderRiskSummary = {
  __typename?: 'Shopify_OrderRiskSummary';
  /** The list of risk assessments for the order. */
  assessments: Array<Shopify_OrderRiskAssessment>;
  /** The recommendation for the order based on the results of the risk assessments. This suggests the action the merchant should take with regards to its risk of fraud. */
  recommendation: Shopify_OrderRiskRecommendationResult;
};

/** The set of valid sort keys for the Order query. */
export enum Shopify_OrderSortKeys {
  /** Sort by the `created_at` value. */
  CreatedAt = 'CREATED_AT',
  /** Sort by the `customer_name` value. */
  CustomerName = 'CUSTOMER_NAME',
  /** Sort orders by their shipping address country and city. */
  Destination = 'DESTINATION',
  /** Sort by the `financial_status` value. */
  FinancialStatus = 'FINANCIAL_STATUS',
  /** Sort by the `fulfillment_status` value. */
  FulfillmentStatus = 'FULFILLMENT_STATUS',
  /** Sort by the `id` value. */
  Id = 'ID',
  /** Sort by the `order_number` value. */
  OrderNumber = 'ORDER_NUMBER',
  /** Sort orders by their purchase order number. */
  PoNumber = 'PO_NUMBER',
  /** Sort by the `processed_at` value. */
  ProcessedAt = 'PROCESSED_AT',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE',
  /** Sort orders by the total quantity of all line items. */
  TotalItemsQuantity = 'TOTAL_ITEMS_QUANTITY',
  /** Sort by the `total_price` value. */
  TotalPrice = 'TOTAL_PRICE',
  /** Sort by the `updated_at` value. */
  UpdatedAt = 'UPDATED_AT'
}

/** A change that has been applied to an order. */
export type Shopify_OrderStagedChange = Shopify_OrderStagedChangeAddCustomItem | Shopify_OrderStagedChangeAddLineItemDiscount | Shopify_OrderStagedChangeAddShippingLine | Shopify_OrderStagedChangeAddVariant | Shopify_OrderStagedChangeDecrementItem | Shopify_OrderStagedChangeIncrementItem | Shopify_OrderStagedChangeRemoveShippingLine;

/**
 * A change to the order representing the addition of a
 * custom line item. For example, you might want to add gift wrapping service
 * as a custom line item.
 */
export type Shopify_OrderStagedChangeAddCustomItem = {
  __typename?: 'Shopify_OrderStagedChangeAddCustomItem';
  /** The price of an individual item without any discounts applied. This value can't be negative. */
  originalUnitPrice: Shopify_MoneyV2;
  /** The quantity of the custom item to add to the order. This value must be greater than zero. */
  quantity: Scalars['Int']['output'];
  /** The title of the custom item. */
  title: Scalars['String']['output'];
};

/** The discount applied to an item that was added during the current order edit. */
export type Shopify_OrderStagedChangeAddLineItemDiscount = {
  __typename?: 'Shopify_OrderStagedChangeAddLineItemDiscount';
  /** The description of the discount. */
  description: Scalars['String']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The pricing value of the discount. */
  value: Shopify_PricingValue;
};

/**
 * A new [shipping line](https://shopify.dev/api/admin-graphql/latest/objects/shippingline)
 * added as part of an order edit.
 */
export type Shopify_OrderStagedChangeAddShippingLine = {
  __typename?: 'Shopify_OrderStagedChangeAddShippingLine';
  /** The phone number at the shipping address. */
  phone?: Maybe<Scalars['String']['output']>;
  /** The shipping line's title that's shown to the buyer. */
  presentmentTitle?: Maybe<Scalars['String']['output']>;
  /** The price that applies to the shipping line. */
  price: Shopify_MoneyV2;
  /** The title of the shipping line. */
  title?: Maybe<Scalars['String']['output']>;
};

/** A change to the order representing the addition of an existing product variant. */
export type Shopify_OrderStagedChangeAddVariant = {
  __typename?: 'Shopify_OrderStagedChangeAddVariant';
  /** The quantity of the product variant that was added. */
  quantity: Scalars['Int']['output'];
  /** The product variant that was added. */
  variant: Shopify_ProductVariant;
};

/** An auto-generated type for paginating through multiple OrderStagedChanges. */
export type Shopify_OrderStagedChangeConnection = {
  __typename?: 'Shopify_OrderStagedChangeConnection';
  /** A list of edges. */
  edges: Array<Shopify_OrderStagedChangeEdge>;
  /** A list of the nodes contained in OrderStagedChangeEdge. */
  nodes: Array<Shopify_OrderStagedChange>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An removal of items from an existing line item on the order. */
export type Shopify_OrderStagedChangeDecrementItem = {
  __typename?: 'Shopify_OrderStagedChangeDecrementItem';
  /** The number of items removed. */
  delta: Scalars['Int']['output'];
  /** The original line item. */
  lineItem: Shopify_LineItem;
  /** The intention to restock the removed items. */
  restock: Scalars['Boolean']['output'];
};

/** An auto-generated type which holds one OrderStagedChange and a cursor during pagination. */
export type Shopify_OrderStagedChangeEdge = {
  __typename?: 'Shopify_OrderStagedChangeEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of OrderStagedChangeEdge. */
  node: Shopify_OrderStagedChange;
};

/** An addition of items to an existing line item on the order. */
export type Shopify_OrderStagedChangeIncrementItem = {
  __typename?: 'Shopify_OrderStagedChangeIncrementItem';
  /** The number of items added. */
  delta: Scalars['Int']['output'];
  /** The original line item. */
  lineItem: Shopify_LineItem;
};

/** A shipping line removed during an order edit. */
export type Shopify_OrderStagedChangeRemoveShippingLine = {
  __typename?: 'Shopify_OrderStagedChangeRemoveShippingLine';
  /** The removed shipping line. */
  shippingLine: Shopify_ShippingLine;
};

/** A payment transaction in the context of an order. */
export type Shopify_OrderTransaction = Shopify_Node & {
  __typename?: 'Shopify_OrderTransaction';
  /** The masked account number associated with the payment method. */
  accountNumber?: Maybe<Scalars['String']['output']>;
  /**
   * The amount of money.
   * @deprecated Use `amountSet` instead.
   */
  amount: Scalars['Shopify_Money']['output'];
  /** The amount and currency of the transaction in shop and presentment currencies. */
  amountSet: Shopify_MoneyBag;
  /**
   * The amount and currency of the transaction.
   * @deprecated Use `amountSet` instead.
   */
  amountV2: Shopify_MoneyV2;
  /** Authorization code associated with the transaction. */
  authorizationCode?: Maybe<Scalars['String']['output']>;
  /** The time when the authorization expires. This field is available only to stores on a Shopify Plus plan and is populated only for Shopify Payments authorizations. */
  authorizationExpiresAt?: Maybe<Scalars['DateTime']['output']>;
  /** Date and time when the transaction was created. */
  createdAt: Scalars['DateTime']['output'];
  /** A standardized error code, independent of the payment provider. */
  errorCode?: Maybe<Shopify_OrderTransactionErrorCode>;
  /** The transaction fees charged on the order transaction. Only present for Shopify Payments transactions. */
  fees: Array<Shopify_TransactionFee>;
  /** The human-readable payment gateway name used to process the transaction. */
  formattedGateway?: Maybe<Scalars['String']['output']>;
  /** The payment gateway used to process the transaction. */
  gateway?: Maybe<Scalars['String']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The kind of transaction. */
  kind: Shopify_OrderTransactionKind;
  /** Whether the transaction can be manually captured. */
  manuallyCapturable: Scalars['Boolean']['output'];
  /**
   * Specifies the available amount to refund on the gateway.
   * This value is only available for transactions of type `SuggestedRefund`.
   * @deprecated Use `maximumRefundableV2` instead.
   */
  maximumRefundable?: Maybe<Scalars['Shopify_Money']['output']>;
  /**
   * Specifies the available amount with currency to refund on the gateway.
   * This value is only available for transactions of type `SuggestedRefund`.
   */
  maximumRefundableV2?: Maybe<Shopify_MoneyV2>;
  /** Whether the transaction can be captured multiple times. */
  multiCapturable: Scalars['Boolean']['output'];
  /** The associated order. */
  order?: Maybe<Shopify_Order>;
  /** The associated parent transaction, for example the authorization of a capture. */
  parentTransaction?: Maybe<Shopify_OrderTransaction>;
  /** The payment details for the transaction. */
  paymentDetails?: Maybe<Shopify_PaymentDetails>;
  /** The payment icon to display for the transaction. */
  paymentIcon?: Maybe<Shopify_Image>;
  /** The payment ID associated with the transaction. */
  paymentId?: Maybe<Scalars['String']['output']>;
  /**
   * The payment method used for the transaction. This value is `null` if the payment method is unknown.
   * @deprecated Use `paymentIcon` instead.
   */
  paymentMethod?: Maybe<Shopify_PaymentMethods>;
  /** Date and time when the transaction was processed. */
  processedAt?: Maybe<Scalars['DateTime']['output']>;
  /**
   * The transaction receipt that the payment gateway attaches to the transaction.
   * The value of this field depends on which payment gateway processed the transaction.
   */
  receiptJson?: Maybe<Scalars['Shopify_JSON']['output']>;
  /** The settlement currency. */
  settlementCurrency?: Maybe<Shopify_CurrencyCode>;
  /** The rate used when converting the transaction amount to settlement currency. */
  settlementCurrencyRate?: Maybe<Scalars['Shopify_Decimal']['output']>;
  /** Contains all Shopify Payments information related to an order transaction. This field is available only to stores on a Shopify Plus plan. */
  shopifyPaymentsSet?: Maybe<Shopify_ShopifyPaymentsTransactionSet>;
  /** The status of this transaction. */
  status: Shopify_OrderTransactionStatus;
  /** Whether the transaction is a test transaction. */
  test: Scalars['Boolean']['output'];
  /**
   * Specifies the available amount to capture on the gateway.
   * Only available when an amount is capturable or manually mark as paid.
   * @deprecated Use `totalUnsettledSet` instead.
   */
  totalUnsettled?: Maybe<Scalars['Shopify_Money']['output']>;
  /**
   * Specifies the available amount with currency to capture on the gateway in shop and presentment currencies.
   * Only available when an amount is capturable or manually mark as paid.
   */
  totalUnsettledSet?: Maybe<Shopify_MoneyBag>;
  /**
   * Specifies the available amount with currency to capture on the gateway.
   * Only available when an amount is capturable or manually mark as paid.
   * @deprecated Use `totalUnsettledSet` instead.
   */
  totalUnsettledV2?: Maybe<Shopify_MoneyV2>;
  /** Staff member who was logged into the Shopify POS device when the transaction was processed. */
  user?: Maybe<Shopify_StaffMember>;
};

/** An auto-generated type for paginating through multiple OrderTransactions. */
export type Shopify_OrderTransactionConnection = {
  __typename?: 'Shopify_OrderTransactionConnection';
  /** A list of edges. */
  edges: Array<Shopify_OrderTransactionEdge>;
  /** A list of the nodes contained in OrderTransactionEdge. */
  nodes: Array<Shopify_OrderTransaction>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one OrderTransaction and a cursor during pagination. */
export type Shopify_OrderTransactionEdge = {
  __typename?: 'Shopify_OrderTransactionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of OrderTransactionEdge. */
  node: Shopify_OrderTransaction;
};

/** A standardized error code, independent of the payment provider. */
export enum Shopify_OrderTransactionErrorCode {
  /** The payment method was invalid. */
  AmazonPaymentsInvalidPaymentMethod = 'AMAZON_PAYMENTS_INVALID_PAYMENT_METHOD',
  /** The maximum amount has been captured. */
  AmazonPaymentsMaxAmountCharged = 'AMAZON_PAYMENTS_MAX_AMOUNT_CHARGED',
  /** The maximum amount has been refunded. */
  AmazonPaymentsMaxAmountRefunded = 'AMAZON_PAYMENTS_MAX_AMOUNT_REFUNDED',
  /** The maximum of 10 authorizations has been captured for an order. */
  AmazonPaymentsMaxAuthorizationsCaptured = 'AMAZON_PAYMENTS_MAX_AUTHORIZATIONS_CAPTURED',
  /** The maximum of 10 refunds has been processed for an order. */
  AmazonPaymentsMaxRefundsProcessed = 'AMAZON_PAYMENTS_MAX_REFUNDS_PROCESSED',
  /** The order was canceled, which canceled all open authorizations. */
  AmazonPaymentsOrderReferenceCanceled = 'AMAZON_PAYMENTS_ORDER_REFERENCE_CANCELED',
  /** The order was not confirmed within three hours. */
  AmazonPaymentsStale = 'AMAZON_PAYMENTS_STALE',
  /** Call the card issuer. */
  CallIssuer = 'CALL_ISSUER',
  /** The card was declined. */
  CardDeclined = 'CARD_DECLINED',
  /** There is an error in the gateway or merchant configuration. */
  ConfigError = 'CONFIG_ERROR',
  /** The card is expired. */
  ExpiredCard = 'EXPIRED_CARD',
  /** There was an unknown error with processing the payment. */
  GenericError = 'GENERIC_ERROR',
  /** The address does not match the card number. */
  IncorrectAddress = 'INCORRECT_ADDRESS',
  /** The CVC does not match the card number. */
  IncorrectCvc = 'INCORRECT_CVC',
  /** The card number is incorrect. */
  IncorrectNumber = 'INCORRECT_NUMBER',
  /** The entered PIN is incorrect. */
  IncorrectPin = 'INCORRECT_PIN',
  /** The ZIP or postal code does not match the card number. */
  IncorrectZip = 'INCORRECT_ZIP',
  /** The amount is either too high or too low for the provider. */
  InvalidAmount = 'INVALID_AMOUNT',
  /** The payment method is not available in the customer's country. */
  InvalidCountry = 'INVALID_COUNTRY',
  /** The format of the CVC is incorrect. */
  InvalidCvc = 'INVALID_CVC',
  /** The format of the expiry date is incorrect. */
  InvalidExpiryDate = 'INVALID_EXPIRY_DATE',
  /** The format of the card number is incorrect. */
  InvalidNumber = 'INVALID_NUMBER',
  /** The payment method is momentarily unavailable. */
  PaymentMethodUnavailable = 'PAYMENT_METHOD_UNAVAILABLE',
  /** The card has been reported as lost or stolen, and the card issuer has requested that the merchant keep the card and call the number on the back. */
  PickUpCard = 'PICK_UP_CARD',
  /** There was an error while processing the payment. */
  ProcessingError = 'PROCESSING_ERROR',
  /** A real card was used but the gateway was in test mode. */
  TestModeLiveCard = 'TEST_MODE_LIVE_CARD',
  /** The gateway or merchant configuration doesn't support a feature, such as network tokenization. */
  UnsupportedFeature = 'UNSUPPORTED_FEATURE'
}

/** The different kinds of order transactions. */
export enum Shopify_OrderTransactionKind {
  /**
   * An amount reserved against the cardholder's funding source.
   * Money does not change hands until the authorization is captured.
   */
  Authorization = 'AUTHORIZATION',
  /** A transfer of the money that was reserved by an authorization. */
  Capture = 'CAPTURE',
  /** The money returned to the customer when they've paid too much during a cash transaction. */
  Change = 'CHANGE',
  /** An authorization for a payment taken with an EMV credit card reader. */
  EmvAuthorization = 'EMV_AUTHORIZATION',
  /**
   * A partial or full return of captured funds to the cardholder.
   * A refund can happen only after a capture is processed.
   */
  Refund = 'REFUND',
  /** An authorization and capture performed together in a single step. */
  Sale = 'SALE',
  /** A suggested refund transaction that can be used to create a refund. */
  SuggestedRefund = 'SUGGESTED_REFUND',
  /** A cancelation of an authorization transaction. */
  Void = 'VOID'
}

/** The different states that an `OrderTransaction` can have. */
export enum Shopify_OrderTransactionStatus {
  /** Awaiting a response. */
  AwaitingResponse = 'AWAITING_RESPONSE',
  /** There was an error while processing the transaction. */
  Error = 'ERROR',
  /** The transaction failed. */
  Failure = 'FAILURE',
  /** The transaction is pending. */
  Pending = 'PENDING',
  /** The transaction succeeded. */
  Success = 'SUCCESS',
  /** The transaction status is unknown. */
  Unknown = 'UNKNOWN'
}

/**
 * Returns information about pagination in a connection, in accordance with the
 * [Relay specification](https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo).
 * For more information, please read our [GraphQL Pagination Usage Guide](https://shopify.dev/api/usage/pagination-graphql).
 */
export type Shopify_PageInfo = {
  __typename?: 'Shopify_PageInfo';
  /** The cursor corresponding to the last node in edges. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** Whether there are more pages to fetch following the current page. */
  hasNextPage: Scalars['Boolean']['output'];
  /** Whether there are any pages prior to the current page. */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** The cursor corresponding to the first node in edges. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** A payment customization. */
export type Shopify_PaymentCustomization = Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_Node & {
  __typename?: 'Shopify_PaymentCustomization';
  /** The enabled status of the payment customization. */
  enabled: Scalars['Boolean']['output'];
  /** The error history on the most recent version of the payment customization. */
  errorHistory?: Maybe<Shopify_FunctionsErrorHistory>;
  /** The ID of the Shopify Function implementing the payment customization. */
  functionId: Scalars['String']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafield definitions. */
  metafieldDefinitions: Shopify_MetafieldDefinitionConnection;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafields: Shopify_PrivateMetafieldConnection;
  /** The Shopify Function implementing the payment customization. */
  shopifyFunction: Shopify_ShopifyFunction;
  /** The title of the payment customization. */
  title: Scalars['String']['output'];
};


/** A payment customization. */
export type Shopify_PaymentCustomizationMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace?: InputMaybe<Scalars['String']['input']>;
};


/** A payment customization. */
export type Shopify_PaymentCustomizationMetafieldDefinitionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  pinnedStatus?: InputMaybe<Shopify_MetafieldDefinitionPinnedStatus>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_MetafieldDefinitionSortKeys>;
};


/** A payment customization. */
export type Shopify_PaymentCustomizationMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** A payment customization. */
export type Shopify_PaymentCustomizationPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace: Scalars['String']['input'];
};


/** A payment customization. */
export type Shopify_PaymentCustomizationPrivateMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** An error that occurs during the execution of a payment customization mutation. */
export type Shopify_PaymentCustomizationError = Shopify_DisplayableError & {
  __typename?: 'Shopify_PaymentCustomizationError';
  /** The error code. */
  code?: Maybe<Shopify_PaymentCustomizationErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `PaymentCustomizationError`. */
export enum Shopify_PaymentCustomizationErrorCode {
  /** Shop plan not eligible to use Functions from a custom app. */
  CustomAppFunctionNotEligible = 'CUSTOM_APP_FUNCTION_NOT_ELIGIBLE',
  /** Function does not implement the required interface. */
  FunctionDoesNotImplement = 'FUNCTION_DOES_NOT_IMPLEMENT',
  /** Function ID cannot be changed. */
  FunctionIdCannotBeChanged = 'FUNCTION_ID_CANNOT_BE_CHANGED',
  /** Function not found. */
  FunctionNotFound = 'FUNCTION_NOT_FOUND',
  /** Function is pending deletion. */
  FunctionPendingDeletion = 'FUNCTION_PENDING_DELETION',
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** Could not create or update metafields. */
  InvalidMetafields = 'INVALID_METAFIELDS',
  /** Maximum payment customizations are already enabled. */
  MaximumActivePaymentCustomizations = 'MAXIMUM_ACTIVE_PAYMENT_CUSTOMIZATIONS',
  /** Shop must be on a Shopify Plus plan to activate payment customizations from a custom app. */
  PaymentCustomizationFunctionNotEligible = 'PAYMENT_CUSTOMIZATION_FUNCTION_NOT_ELIGIBLE',
  /** Payment customization not found. */
  PaymentCustomizationNotFound = 'PAYMENT_CUSTOMIZATION_NOT_FOUND',
  /** Required input field must be present. */
  RequiredInputField = 'REQUIRED_INPUT_FIELD'
}

/** Payment details related to a transaction. */
export type Shopify_PaymentDetails = Shopify_CardPaymentDetails | Shopify_ShopPayInstallmentsPaymentDetails;

/** All possible instrument outputs for Payment Mandates. */
export type Shopify_PaymentInstrument = Shopify_VaultCreditCard | Shopify_VaultPaypalBillingAgreement;

/**
 * A payment instrument and the permission
 * the owner of the instrument gives to the merchant to debit it.
 */
export type Shopify_PaymentMandate = Shopify_Node & {
  __typename?: 'Shopify_PaymentMandate';
  /** The unique ID of a payment mandate. */
  id: Scalars['ID']['output'];
  /** The outputs details of the payment instrument. */
  paymentInstrument: Shopify_PaymentInstrument;
};

/** Some of the payment methods used in Shopify. */
export enum Shopify_PaymentMethods {
  AmericanExpress = 'AMERICAN_EXPRESS',
  Bitcoin = 'BITCOIN',
  Bogus = 'BOGUS',
  Dankort = 'DANKORT',
  DinersClub = 'DINERS_CLUB',
  Discover = 'DISCOVER',
  Dogecoin = 'DOGECOIN',
  /** The payment method for eftpos_au payment. */
  Eftpos = 'EFTPOS',
  /** The payment method for Elo payment. */
  Elo = 'ELO',
  Forbrugsforeningen = 'FORBRUGSFORENINGEN',
  /** The payment method for Interac payment. */
  Interac = 'INTERAC',
  Jcb = 'JCB',
  Litecoin = 'LITECOIN',
  Maestro = 'MAESTRO',
  Mastercard = 'MASTERCARD',
  Paypal = 'PAYPAL',
  /** The payment method for UnionPay payment. */
  Unionpay = 'UNIONPAY',
  Visa = 'VISA'
}

/** An error that occurs during the execution of `PaymentReminderSend`. */
export type Shopify_PaymentReminderSendUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_PaymentReminderSendUserError';
  /** The error code. */
  code?: Maybe<Shopify_PaymentReminderSendUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `PaymentReminderSendUserError`. */
export enum Shopify_PaymentReminderSendUserErrorCode {
  /** An error occurred while sending the payment reminder. */
  PaymentReminderSendUnsuccessful = 'PAYMENT_REMINDER_SEND_UNSUCCESSFUL'
}

/** Represents the payment schedule for a single payment defined in the payment terms. */
export type Shopify_PaymentSchedule = Shopify_Node & {
  __typename?: 'Shopify_PaymentSchedule';
  /** Amount owed for this payment schedule. */
  amount: Shopify_MoneyV2;
  /** Date and time when the payment schedule is paid or fulfilled. */
  completedAt?: Maybe<Scalars['DateTime']['output']>;
  /** Date and time when the payment schedule is due. */
  dueAt?: Maybe<Scalars['DateTime']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** Date and time when the invoice is sent. */
  issuedAt?: Maybe<Scalars['DateTime']['output']>;
  /** The payment terms the payment schedule belongs to. */
  paymentTerms: Shopify_PaymentTerms;
};

/** An auto-generated type for paginating through multiple PaymentSchedules. */
export type Shopify_PaymentScheduleConnection = {
  __typename?: 'Shopify_PaymentScheduleConnection';
  /** A list of edges. */
  edges: Array<Shopify_PaymentScheduleEdge>;
  /** A list of the nodes contained in PaymentScheduleEdge. */
  nodes: Array<Shopify_PaymentSchedule>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one PaymentSchedule and a cursor during pagination. */
export type Shopify_PaymentScheduleEdge = {
  __typename?: 'Shopify_PaymentScheduleEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of PaymentScheduleEdge. */
  node: Shopify_PaymentSchedule;
};

/** Settings related to payments. */
export type Shopify_PaymentSettings = {
  __typename?: 'Shopify_PaymentSettings';
  /** List of the digital wallets which the shop supports. */
  supportedDigitalWallets: Array<Shopify_DigitalWallet>;
};

/** Represents the payment terms for an order or draft order. */
export type Shopify_PaymentTerms = Shopify_Node & {
  __typename?: 'Shopify_PaymentTerms';
  /** The draft order associated with the payment terms. */
  draftOrder?: Maybe<Shopify_DraftOrder>;
  /** Duration of payment terms in days based on the payment terms template used to create the payment terms. */
  dueInDays?: Maybe<Scalars['Int']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The order associated with the payment terms. */
  order?: Maybe<Shopify_Order>;
  /** Whether the payment terms have overdue payment schedules. */
  overdue: Scalars['Boolean']['output'];
  /** List of schedules for the payment terms. */
  paymentSchedules: Shopify_PaymentScheduleConnection;
  /** The name of the payment terms template used to create the payment terms. */
  paymentTermsName: Scalars['String']['output'];
  /** The payment terms template type used to create the payment terms. */
  paymentTermsType: Shopify_PaymentTermsType;
  /** The payment terms name, translated into the shop admin's preferred language. */
  translatedName: Scalars['String']['output'];
};


/** Represents the payment terms for an order or draft order. */
export type Shopify_PaymentTermsPaymentSchedulesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** An error that occurs during the execution of `PaymentTermsCreate`. */
export type Shopify_PaymentTermsCreateUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_PaymentTermsCreateUserError';
  /** The error code. */
  code?: Maybe<Shopify_PaymentTermsCreateUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `PaymentTermsCreateUserError`. */
export enum Shopify_PaymentTermsCreateUserErrorCode {
  /** An error occurred while creating payment terms. */
  PaymentTermsCreationUnsuccessful = 'PAYMENT_TERMS_CREATION_UNSUCCESSFUL'
}

/** An error that occurs during the execution of `PaymentTermsDelete`. */
export type Shopify_PaymentTermsDeleteUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_PaymentTermsDeleteUserError';
  /** The error code. */
  code?: Maybe<Shopify_PaymentTermsDeleteUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `PaymentTermsDeleteUserError`. */
export enum Shopify_PaymentTermsDeleteUserErrorCode {
  /** An error occurred while deleting payment terms. */
  PaymentTermsDeleteUnsuccessful = 'PAYMENT_TERMS_DELETE_UNSUCCESSFUL'
}

/** Represents the payment terms template object. */
export type Shopify_PaymentTermsTemplate = Shopify_Node & {
  __typename?: 'Shopify_PaymentTermsTemplate';
  /** The description of the payment terms template. */
  description: Scalars['String']['output'];
  /** The number of days between the issued date and due date if this is the net type of payment terms. */
  dueInDays?: Maybe<Scalars['Int']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The name of the payment terms template. */
  name: Scalars['String']['output'];
  /** The type of the payment terms template. */
  paymentTermsType: Shopify_PaymentTermsType;
  /** The translated payment terms template name. */
  translatedName: Scalars['String']['output'];
};

/** The type of a payment terms or a payment terms template. */
export enum Shopify_PaymentTermsType {
  /** The payment terms or payment terms template is a fixed type. It's due on a specified date. */
  Fixed = 'FIXED',
  /** The payment terms or payment terms template is due on fulfillment. */
  Fulfillment = 'FULFILLMENT',
  /** The payment terms or payment terms template is a net type. It's due a number of days after issue. */
  Net = 'NET',
  /** The payment terms or payment terms template is due on receipt. */
  Receipt = 'RECEIPT',
  /** The type of the payment terms or payment terms template is unknown. */
  Unknown = 'UNKNOWN'
}

/** An error that occurs during the execution of `PaymentTermsUpdate`. */
export type Shopify_PaymentTermsUpdateUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_PaymentTermsUpdateUserError';
  /** The error code. */
  code?: Maybe<Shopify_PaymentTermsUpdateUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `PaymentTermsUpdateUserError`. */
export enum Shopify_PaymentTermsUpdateUserErrorCode {
  /** An error occurred while updating payment terms. */
  PaymentTermsUpdateUnsuccessful = 'PAYMENT_TERMS_UPDATE_UNSUCCESSFUL'
}

/** Represents a valid PayPal Express subscriptions gateway status. */
export enum Shopify_PaypalExpressSubscriptionsGatewayStatus {
  /** The status is disabled. */
  Disabled = 'DISABLED',
  /** The status is enabled. */
  Enabled = 'ENABLED',
  /** The status is pending. */
  Pending = 'PENDING'
}

/**
 * Represents a price list, including information about related prices and eligibility rules.
 * You can use price lists to specify either fixed prices or adjusted relative prices that
 * override initial product variant prices. Price lists are applied to customers
 * using context rules, which determine price list eligibility.
 *
 *   For more information on price lists, refer to
 *   [Support different pricing models](https://shopify.dev/apps/internationalization/product-price-lists).
 */
export type Shopify_PriceList = Shopify_Node & {
  __typename?: 'Shopify_PriceList';
  /** The catalog that the price list is associated with. */
  catalog?: Maybe<Shopify_Catalog>;
  /** The currency for fixed prices associated with this price list. */
  currency: Shopify_CurrencyCode;
  /** The number of fixed prices on the price list. */
  fixedPricesCount: Scalars['Int']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The unique name of the price list, used as a human-readable identifier. */
  name: Scalars['String']['output'];
  /** Relative adjustments to other prices. */
  parent?: Maybe<Shopify_PriceListParent>;
  /** A list of prices associated with the price list. */
  prices: Shopify_PriceListPriceConnection;
  /** A list of quantity rules associated with the price list, ordered by product variants. */
  quantityRules: Shopify_QuantityRuleConnection;
};


/**
 * Represents a price list, including information about related prices and eligibility rules.
 * You can use price lists to specify either fixed prices or adjusted relative prices that
 * override initial product variant prices. Price lists are applied to customers
 * using context rules, which determine price list eligibility.
 *
 *   For more information on price lists, refer to
 *   [Support different pricing models](https://shopify.dev/apps/internationalization/product-price-lists).
 */
export type Shopify_PriceListPricesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  originType?: InputMaybe<Shopify_PriceListPriceOriginType>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Represents a price list, including information about related prices and eligibility rules.
 * You can use price lists to specify either fixed prices or adjusted relative prices that
 * override initial product variant prices. Price lists are applied to customers
 * using context rules, which determine price list eligibility.
 *
 *   For more information on price lists, refer to
 *   [Support different pricing models](https://shopify.dev/apps/internationalization/product-price-lists).
 */
export type Shopify_PriceListQuantityRulesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  originType?: InputMaybe<Shopify_QuantityRuleOriginType>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * The type and value of a price list adjustment.
 *
 * For more information on price lists, refer to
 * [Support different pricing models](https://shopify.dev/apps/internationalization/product-price-lists).
 */
export type Shopify_PriceListAdjustment = {
  __typename?: 'Shopify_PriceListAdjustment';
  /** The type of price adjustment, such as percentage increase or decrease. */
  type: Shopify_PriceListAdjustmentType;
  /**
   * The value of price adjustment, where positive numbers reduce the prices and negative numbers
   * increase them.
   */
  value: Scalars['Float']['output'];
};

/** Represents the settings of price list adjustments. */
export type Shopify_PriceListAdjustmentSettings = {
  __typename?: 'Shopify_PriceListAdjustmentSettings';
  /** The type of price list adjustment setting for compare at price. */
  compareAtMode: Shopify_PriceListCompareAtMode;
};

/** Represents a percentage price adjustment type. */
export enum Shopify_PriceListAdjustmentType {
  /** Percentage decrease type. Prices will have a lower value. */
  PercentageDecrease = 'PERCENTAGE_DECREASE',
  /** Percentage increase type. Prices will have a higher value. */
  PercentageIncrease = 'PERCENTAGE_INCREASE'
}

/** Represents how the compare at price will be determined for a price list. */
export enum Shopify_PriceListCompareAtMode {
  /** The compare at price is adjusted based on percentage specified in price list. */
  Adjusted = 'ADJUSTED',
  /** The compare at prices are set to `null` unless explicitly defined by a fixed price value. */
  Nullify = 'NULLIFY'
}

/** Error codes for failed price list fixed prices by product bulk update operations. */
export type Shopify_PriceListFixedPricesByProductBulkUpdateUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_PriceListFixedPricesByProductBulkUpdateUserError';
  /** The error code. */
  code?: Maybe<Shopify_PriceListFixedPricesByProductBulkUpdateUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `PriceListFixedPricesByProductBulkUpdateUserError`. */
export enum Shopify_PriceListFixedPricesByProductBulkUpdateUserErrorCode {
  /** Duplicate ID in input. */
  DuplicateIdInInput = 'DUPLICATE_ID_IN_INPUT',
  /** IDs must be mutually exclusive across add or delete operations. */
  IdMustBeMutuallyExclusive = 'ID_MUST_BE_MUTUALLY_EXCLUSIVE',
  /** No update operations specified. */
  NoUpdateOperationsSpecified = 'NO_UPDATE_OPERATIONS_SPECIFIED',
  /** The currency specified does not match the price list's currency. */
  PricesToAddCurrencyMismatch = 'PRICES_TO_ADD_CURRENCY_MISMATCH',
  /** Exceeded the 10000 prices to add limit. */
  PriceLimitExceeded = 'PRICE_LIMIT_EXCEEDED',
  /** Price list does not exist. */
  PriceListDoesNotExist = 'PRICE_LIST_DOES_NOT_EXIST',
  /** Product does not exist. */
  ProductDoesNotExist = 'PRODUCT_DOES_NOT_EXIST'
}

/**
 * Represents relative adjustments from one price list to other prices.
 *   You can use a `PriceListParent` to specify an adjusted relative price using a percentage-based
 *   adjustment. Adjusted prices work in conjunction with exchange rules and rounding.
 *
 *   [Adjustment types](https://shopify.dev/api/admin-graphql/latest/enums/pricelistadjustmenttype)
 *   support both percentage increases and decreases.
 */
export type Shopify_PriceListParent = {
  __typename?: 'Shopify_PriceListParent';
  /** A price list adjustment. */
  adjustment: Shopify_PriceListAdjustment;
  /** A price list's settings for adjustment. */
  settings: Shopify_PriceListAdjustmentSettings;
};

/**
 * Represents information about pricing for a product variant
 *         as defined on a price list, such as the price, compare at price, and origin type. You can use a `PriceListPrice` to specify a fixed price for a specific product variant. For examples, refer to [PriceListFixedPricesAdd](https://shopify.dev/api/admin-graphql/latest/mutations/priceListFixedPricesAdd) and [PriceList](https://shopify.dev/api/admin-graphql/latest/queries/priceList#section-examples).
 */
export type Shopify_PriceListPrice = {
  __typename?: 'Shopify_PriceListPrice';
  /** The compare-at price of the product variant on this price list. */
  compareAtPrice?: Maybe<Shopify_MoneyV2>;
  /** The origin of a price, either fixed (defined on the price list) or relative (calculated using a price list adjustment configuration). */
  originType: Shopify_PriceListPriceOriginType;
  /** The price of the product variant on this price list. */
  price: Shopify_MoneyV2;
  /** A list of quantity breaks for the product variant. */
  quantityPriceBreaks: Shopify_QuantityPriceBreakConnection;
  /** The product variant associated with this price. */
  variant: Shopify_ProductVariant;
};


/**
 * Represents information about pricing for a product variant
 *         as defined on a price list, such as the price, compare at price, and origin type. You can use a `PriceListPrice` to specify a fixed price for a specific product variant. For examples, refer to [PriceListFixedPricesAdd](https://shopify.dev/api/admin-graphql/latest/mutations/priceListFixedPricesAdd) and [PriceList](https://shopify.dev/api/admin-graphql/latest/queries/priceList#section-examples).
 */
export type Shopify_PriceListPriceQuantityPriceBreaksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_QuantityPriceBreakSortKeys>;
};

/** An auto-generated type for paginating through multiple PriceListPrices. */
export type Shopify_PriceListPriceConnection = {
  __typename?: 'Shopify_PriceListPriceConnection';
  /** A list of edges. */
  edges: Array<Shopify_PriceListPriceEdge>;
  /** A list of the nodes contained in PriceListPriceEdge. */
  nodes: Array<Shopify_PriceListPrice>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one PriceListPrice and a cursor during pagination. */
export type Shopify_PriceListPriceEdge = {
  __typename?: 'Shopify_PriceListPriceEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of PriceListPriceEdge. */
  node: Shopify_PriceListPrice;
};

/** Represents the origin of a price, either fixed (defined on the price list) or relative (calculated using a price list adjustment configuration). For examples, refer to [PriceList](https://shopify.dev/api/admin-graphql/latest/queries/priceList#section-examples). */
export enum Shopify_PriceListPriceOriginType {
  /** The price is defined on the price list. */
  Fixed = 'FIXED',
  /** The price is relative to the adjustment type and value. */
  Relative = 'RELATIVE'
}

/** An error for a failed price list price operation. */
export type Shopify_PriceListPriceUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_PriceListPriceUserError';
  /** The error code. */
  code?: Maybe<Shopify_PriceListPriceUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `PriceListPriceUserError`. */
export enum Shopify_PriceListPriceUserErrorCode {
  /** The input value is blank. */
  Blank = 'BLANK',
  /** The specified currency doesn't match the price list's currency. */
  PriceListCurrencyMismatch = 'PRICE_LIST_CURRENCY_MISMATCH',
  /** The price list doesn't exist. */
  PriceListNotFound = 'PRICE_LIST_NOT_FOUND',
  /** Only fixed prices can be deleted. */
  PriceNotFixed = 'PRICE_NOT_FIXED',
  /** A fixed price for the specified product variant doesn't exist. */
  VariantNotFound = 'VARIANT_NOT_FOUND'
}

/** Error codes for failed contextual pricing operations. */
export type Shopify_PriceListUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_PriceListUserError';
  /** The error code. */
  code?: Maybe<Shopify_PriceListUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `PriceListUserError`. */
export enum Shopify_PriceListUserErrorCode {
  /** An app catalog cannot be assigned to a price list. */
  AppCatalogPriceListAssignment = 'APP_CATALOG_PRICE_LIST_ASSIGNMENT',
  /** The input value is blank. */
  Blank = 'BLANK',
  /** Cannot assign a catalog to a price list that also has context rules. */
  CatalogAssignmentNotAllowed = 'CATALOG_ASSIGNMENT_NOT_ALLOWED',
  /** The context type of a catalog cannot be changed. */
  CatalogCannotChangeContextType = 'CATALOG_CANNOT_CHANGE_CONTEXT_TYPE',
  /** Quantity price breaks can be associated only with company location catalogs. */
  CatalogContextDoesNotSupportQuantityPriceBreaks = 'CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_PRICE_BREAKS',
  /** Quantity rules can be associated only with company location catalogs. */
  CatalogContextDoesNotSupportQuantityRules = 'CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_RULES',
  /** The specified catalog does not exist. */
  CatalogDoesNotExist = 'CATALOG_DOES_NOT_EXIST',
  /** The price list currency must match the market catalog currency. */
  CatalogMarketAndPriceListCurrencyMismatch = 'CATALOG_MARKET_AND_PRICE_LIST_CURRENCY_MISMATCH',
  /** Catalog has a price list already assigned. */
  CatalogTaken = 'CATALOG_TAKEN',
  /** A price list context rule cannot have more than one country. */
  ContextRuleCountriesLimit = 'CONTEXT_RULE_COUNTRIES_LIMIT',
  /** A price list for this country is already taken. */
  ContextRuleCountryTaken = 'CONTEXT_RULE_COUNTRY_TAKEN',
  /** Only one context rule option may be specified. */
  ContextRuleLimitOneOption = 'CONTEXT_RULE_LIMIT_ONE_OPTION',
  /**
   * Cannot save the price list with context rule because the limit of context rules per shop was reached.
   * @deprecated The limit is removed.
   */
  ContextRuleLimitReached = 'CONTEXT_RULE_LIMIT_REACHED',
  /** The specified market wasn't found. */
  ContextRuleMarketNotFound = 'CONTEXT_RULE_MARKET_NOT_FOUND',
  /** A price list for this market is already taken. */
  ContextRuleMarketTaken = 'CONTEXT_RULE_MARKET_TAKEN',
  /** A country in a context rule must use a valid currency. */
  CountryCurrencyMismatch = 'COUNTRY_CURRENCY_MISMATCH',
  /** A country catalog cannot be assigned to a price list. */
  CountryPriceListAssignment = 'COUNTRY_PRICE_LIST_ASSIGNMENT',
  /** A price list’s currency must be of the pricing rule’s country. */
  CurrencyCountryMismatch = 'CURRENCY_COUNTRY_MISMATCH',
  /** A price list’s currency must be the market currency. */
  CurrencyMarketMismatch = 'CURRENCY_MARKET_MISMATCH',
  /** The price list currency is not supported by the shop's payment gateway. */
  CurrencyNotSupported = 'CURRENCY_NOT_SUPPORTED',
  /** Something went wrong when trying to save the price list. Please try again. */
  GenericError = 'GENERIC_ERROR',
  /** The input value isn't included in the list. */
  Inclusion = 'INCLUSION',
  /** The adjustment value must not be greater than 1000% for `type` `PERCENTAGE_INCREASE`. */
  InvalidAdjustmentMaxValue = 'INVALID_ADJUSTMENT_MAX_VALUE',
  /** The adjustment value must not be greater than 100% for `type` `PERCENTAGE_DECREASE`. */
  InvalidAdjustmentMinValue = 'INVALID_ADJUSTMENT_MIN_VALUE',
  /** The adjustment value must be a positive value and not be greater than 100% for `type` `PERCENTAGE_DECREASE` and not be greater than 1000% for `type` `PERCENTAGE_INCREASE`. */
  InvalidAdjustmentValue = 'INVALID_ADJUSTMENT_VALUE',
  /** The context rule's market does not use the price list currency. */
  MarketCurrencyMismatch = 'MARKET_CURRENCY_MISMATCH',
  /** The price list is currently being modified. Please try again later. */
  PriceListLocked = 'PRICE_LIST_LOCKED',
  /** Cannot create price list for a primary market. */
  PriceListNotAllowedForPrimaryMarket = 'PRICE_LIST_NOT_ALLOWED_FOR_PRIMARY_MARKET',
  /** The specified price list doesn't exist. */
  PriceListNotFound = 'PRICE_LIST_NOT_FOUND',
  /** The input value is already taken. */
  Taken = 'TAKEN',
  /** The input value is too long. */
  TooLong = 'TOO_LONG'
}

/**
 * Price rules are a set of conditions, including entitlements and prerequisites, that must be met in order for a discount code to apply.
 *
 * We recommend using the types and queries detailed at [Getting started with discounts](https://shopify.dev/docs/apps/selling-strategies/discounts/getting-started) instead. These will replace the GraphQL `PriceRule` object and REST Admin `PriceRule` and `DiscountCode` resources.
 */
export type Shopify_PriceRule = Shopify_CommentEventSubject & Shopify_HasEvents & Shopify_LegacyInteroperability & Shopify_Node & {
  __typename?: 'Shopify_PriceRule';
  /** The maximum number of times that the price rule can be allocated onto an order. */
  allocationLimit?: Maybe<Scalars['Int']['output']>;
  /** The method by which the price rule's value is allocated to its entitled items. */
  allocationMethod: Shopify_PriceRuleAllocationMethod;
  /** The application that created the price rule. */
  app?: Maybe<Shopify_App>;
  /** Determines which discount classes the discount can combine with. */
  combinesWith: Shopify_DiscountCombinesWith;
  /** The date and time when the price rule was created. */
  createdAt: Scalars['DateTime']['output'];
  /** The customers that can use this price rule. */
  customerSelection: Shopify_PriceRuleCustomerSelection;
  /** The class of the discount for combining purposes. */
  discountClass: Shopify_DiscountClass;
  /** List of the price rule's discount codes. */
  discountCodes: Shopify_PriceRuleDiscountCodeConnection;
  /** How many discount codes associated with the price rule. */
  discountCodesCount?: Maybe<Shopify_Count>;
  /** The date and time when the price rule ends. For open-ended price rules, use `null`. */
  endsAt?: Maybe<Scalars['DateTime']['output']>;
  /**
   * Quantity of prerequisite items required for the price rule to be applicable,  compared to quantity of entitled items.
   * @deprecated Use `prerequisiteToEntitlementQuantityRatio` instead.
   */
  entitlementToPrerequisiteQuantityRatio?: Maybe<Shopify_PriceRuleEntitlementToPrerequisiteQuantityRatio>;
  /** The paginated list of events associated with the price rule. */
  events: Shopify_EventConnection;
  /** A list of the price rule's features. */
  features: Array<Shopify_PriceRuleFeature>;
  /** Indicates whether there are any timeline comments on the price rule. */
  hasTimelineComment: Scalars['Boolean']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The items to which the price rule applies. */
  itemEntitlements: Shopify_PriceRuleItemEntitlements;
  /** The items required for the price rule to be applicable. */
  itemPrerequisites: Shopify_PriceRuleLineItemPrerequisites;
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['Shopify_UnsignedInt64']['output'];
  /** Whether the price rule can be applied only once per customer. */
  oncePerCustomer: Scalars['Boolean']['output'];
  /** The number of the entitled items must fall within this range for the price rule to be applicable. */
  prerequisiteQuantityRange?: Maybe<Shopify_PriceRuleQuantityRange>;
  /** The shipping cost must fall within this range for the price rule to be applicable. */
  prerequisiteShippingPriceRange?: Maybe<Shopify_PriceRuleMoneyRange>;
  /** The sum of the entitled items subtotal prices must fall within this range for the price rule to be applicable. */
  prerequisiteSubtotalRange?: Maybe<Shopify_PriceRuleMoneyRange>;
  /** Quantity of prerequisite items required for the price rule to be applicable,  compared to quantity of entitled items. */
  prerequisiteToEntitlementQuantityRatio?: Maybe<Shopify_PriceRulePrerequisiteToEntitlementQuantityRatio>;
  /** URLs that can be used to share the discount. */
  shareableUrls: Array<Shopify_PriceRuleShareableUrl>;
  /** The shipping lines to which the price rule applies. */
  shippingEntitlements: Shopify_PriceRuleShippingLineEntitlements;
  /** The date and time when the price rule starts. */
  startsAt: Scalars['DateTime']['output'];
  /** The status of the price rule. */
  status: Shopify_PriceRuleStatus;
  /** A detailed summary of the price rule. */
  summary?: Maybe<Scalars['String']['output']>;
  /** The type of lines (line_item or shipping_line) to which the price rule applies. */
  target: Shopify_PriceRuleTarget;
  /** The title of the price rule. */
  title: Scalars['String']['output'];
  /** The total sales from orders where the price rule was used. */
  totalSales?: Maybe<Shopify_MoneyV2>;
  /**
   * A list of the price rule's features.
   * @deprecated Use `features` instead.
   */
  traits: Array<Shopify_PriceRuleTrait>;
  /** The number of times that the price rule has been used. This value is updated asynchronously and can be different than the actual usage count. */
  usageCount: Scalars['Int']['output'];
  /** The maximum number of times that the price rule can be used in total. */
  usageLimit?: Maybe<Scalars['Int']['output']>;
  /** A time period during which a price rule is applicable. */
  validityPeriod: Shopify_PriceRuleValidityPeriod;
  /**
   * The value of the price rule.
   * @deprecated Use `valueV2` instead.
   */
  value: Shopify_PriceRuleValue;
  /** The value of the price rule. */
  valueV2: Shopify_PricingValue;
};


/**
 * Price rules are a set of conditions, including entitlements and prerequisites, that must be met in order for a discount code to apply.
 *
 * We recommend using the types and queries detailed at [Getting started with discounts](https://shopify.dev/docs/apps/selling-strategies/discounts/getting-started) instead. These will replace the GraphQL `PriceRule` object and REST Admin `PriceRule` and `DiscountCode` resources.
 */
export type Shopify_PriceRuleDiscountCodesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  savedSearchId?: InputMaybe<Scalars['ID']['input']>;
  sortKey?: InputMaybe<Shopify_DiscountCodeSortKeys>;
};


/**
 * Price rules are a set of conditions, including entitlements and prerequisites, that must be met in order for a discount code to apply.
 *
 * We recommend using the types and queries detailed at [Getting started with discounts](https://shopify.dev/docs/apps/selling-strategies/discounts/getting-started) instead. These will replace the GraphQL `PriceRule` object and REST Admin `PriceRule` and `DiscountCode` resources.
 */
export type Shopify_PriceRuleEventsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_EventSortKeys>;
};

/** The method by which the price rule's value is allocated to its entitled items. */
export enum Shopify_PriceRuleAllocationMethod {
  /** The value will be applied once across the entitled items. */
  Across = 'ACROSS',
  /** The value will be applied to each of the entitled items. */
  Each = 'EACH'
}

/** An auto-generated type for paginating through multiple PriceRules. */
export type Shopify_PriceRuleConnection = {
  __typename?: 'Shopify_PriceRuleConnection';
  /** A list of edges. */
  edges: Array<Shopify_PriceRuleEdge>;
  /** A list of the nodes contained in PriceRuleEdge. */
  nodes: Array<Shopify_PriceRule>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** A selection of customers for whom the price rule applies. */
export type Shopify_PriceRuleCustomerSelection = {
  __typename?: 'Shopify_PriceRuleCustomerSelection';
  /** List of customers to whom the price rule applies. */
  customers: Shopify_CustomerConnection;
  /** Whether the price rule applies to all customers. */
  forAllCustomers: Scalars['Boolean']['output'];
  /** A list of customer segments that contain the customers who can use the price rule. */
  segments: Array<Shopify_Segment>;
};


/** A selection of customers for whom the price rule applies. */
export type Shopify_PriceRuleCustomerSelectionCustomersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  savedSearchId?: InputMaybe<Scalars['ID']['input']>;
  sortKey?: InputMaybe<Shopify_CustomerSortKeys>;
};

/** A discount code of a price rule. */
export type Shopify_PriceRuleDiscountCode = Shopify_Node & {
  __typename?: 'Shopify_PriceRuleDiscountCode';
  /** The application that created the discount code. */
  app?: Maybe<Shopify_App>;
  /** The code to apply the discount. */
  code: Scalars['String']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The number of times that the price rule has been used. This value is updated asynchronously and can be different than the actual usage count. */
  usageCount: Scalars['Int']['output'];
};

/** An auto-generated type for paginating through multiple PriceRuleDiscountCodes. */
export type Shopify_PriceRuleDiscountCodeConnection = {
  __typename?: 'Shopify_PriceRuleDiscountCodeConnection';
  /** A list of edges. */
  edges: Array<Shopify_PriceRuleDiscountCodeEdge>;
  /** A list of the nodes contained in PriceRuleDiscountCodeEdge. */
  nodes: Array<Shopify_PriceRuleDiscountCode>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one PriceRuleDiscountCode and a cursor during pagination. */
export type Shopify_PriceRuleDiscountCodeEdge = {
  __typename?: 'Shopify_PriceRuleDiscountCodeEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of PriceRuleDiscountCodeEdge. */
  node: Shopify_PriceRuleDiscountCode;
};

/** An auto-generated type which holds one PriceRule and a cursor during pagination. */
export type Shopify_PriceRuleEdge = {
  __typename?: 'Shopify_PriceRuleEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of PriceRuleEdge. */
  node: Shopify_PriceRule;
};

/** Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items. */
export type Shopify_PriceRuleEntitlementToPrerequisiteQuantityRatio = {
  __typename?: 'Shopify_PriceRuleEntitlementToPrerequisiteQuantityRatio';
  /** The quantity of entitled items in the ratio. */
  entitlementQuantity: Scalars['Int']['output'];
  /** The quantity of prerequisite items in the ratio. */
  prerequisiteQuantity: Scalars['Int']['output'];
};

/** Possible error codes that could be returned by a price rule mutation. */
export enum Shopify_PriceRuleErrorCode {
  /** The allocation method must be `ACROSS` for the provided target selection. */
  AllocationMethodMustBeAcrossForGivenTargetSelection = 'ALLOCATION_METHOD_MUST_BE_ACROSS_FOR_GIVEN_TARGET_SELECTION',
  /** The discount must apply on either one-time purchase or subscription items, or both. */
  AppliesOnNothing = 'APPLIES_ON_NOTHING',
  /** The input value is blank. */
  Blank = 'BLANK',
  /** Invalid BOGO target selection. */
  BogoInvalidTargetSelection = 'BOGO_INVALID_TARGET_SELECTION',
  /** Invalid BOGO target type. */
  BogoInvalidTargetType = 'BOGO_INVALID_TARGET_TYPE',
  /** Invalid BOGO value type. */
  BogoInvalidValueType = 'BOGO_INVALID_VALUE_TYPE',
  /** Can't use both prerequisite customers and saved search. */
  BothCustomerAndSavedSearchPrerequisitesSelected = 'BOTH_CUSTOMER_AND_SAVED_SEARCH_PREREQUISITES_SELECTED',
  /** Can't have both prerequisite customers and prerequisite segments. */
  BothCustomerAndSegmentPrerequisitesSelected = 'BOTH_CUSTOMER_AND_SEGMENT_PREREQUISITES_SELECTED',
  /** Can't have both saved searches and segments prerequisites. */
  BothSavedSearchAndSegmentPrerequisitesSelected = 'BOTH_SAVED_SEARCH_AND_SEGMENT_PREREQUISITES_SELECTED',
  /** Can't entitle collections in combination with product variants or products. */
  CannotEntitleCollectionsWithProductsOrVariants = 'CANNOT_ENTITLE_COLLECTIONS_WITH_PRODUCTS_OR_VARIANTS',
  /** Can't use collections as a prequisite in combination with product variants or products. */
  CannotPrerequisiteCollectionWithProductOrVariants = 'CANNOT_PREREQUISITE_COLLECTION_WITH_PRODUCT_OR_VARIANTS',
  /** The customer prerequisites exceeded the maximum number. */
  CustomerPrerequisitesExceededMax = 'CUSTOMER_PREREQUISITES_EXCEEDED_MAX',
  /** Invalid customer prerequisites selection. */
  CustomerPrerequisitesInvalidSelection = 'CUSTOMER_PREREQUISITES_INVALID_SELECTION',
  /** Customer prerequisites are missing. */
  CustomerPrerequisitesMissing = 'CUSTOMER_PREREQUISITES_MISSING',
  /** A duplicate customer prerequisite ID exists. */
  CustomerPrerequisiteDuplicate = 'CUSTOMER_PREREQUISITE_DUPLICATE',
  /** A duplicate customer saved search exists. */
  CustomerSavedSearchDuplicate = 'CUSTOMER_SAVED_SEARCH_DUPLICATE',
  /** The customer saved search exceeded the maximum number. */
  CustomerSavedSearchExceededMax = 'CUSTOMER_SAVED_SEARCH_EXCEEDED_MAX',
  /** Invalid customer saved search. */
  CustomerSavedSearchInvalid = 'CUSTOMER_SAVED_SEARCH_INVALID',
  /** The customer segment prerequisites exceeded the maximum number. */
  CustomerSegmentExceededMax = 'CUSTOMER_SEGMENT_EXCEEDED_MAX',
  /** The customer segment prerequisite ID is invalid. */
  CustomerSegmentInvalid = 'CUSTOMER_SEGMENT_INVALID',
  /** A duplicate customer segment prerequisite ID exists. */
  CustomerSegmentPrerequisiteDuplicate = 'CUSTOMER_SEGMENT_PREREQUISITE_DUPLICATE',
  /** A duplicate discount code exists. */
  DiscountCodeDuplicate = 'DISCOUNT_CODE_DUPLICATE',
  /** The discount end date must be after the start date. */
  EndDateBeforeStartDate = 'END_DATE_BEFORE_START_DATE',
  /** The input value should be equal to the value allowed. */
  EqualTo = 'EQUAL_TO',
  /** Can't exceed the maximum number. */
  ExceededMax = 'EXCEEDED_MAX',
  /** The input value should be greater than the minimum allowed value. */
  GreaterThan = 'GREATER_THAN',
  /** The input value should be greater than or equal to the minimum value allowed. */
  GreaterThanOrEqualTo = 'GREATER_THAN_OR_EQUAL_TO',
  /** Unexpected internal error happened. */
  InternalError = 'INTERNAL_ERROR',
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** The `combinesWith` settings are invalid for the discount class. */
  InvalidCombinesWithForDiscountClass = 'INVALID_COMBINES_WITH_FOR_DISCOUNT_CLASS',
  /** The discountClass is invalid for the price rule. */
  InvalidDiscountClassForPriceRule = 'INVALID_DISCOUNT_CLASS_FOR_PRICE_RULE',
  /** The target type is invalid when defining a prerequisite shipping price range. */
  InvalidTargetTypePrerequisiteShippingPriceRange = 'INVALID_TARGET_TYPE_PREREQUISITE_SHIPPING_PRICE_RANGE',
  /** Can't add the same collection twice. */
  ItemEntitlementsDuplicateCollection = 'ITEM_ENTITLEMENTS_DUPLICATE_COLLECTION',
  /** Can't add the same product twice. */
  ItemEntitlementsDuplicateProduct = 'ITEM_ENTITLEMENTS_DUPLICATE_PRODUCT',
  /** Can't add the same collection twice. */
  ItemEntitlementsDuplicateVariant = 'ITEM_ENTITLEMENTS_DUPLICATE_VARIANT',
  /** Can't exceed the maximum number of collection entitlements. */
  ItemEntitlementsExceededMaxCollection = 'ITEM_ENTITLEMENTS_EXCEEDED_MAX_COLLECTION',
  /** Can't exceed the maximum number of product entitlements. */
  ItemEntitlementsExceededMaxProduct = 'ITEM_ENTITLEMENTS_EXCEEDED_MAX_PRODUCT',
  /** Can't exceed the maximum number of variant entitlements. */
  ItemEntitlementsExceededMaxVariant = 'ITEM_ENTITLEMENTS_EXCEEDED_MAX_VARIANT',
  /** Invalid collection. */
  ItemEntitlementsInvalidCollection = 'ITEM_ENTITLEMENTS_INVALID_COLLECTION',
  /** Invalid product. */
  ItemEntitlementsInvalidProduct = 'ITEM_ENTITLEMENTS_INVALID_PRODUCT',
  /** Invalid combination of target type and selection. */
  ItemEntitlementsInvalidTargetTypeOrSelection = 'ITEM_ENTITLEMENTS_INVALID_TARGET_TYPE_OR_SELECTION',
  /** Invalid variant. */
  ItemEntitlementsInvalidVariant = 'ITEM_ENTITLEMENTS_INVALID_VARIANT',
  /** Entitlements are missing. */
  ItemEntitlementsMissing = 'ITEM_ENTITLEMENTS_MISSING',
  /** Invalid entitlement type. */
  ItemEntitlementInvalidType = 'ITEM_ENTITLEMENT_INVALID_TYPE',
  /** Can't add the same collection twice. */
  ItemPrerequisitesDuplicateCollection = 'ITEM_PREREQUISITES_DUPLICATE_COLLECTION',
  /** Can't add the same product twice. */
  ItemPrerequisitesDuplicateProduct = 'ITEM_PREREQUISITES_DUPLICATE_PRODUCT',
  /** Can't add the same variant twice. */
  ItemPrerequisitesDuplicateVariant = 'ITEM_PREREQUISITES_DUPLICATE_VARIANT',
  /** Can't exceed the maximum number of item prerequisites. */
  ItemPrerequisitesExceededMax = 'ITEM_PREREQUISITES_EXCEEDED_MAX',
  /** Invalid collection. */
  ItemPrerequisitesInvalidCollection = 'ITEM_PREREQUISITES_INVALID_COLLECTION',
  /** Invalid product. */
  ItemPrerequisitesInvalidProduct = 'ITEM_PREREQUISITES_INVALID_PRODUCT',
  /** Invalid type. */
  ItemPrerequisitesInvalidType = 'ITEM_PREREQUISITES_INVALID_TYPE',
  /** Invalid variant. */
  ItemPrerequisitesInvalidVariant = 'ITEM_PREREQUISITES_INVALID_VARIANT',
  /** Item prerequisites must have at least one item prerequisite if the prerequisite quantity ratio is defined. */
  ItemPrerequisitesMissing = 'ITEM_PREREQUISITES_MISSING',
  /** Item prerequisites must be empty if the prerequisite quantity ratio isn't defined. */
  ItemPrerequisitesMustBeEmpty = 'ITEM_PREREQUISITES_MUST_BE_EMPTY',
  /** The input value should be less than the maximum value allowed. */
  LessThan = 'LESS_THAN',
  /** The input value should be less than or equal to the maximum value allowed. */
  LessThanOrEqualTo = 'LESS_THAN_OR_EQUAL_TO',
  /** Missing a required argument. */
  MissingArgument = 'MISSING_ARGUMENT',
  /** The recurring cycle limit must be 1 when a discount doesn't apply on subscription items. */
  MultipleRecurringCycleLimitForNonSubscriptionItems = 'MULTIPLE_RECURRING_CYCLE_LIMIT_FOR_NON_SUBSCRIPTION_ITEMS',
  /** Only one of the minimum subtotal or minimum quantity condition can be defined. */
  PrerequisiteSubtotalAndQuantityRangeBothPresent = 'PREREQUISITE_SUBTOTAL_AND_QUANTITY_RANGE_BOTH_PRESENT',
  /** The allocation limit must be a non-zero positive number. */
  PriceRuleAllocationLimitIsZero = 'PRICE_RULE_ALLOCATION_LIMIT_IS_ZERO',
  /** The allocation limit can only be set on Buy x, get y (BXGY) discounts. */
  PriceRuleAllocationLimitOnNonBogo = 'PRICE_RULE_ALLOCATION_LIMIT_ON_NON_BOGO',
  /** The number of discount codes in the shop has reached its limit. */
  PriceRuleExceededMaxDiscountCode = 'PRICE_RULE_EXCEEDED_MAX_DISCOUNT_CODE',
  /** The percentage value must be between 0 and -100. */
  PriceRulePercentageValueOutsideRange = 'PRICE_RULE_PERCENTAGE_VALUE_OUTSIDE_RANGE',
  /** A duplicate country code exists. */
  ShippingEntitlementsDuplicateCountry = 'SHIPPING_ENTITLEMENTS_DUPLICATE_COUNTRY',
  /** Can't exceed the maximum number of entitlements. */
  ShippingEntitlementsExceededMax = 'SHIPPING_ENTITLEMENTS_EXCEEDED_MAX',
  /** The country is unknown. */
  ShippingEntitlementsInvalidCountry = 'SHIPPING_ENTITLEMENTS_INVALID_COUNTRY',
  /** Invalid target type or selection. */
  ShippingEntitlementsInvalidTargetTypeOrSelection = 'SHIPPING_ENTITLEMENTS_INVALID_TARGET_TYPE_OR_SELECTION',
  /** Missing entitlements. */
  ShippingEntitlementsMissing = 'SHIPPING_ENTITLEMENTS_MISSING',
  /** Unsupported destination type. */
  ShippingEntitlementsUnsupportedDestinationType = 'SHIPPING_ENTITLEMENTS_UNSUPPORTED_DESTINATION_TYPE',
  /** The number of discounts in the shop has reached its limit. */
  ShopExceededMaxPriceRules = 'SHOP_EXCEEDED_MAX_PRICE_RULES',
  /** The input value is already taken. */
  Taken = 'TAKEN',
  /** The input value is too long. */
  TooLong = 'TOO_LONG',
  /** Too many arguments provided. */
  TooManyArguments = 'TOO_MANY_ARGUMENTS',
  /** The input value is too short. */
  TooShort = 'TOO_SHORT',
  /** The variant is already entitled through a product. */
  VariantAlreadyEntitledThroughProduct = 'VARIANT_ALREADY_ENTITLED_THROUGH_PRODUCT'
}

/** The list of features that can be supported by a price rule. */
export enum Shopify_PriceRuleFeature {
  /** The price rule supports bulk discounts. */
  Bulk = 'BULK',
  /** The price rule supports Buy X, Get Y (BXGY) discounts. */
  BuyOneGetOne = 'BUY_ONE_GET_ONE',
  /** The price rule supports Buy X, Get Y (BXGY) discounts that specify a custom allocation limit. */
  BuyOneGetOneWithAllocationLimit = 'BUY_ONE_GET_ONE_WITH_ALLOCATION_LIMIT',
  /** The price rule supports discounts that require a quantity. */
  QuantityDiscounts = 'QUANTITY_DISCOUNTS',
  /** The price rule targets specific customers. */
  SpecificCustomers = 'SPECIFIC_CUSTOMERS'
}

/** The value of a fixed amount price rule. */
export type Shopify_PriceRuleFixedAmountValue = {
  __typename?: 'Shopify_PriceRuleFixedAmountValue';
  /** The monetary value of the price rule. */
  amount: Scalars['Shopify_Money']['output'];
};

/** The items to which this price rule applies. This may be multiple products, product variants, collections or combinations of the aforementioned. */
export type Shopify_PriceRuleItemEntitlements = {
  __typename?: 'Shopify_PriceRuleItemEntitlements';
  /** The collections to which the price rule applies. */
  collections: Shopify_CollectionConnection;
  /** The product variants to which the price rule applies. */
  productVariants: Shopify_ProductVariantConnection;
  /** The products to which the price rule applies. */
  products: Shopify_ProductConnection;
  /** Whether the price rule applies to all line items. */
  targetAllLineItems: Scalars['Boolean']['output'];
};


/** The items to which this price rule applies. This may be multiple products, product variants, collections or combinations of the aforementioned. */
export type Shopify_PriceRuleItemEntitlementsCollectionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** The items to which this price rule applies. This may be multiple products, product variants, collections or combinations of the aforementioned. */
export type Shopify_PriceRuleItemEntitlementsProductVariantsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** The items to which this price rule applies. This may be multiple products, product variants, collections or combinations of the aforementioned. */
export type Shopify_PriceRuleItemEntitlementsProductsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Single or multiple line item products, product variants or collections required for the price rule to be applicable, can also be provided in combination. */
export type Shopify_PriceRuleLineItemPrerequisites = {
  __typename?: 'Shopify_PriceRuleLineItemPrerequisites';
  /** The collections required for the price rule to be applicable. */
  collections: Shopify_CollectionConnection;
  /** The product variants required for the price rule to be applicable. */
  productVariants: Shopify_ProductVariantConnection;
  /** The products required for the price rule to be applicable. */
  products: Shopify_ProductConnection;
};


/** Single or multiple line item products, product variants or collections required for the price rule to be applicable, can also be provided in combination. */
export type Shopify_PriceRuleLineItemPrerequisitesCollectionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Single or multiple line item products, product variants or collections required for the price rule to be applicable, can also be provided in combination. */
export type Shopify_PriceRuleLineItemPrerequisitesProductVariantsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Single or multiple line item products, product variants or collections required for the price rule to be applicable, can also be provided in combination. */
export type Shopify_PriceRuleLineItemPrerequisitesProductsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** A money range within which the price rule is applicable. */
export type Shopify_PriceRuleMoneyRange = {
  __typename?: 'Shopify_PriceRuleMoneyRange';
  /** The lower bound of the money range. */
  greaterThan?: Maybe<Scalars['Shopify_Money']['output']>;
  /** The lower bound or equal of the money range. */
  greaterThanOrEqualTo?: Maybe<Scalars['Shopify_Money']['output']>;
  /** The upper bound of the money range. */
  lessThan?: Maybe<Scalars['Shopify_Money']['output']>;
  /** The upper bound or equal of the money range. */
  lessThanOrEqualTo?: Maybe<Scalars['Shopify_Money']['output']>;
};

/** The value of a percent price rule. */
export type Shopify_PriceRulePercentValue = {
  __typename?: 'Shopify_PriceRulePercentValue';
  /** The percent value of the price rule. */
  percentage: Scalars['Float']['output'];
};

/** Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items. */
export type Shopify_PriceRulePrerequisiteToEntitlementQuantityRatio = {
  __typename?: 'Shopify_PriceRulePrerequisiteToEntitlementQuantityRatio';
  /** The quantity of entitled items in the ratio. */
  entitlementQuantity: Scalars['Int']['output'];
  /** The quantity of prerequisite items in the ratio. */
  prerequisiteQuantity: Scalars['Int']['output'];
};

/** A quantity range within which the price rule is applicable. */
export type Shopify_PriceRuleQuantityRange = {
  __typename?: 'Shopify_PriceRuleQuantityRange';
  /** The lower bound of the quantity range. */
  greaterThan?: Maybe<Scalars['Int']['output']>;
  /** The lower bound or equal of the quantity range. */
  greaterThanOrEqualTo?: Maybe<Scalars['Int']['output']>;
  /** The upper bound of the quantity range. */
  lessThan?: Maybe<Scalars['Int']['output']>;
  /** The upper bound or equal of the quantity range. */
  lessThanOrEqualTo?: Maybe<Scalars['Int']['output']>;
};

/** Shareable URL for the discount code associated with the price rule. */
export type Shopify_PriceRuleShareableUrl = {
  __typename?: 'Shopify_PriceRuleShareableUrl';
  /** The image URL of the item (product or collection) to which the discount applies. */
  targetItemImage?: Maybe<Shopify_Image>;
  /** The type of page that's associated with the URL. */
  targetType: Shopify_PriceRuleShareableUrlTargetType;
  /** The title of the page that's associated with the URL. */
  title: Scalars['String']['output'];
  /** The URL for the discount code. */
  url: Scalars['Shopify_URL']['output'];
};

/** The type of page where a shareable price rule URL lands. */
export enum Shopify_PriceRuleShareableUrlTargetType {
  /** The URL lands on a collection page. */
  Collection = 'COLLECTION',
  /** The URL lands on a home page. */
  Home = 'HOME',
  /** The URL lands on a product page. */
  Product = 'PRODUCT'
}

/** The shipping lines to which the price rule applies to. */
export type Shopify_PriceRuleShippingLineEntitlements = {
  __typename?: 'Shopify_PriceRuleShippingLineEntitlements';
  /** The codes for the countries to which the price rule applies to. */
  countryCodes: Array<Shopify_CountryCode>;
  /** Whether the price rule is applicable to countries that haven't been defined in the shop's shipping zones. */
  includeRestOfWorld: Scalars['Boolean']['output'];
  /** Whether the price rule applies to all shipping lines. */
  targetAllShippingLines: Scalars['Boolean']['output'];
};

/** The set of valid sort keys for the PriceRule query. */
export enum Shopify_PriceRuleSortKeys {
  /** Sort by the `created_at` value. */
  CreatedAt = 'CREATED_AT',
  /** Sort by the `ends_at` value. */
  EndsAt = 'ENDS_AT',
  /** Sort by the `id` value. */
  Id = 'ID',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE',
  /** Sort by the `starts_at` value. */
  StartsAt = 'STARTS_AT',
  /** Sort by the `title` value. */
  Title = 'TITLE',
  /** Sort by the `updated_at` value. */
  UpdatedAt = 'UPDATED_AT'
}

/** The status of the price rule. */
export enum Shopify_PriceRuleStatus {
  /** The price rule is active. */
  Active = 'ACTIVE',
  /** The price rule is expired. */
  Expired = 'EXPIRED',
  /** The price rule is scheduled. */
  Scheduled = 'SCHEDULED'
}

/** The type of lines (line_item or shipping_line) to which the price rule applies. */
export enum Shopify_PriceRuleTarget {
  /** The price rule applies to line items. */
  LineItem = 'LINE_ITEM',
  /** The price rule applies to shipping lines. */
  ShippingLine = 'SHIPPING_LINE'
}

/** The list of features that can be supported by a price rule. */
export enum Shopify_PriceRuleTrait {
  /** The price rule supports bulk discounts. */
  Bulk = 'BULK',
  /** The price rule supports Buy X, Get Y (BXGY) discounts. */
  BuyOneGetOne = 'BUY_ONE_GET_ONE',
  /** The price rule supports Buy X, Get Y (BXGY) discounts that specify a custom allocation limit. */
  BuyOneGetOneWithAllocationLimit = 'BUY_ONE_GET_ONE_WITH_ALLOCATION_LIMIT',
  /** The price rule supports discounts that require a quantity. */
  QuantityDiscounts = 'QUANTITY_DISCOUNTS',
  /** The price rule targets specific customers. */
  SpecificCustomers = 'SPECIFIC_CUSTOMERS'
}

/** Represents an error that happens during execution of a price rule mutation. */
export type Shopify_PriceRuleUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_PriceRuleUserError';
  /** Error code to uniquely identify the error. */
  code?: Maybe<Shopify_PriceRuleErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** A time period during which a price rule is applicable. */
export type Shopify_PriceRuleValidityPeriod = {
  __typename?: 'Shopify_PriceRuleValidityPeriod';
  /** The time after which the price rule becomes invalid. */
  end?: Maybe<Scalars['DateTime']['output']>;
  /** The time after which the price rule is valid. */
  start: Scalars['DateTime']['output'];
};

/** The type of the price rule value. The price rule value might be a percentage value, or a fixed amount. */
export type Shopify_PriceRuleValue = Shopify_PriceRuleFixedAmountValue | Shopify_PriceRulePercentValue;

/**
 * One type of value given to a customer when a discount is applied to an order.
 * The application of a discount with this value gives the customer the specified percentage off a specified item.
 */
export type Shopify_PricingPercentageValue = {
  __typename?: 'Shopify_PricingPercentageValue';
  /** The percentage value of the object. This is a number between -100 (free) and 0 (no discount). */
  percentage: Scalars['Float']['output'];
};

/** The type of value given to a customer when a discount is applied to an order. For example, the application of the discount might give the customer a percentage off a specified item. Alternatively, the application of the discount might give the customer a monetary value in a given currency off an order. */
export type Shopify_PricingValue = Shopify_MoneyV2 | Shopify_PricingPercentageValue;

/**
 * Private metafields represent custom metadata that is attached to a resource.
 * Private metafields are accessible only by the application that created them and only from the GraphQL Admin API.
 *
 * An application can create a maximum of 10 private metafields per shop resource.
 */
export type Shopify_PrivateMetafield = Shopify_Node & {
  __typename?: 'Shopify_PrivateMetafield';
  /** The date and time when the private metafield was created. */
  createdAt: Scalars['DateTime']['output'];
  /** The ID of the private metafield. */
  id: Scalars['ID']['output'];
  /** The key name of the private metafield. */
  key: Scalars['String']['output'];
  /** The namespace of the private metafield. */
  namespace: Scalars['String']['output'];
  /** The date and time when the private metafield was updated. */
  updatedAt: Scalars['DateTime']['output'];
  /** The value of a private metafield. */
  value: Scalars['String']['output'];
  /** Represents the private metafield value type. */
  valueType: Shopify_PrivateMetafieldValueType;
};

/** An auto-generated type for paginating through multiple PrivateMetafields. */
export type Shopify_PrivateMetafieldConnection = {
  __typename?: 'Shopify_PrivateMetafieldConnection';
  /** A list of edges. */
  edges: Array<Shopify_PrivateMetafieldEdge>;
  /** A list of the nodes contained in PrivateMetafieldEdge. */
  nodes: Array<Shopify_PrivateMetafield>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one PrivateMetafield and a cursor during pagination. */
export type Shopify_PrivateMetafieldEdge = {
  __typename?: 'Shopify_PrivateMetafieldEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of PrivateMetafieldEdge. */
  node: Shopify_PrivateMetafield;
};

/** Supported private metafield value types. */
export enum Shopify_PrivateMetafieldValueType {
  /** An integer metafield. */
  Integer = 'INTEGER',
  /** A JSON string metafield. */
  JsonString = 'JSON_STRING',
  /** A string metafield. */
  String = 'STRING'
}

/** The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection). */
export type Shopify_Product = Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_HasPublishedTranslations & Shopify_LegacyInteroperability & Shopify_Navigable & Shopify_Node & Shopify_OnlineStorePreviewable & Shopify_Publishable & {
  __typename?: 'Shopify_Product';
  /** The number of publications a resource is published to without feedback errors. */
  availablePublicationsCount?: Maybe<Shopify_Count>;
  /**
   * The description of the product, complete with HTML formatting.
   * @deprecated Use `descriptionHtml` instead.
   */
  bodyHtml?: Maybe<Scalars['String']['output']>;
  /** The taxonomy category specified by the merchant. */
  category?: Maybe<Shopify_TaxonomyCategory>;
  /** A list of the collections that include the product. */
  collections: Shopify_CollectionConnection;
  /** The compare-at price range of the product in the default shop currency. */
  compareAtPriceRange?: Maybe<Shopify_ProductCompareAtPriceRange>;
  /** The pricing that applies for a customer in a given context. */
  contextualPricing: Shopify_ProductContextualPricing;
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the product was created. */
  createdAt: Scalars['DateTime']['output'];
  /**
   * The custom product type specified by the merchant.
   * @deprecated Deprecated in API version 2022-10. Use `productType` instead.
   */
  customProductType?: Maybe<Scalars['String']['output']>;
  /** A default cursor that returns the single next record, sorted ascending by ID. */
  defaultCursor: Scalars['String']['output'];
  /** A stripped description of the product, single line with HTML tags removed. */
  description: Scalars['String']['output'];
  /** The description of the product, complete with HTML formatting. */
  descriptionHtml: Scalars['Shopify_HTML']['output'];
  /**
   * Stripped description of the product, single line with HTML tags removed.
   * Truncated to 60 characters.
   * @deprecated Use `description` instead.
   */
  descriptionPlainSummary: Scalars['String']['output'];
  /** The featured image for the product. */
  featuredImage?: Maybe<Shopify_Image>;
  /** The featured media for the product. */
  featuredMedia?: Maybe<Shopify_Media>;
  /** Information about the product that's provided through resource feedback. */
  feedback?: Maybe<Shopify_ResourceFeedback>;
  /** The theme template used when viewing the gift card in a store. */
  giftCardTemplateSuffix?: Maybe<Scalars['String']['output']>;
  /** A unique human-friendly string of the product's title. */
  handle: Scalars['String']['output'];
  /** Whether the product has only a single variant with the default option and value. */
  hasOnlyDefaultVariant: Scalars['Boolean']['output'];
  /** Whether the product has out of stock variants. */
  hasOutOfStockVariants: Scalars['Boolean']['output'];
  /** Determines if at least one of the product variant requires components. The default value is `false`. */
  hasVariantsThatRequiresComponents: Scalars['Boolean']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The images associated with the product. */
  images: Shopify_ImageConnection;
  /** Whether the product is in a given collection. */
  inCollection: Scalars['Boolean']['output'];
  /** Whether the product is a gift card. */
  isGiftCard: Scalars['Boolean']['output'];
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['Shopify_UnsignedInt64']['output'];
  /** The media associated with the product. This can include images, 3D models, or videos. */
  media: Shopify_MediaConnection;
  /** Total count of media belonging to a product. */
  mediaCount?: Maybe<Shopify_Count>;
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafield definitions. */
  metafieldDefinitions: Shopify_MetafieldDefinitionConnection;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /** The online store preview URL. */
  onlineStorePreviewUrl?: Maybe<Scalars['Shopify_URL']['output']>;
  /**
   * The online store URL for the product.
   * A value of `null` indicates that the product isn't published to the Online Store sales channel.
   */
  onlineStoreUrl?: Maybe<Scalars['Shopify_URL']['output']>;
  /** A list of product options. The limit is specified by Shop.resourceLimits.maxProductOptions. */
  options: Array<Shopify_ProductOption>;
  /**
   * The price range of the product.
   * @deprecated Deprecated in API version 2020-10. Use `priceRangeV2` instead.
   */
  priceRange: Shopify_ProductPriceRange;
  /** The price range of the product with prices formatted as decimals. */
  priceRangeV2: Shopify_ProductPriceRangeV2;
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafields: Shopify_PrivateMetafieldConnection;
  /**
   * The product category specified by the merchant.
   * @deprecated Deprecated in API version 2024-04. Use `category` instead.
   */
  productCategory?: Maybe<Shopify_ProductCategory>;
  /**
   * A list of the channels where the product is published.
   * @deprecated Use `resourcePublications` instead.
   */
  productPublications: Shopify_ProductPublicationConnection;
  /** The product type specified by the merchant. */
  productType: Scalars['String']['output'];
  /**
   * The number of publications a resource is published on.
   * @deprecated Use `resourcePublicationsCount` instead.
   */
  publicationCount: Scalars['Int']['output'];
  /**
   * A list of the channels where the product is published.
   * @deprecated Use `resourcePublications` instead.
   */
  publications: Shopify_ProductPublicationConnection;
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the product was published to the Online Store. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** Whether or not the product is published for a customer in the given context. */
  publishedInContext: Scalars['Boolean']['output'];
  /**
   * Check to see whether the resource is published to a given channel.
   * @deprecated Use `publishedOnPublication` instead.
   */
  publishedOnChannel: Scalars['Boolean']['output'];
  /**
   * Check to see whether the resource is published to the calling app's channel.
   * @deprecated Use `publishedOnCurrentPublication` instead.
   */
  publishedOnCurrentChannel: Scalars['Boolean']['output'];
  /** Check to see whether the resource is published to the calling app's publication. */
  publishedOnCurrentPublication: Scalars['Boolean']['output'];
  /** Check to see whether the resource is published to a given publication. */
  publishedOnPublication: Scalars['Boolean']['output'];
  /** Whether the product can only be purchased with a selling plan (subscription). Products that are sold on subscription (`requiresSellingPlan: true`) can be updated only for online stores. If you update a product to be subscription only, then the product is unpublished from all channels except the online store. */
  requiresSellingPlan: Scalars['Boolean']['output'];
  /** The resource that's either published or staged to be published to the calling app's publication. Requires the `read_product_listings` scope. */
  resourcePublicationOnCurrentPublication?: Maybe<Shopify_ResourcePublicationV2>;
  /** The list of resources that are published to a publication. */
  resourcePublications: Shopify_ResourcePublicationConnection;
  /** The number of publications a resource is published on. */
  resourcePublicationsCount?: Maybe<Shopify_Count>;
  /** The list of resources that are either published or staged to be published to a publication. */
  resourcePublicationsV2: Shopify_ResourcePublicationV2Connection;
  /**
   * Count of selling plan groups associated with the product.
   * @deprecated Use `sellingPlanGroupsCount` instead.
   */
  sellingPlanGroupCount: Scalars['Int']['output'];
  /** A list of all selling plan groups defined in the current shop associated with the product either directly or through any of its variants. */
  sellingPlanGroups: Shopify_SellingPlanGroupConnection;
  /** Count of selling plan groups associated with the product. */
  sellingPlanGroupsCount?: Maybe<Shopify_Count>;
  /** SEO information of the product. */
  seo: Shopify_Seo;
  /**
   * The standardized product type in the Shopify product taxonomy.
   * @deprecated Deprecated in API version 2022-10. Use `productCategory` instead.
   */
  standardizedProductType?: Maybe<Shopify_StandardizedProductType>;
  /** The product status. This controls visibility across all channels. */
  status: Shopify_ProductStatus;
  /**
   * The Storefront GraphQL API ID of the `Product`.
   *
   * As of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.
   * @deprecated Use `id` instead.
   */
  storefrontId: Scalars['Shopify_StorefrontID']['output'];
  /**
   * A comma separated list of tags associated with the product. Updating `tags` overwrites
   * any existing tags that were previously added to the product. To add new tags without overwriting
   * existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
   * mutation.
   */
  tags: Array<Scalars['String']['output']>;
  /** The theme template used when viewing the product in a store. */
  templateSuffix?: Maybe<Scalars['String']['output']>;
  /** The title of the product. */
  title: Scalars['String']['output'];
  /** The quantity of inventory in stock. */
  totalInventory: Scalars['Int']['output'];
  /**
   * The number of variants that are associated with the product.
   * @deprecated Use `variantsCount` instead.
   */
  totalVariants: Scalars['Int']['output'];
  /** Whether inventory tracking has been enabled for the product. */
  tracksInventory: Scalars['Boolean']['output'];
  /** The translations associated with the resource. */
  translations: Array<Shopify_Translation>;
  /**
   * The list of channels that the resource is not published to.
   * @deprecated Use `unpublishedPublications` instead.
   */
  unpublishedChannels: Shopify_ChannelConnection;
  /** The list of publications that the resource is not published to. */
  unpublishedPublications: Shopify_PublicationConnection;
  /**
   * The date and time when the product was last modified.
   * A product's `updatedAt` value can change for different reasons. For example, if an order
   * is placed for a product that has inventory tracking set up, then the inventory adjustment
   * is counted as an update.
   */
  updatedAt: Scalars['DateTime']['output'];
  /** A list of variants associated with the product. */
  variants: Shopify_ProductVariantConnection;
  /** The number of variants that are associated with the product. */
  variantsCount?: Maybe<Shopify_Count>;
  /** The name of the product's vendor. */
  vendor: Scalars['String']['output'];
};


/** The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection). */
export type Shopify_ProductCollectionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_CollectionSortKeys>;
};


/** The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection). */
export type Shopify_ProductContextualPricingArgs = {
  context: Shopify_ContextualPricingContext;
};


/** The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection). */
export type Shopify_ProductDescriptionArgs = {
  truncateAt?: InputMaybe<Scalars['Int']['input']>;
};


/** The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection). */
export type Shopify_ProductImagesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_ProductImageSortKeys>;
};


/** The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection). */
export type Shopify_ProductInCollectionArgs = {
  id: Scalars['ID']['input'];
};


/** The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection). */
export type Shopify_ProductMediaArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_ProductMediaSortKeys>;
};


/** The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection). */
export type Shopify_ProductMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace?: InputMaybe<Scalars['String']['input']>;
};


/** The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection). */
export type Shopify_ProductMetafieldDefinitionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  pinnedStatus?: InputMaybe<Shopify_MetafieldDefinitionPinnedStatus>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_MetafieldDefinitionSortKeys>;
};


/** The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection). */
export type Shopify_ProductMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection). */
export type Shopify_ProductOptionsArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
};


/** The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection). */
export type Shopify_ProductPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace: Scalars['String']['input'];
};


/** The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection). */
export type Shopify_ProductPrivateMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection). */
export type Shopify_ProductProductPublicationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection). */
export type Shopify_ProductPublicationCountArgs = {
  onlyPublished?: InputMaybe<Scalars['Boolean']['input']>;
};


/** The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection). */
export type Shopify_ProductPublicationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  onlyPublished?: InputMaybe<Scalars['Boolean']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection). */
export type Shopify_ProductPublishedInContextArgs = {
  context: Shopify_ContextualPublicationContext;
};


/** The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection). */
export type Shopify_ProductPublishedOnChannelArgs = {
  channelId: Scalars['ID']['input'];
};


/** The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection). */
export type Shopify_ProductPublishedOnPublicationArgs = {
  publicationId: Scalars['ID']['input'];
};


/** The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection). */
export type Shopify_ProductResourcePublicationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  onlyPublished?: InputMaybe<Scalars['Boolean']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection). */
export type Shopify_ProductResourcePublicationsCountArgs = {
  onlyPublished?: InputMaybe<Scalars['Boolean']['input']>;
};


/** The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection). */
export type Shopify_ProductResourcePublicationsV2Args = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  catalogType?: InputMaybe<Shopify_CatalogType>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  onlyPublished?: InputMaybe<Scalars['Boolean']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection). */
export type Shopify_ProductSellingPlanGroupsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection). */
export type Shopify_ProductTranslationsArgs = {
  locale: Scalars['String']['input'];
  marketId?: InputMaybe<Scalars['ID']['input']>;
};


/** The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection). */
export type Shopify_ProductUnpublishedChannelsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection). */
export type Shopify_ProductUnpublishedPublicationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection). */
export type Shopify_ProductVariantsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_ProductVariantSortKeys>;
};

/** The details of a specific product category within the [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt). */
export type Shopify_ProductCategory = {
  __typename?: 'Shopify_ProductCategory';
  /** The product taxonomy node associated with the product category. */
  productTaxonomyNode?: Maybe<Shopify_ProductTaxonomyNode>;
};

/** An error that occurs during the execution of `ProductChangeStatus`. */
export type Shopify_ProductChangeStatusUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_ProductChangeStatusUserError';
  /** The error code. */
  code?: Maybe<Shopify_ProductChangeStatusUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `ProductChangeStatusUserError`. */
export enum Shopify_ProductChangeStatusUserErrorCode {
  /** Product could not be found. */
  ProductNotFound = 'PRODUCT_NOT_FOUND'
}

/** The set of valid sort keys for the ProductCollection query. */
export enum Shopify_ProductCollectionSortKeys {
  /** Sort by the `best-selling` value. */
  BestSelling = 'BEST_SELLING',
  /** Sort by the `collection-default` value. */
  CollectionDefault = 'COLLECTION_DEFAULT',
  /** Sort by the `created` value. */
  Created = 'CREATED',
  /** Sort by the `id` value. */
  Id = 'ID',
  /** Sort by the `manual` value. */
  Manual = 'MANUAL',
  /** Sort by the `price` value. */
  Price = 'PRICE',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE',
  /** Sort by the `title` value. */
  Title = 'TITLE'
}

/** The compare-at price range of the product. */
export type Shopify_ProductCompareAtPriceRange = {
  __typename?: 'Shopify_ProductCompareAtPriceRange';
  /** The highest variant's compare-at price. */
  maxVariantCompareAtPrice: Shopify_MoneyV2;
  /** The lowest variant's compare-at price. */
  minVariantCompareAtPrice: Shopify_MoneyV2;
};

/** An auto-generated type for paginating through multiple Products. */
export type Shopify_ProductConnection = {
  __typename?: 'Shopify_ProductConnection';
  /** A list of edges. */
  edges: Array<Shopify_ProductEdge>;
  /** A list of the nodes contained in ProductEdge. */
  nodes: Array<Shopify_Product>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/**
 * The price of a product in a specific country.
 * Prices vary between countries.
 */
export type Shopify_ProductContextualPricing = {
  __typename?: 'Shopify_ProductContextualPricing';
  /** The number of fixed quantity rules for the product's variants on the price list. */
  fixedQuantityRulesCount: Scalars['Int']['output'];
  /** The pricing of the variant with the highest price in the given context. */
  maxVariantPricing?: Maybe<Shopify_ProductVariantContextualPricing>;
  /** The pricing of the variant with the lowest price in the given context. */
  minVariantPricing?: Maybe<Shopify_ProductVariantContextualPricing>;
  /** The price range of the product with prices formatted as decimals. */
  priceRange: Shopify_ProductPriceRangeV2;
};

/** An error that occurred while setting the activation status of an inventory item. */
export type Shopify_ProductDeleteUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_ProductDeleteUserError';
  /** The error code. */
  code?: Maybe<Shopify_ProductDeleteUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `ProductDeleteUserError`. */
export enum Shopify_ProductDeleteUserErrorCode {
  /** Something went wrong, please try again. */
  GenericError = 'GENERIC_ERROR',
  /** Product does not exist. */
  ProductDoesNotExist = 'PRODUCT_DOES_NOT_EXIST'
}

/** An error that occurred while duplicating the product. */
export type Shopify_ProductDuplicateUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_ProductDuplicateUserError';
  /** The error code. */
  code?: Maybe<Shopify_ProductDuplicateUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `ProductDuplicateUserError`. */
export enum Shopify_ProductDuplicateUserErrorCode {
  /** Cannot duplicate a bundle product. */
  BundlesError = 'BUNDLES_ERROR',
  /** The title cannot be empty. */
  EmptyTitle = 'EMPTY_TITLE',
  /** Cannot duplicate a product which has no variants. */
  EmptyVariant = 'EMPTY_VARIANT',
  /** Something went wrong when saving the product, please try again. */
  FailedToSave = 'FAILED_TO_SAVE',
  /** Something went wrong, please try again. */
  GenericError = 'GENERIC_ERROR',
  /** The product does not exist. */
  ProductDoesNotExist = 'PRODUCT_DOES_NOT_EXIST'
}

/** An auto-generated type which holds one Product and a cursor during pagination. */
export type Shopify_ProductEdge = {
  __typename?: 'Shopify_ProductEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of ProductEdge. */
  node: Shopify_Product;
};

/** A product feed. */
export type Shopify_ProductFeed = Shopify_Node & {
  __typename?: 'Shopify_ProductFeed';
  /** The country of the product feed. */
  country?: Maybe<Shopify_CountryCode>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The language of the product feed. */
  language?: Maybe<Shopify_LanguageCode>;
  /** The status of the product feed. */
  status: Shopify_ProductFeedStatus;
};

/** An error that occurs during the execution of `ProductFeedCreate`. */
export type Shopify_ProductFeedCreateUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_ProductFeedCreateUserError';
  /** The error code. */
  code?: Maybe<Shopify_ProductFeedCreateUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `ProductFeedCreateUserError`. */
export enum Shopify_ProductFeedCreateUserErrorCode {
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** The input value is already taken. */
  Taken = 'TAKEN'
}

/** An error that occurs during the execution of `ProductFeedDelete`. */
export type Shopify_ProductFeedDeleteUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_ProductFeedDeleteUserError';
  /** The error code. */
  code?: Maybe<Shopify_ProductFeedDeleteUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `ProductFeedDeleteUserError`. */
export enum Shopify_ProductFeedDeleteUserErrorCode {
  /** The input value is invalid. */
  Invalid = 'INVALID'
}

/** The valid values for the status of product feed. */
export enum Shopify_ProductFeedStatus {
  /** The product feed is active. */
  Active = 'ACTIVE',
  /** The product feed is inactive. */
  Inactive = 'INACTIVE'
}

/** An error that occurs during the execution of `ProductFullSync`. */
export type Shopify_ProductFullSyncUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_ProductFullSyncUserError';
  /** The error code. */
  code?: Maybe<Shopify_ProductFullSyncUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `ProductFullSyncUserError`. */
export enum Shopify_ProductFullSyncUserErrorCode {
  /** The input value is invalid. */
  Invalid = 'INVALID'
}

/** The set of valid sort keys for the ProductImage query. */
export enum Shopify_ProductImageSortKeys {
  /** Sort by the `created_at` value. */
  CreatedAt = 'CREATED_AT',
  /** Sort by the `id` value. */
  Id = 'ID',
  /** Sort by the `position` value. */
  Position = 'POSITION',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE'
}

/** The set of valid sort keys for the ProductMedia query. */
export enum Shopify_ProductMediaSortKeys {
  /** Sort by the `id` value. */
  Id = 'ID',
  /** Sort by the `position` value. */
  Position = 'POSITION',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE'
}

/** An entity that represents details of an asynchronous operation on a product. */
export type Shopify_ProductOperation = {
  /** The product that's created or updated during this operation. */
  product?: Maybe<Shopify_Product>;
  /** The status of this operation. */
  status: Shopify_ProductOperationStatus;
};

/** Represents the state of this product operation. */
export enum Shopify_ProductOperationStatus {
  /** Operation is currently running. */
  Active = 'ACTIVE',
  /** Operation is complete. */
  Complete = 'COMPLETE',
  /** Operation has been created. */
  Created = 'CREATED'
}

/**
 * The product property names. For example, "Size", "Color", and "Material".
 * Variants are selected based on permutations of these options.
 * The limit for each product property name is 255 characters.
 */
export type Shopify_ProductOption = Shopify_HasPublishedTranslations & Shopify_Node & {
  __typename?: 'Shopify_ProductOption';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The metafield identifier linked to this option. */
  linkedMetafield?: Maybe<Shopify_LinkedMetafield>;
  /** The product option’s name. */
  name: Scalars['String']['output'];
  /** Similar to values, option_values returns all the corresponding option value objects to the product option, including values not assigned to any variants. */
  optionValues: Array<Shopify_ProductOptionValue>;
  /** The product option's position. */
  position: Scalars['Int']['output'];
  /** The translations associated with the resource. */
  translations: Array<Shopify_Translation>;
  /** The corresponding value to the product option name. */
  values: Array<Scalars['String']['output']>;
};


/**
 * The product property names. For example, "Size", "Color", and "Material".
 * Variants are selected based on permutations of these options.
 * The limit for each product property name is 255 characters.
 */
export type Shopify_ProductOptionTranslationsArgs = {
  locale: Scalars['String']['input'];
  marketId?: InputMaybe<Scalars['ID']['input']>;
};

/** Error codes for failed `ProductOptionUpdate` mutation. */
export type Shopify_ProductOptionUpdateUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_ProductOptionUpdateUserError';
  /** The error code. */
  code?: Maybe<Shopify_ProductOptionUpdateUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `ProductOptionUpdateUserError`. */
export enum Shopify_ProductOptionUpdateUserErrorCode {
  /** An option cannot have both metafield linked and nonlinked option values. */
  CannotCombineLinkedAndNonlinkedOptionValues = 'CANNOT_COMBINE_LINKED_AND_NONLINKED_OPTION_VALUES',
  /** The number of variants will be above the limit after this operation. */
  CannotCreateVariantsAboveLimit = 'CANNOT_CREATE_VARIANTS_ABOVE_LIMIT',
  /** Deleting all option values of an option is not allowed. */
  CannotDeleteAllOptionValuesInOption = 'CANNOT_DELETE_ALL_OPTION_VALUES_IN_OPTION',
  /** An option cannot be left only with option values that are not linked to any variant. */
  CannotLeaveOptionsWithoutVariants = 'CANNOT_LEAVE_OPTIONS_WITHOUT_VARIANTS',
  /** At least one of the product variants has invalid SKUs. */
  CannotMakeChangesIfVariantIsMissingRequiredSku = 'CANNOT_MAKE_CHANGES_IF_VARIANT_IS_MISSING_REQUIRED_SKU',
  /** Duplicated option value. */
  DuplicatedOptionValue = 'DUPLICATED_OPTION_VALUE',
  /** Cannot link multiple options to the same metafield. */
  DuplicateLinkedOption = 'DUPLICATE_LINKED_OPTION',
  /** Invalid metafield value for linked option. */
  InvalidMetafieldValueForLinkedOption = 'INVALID_METAFIELD_VALUE_FOR_LINKED_OPTION',
  /** The option name provided is not valid. */
  InvalidName = 'INVALID_NAME',
  /** The option position provided is not valid. */
  InvalidPosition = 'INVALID_POSITION',
  /** A key is missing in the input. */
  KeyMissingInInput = 'KEY_MISSING_IN_INPUT',
  /** Linked options are currently not supported for this shop. */
  LinkedOptionsNotSupportedForShop = 'LINKED_OPTIONS_NOT_SUPPORTED_FOR_SHOP',
  /** Updating the linked_metafield of an option requires a linked_metafield_value for each option value. */
  LinkedOptionUpdateMissingValues = 'LINKED_OPTION_UPDATE_MISSING_VALUES',
  /** On create, this key cannot be used. */
  NoKeyOnCreate = 'NO_KEY_ON_CREATE',
  /** Option already exists. */
  OptionAlreadyExists = 'OPTION_ALREADY_EXISTS',
  /** Option does not exist. */
  OptionDoesNotExist = 'OPTION_DOES_NOT_EXIST',
  /** An option linked to the provided metafield already exists. */
  OptionLinkedMetafieldAlreadyTaken = 'OPTION_LINKED_METAFIELD_ALREADY_TAKEN',
  /** Option name is too long. */
  OptionNameTooLong = 'OPTION_NAME_TOO_LONG',
  /** Option values count is over the allowed limit. */
  OptionValuesOverLimit = 'OPTION_VALUES_OVER_LIMIT',
  /** Option value already exists. */
  OptionValueAlreadyExists = 'OPTION_VALUE_ALREADY_EXISTS',
  /** Performing conflicting actions on an option value. */
  OptionValueConflictingOperation = 'OPTION_VALUE_CONFLICTING_OPERATION',
  /** Option value does not exist. */
  OptionValueDoesNotExist = 'OPTION_VALUE_DOES_NOT_EXIST',
  /** Option value with variants linked cannot be deleted. */
  OptionValueHasVariants = 'OPTION_VALUE_HAS_VARIANTS',
  /** Option value name is too long. */
  OptionValueNameTooLong = 'OPTION_VALUE_NAME_TOO_LONG',
  /** Product does not exist. */
  ProductDoesNotExist = 'PRODUCT_DOES_NOT_EXIST',
  /** Product is suspended. */
  ProductSuspended = 'PRODUCT_SUSPENDED'
}

/** The product option value names. For example, "Red", "Blue", and "Green" for a "Color" option. */
export type Shopify_ProductOptionValue = Shopify_HasPublishedTranslations & Shopify_Node & {
  __typename?: 'Shopify_ProductOptionValue';
  /** Whether the product option value has any linked variants. */
  hasVariants: Scalars['Boolean']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The value of the linked metafield. */
  linkedMetafieldValue?: Maybe<Scalars['String']['output']>;
  /** The name of the product option value. */
  name: Scalars['String']['output'];
  /** The swatch associated with the product option value. */
  swatch?: Maybe<Shopify_ProductOptionValueSwatch>;
  /** The translations associated with the resource. */
  translations: Array<Shopify_Translation>;
};


/** The product option value names. For example, "Red", "Blue", and "Green" for a "Color" option. */
export type Shopify_ProductOptionValueTranslationsArgs = {
  locale: Scalars['String']['input'];
  marketId?: InputMaybe<Scalars['ID']['input']>;
};

/** A swatch associated with a product option value. */
export type Shopify_ProductOptionValueSwatch = {
  __typename?: 'Shopify_ProductOptionValueSwatch';
  /** The color representation of the swatch. */
  color?: Maybe<Scalars['Shopify_Color']['output']>;
  /** An image representation of the swatch. */
  image?: Maybe<Shopify_MediaImage>;
};

/** Error codes for failed `ProductOptionsCreate` mutation. */
export type Shopify_ProductOptionsCreateUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_ProductOptionsCreateUserError';
  /** The error code. */
  code?: Maybe<Shopify_ProductOptionsCreateUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `ProductOptionsCreateUserError`. */
export enum Shopify_ProductOptionsCreateUserErrorCode {
  /** Cannot combine linked metafield and option values. */
  CannotCombineLinkedMetafieldAndOptionValues = 'CANNOT_COMBINE_LINKED_METAFIELD_AND_OPTION_VALUES',
  /** At least one of the product variants has invalid SKUs. */
  CannotMakeChangesIfVariantIsMissingRequiredSku = 'CANNOT_MAKE_CHANGES_IF_VARIANT_IS_MISSING_REQUIRED_SKU',
  /** Duplicated option name. */
  DuplicatedOptionName = 'DUPLICATED_OPTION_NAME',
  /** Duplicated option value. */
  DuplicatedOptionValue = 'DUPLICATED_OPTION_VALUE',
  /** Cannot link multiple options to the same metafield. */
  DuplicateLinkedOption = 'DUPLICATE_LINKED_OPTION',
  /** Invalid metafield value for linked option. */
  InvalidMetafieldValueForLinkedOption = 'INVALID_METAFIELD_VALUE_FOR_LINKED_OPTION',
  /** No valid metafield definition found for linked option. */
  LinkedMetafieldDefinitionNotFound = 'LINKED_METAFIELD_DEFINITION_NOT_FOUND',
  /** Linked options are currently not supported for this shop. */
  LinkedOptionsNotSupportedForShop = 'LINKED_OPTIONS_NOT_SUPPORTED_FOR_SHOP',
  /** Missing metafield values for linked option. */
  MissingMetafieldValuesForLinkedOption = 'MISSING_METAFIELD_VALUES_FOR_LINKED_OPTION',
  /** Cannot create new options without values for all existing variants. */
  NewOptionWithoutValueForExistingVariants = 'NEW_OPTION_WITHOUT_VALUE_FOR_EXISTING_VARIANTS',
  /** Options count is over the allowed limit. */
  OptionsOverLimit = 'OPTIONS_OVER_LIMIT',
  /** Option already exists. */
  OptionAlreadyExists = 'OPTION_ALREADY_EXISTS',
  /** An option linked to the provided metafield already exists. */
  OptionLinkedMetafieldAlreadyTaken = 'OPTION_LINKED_METAFIELD_ALREADY_TAKEN',
  /** Each option must have a name specified. */
  OptionNameMissing = 'OPTION_NAME_MISSING',
  /** If specified, position field must be present in all option inputs. */
  OptionPositionMissing = 'OPTION_POSITION_MISSING',
  /** Each option must have at least one option value specified. */
  OptionValuesMissing = 'OPTION_VALUES_MISSING',
  /** Option values count is over the allowed limit. */
  OptionValuesOverLimit = 'OPTION_VALUES_OVER_LIMIT',
  /** Position must be between 1 and the maximum number of options per product. */
  PositionOutOfBounds = 'POSITION_OUT_OF_BOUNDS',
  /** Product does not exist. */
  ProductDoesNotExist = 'PRODUCT_DOES_NOT_EXIST',
  /** Product is suspended. */
  ProductSuspended = 'PRODUCT_SUSPENDED'
}

/** Error codes for failed `ProductOptionsDelete` mutation. */
export type Shopify_ProductOptionsDeleteUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_ProductOptionsDeleteUserError';
  /** The error code. */
  code?: Maybe<Shopify_ProductOptionsDeleteUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `ProductOptionsDeleteUserError`. */
export enum Shopify_ProductOptionsDeleteUserErrorCode {
  /** Can't delete option with multiple values. */
  CannotDeleteOptionWithMultipleValues = 'CANNOT_DELETE_OPTION_WITH_MULTIPLE_VALUES',
  /** At least one of the product variants has invalid SKUs. */
  CannotMakeChangesIfVariantIsMissingRequiredSku = 'CANNOT_MAKE_CHANGES_IF_VARIANT_IS_MISSING_REQUIRED_SKU',
  /** Cannot delete options without deleting variants. */
  CannotUseNonDestructiveStrategy = 'CANNOT_USE_NON_DESTRUCTIVE_STRATEGY',
  /** Options do not belong to the same product. */
  OptionsDoNotBelongToTheSameProduct = 'OPTIONS_DO_NOT_BELONG_TO_THE_SAME_PRODUCT',
  /** Option does not exist. */
  OptionDoesNotExist = 'OPTION_DOES_NOT_EXIST',
  /** Product does not exist. */
  ProductDoesNotExist = 'PRODUCT_DOES_NOT_EXIST',
  /** Product is suspended. */
  ProductSuspended = 'PRODUCT_SUSPENDED'
}

/** Error codes for failed `ProductOptionsReorder` mutation. */
export type Shopify_ProductOptionsReorderUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_ProductOptionsReorderUserError';
  /** The error code. */
  code?: Maybe<Shopify_ProductOptionsReorderUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `ProductOptionsReorderUserError`. */
export enum Shopify_ProductOptionsReorderUserErrorCode {
  /** At least one of the product variants has invalid SKUs. */
  CannotMakeChangesIfVariantIsMissingRequiredSku = 'CANNOT_MAKE_CHANGES_IF_VARIANT_IS_MISSING_REQUIRED_SKU',
  /** Duplicated option name. */
  DuplicatedOptionName = 'DUPLICATED_OPTION_NAME',
  /** Duplicated option value. */
  DuplicatedOptionValue = 'DUPLICATED_OPTION_VALUE',
  /** Missing option name. */
  MissingOptionName = 'MISSING_OPTION_NAME',
  /** Missing option value. */
  MissingOptionValue = 'MISSING_OPTION_VALUE',
  /** Cannot specify different options or option values using mixed id and name reference key. */
  MixingIdAndNameKeysIsNotAllowed = 'MIXING_ID_AND_NAME_KEYS_IS_NOT_ALLOWED',
  /** On reorder, this key cannot be used. */
  NoKeyOnReorder = 'NO_KEY_ON_REORDER',
  /** Option id does not exist. */
  OptionIdDoesNotExist = 'OPTION_ID_DOES_NOT_EXIST',
  /** Option name does not exist. */
  OptionNameDoesNotExist = 'OPTION_NAME_DOES_NOT_EXIST',
  /** Option value does not exist. */
  OptionValueDoesNotExist = 'OPTION_VALUE_DOES_NOT_EXIST',
  /** Option value id does not exist. */
  OptionValueIdDoesNotExist = 'OPTION_VALUE_ID_DOES_NOT_EXIST',
  /** Product does not exist. */
  ProductDoesNotExist = 'PRODUCT_DOES_NOT_EXIST'
}

/** The price range of the product. */
export type Shopify_ProductPriceRange = {
  __typename?: 'Shopify_ProductPriceRange';
  /** The highest variant's price. */
  maxVariantPrice: Shopify_MoneyV2;
  /** The lowest variant's price. */
  minVariantPrice: Shopify_MoneyV2;
};

/** The price range of the product. */
export type Shopify_ProductPriceRangeV2 = {
  __typename?: 'Shopify_ProductPriceRangeV2';
  /** The highest variant's price. */
  maxVariantPrice: Shopify_MoneyV2;
  /** The lowest variant's price. */
  minVariantPrice: Shopify_MoneyV2;
};

/** Represents the channels where a product is published. */
export type Shopify_ProductPublication = {
  __typename?: 'Shopify_ProductPublication';
  /** The channel where the product was or is published. */
  channel: Shopify_Channel;
  /** Whether the publication is published or not. */
  isPublished: Scalars['Boolean']['output'];
  /** The product that was or is going to be published on the channel. */
  product: Shopify_Product;
  /** The date that the product was or is going to be published on the channel. */
  publishDate?: Maybe<Scalars['DateTime']['output']>;
};

/** An auto-generated type for paginating through multiple ProductPublications. */
export type Shopify_ProductPublicationConnection = {
  __typename?: 'Shopify_ProductPublicationConnection';
  /** A list of edges. */
  edges: Array<Shopify_ProductPublicationEdge>;
  /** A list of the nodes contained in ProductPublicationEdge. */
  nodes: Array<Shopify_ProductPublication>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one ProductPublication and a cursor during pagination. */
export type Shopify_ProductPublicationEdge = {
  __typename?: 'Shopify_ProductPublicationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of ProductPublicationEdge. */
  node: Shopify_ProductPublication;
};

/** A sale associated with a product. */
export type Shopify_ProductSale = Shopify_Sale & {
  __typename?: 'Shopify_ProductSale';
  /** The type of order action that the sale represents. */
  actionType: Shopify_SaleActionType;
  /** The unique ID for the sale. */
  id: Scalars['ID']['output'];
  /** The line item for the associated sale. */
  lineItem: Shopify_LineItem;
  /** The line type assocated with the sale. */
  lineType: Shopify_SaleLineType;
  /** The number of units either ordered or intended to be returned. */
  quantity?: Maybe<Scalars['Int']['output']>;
  /** All individual taxes associated with the sale. */
  taxes: Array<Shopify_SaleTax>;
  /** The total sale amount after taxes and discounts. */
  totalAmount: Shopify_MoneyBag;
  /** The total discounts allocated to the sale after taxes. */
  totalDiscountAmountAfterTaxes: Shopify_MoneyBag;
  /** The total discounts allocated to the sale before taxes. */
  totalDiscountAmountBeforeTaxes: Shopify_MoneyBag;
  /** The total amount of taxes for the sale. */
  totalTaxAmount: Shopify_MoneyBag;
};

/**
 * An entity that represents details of an asynchronous
 * [ProductSet](https://shopify.dev/api/admin-graphql/current/mutations/productSet) mutation.
 *
 * By querying this entity with the
 * [productOperation](https://shopify.dev/api/admin-graphql/current/queries/productOperation) query
 * using the ID that was returned
 * [when the product was created or updated](https://shopify.dev/api/admin/migrate/new-product-model/sync-data#create-a-product-with-variants-and-options-asynchronously),
 * this can be used to check the status of an operation.
 *
 * The `status` field indicates whether the operation is `CREATED`, `ACTIVE`, or `COMPLETE`.
 *
 * The `product` field provides the details of the created or updated product.
 *
 * The `userErrors` field provides mutation errors that occurred during the operation.
 */
export type Shopify_ProductSetOperation = Shopify_Node & Shopify_ProductOperation & {
  __typename?: 'Shopify_ProductSetOperation';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The product that's created or updated during this operation. */
  product?: Maybe<Shopify_Product>;
  /** The status of this operation. */
  status: Shopify_ProductOperationStatus;
  /** Returns mutation errors occurred during background mutation processing. */
  userErrors: Array<Shopify_ProductSetUserError>;
};

/** Defines errors for ProductSet mutation. */
export type Shopify_ProductSetUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_ProductSetUserError';
  /** The error code. */
  code?: Maybe<Shopify_ProductSetUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `ProductSetUserError`. */
export enum Shopify_ProductSetUserErrorCode {
  /** The metafield violates a capability restriction. */
  CapabilityViolation = 'CAPABILITY_VIOLATION',
  /** Duplicated option name. */
  DuplicatedOptionName = 'DUPLICATED_OPTION_NAME',
  /** Duplicated option value. */
  DuplicatedOptionValue = 'DUPLICATED_OPTION_VALUE',
  /** Something went wrong, please try again. */
  GenericError = 'GENERIC_ERROR',
  /** Gift card products can only be created after they have been activated. */
  GiftCardsNotActivated = 'GIFT_CARDS_NOT_ACTIVATED',
  /** The product gift_card attribute cannot be changed after creation. */
  GiftCardAttributeCannotBeChanged = 'GIFT_CARD_ATTRIBUTE_CANNOT_BE_CHANGED',
  /** Input is not valid. */
  InvalidInput = 'INVALID_INPUT',
  /** Metafield is not valid. */
  InvalidMetafield = 'INVALID_METAFIELD',
  /** Product is not valid. */
  InvalidProduct = 'INVALID_PRODUCT',
  /** Product variant is not valid. */
  InvalidVariant = 'INVALID_VARIANT',
  /** Error processing request in the background job. */
  JobError = 'JOB_ERROR',
  /** Options over limit. */
  OptionsOverLimit = 'OPTIONS_OVER_LIMIT',
  /** Option does not exist. */
  OptionDoesNotExist = 'OPTION_DOES_NOT_EXIST',
  /** Each option must have at least one option value specified. */
  OptionValuesMissing = 'OPTION_VALUES_MISSING',
  /** Option values over limit. */
  OptionValuesOverLimit = 'OPTION_VALUES_OVER_LIMIT',
  /** Option value does not exist. */
  OptionValueDoesNotExist = 'OPTION_VALUE_DOES_NOT_EXIST',
  /** Product does not exist. */
  ProductDoesNotExist = 'PRODUCT_DOES_NOT_EXIST',
  /** Must specify product options when updating variants. */
  ProductOptionsInputMissing = 'PRODUCT_OPTIONS_INPUT_MISSING',
  /** Product variant does not exist. */
  ProductVariantDoesNotExist = 'PRODUCT_VARIANT_DOES_NOT_EXIST',
  /** Must specify variants when updating options. */
  VariantsInputMissing = 'VARIANTS_INPUT_MISSING',
  /** Number of product variants exceeds shop limit. */
  VariantsOverLimit = 'VARIANTS_OVER_LIMIT'
}

/** The set of valid sort keys for the Product query. */
export enum Shopify_ProductSortKeys {
  /** Sort by the `created_at` value. */
  CreatedAt = 'CREATED_AT',
  /** Sort by the `id` value. */
  Id = 'ID',
  /** Sort by the `inventory_total` value. */
  InventoryTotal = 'INVENTORY_TOTAL',
  /** Sort by the `product_type` value. */
  ProductType = 'PRODUCT_TYPE',
  /** Sort by the `published_at` value. */
  PublishedAt = 'PUBLISHED_AT',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   * Pagination isn't supported when using this sort key.
   */
  Relevance = 'RELEVANCE',
  /** Sort by the `title` value. */
  Title = 'TITLE',
  /** Sort by the `updated_at` value. */
  UpdatedAt = 'UPDATED_AT',
  /** Sort by the `vendor` value. */
  Vendor = 'VENDOR'
}

/** The possible product statuses. */
export enum Shopify_ProductStatus {
  /** The product is ready to sell and can be published to sales channels and apps. Products with an active status aren't automatically published to sales channels, such as the online store, or apps. By default, existing products are set to active. */
  Active = 'ACTIVE',
  /** The product is no longer being sold and isn't available to customers on sales channels and apps. */
  Archived = 'ARCHIVED',
  /** The product isn't ready to sell and is unavailable to customers on sales channels and apps. By default, duplicated and unarchived products are set to draft. */
  Draft = 'DRAFT'
}

/** Represents a [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt) node. */
export type Shopify_ProductTaxonomyNode = Shopify_Node & {
  __typename?: 'Shopify_ProductTaxonomyNode';
  /** The full name of the product taxonomy node. For example,  Animals & Pet Supplies > Pet Supplies > Dog Supplies > Dog Beds. */
  fullName: Scalars['String']['output'];
  /** The ID of the product taxonomy node. */
  id: Scalars['ID']['output'];
  /** Whether the node is a leaf node. */
  isLeaf: Scalars['Boolean']['output'];
  /** Whether the node is a root node. */
  isRoot: Scalars['Boolean']['output'];
  /** The name of the product taxonomy node. For example, Dog Beds. */
  name: Scalars['String']['output'];
};

/** Represents a product variant. */
export type Shopify_ProductVariant = Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_HasPublishedTranslations & Shopify_LegacyInteroperability & Shopify_Navigable & Shopify_Node & {
  __typename?: 'Shopify_ProductVariant';
  /** Whether the product variant is available for sale. */
  availableForSale: Scalars['Boolean']['output'];
  /** The value of the barcode associated with the product. */
  barcode?: Maybe<Scalars['String']['output']>;
  /** The compare-at price of the variant in the default shop currency. */
  compareAtPrice?: Maybe<Scalars['Shopify_Money']['output']>;
  /** The pricing that applies for a customer in a given context. */
  contextualPricing: Shopify_ProductVariantContextualPricing;
  /** The date and time when the variant was created. */
  createdAt: Scalars['DateTime']['output'];
  /** A default cursor that returns the single next record, sorted ascending by ID. */
  defaultCursor: Scalars['String']['output'];
  /** The delivery profile for the variant. */
  deliveryProfile?: Maybe<Shopify_DeliveryProfile>;
  /** Display name of the variant, based on product's title + variant's title. */
  displayName: Scalars['String']['output'];
  /**
   * The fulfillment service that stocks a product variant.
   *
   * This is a third-party fulfillment service if the following conditions are met:
   * - The product variant is stocked by a single fulfillment service.
   * - The [FulfillmentService](/api/admin-graphql/latest/objects/FulfillmentService) is a third-party fulfillment service. Third-party fulfillment services don't have a handle with the value `manual`.
   * - The fulfillment service hasn't [opted into SKU sharing](/api/admin-graphql/latest/objects/FulfillmentService#field-fulfillmentservice-permitsskusharing).
   *
   * If the conditions aren't met, then the fulfillment service has the `manual` handle.
   * @deprecated
   * The [relationship between a product variant and a fulfillment service was changed in the `2022-07` API version](/changelog/fulfillment-service-sku-sharing). A [ProductVariant](/api/admin-graphql/latest/objects/ProductVariant) can be stocked by multiple fulfillment services. As a result, we recommend that you use the [inventoryItem field](/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-inventoryitem) if you need to determine where a product variant is stocked.
   *
   * If you need to determine whether a product is a gift card, then you should continue to use this field until an alternative is available.
   *
   * Learn more about [managing inventory quantities and states](/apps/fulfillment/inventory-management-apps/quantities-states).
   *
   */
  fulfillmentService?: Maybe<Shopify_FulfillmentService>;
  /**
   * Whether changes to the fulfillment service for the product variant are allowed.
   * @deprecated The [relationship between a product variant and a fulfillment service was changed in the `2022-07` API version](/changelog/fulfillment-service-sku-sharing). A [ProductVariant](/api/admin-graphql/latest/objects/ProductVariant) can be stocked by multiple fulfillment services.
   * As a result, the fulfillment_service is no longer directly editable on a ProductVariant and this field is no longer applicable.
   *
   */
  fulfillmentServiceEditable: Shopify_EditableProperty;
  /**
   * The Harmonized System Code (or HS Tariff Code) for the variant.
   * @deprecated Use `InventoryItem.harmonizedSystemCode` instead.
   */
  harmonizedSystemCode?: Maybe<Scalars['String']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The featured image for the variant. */
  image?: Maybe<Shopify_Image>;
  /** The inventory item, which is used to query for inventory information. */
  inventoryItem: Shopify_InventoryItem;
  /**
   * The fulfillment service that tracks the number of items in stock for the product variant.
   * @deprecated Use tracked attribute on `inventoryItem` instead.
   */
  inventoryManagement: Shopify_ProductVariantInventoryManagement;
  /** Whether customers are allowed to place an order for the product variant when it's out of stock. */
  inventoryPolicy: Shopify_ProductVariantInventoryPolicy;
  /** The total sellable quantity of the variant. */
  inventoryQuantity?: Maybe<Scalars['Int']['output']>;
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['Shopify_UnsignedInt64']['output'];
  /** The media associated with the product variant. */
  media: Shopify_MediaConnection;
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafield definitions. */
  metafieldDefinitions: Shopify_MetafieldDefinitionConnection;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /** The order of the product variant in the list of product variants. The first position in the list is 1. */
  position: Scalars['Int']['output'];
  /**
   * List of prices and compare-at prices in the presentment currencies for this shop.
   * @deprecated Use `contextualPricing` instead.
   */
  presentmentPrices: Shopify_ProductVariantPricePairConnection;
  /** The price of the product variant in the default shop currency. */
  price: Scalars['Shopify_Money']['output'];
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafields: Shopify_PrivateMetafieldConnection;
  /** The product that this variant belongs to. */
  product: Shopify_Product;
  /** A list of the product variant components. */
  productVariantComponents: Shopify_ProductVariantComponentConnection;
  /**
   * Whether a product variant requires components. The default value is `false`.
   * If `true`, then the product variant can only be purchased as a parent bundle with components and it will be omitted
   * from channels that don't support bundles.
   */
  requiresComponents: Scalars['Boolean']['output'];
  /**
   * Whether a customer needs to provide a shipping address when placing an order for the product variant.
   * @deprecated Use `InventoryItem.requiresShipping` instead.
   */
  requiresShipping: Scalars['Boolean']['output'];
  /** List of product options applied to the variant. */
  selectedOptions: Array<Shopify_SelectedOption>;
  /**
   * The total sellable quantity of the variant for online channels.
   * This doesn't represent the total available inventory or capture
   * [limitations based on customer location](https://help.shopify.com/manual/markets/inventory_and_fulfillment).
   */
  sellableOnlineQuantity: Scalars['Int']['output'];
  /**
   * Count of selling plan groups associated with the product variant.
   * @deprecated Use `sellingPlanGroupsCount` instead.
   */
  sellingPlanGroupCount: Scalars['Int']['output'];
  /** A list of all selling plan groups defined in the current shop associated with the product variant. */
  sellingPlanGroups: Shopify_SellingPlanGroupConnection;
  /** Count of selling plan groups associated with the product variant. */
  sellingPlanGroupsCount?: Maybe<Shopify_Count>;
  /**
   * A case-sensitive identifier for the product variant in the shop.
   * Required in order to connect to a fulfillment service.
   */
  sku?: Maybe<Scalars['String']['output']>;
  /**
   * The Storefront GraphQL API ID of the `ProductVariant`.
   *
   * As of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.
   * @deprecated Use `id` instead.
   */
  storefrontId: Scalars['Shopify_StorefrontID']['output'];
  /** The tax code for the product variant. */
  taxCode?: Maybe<Scalars['String']['output']>;
  /** Whether a tax is charged when the product variant is sold. */
  taxable: Scalars['Boolean']['output'];
  /** The title of the product variant. */
  title: Scalars['String']['output'];
  /** The translations associated with the resource. */
  translations: Array<Shopify_Translation>;
  /** The date and time (ISO 8601 format) when the product variant was last modified. */
  updatedAt: Scalars['DateTime']['output'];
  /**
   * The weight of the product variant in the unit system specified with weight_unit.
   * @deprecated Use InventoryItem.measurement.weight instead
   */
  weight?: Maybe<Scalars['Float']['output']>;
  /**
   * The unit of measurement that applies to the product variant's weight. If you don't specify a value for weight_unit, then the shop's default unit of measurement is applied. Valid values: `g`, `kg`, `oz`, `lb`.
   * @deprecated Use InventoryItem.measurement.weight instead
   */
  weightUnit: Shopify_WeightUnit;
};


/** Represents a product variant. */
export type Shopify_ProductVariantContextualPricingArgs = {
  context: Shopify_ContextualPricingContext;
};


/** Represents a product variant. */
export type Shopify_ProductVariantMediaArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a product variant. */
export type Shopify_ProductVariantMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace?: InputMaybe<Scalars['String']['input']>;
};


/** Represents a product variant. */
export type Shopify_ProductVariantMetafieldDefinitionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  pinnedStatus?: InputMaybe<Shopify_MetafieldDefinitionPinnedStatus>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_MetafieldDefinitionSortKeys>;
};


/** Represents a product variant. */
export type Shopify_ProductVariantMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a product variant. */
export type Shopify_ProductVariantPresentmentPricesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  presentmentCurrencies?: InputMaybe<Array<Shopify_CurrencyCode>>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a product variant. */
export type Shopify_ProductVariantPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace: Scalars['String']['input'];
};


/** Represents a product variant. */
export type Shopify_ProductVariantPrivateMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a product variant. */
export type Shopify_ProductVariantProductVariantComponentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a product variant. */
export type Shopify_ProductVariantSellingPlanGroupsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a product variant. */
export type Shopify_ProductVariantTranslationsArgs = {
  locale: Scalars['String']['input'];
  marketId?: InputMaybe<Scalars['ID']['input']>;
};

/** A product variant component associated with a product variant. */
export type Shopify_ProductVariantComponent = Shopify_Node & {
  __typename?: 'Shopify_ProductVariantComponent';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The product variant associated with the component. */
  productVariant: Shopify_ProductVariant;
  /** The required quantity of the component. */
  quantity: Scalars['Int']['output'];
};

/** An auto-generated type for paginating through multiple ProductVariantComponents. */
export type Shopify_ProductVariantComponentConnection = {
  __typename?: 'Shopify_ProductVariantComponentConnection';
  /** A list of edges. */
  edges: Array<Shopify_ProductVariantComponentEdge>;
  /** A list of the nodes contained in ProductVariantComponentEdge. */
  nodes: Array<Shopify_ProductVariantComponent>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one ProductVariantComponent and a cursor during pagination. */
export type Shopify_ProductVariantComponentEdge = {
  __typename?: 'Shopify_ProductVariantComponentEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of ProductVariantComponentEdge. */
  node: Shopify_ProductVariantComponent;
};

/** An auto-generated type for paginating through multiple ProductVariants. */
export type Shopify_ProductVariantConnection = {
  __typename?: 'Shopify_ProductVariantConnection';
  /** A list of edges. */
  edges: Array<Shopify_ProductVariantEdge>;
  /** A list of the nodes contained in ProductVariantEdge. */
  nodes: Array<Shopify_ProductVariant>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/**
 * The price of a product variant in a specific country.
 * Prices vary between countries.
 */
export type Shopify_ProductVariantContextualPricing = {
  __typename?: 'Shopify_ProductVariantContextualPricing';
  /** The final compare-at price after all adjustments are applied. */
  compareAtPrice?: Maybe<Shopify_MoneyV2>;
  /** The final price after all adjustments are applied. */
  price: Shopify_MoneyV2;
  /** A list of quantity breaks for the product variant. */
  quantityPriceBreaks: Shopify_QuantityPriceBreakConnection;
  /** The quantity rule applied for a given context. */
  quantityRule: Shopify_QuantityRule;
};


/**
 * The price of a product variant in a specific country.
 * Prices vary between countries.
 */
export type Shopify_ProductVariantContextualPricingQuantityPriceBreaksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_QuantityPriceBreakSortKeys>;
};

/** An auto-generated type which holds one ProductVariant and a cursor during pagination. */
export type Shopify_ProductVariantEdge = {
  __typename?: 'Shopify_ProductVariantEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of ProductVariantEdge. */
  node: Shopify_ProductVariant;
};

/** The valid values for the method of inventory tracking for a product variant. */
export enum Shopify_ProductVariantInventoryManagement {
  /** This product variant's inventory is tracked by a third-party fulfillment service. */
  FulfillmentService = 'FULFILLMENT_SERVICE',
  /** This product variant's inventory is not tracked. */
  NotManaged = 'NOT_MANAGED',
  /** This product variant's inventory is tracked by Shopify. Inventory can be tracked by store location(s) and/or third-party fulfillment service(s). */
  Shopify = 'SHOPIFY'
}

/** The valid values for the inventory policy of a product variant once it is out of stock. */
export enum Shopify_ProductVariantInventoryPolicy {
  /** Customers can buy this product variant after it's out of stock. */
  Continue = 'CONTINUE',
  /** Customers can't buy this product variant after it's out of stock. */
  Deny = 'DENY'
}

/** The compare-at price and price of a variant sharing a currency. */
export type Shopify_ProductVariantPricePair = {
  __typename?: 'Shopify_ProductVariantPricePair';
  /** The compare-at price of the variant with associated currency. */
  compareAtPrice?: Maybe<Shopify_MoneyV2>;
  /** The price of the variant with associated currency. */
  price: Shopify_MoneyV2;
};

/** An auto-generated type for paginating through multiple ProductVariantPricePairs. */
export type Shopify_ProductVariantPricePairConnection = {
  __typename?: 'Shopify_ProductVariantPricePairConnection';
  /** A list of edges. */
  edges: Array<Shopify_ProductVariantPricePairEdge>;
  /** A list of the nodes contained in ProductVariantPricePairEdge. */
  nodes: Array<Shopify_ProductVariantPricePair>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one ProductVariantPricePair and a cursor during pagination. */
export type Shopify_ProductVariantPricePairEdge = {
  __typename?: 'Shopify_ProductVariantPricePairEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of ProductVariantPricePairEdge. */
  node: Shopify_ProductVariantPricePair;
};

/** An error that occurs during the execution of `ProductVariantRelationshipBulkUpdate`. */
export type Shopify_ProductVariantRelationshipBulkUpdateUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_ProductVariantRelationshipBulkUpdateUserError';
  /** The error code. */
  code?: Maybe<Shopify_ProductVariantRelationshipBulkUpdateUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `ProductVariantRelationshipBulkUpdateUserError`. */
export enum Shopify_ProductVariantRelationshipBulkUpdateUserErrorCode {
  /** A parent product variant cannot contain itself as a component. */
  CircularReference = 'CIRCULAR_REFERENCE',
  /** A parent product variant must not contain duplicate product variant relationships. */
  DuplicateProductVariantRelationship = 'DUPLICATE_PRODUCT_VARIANT_RELATIONSHIP',
  /** Exceeded the maximum allowable product variant relationships in a parent product variant. */
  ExceededProductVariantRelationshipLimit = 'EXCEEDED_PRODUCT_VARIANT_RELATIONSHIP_LIMIT',
  /** Unable to create parent product variant. */
  FailedToCreate = 'FAILED_TO_CREATE',
  /** Unable to remove product variant relationships. */
  FailedToRemove = 'FAILED_TO_REMOVE',
  /** Unable to update product variant relationships. */
  FailedToUpdate = 'FAILED_TO_UPDATE',
  /** Unable to update parent product variant price. */
  FailedToUpdateParentProductVariantPrice = 'FAILED_TO_UPDATE_PARENT_PRODUCT_VARIANT_PRICE',
  /** Product variant relationships must have a quantity greater than 0. */
  InvalidQuantity = 'INVALID_QUANTITY',
  /** The product variant relationships to remove must be specified if all the parent product variant's components aren't being removed. */
  MustSpecifyComponents = 'MUST_SPECIFY_COMPONENTS',
  /** Nested parent product variants aren't supported. */
  NestedParentProductVariant = 'NESTED_PARENT_PRODUCT_VARIANT',
  /** Gift cards cannot be parent product variants. */
  ParentProductVariantCannotBeGiftCard = 'PARENT_PRODUCT_VARIANT_CANNOT_BE_GIFT_CARD',
  /** Parent product variants cannot require a selling plan. */
  ParentProductVariantCannotRequireSellingPlan = 'PARENT_PRODUCT_VARIANT_CANNOT_REQUIRE_SELLING_PLAN',
  /** A parent product variant ID or product ID must be provided. */
  ParentRequired = 'PARENT_REQUIRED',
  /** The products for these product variants are already owned by another App. */
  ProductExpanderAppOwnershipAlreadyExists = 'PRODUCT_EXPANDER_APP_OWNERSHIP_ALREADY_EXISTS',
  /** Some of the provided product variants are not components of the specified parent product variant. */
  ProductVariantsNotComponents = 'PRODUCT_VARIANTS_NOT_COMPONENTS',
  /** The product variants were not found. */
  ProductVariantsNotFound = 'PRODUCT_VARIANTS_NOT_FOUND',
  /** A Core type relationship cannot be added to a composite product variant with SFN type relationships. */
  ProductVariantRelationshipTypeConflict = 'PRODUCT_VARIANT_RELATIONSHIP_TYPE_CONFLICT',
  /** Unexpected error. */
  UnexpectedError = 'UNEXPECTED_ERROR',
  /** Multipack bundles are not supported. */
  UnsupportedMultipackRelationship = 'UNSUPPORTED_MULTIPACK_RELATIONSHIP',
  /** A price must be provided for a parent product variant if the price calucation is set to fixed. */
  UpdateParentVariantPriceRequired = 'UPDATE_PARENT_VARIANT_PRICE_REQUIRED'
}

/** The set of valid sort keys for the ProductVariant query. */
export enum Shopify_ProductVariantSortKeys {
  /** Sort by the `full_title` value. */
  FullTitle = 'FULL_TITLE',
  /** Sort by the `id` value. */
  Id = 'ID',
  /**
   * Sort by available inventory quantity in the location specified by the `query:"location_id:"` argument.
   * Don't use this sort key when no `location_id` in query is specified.
   */
  InventoryLevelsAvailable = 'INVENTORY_LEVELS_AVAILABLE',
  /** Sort by the `inventory_management` value. */
  InventoryManagement = 'INVENTORY_MANAGEMENT',
  /** Sort by the `inventory_policy` value. */
  InventoryPolicy = 'INVENTORY_POLICY',
  /** Sort by the `inventory_quantity` value. */
  InventoryQuantity = 'INVENTORY_QUANTITY',
  /** Sort by the `name` value. */
  Name = 'NAME',
  /** Sort by the `popular` value. */
  Popular = 'POPULAR',
  /** Sort by the `position` value. */
  Position = 'POSITION',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE',
  /** Sort by the `sku` value. */
  Sku = 'SKU',
  /** Sort by the `title` value. */
  Title = 'TITLE'
}

/** Error codes for failed product variant bulk create mutations. */
export type Shopify_ProductVariantsBulkCreateUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_ProductVariantsBulkCreateUserError';
  /** The error code. */
  code?: Maybe<Shopify_ProductVariantsBulkCreateUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `ProductVariantsBulkCreateUserError`. */
export enum Shopify_ProductVariantsBulkCreateUserErrorCode {
  /** Variant price must be greater than or equal to zero. */
  GreaterThanOrEqualTo = 'GREATER_THAN_OR_EQUAL_TO',
  /** Invalid input detected. */
  Invalid = 'INVALID',
  /** Input must be for this product. */
  MustBeForThisProduct = 'MUST_BE_FOR_THIS_PRODUCT',
  /** Variant options are not enough. */
  NeedToAddOptionValues = 'NEED_TO_ADD_OPTION_VALUES',
  /** Price cannot take a negative value. */
  NegativePriceValue = 'NEGATIVE_PRICE_VALUE',
  /** Input is not defined for this shop. */
  NotDefinedForShop = 'NOT_DEFINED_FOR_SHOP',
  /** On create, this key cannot be used. */
  NoKeyOnCreate = 'NO_KEY_ON_CREATE',
  /** Variant options are more than the product options. */
  OptionValuesForNumberOfUnknownOptions = 'OPTION_VALUES_FOR_NUMBER_OF_UNKNOWN_OPTIONS',
  /** Product does not exist. */
  ProductDoesNotExist = 'PRODUCT_DOES_NOT_EXIST',
  /** You reached the limit of available SKUs in your current plan. */
  SubscriptionViolation = 'SUBSCRIPTION_VIOLATION',
  /** Inventory locations cannot exceed the allowed resource limit or 10. */
  TooManyInventoryLocations = 'TOO_MANY_INVENTORY_LOCATIONS',
  /** Quantity could not be set. The location was not found. */
  TrackedVariantLocationNotFound = 'TRACKED_VARIANT_LOCATION_NOT_FOUND',
  /** Variant already exists. */
  VariantAlreadyExists = 'VARIANT_ALREADY_EXISTS',
  /** Variant options already exist. Please change the variant option(s). */
  VariantAlreadyExistsChangeOptionValue = 'VARIANT_ALREADY_EXISTS_CHANGE_OPTION_VALUE'
}

/** Error codes for failed bulk variant delete mutations. */
export type Shopify_ProductVariantsBulkDeleteUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_ProductVariantsBulkDeleteUserError';
  /** The error code. */
  code?: Maybe<Shopify_ProductVariantsBulkDeleteUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `ProductVariantsBulkDeleteUserError`. */
export enum Shopify_ProductVariantsBulkDeleteUserErrorCode {
  /** The variant does not exist. */
  AtLeastOneVariantDoesNotBelongToTheProduct = 'AT_LEAST_ONE_VARIANT_DOES_NOT_BELONG_TO_THE_PRODUCT',
  /** Cannot delete default variant. */
  CannotDeleteLastVariant = 'CANNOT_DELETE_LAST_VARIANT',
  /** Product does not exist. */
  ProductDoesNotExist = 'PRODUCT_DOES_NOT_EXIST'
}

/** Error codes for failed bulk product variants reorder operation. */
export type Shopify_ProductVariantsBulkReorderUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_ProductVariantsBulkReorderUserError';
  /** The error code. */
  code?: Maybe<Shopify_ProductVariantsBulkReorderUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `ProductVariantsBulkReorderUserError`. */
export enum Shopify_ProductVariantsBulkReorderUserErrorCode {
  /** Product variant IDs must be unique. */
  DuplicatedVariantId = 'DUPLICATED_VARIANT_ID',
  /** Product variant position cannot be zero or negative number. */
  InvalidPosition = 'INVALID_POSITION',
  /** Product variant does not exist. */
  MissingVariant = 'MISSING_VARIANT',
  /** Product does not exist. */
  ProductDoesNotExist = 'PRODUCT_DOES_NOT_EXIST'
}

/** Error codes for failed variant bulk update mutations. */
export type Shopify_ProductVariantsBulkUpdateUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_ProductVariantsBulkUpdateUserError';
  /** The error code. */
  code?: Maybe<Shopify_ProductVariantsBulkUpdateUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `ProductVariantsBulkUpdateUserError`. */
export enum Shopify_ProductVariantsBulkUpdateUserErrorCode {
  /** Cannot set name for an option value linked to a metafield. */
  CannotSetNameForLinkedOptionValue = 'CANNOT_SET_NAME_FOR_LINKED_OPTION_VALUE',
  /** The price of the variant must be greater than or equal to zero. */
  GreaterThanOrEqualTo = 'GREATER_THAN_OR_EQUAL_TO',
  /** Variant options are not enough. */
  NeedToAddOptionValues = 'NEED_TO_ADD_OPTION_VALUES',
  /** Price cannot take a negative value. */
  NegativePriceValue = 'NEGATIVE_PRICE_VALUE',
  /** Inventory quantities cannot be provided during update. */
  NoInventoryQuantitesDuringUpdate = 'NO_INVENTORY_QUANTITES_DURING_UPDATE',
  /** Inventory quantities cannot be updated with variants API. */
  NoInventoryQuantitiesOnVariantsUpdate = 'NO_INVENTORY_QUANTITIES_ON_VARIANTS_UPDATE',
  /** Variant options are more than the product options. */
  OptionValuesForNumberOfUnknownOptions = 'OPTION_VALUES_FOR_NUMBER_OF_UNKNOWN_OPTIONS',
  /** Product does not exist. */
  ProductDoesNotExist = 'PRODUCT_DOES_NOT_EXIST',
  /** Product variant does not exist. */
  ProductVariantDoesNotExist = 'PRODUCT_VARIANT_DOES_NOT_EXIST',
  /** Product variant is missing ID attribute. */
  ProductVariantIdMissing = 'PRODUCT_VARIANT_ID_MISSING',
  /** You reached the limit of available SKUs in your current plan. */
  SubscriptionViolation = 'SUBSCRIPTION_VIOLATION',
  /** The variant already exists. */
  VariantAlreadyExists = 'VARIANT_ALREADY_EXISTS'
}

/** An error that occurs during the execution of `PubSubWebhookSubscriptionCreate`. */
export type Shopify_PubSubWebhookSubscriptionCreateUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_PubSubWebhookSubscriptionCreateUserError';
  /** The error code. */
  code?: Maybe<Shopify_PubSubWebhookSubscriptionCreateUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `PubSubWebhookSubscriptionCreateUserError`. */
export enum Shopify_PubSubWebhookSubscriptionCreateUserErrorCode {
  /** Invalid parameters provided. */
  InvalidParameters = 'INVALID_PARAMETERS',
  /** Address for this topic has already been taken. */
  Taken = 'TAKEN'
}

/** An error that occurs during the execution of `PubSubWebhookSubscriptionUpdate`. */
export type Shopify_PubSubWebhookSubscriptionUpdateUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_PubSubWebhookSubscriptionUpdateUserError';
  /** The error code. */
  code?: Maybe<Shopify_PubSubWebhookSubscriptionUpdateUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `PubSubWebhookSubscriptionUpdateUserError`. */
export enum Shopify_PubSubWebhookSubscriptionUpdateUserErrorCode {
  /** Invalid parameters provided. */
  InvalidParameters = 'INVALID_PARAMETERS'
}

/** A publication is a group of products and collections that is published to an app. */
export type Shopify_Publication = Shopify_Node & {
  __typename?: 'Shopify_Publication';
  /**
   * The app associated with the publication.
   * @deprecated Use [AppCatalog.apps](https://shopify.dev/api/admin-graphql/unstable/objects/AppCatalog#connection-appcatalog-apps) instead.
   */
  app: Shopify_App;
  /** Whether new products are automatically published to this publication. */
  autoPublish: Scalars['Boolean']['output'];
  /** The catalog associated with the publication. */
  catalog?: Maybe<Shopify_Catalog>;
  /** The collection publications for the list of collections published to the publication. */
  collectionPublicationsV3: Shopify_ResourcePublicationConnection;
  /** The list of collections published to the publication. */
  collections: Shopify_CollectionConnection;
  /** Whether the collection is available to the publication. */
  hasCollection: Scalars['Boolean']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /**
   * Name of the publication.
   * @deprecated Use [Catalog.title](https://shopify.dev/api/admin-graphql/unstable/interfaces/Catalog#field-catalog-title) instead.
   */
  name: Scalars['String']['output'];
  /** A background operation associated with this publication. */
  operation?: Maybe<Shopify_PublicationOperation>;
  /** The product publications for the list of products published to the publication. */
  productPublicationsV3: Shopify_ResourcePublicationConnection;
  /** The list of products published to the publication. */
  products: Shopify_ProductConnection;
  /** Whether the publication supports future publishing. */
  supportsFuturePublishing: Scalars['Boolean']['output'];
};


/** A publication is a group of products and collections that is published to an app. */
export type Shopify_PublicationCollectionPublicationsV3Args = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** A publication is a group of products and collections that is published to an app. */
export type Shopify_PublicationCollectionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** A publication is a group of products and collections that is published to an app. */
export type Shopify_PublicationHasCollectionArgs = {
  id: Scalars['ID']['input'];
};


/** A publication is a group of products and collections that is published to an app. */
export type Shopify_PublicationProductPublicationsV3Args = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** A publication is a group of products and collections that is published to an app. */
export type Shopify_PublicationProductsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** An auto-generated type for paginating through multiple Publications. */
export type Shopify_PublicationConnection = {
  __typename?: 'Shopify_PublicationConnection';
  /** A list of edges. */
  edges: Array<Shopify_PublicationEdge>;
  /** A list of the nodes contained in PublicationEdge. */
  nodes: Array<Shopify_Publication>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one Publication and a cursor during pagination. */
export type Shopify_PublicationEdge = {
  __typename?: 'Shopify_PublicationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of PublicationEdge. */
  node: Shopify_Publication;
};

/** The possible types of publication operations. */
export type Shopify_PublicationOperation = Shopify_AddAllProductsOperation | Shopify_CatalogCsvOperation | Shopify_PublicationResourceOperation;

/** A bulk update operation on a publication. */
export type Shopify_PublicationResourceOperation = Shopify_Node & Shopify_ResourceOperation & {
  __typename?: 'Shopify_PublicationResourceOperation';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The count of processed rows, summing imported, failed, and skipped rows. */
  processedRowCount?: Maybe<Scalars['Int']['output']>;
  /** Represents a rows objects within this background operation. */
  rowCount?: Maybe<Shopify_RowCount>;
  /** The status of this operation. */
  status: Shopify_ResourceOperationStatus;
};

/** Defines errors encountered while managing a publication. */
export type Shopify_PublicationUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_PublicationUserError';
  /** The error code. */
  code?: Maybe<Shopify_PublicationUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `PublicationUserError`. */
export enum Shopify_PublicationUserErrorCode {
  /** The input value is blank. */
  Blank = 'BLANK',
  /** Cannot modify a catalog for an app. */
  CannotModifyAppCatalog = 'CANNOT_MODIFY_APP_CATALOG',
  /** Can't modify a publication that belongs to an app catalog. */
  CannotModifyAppCatalogPublication = 'CANNOT_MODIFY_APP_CATALOG_PUBLICATION',
  /** Cannot modify a catalog for a market. */
  CannotModifyMarketCatalog = 'CANNOT_MODIFY_MARKET_CATALOG',
  /** Can't modify a publication that belongs to a market catalog. */
  CannotModifyMarketCatalogPublication = 'CANNOT_MODIFY_MARKET_CATALOG_PUBLICATION',
  /** Catalog does not exist. */
  CatalogNotFound = 'CATALOG_NOT_FOUND',
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** Publishable ID not found. */
  InvalidPublishableId = 'INVALID_PUBLISHABLE_ID',
  /** Market does not exist. */
  MarketNotFound = 'MARKET_NOT_FOUND',
  /** A product publication cannot be created because the catalog type associated with this publication does not permit publications of this product type. */
  ProductTypeIncompatibleWithCatalogType = 'PRODUCT_TYPE_INCOMPATIBLE_WITH_CATALOG_TYPE',
  /** The publication is currently being modified. Please try again later. */
  PublicationLocked = 'PUBLICATION_LOCKED',
  /** Publication not found. */
  PublicationNotFound = 'PUBLICATION_NOT_FOUND',
  /** The limit for simultaneous publication updates has been exceeded. */
  PublicationUpdateLimitExceeded = 'PUBLICATION_UPDATE_LIMIT_EXCEEDED',
  /** The input value is already taken. */
  Taken = 'TAKEN',
  /** The input value is too long. */
  TooLong = 'TOO_LONG',
  /** The input value is too short. */
  TooShort = 'TOO_SHORT',
  /** Can't perform this action on a publication. */
  UnsupportedPublicationAction = 'UNSUPPORTED_PUBLICATION_ACTION',
  /** A catalog publication can only contain products. */
  UnsupportedPublishableType = 'UNSUPPORTED_PUBLISHABLE_TYPE'
}

/**
 * Represents a resource that can be published to a channel.
 * A publishable resource can be either a Product or Collection.
 */
export type Shopify_Publishable = {
  /** The number of publications a resource is published to without feedback errors. */
  availablePublicationsCount?: Maybe<Shopify_Count>;
  /**
   * The number of publications a resource is published on.
   * @deprecated Use `resourcePublicationsCount` instead.
   */
  publicationCount: Scalars['Int']['output'];
  /**
   * Check to see whether the resource is published to a given channel.
   * @deprecated Use `publishedOnPublication` instead.
   */
  publishedOnChannel: Scalars['Boolean']['output'];
  /**
   * Check to see whether the resource is published to the calling app's channel.
   * @deprecated Use `publishedOnCurrentPublication` instead.
   */
  publishedOnCurrentChannel: Scalars['Boolean']['output'];
  /** Check to see whether the resource is published to the calling app's publication. */
  publishedOnCurrentPublication: Scalars['Boolean']['output'];
  /** Check to see whether the resource is published to a given publication. */
  publishedOnPublication: Scalars['Boolean']['output'];
  /** The list of resources that are published to a publication. */
  resourcePublications: Shopify_ResourcePublicationConnection;
  /** The number of publications a resource is published on. */
  resourcePublicationsCount?: Maybe<Shopify_Count>;
  /** The list of resources that are either published or staged to be published to a publication. */
  resourcePublicationsV2: Shopify_ResourcePublicationV2Connection;
  /**
   * The list of channels that the resource is not published to.
   * @deprecated Use `unpublishedPublications` instead.
   */
  unpublishedChannels: Shopify_ChannelConnection;
  /** The list of publications that the resource is not published to. */
  unpublishedPublications: Shopify_PublicationConnection;
};


/**
 * Represents a resource that can be published to a channel.
 * A publishable resource can be either a Product or Collection.
 */
export type Shopify_PublishablePublicationCountArgs = {
  onlyPublished?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Represents a resource that can be published to a channel.
 * A publishable resource can be either a Product or Collection.
 */
export type Shopify_PublishablePublishedOnChannelArgs = {
  channelId: Scalars['ID']['input'];
};


/**
 * Represents a resource that can be published to a channel.
 * A publishable resource can be either a Product or Collection.
 */
export type Shopify_PublishablePublishedOnPublicationArgs = {
  publicationId: Scalars['ID']['input'];
};


/**
 * Represents a resource that can be published to a channel.
 * A publishable resource can be either a Product or Collection.
 */
export type Shopify_PublishableResourcePublicationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  onlyPublished?: InputMaybe<Scalars['Boolean']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Represents a resource that can be published to a channel.
 * A publishable resource can be either a Product or Collection.
 */
export type Shopify_PublishableResourcePublicationsCountArgs = {
  onlyPublished?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Represents a resource that can be published to a channel.
 * A publishable resource can be either a Product or Collection.
 */
export type Shopify_PublishableResourcePublicationsV2Args = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  catalogType?: InputMaybe<Shopify_CatalogType>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  onlyPublished?: InputMaybe<Scalars['Boolean']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Represents a resource that can be published to a channel.
 * A publishable resource can be either a Product or Collection.
 */
export type Shopify_PublishableUnpublishedChannelsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Represents a resource that can be published to a channel.
 * A publishable resource can be either a Product or Collection.
 */
export type Shopify_PublishableUnpublishedPublicationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Represents information about the purchasing company for the order or draft order. */
export type Shopify_PurchasingCompany = {
  __typename?: 'Shopify_PurchasingCompany';
  /** The company associated to the order or draft order. */
  company: Shopify_Company;
  /** The company contact associated to the order or draft order. */
  contact?: Maybe<Shopify_CompanyContact>;
  /** The company location associated to the order or draft order. */
  location: Shopify_CompanyLocation;
};

/** Represents information about the purchasing entity for the order or draft order. */
export type Shopify_PurchasingEntity = Shopify_Customer | Shopify_PurchasingCompany;

/**
 * Quantity price breaks lets you offer different rates that are based on the
 * amount of a specific variant being ordered.
 */
export type Shopify_QuantityPriceBreak = Shopify_Node & {
  __typename?: 'Shopify_QuantityPriceBreak';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** Minimum quantity required to reach new quantity break price. */
  minimumQuantity: Scalars['Int']['output'];
  /** The price of variant after reaching the minimum quanity. */
  price: Shopify_MoneyV2;
  /** The price list associated with this quantity break. */
  priceList: Shopify_PriceList;
  /** The product variant associated with this quantity break. */
  variant: Shopify_ProductVariant;
};

/** An auto-generated type for paginating through multiple QuantityPriceBreaks. */
export type Shopify_QuantityPriceBreakConnection = {
  __typename?: 'Shopify_QuantityPriceBreakConnection';
  /** A list of edges. */
  edges: Array<Shopify_QuantityPriceBreakEdge>;
  /** A list of the nodes contained in QuantityPriceBreakEdge. */
  nodes: Array<Shopify_QuantityPriceBreak>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one QuantityPriceBreak and a cursor during pagination. */
export type Shopify_QuantityPriceBreakEdge = {
  __typename?: 'Shopify_QuantityPriceBreakEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of QuantityPriceBreakEdge. */
  node: Shopify_QuantityPriceBreak;
};

/** The set of valid sort keys for the QuantityPriceBreak query. */
export enum Shopify_QuantityPriceBreakSortKeys {
  /** Sort by the `id` value. */
  Id = 'ID',
  /** Sort by the `minimum_quantity` value. */
  MinimumQuantity = 'MINIMUM_QUANTITY',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE'
}

/** Error codes for failed volume pricing operations. */
export type Shopify_QuantityPricingByVariantUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_QuantityPricingByVariantUserError';
  /** The error code. */
  code?: Maybe<Shopify_QuantityPricingByVariantUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `QuantityPricingByVariantUserError`. */
export enum Shopify_QuantityPricingByVariantUserErrorCode {
  /** The input value is blank. */
  Blank = 'BLANK',
  /** Something went wrong when trying to update quantity pricing. Please try again later. */
  GenericError = 'GENERIC_ERROR',
  /** Price list and fixed price currency mismatch. */
  PriceAddCurrencyMismatch = 'PRICE_ADD_CURRENCY_MISMATCH',
  /** Prices to add inputs must be unique by variant id. */
  PriceAddDuplicateInputForVariant = 'PRICE_ADD_DUPLICATE_INPUT_FOR_VARIANT',
  /** Fixed price's variant not found. */
  PriceAddVariantNotFound = 'PRICE_ADD_VARIANT_NOT_FOUND',
  /** Price is not fixed. */
  PriceDeletePriceNotFixed = 'PRICE_DELETE_PRICE_NOT_FIXED',
  /** Fixed price's variant not found. */
  PriceDeleteVariantNotFound = 'PRICE_DELETE_VARIANT_NOT_FOUND',
  /** Price List does not exist. */
  PriceListNotFound = 'PRICE_LIST_NOT_FOUND',
  /** Price list and quantity price break currency mismatch. */
  QuantityPriceBreakAddCurrencyMismatch = 'QUANTITY_PRICE_BREAK_ADD_CURRENCY_MISMATCH',
  /** Quantity price breaks to add inputs must be unique by variant id and minimum quantity. */
  QuantityPriceBreakAddDuplicateInputForVariantAndMin = 'QUANTITY_PRICE_BREAK_ADD_DUPLICATE_INPUT_FOR_VARIANT_AND_MIN',
  /** Failed to save quantity price break. */
  QuantityPriceBreakAddFailedToSave = 'QUANTITY_PRICE_BREAK_ADD_FAILED_TO_SAVE',
  /** Invalid quantity price break. */
  QuantityPriceBreakAddInvalid = 'QUANTITY_PRICE_BREAK_ADD_INVALID',
  /** Exceeded the allowed number of quantity price breaks per variant. */
  QuantityPriceBreakAddLimitExceeded = 'QUANTITY_PRICE_BREAK_ADD_LIMIT_EXCEEDED',
  /** Quantity price break miniumum is higher than the quantity rule maximum. */
  QuantityPriceBreakAddMinHigherThanQuantityRulesMax = 'QUANTITY_PRICE_BREAK_ADD_MIN_HIGHER_THAN_QUANTITY_RULES_MAX',
  /** Quantity price break miniumum is less than the quantity rule minimum. */
  QuantityPriceBreakAddMinLowerThanQuantityRulesMin = 'QUANTITY_PRICE_BREAK_ADD_MIN_LOWER_THAN_QUANTITY_RULES_MIN',
  /** Quantity price break miniumum is not multiple of the quantity rule increment. */
  QuantityPriceBreakAddMinNotAMultipleOfQuantityRulesIncrement = 'QUANTITY_PRICE_BREAK_ADD_MIN_NOT_A_MULTIPLE_OF_QUANTITY_RULES_INCREMENT',
  /** Quantity price break's fixed price not found. */
  QuantityPriceBreakAddPriceListPriceNotFound = 'QUANTITY_PRICE_BREAK_ADD_PRICE_LIST_PRICE_NOT_FOUND',
  /** Quantity price break variant not found. */
  QuantityPriceBreakAddVariantNotFound = 'QUANTITY_PRICE_BREAK_ADD_VARIANT_NOT_FOUND',
  /** Failed to delete quantity price break. */
  QuantityPriceBreakDeleteFailed = 'QUANTITY_PRICE_BREAK_DELETE_FAILED',
  /** Quantity price break not found. */
  QuantityPriceBreakDeleteNotFound = 'QUANTITY_PRICE_BREAK_DELETE_NOT_FOUND',
  /** Quantity rule catalog context not supported. */
  QuantityRuleAddCatalogContextNotSupported = 'QUANTITY_RULE_ADD_CATALOG_CONTEXT_NOT_SUPPORTED',
  /** Quantity rules to add inputs must be unique by variant id. */
  QuantityRuleAddDuplicateInputForVariant = 'QUANTITY_RULE_ADD_DUPLICATE_INPUT_FOR_VARIANT',
  /** Quantity rule increment is greater than minimum. */
  QuantityRuleAddIncrementIsGreaterThanMinimum = 'QUANTITY_RULE_ADD_INCREMENT_IS_GREATER_THAN_MINIMUM',
  /** Quantity rule increment is less than one. */
  QuantityRuleAddIncrementIsLessThanOne = 'QUANTITY_RULE_ADD_INCREMENT_IS_LESS_THAN_ONE',
  /** Quantity rule increment must be a multiple of the quantity price break minimum. */
  QuantityRuleAddIncrementNotAMultipleOfQuantityPriceBreakMin = 'QUANTITY_RULE_ADD_INCREMENT_NOT_A_MULTIPLE_OF_QUANTITY_PRICE_BREAK_MIN',
  /** Quantity rule maximum is less than one. */
  QuantityRuleAddMaximumIsLessThanOne = 'QUANTITY_RULE_ADD_MAXIMUM_IS_LESS_THAN_ONE',
  /** Quantity rule maximum is not a multiple of increment. */
  QuantityRuleAddMaximumNotAMultipleOfIncrement = 'QUANTITY_RULE_ADD_MAXIMUM_NOT_A_MULTIPLE_OF_INCREMENT',
  /** Quantity rule maximum is less than the quantity price break minimum. */
  QuantityRuleAddMaxLowerThanQuantityPriceBreakMin = 'QUANTITY_RULE_ADD_MAX_LOWER_THAN_QUANTITY_PRICE_BREAK_MIN',
  /** Quantity rule minimum is greater than maximum. */
  QuantityRuleAddMinimumGreaterThanMaximum = 'QUANTITY_RULE_ADD_MINIMUM_GREATER_THAN_MAXIMUM',
  /** Quantity rule minimum is less than one. */
  QuantityRuleAddMinimumIsLessThanOne = 'QUANTITY_RULE_ADD_MINIMUM_IS_LESS_THAN_ONE',
  /** Quantity rule minimum is not a multiple of increment. */
  QuantityRuleAddMinimumNotAMultipleOfIncrement = 'QUANTITY_RULE_ADD_MINIMUM_NOT_A_MULTIPLE_OF_INCREMENT',
  /** Quantity rule minimum is higher than the quantity price break minimum. */
  QuantityRuleAddMinHigherThanQuantityPriceBreakMin = 'QUANTITY_RULE_ADD_MIN_HIGHER_THAN_QUANTITY_PRICE_BREAK_MIN',
  /** Quantity rule variant not found. */
  QuantityRuleAddVariantNotFound = 'QUANTITY_RULE_ADD_VARIANT_NOT_FOUND',
  /** Quantity rule not found. */
  QuantityRuleDeleteRuleNotFound = 'QUANTITY_RULE_DELETE_RULE_NOT_FOUND',
  /** Quantity rule variant not found. */
  QuantityRuleDeleteVariantNotFound = 'QUANTITY_RULE_DELETE_VARIANT_NOT_FOUND'
}

/** The quantity rule for the product variant in a given context. */
export type Shopify_QuantityRule = {
  __typename?: 'Shopify_QuantityRule';
  /**
   * The value that specifies the quantity increment between minimum and maximum of the rule.
   * Only quantities divisible by this value will be considered valid.
   *
   * The increment must be lower than or equal to the minimum and the maximum, and both minimum and maximum
   * must be divisible by this value.
   */
  increment: Scalars['Int']['output'];
  /** Whether the quantity rule fields match one increment, one minimum and no maximum. */
  isDefault: Scalars['Boolean']['output'];
  /**
   * An optional value that defines the highest allowed quantity purchased by the customer.
   * If defined, maximum must be lower than or equal to the minimum and must be a multiple of the increment.
   */
  maximum?: Maybe<Scalars['Int']['output']>;
  /**
   * The value that defines the lowest allowed quantity purchased by the customer.
   * The minimum must be a multiple of the quantity rule's increment.
   */
  minimum: Scalars['Int']['output'];
  /** Whether the values of the quantity rule were explicitly set. */
  originType: Shopify_QuantityRuleOriginType;
  /** The product variant for which the quantity rule is applied. */
  productVariant: Shopify_ProductVariant;
};

/** An auto-generated type for paginating through multiple QuantityRules. */
export type Shopify_QuantityRuleConnection = {
  __typename?: 'Shopify_QuantityRuleConnection';
  /** A list of edges. */
  edges: Array<Shopify_QuantityRuleEdge>;
  /** A list of the nodes contained in QuantityRuleEdge. */
  nodes: Array<Shopify_QuantityRule>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one QuantityRule and a cursor during pagination. */
export type Shopify_QuantityRuleEdge = {
  __typename?: 'Shopify_QuantityRuleEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of QuantityRuleEdge. */
  node: Shopify_QuantityRule;
};

/** The origin of quantity rule on a price list. */
export enum Shopify_QuantityRuleOriginType {
  /** Quantity rule is explicitly defined. */
  Fixed = 'FIXED',
  /** Quantity rule falls back to the relative rule. */
  Relative = 'RELATIVE'
}

/** An error for a failed quantity rule operation. */
export type Shopify_QuantityRuleUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_QuantityRuleUserError';
  /** The error code. */
  code?: Maybe<Shopify_QuantityRuleUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `QuantityRuleUserError`. */
export enum Shopify_QuantityRuleUserErrorCode {
  /** The input value is blank. */
  Blank = 'BLANK',
  /** Quantity rules can be associated only with company location catalogs. */
  CatalogContextDoesNotSupportQuantityRules = 'CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_RULES',
  /** Quantity rule inputs must be unique by variant id. */
  DuplicateInputForVariant = 'DUPLICATE_INPUT_FOR_VARIANT',
  /** Something went wrong when trying to save the quantity rule. Please try again later. */
  GenericError = 'GENERIC_ERROR',
  /** Value must be greater than or equal to 1. */
  GreaterThanOrEqualTo = 'GREATER_THAN_OR_EQUAL_TO',
  /** Increment must be lower than or equal to the minimum. */
  IncrementIsGreaterThanMinimum = 'INCREMENT_IS_GREATER_THAN_MINIMUM',
  /** Increment must be a multiple of all quantity price break minimums associated with this variant in the specified price list. */
  IncrementNotAMultipleOfQuantityPriceBreakMinimum = 'INCREMENT_NOT_A_MULTIPLE_OF_QUANTITY_PRICE_BREAK_MINIMUM',
  /** Maximum must be greater than or equal to all quantity price break minimums associated with this variant in the specified price list. */
  MaximumIsLowerThanQuantityPriceBreakMinimum = 'MAXIMUM_IS_LOWER_THAN_QUANTITY_PRICE_BREAK_MINIMUM',
  /** The maximum must be a multiple of the increment. */
  MaximumNotMultipleOfIncrement = 'MAXIMUM_NOT_MULTIPLE_OF_INCREMENT',
  /** Minimum must be lower than or equal to the maximum. */
  MinimumIsGreaterThanMaximum = 'MINIMUM_IS_GREATER_THAN_MAXIMUM',
  /** Minimum must be less than or equal to all quantity price break minimums associated with this variant in the specified price list. */
  MinimumIsHigherThanQuantityPriceBreakMinimum = 'MINIMUM_IS_HIGHER_THAN_QUANTITY_PRICE_BREAK_MINIMUM',
  /** The minimum must be a multiple of the increment. */
  MinimumNotMultipleOfIncrement = 'MINIMUM_NOT_MULTIPLE_OF_INCREMENT',
  /** Price list does not exist. */
  PriceListDoesNotExist = 'PRICE_LIST_DOES_NOT_EXIST',
  /** Product variant ID does not exist. */
  ProductVariantDoesNotExist = 'PRODUCT_VARIANT_DOES_NOT_EXIST',
  /** Quantity rule for variant associated with the price list provided does not exist. */
  VariantQuantityRuleDoesNotExist = 'VARIANT_QUANTITY_RULE_DOES_NOT_EXIST'
}

/** The record of the line items and transactions that were refunded to a customer, along with restocking instructions for refunded line items. */
export type Shopify_Refund = Shopify_LegacyInteroperability & Shopify_Node & {
  __typename?: 'Shopify_Refund';
  /** The date and time when the refund was created. */
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  /** A list of the refunded duties as part of this refund. */
  duties?: Maybe<Array<Shopify_RefundDuty>>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['Shopify_UnsignedInt64']['output'];
  /** The optional note associated with the refund. */
  note?: Maybe<Scalars['String']['output']>;
  /** The order associated with the refund. */
  order: Shopify_Order;
  /** The `RefundLineItem` resources attached to the refund. */
  refundLineItems: Shopify_RefundLineItemConnection;
  /** The `RefundShippingLine` resources attached to the refund. */
  refundShippingLines: Shopify_RefundShippingLineConnection;
  /** The return associated with the refund. */
  return?: Maybe<Shopify_Return>;
  /** The staff member who created the refund. */
  staffMember?: Maybe<Shopify_StaffMember>;
  /**
   * The total amount across all transactions for the refund.
   * @deprecated Use `totalRefundedSet` instead.
   */
  totalRefunded: Shopify_MoneyV2;
  /** The total amount across all transactions for the refund, in shop and presentment currencies. */
  totalRefundedSet: Shopify_MoneyBag;
  /** The transactions associated with the refund. */
  transactions: Shopify_OrderTransactionConnection;
  /** The date and time when the refund was updated. */
  updatedAt: Scalars['DateTime']['output'];
};


/** The record of the line items and transactions that were refunded to a customer, along with restocking instructions for refunded line items. */
export type Shopify_RefundRefundLineItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** The record of the line items and transactions that were refunded to a customer, along with restocking instructions for refunded line items. */
export type Shopify_RefundRefundShippingLinesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** The record of the line items and transactions that were refunded to a customer, along with restocking instructions for refunded line items. */
export type Shopify_RefundTransactionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** An agreement between the merchant and customer to refund all or a portion of the order. */
export type Shopify_RefundAgreement = Shopify_SalesAgreement & {
  __typename?: 'Shopify_RefundAgreement';
  /** The application that created the agreement. */
  app?: Maybe<Shopify_App>;
  /** The date and time at which the agreement occured. */
  happenedAt: Scalars['DateTime']['output'];
  /** The unique ID for the agreement. */
  id: Scalars['ID']['output'];
  /** The reason the agremeent was created. */
  reason: Shopify_OrderActionType;
  /** The refund associated with the agreement. */
  refund: Shopify_Refund;
  /** The sales associated with the agreement. */
  sales: Shopify_SaleConnection;
  /** The staff member associated with the agreement. */
  user?: Maybe<Shopify_StaffMember>;
};


/** An agreement between the merchant and customer to refund all or a portion of the order. */
export type Shopify_RefundAgreementSalesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** An auto-generated type for paginating through multiple Refunds. */
export type Shopify_RefundConnection = {
  __typename?: 'Shopify_RefundConnection';
  /** A list of edges. */
  edges: Array<Shopify_RefundEdge>;
  /** A list of the nodes contained in RefundEdge. */
  nodes: Array<Shopify_Refund>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** Represents a refunded duty. */
export type Shopify_RefundDuty = {
  __typename?: 'Shopify_RefundDuty';
  /** The amount of a refunded duty in shop and presentment currencies. */
  amountSet: Shopify_MoneyBag;
  /** The duty associated with this refunded duty. */
  originalDuty?: Maybe<Shopify_Duty>;
};

/** The input fields required to reimburse duties on a refund. */
export type Shopify_RefundDutyInput = {
  /** The ID of the duty in the refund. */
  dutyId: Scalars['ID']['input'];
  /** The type of refund for this duty. */
  refundType?: InputMaybe<Shopify_RefundDutyRefundType>;
};

/** The type of refund to perform for a particular refund duty. */
export enum Shopify_RefundDutyRefundType {
  /** The duty is fully refunded. */
  Full = 'FULL',
  /** The duty is proportionally refunded based on the quantity of the refunded line item. */
  Proportional = 'PROPORTIONAL'
}

/** An auto-generated type which holds one Refund and a cursor during pagination. */
export type Shopify_RefundEdge = {
  __typename?: 'Shopify_RefundEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of RefundEdge. */
  node: Shopify_Refund;
};

/** A line item that's included in a refund. */
export type Shopify_RefundLineItem = {
  __typename?: 'Shopify_RefundLineItem';
  /** The `LineItem` resource associated to the refunded line item. */
  lineItem: Shopify_LineItem;
  /** The inventory restock location. */
  location?: Maybe<Shopify_Location>;
  /**
   * The price of a refunded line item.
   * @deprecated Use `priceSet` instead.
   */
  price: Scalars['Shopify_Money']['output'];
  /** The price of a refunded line item in shop and presentment currencies. */
  priceSet: Shopify_MoneyBag;
  /** The quantity of a refunded line item. */
  quantity: Scalars['Int']['output'];
  /** The type of restock for the refunded line item. */
  restockType: Shopify_RefundLineItemRestockType;
  /** Whether the refunded line item was restocked. Not applicable in the context of a SuggestedRefund. */
  restocked: Scalars['Boolean']['output'];
  /**
   * The subtotal price of a refunded line item.
   * @deprecated Use `subtotalSet` instead.
   */
  subtotal: Scalars['Shopify_Money']['output'];
  /** The subtotal price of a refunded line item in shop and presentment currencies. */
  subtotalSet: Shopify_MoneyBag;
  /**
   * The total tax charged on a refunded line item.
   * @deprecated Use `totalTaxSet` instead.
   */
  totalTax: Scalars['Shopify_Money']['output'];
  /** The total tax charged on a refunded line item in shop and presentment currencies. */
  totalTaxSet: Shopify_MoneyBag;
};

/** An auto-generated type for paginating through multiple RefundLineItems. */
export type Shopify_RefundLineItemConnection = {
  __typename?: 'Shopify_RefundLineItemConnection';
  /** A list of edges. */
  edges: Array<Shopify_RefundLineItemEdge>;
  /** A list of the nodes contained in RefundLineItemEdge. */
  nodes: Array<Shopify_RefundLineItem>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one RefundLineItem and a cursor during pagination. */
export type Shopify_RefundLineItemEdge = {
  __typename?: 'Shopify_RefundLineItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of RefundLineItemEdge. */
  node: Shopify_RefundLineItem;
};

/** The input fields required to reimburse line items on a refund. */
export type Shopify_RefundLineItemInput = {
  /** The ID of the line item in the refund. */
  lineItemId: Scalars['ID']['input'];
  /** The intended location for restocking. If the `restockType` is set to `NO_RESTOCK`, then this value is empty.` */
  locationId?: InputMaybe<Scalars['ID']['input']>;
  /** The quantity of the associated line item to be refunded. */
  quantity: Scalars['Int']['input'];
  /** The type of restock for this line item. */
  restockType?: InputMaybe<Shopify_RefundLineItemRestockType>;
};

/** The type of restock performed for a particular refund line item. */
export enum Shopify_RefundLineItemRestockType {
  /** The refund line item was canceled. Use this when restocking unfulfilled line items. */
  Cancel = 'CANCEL',
  /** Deprecated. The refund line item was restocked, without specifically beingidentified as a return or cancelation. This value is not accepted when creating new refunds. */
  LegacyRestock = 'LEGACY_RESTOCK',
  /** Refund line item was not restocked. */
  NoRestock = 'NO_RESTOCK',
  /** The refund line item was returned. Use this when restocking line items that were fulfilled. */
  Return = 'RETURN'
}

/** The input fields for the shipping cost to refund. */
export type Shopify_RefundShippingInput = {
  /** Whether to refund the full shipping amount. */
  fullRefund?: InputMaybe<Scalars['Boolean']['input']>;
  /**
   * The input fields required to refund shipping cost, in the presentment currency of the order.
   * This overrides the `fullRefund` argument.
   */
  shippingRefundAmount?: InputMaybe<Shopify_MoneyInput>;
};

/** A shipping line item that's included in a refund. */
export type Shopify_RefundShippingLine = Shopify_Node & {
  __typename?: 'Shopify_RefundShippingLine';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The `ShippingLine` resource associated to the refunded shipping line item. */
  shippingLine: Shopify_ShippingLine;
};

/** An auto-generated type for paginating through multiple RefundShippingLines. */
export type Shopify_RefundShippingLineConnection = {
  __typename?: 'Shopify_RefundShippingLineConnection';
  /** A list of edges. */
  edges: Array<Shopify_RefundShippingLineEdge>;
  /** A list of the nodes contained in RefundShippingLineEdge. */
  nodes: Array<Shopify_RefundShippingLine>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one RefundShippingLine and a cursor during pagination. */
export type Shopify_RefundShippingLineEdge = {
  __typename?: 'Shopify_RefundShippingLineEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of RefundShippingLineEdge. */
  node: Shopify_RefundShippingLine;
};

/**
 * An alert message that appears in the Shopify admin about a problem with a store resource, with 1 or more actions to take. For example, you could use an alert to indicate that you're not charging taxes on some product variants.
 * They can optionally have a specific icon and be dismissed by merchants.
 */
export type Shopify_ResourceAlert = {
  __typename?: 'Shopify_ResourceAlert';
  /**
   * Buttons in the alert that link to related information.
   * For example, _Edit variants_.
   */
  actions: Array<Shopify_ResourceAlertAction>;
  /** The secondary text in the alert that includes further information or instructions about how to solve a problem. */
  content: Scalars['Shopify_HTML']['output'];
  /**
   * Unique identifier that appears when an alert is manually closed by the merchant.
   * Most alerts can't be manually closed.
   */
  dismissibleHandle?: Maybe<Scalars['String']['output']>;
  /** An icon that's optionally displayed with the alert. */
  icon?: Maybe<Shopify_ResourceAlertIcon>;
  /** Indication of how important the alert is. */
  severity: Shopify_ResourceAlertSeverity;
  /** The primary text in the alert that includes information or describes the problem. */
  title: Scalars['String']['output'];
};

/** An action associated to a resource alert, such as editing variants. */
export type Shopify_ResourceAlertAction = {
  __typename?: 'Shopify_ResourceAlertAction';
  /** Whether the action appears as a button or as a link. */
  primary: Scalars['Boolean']['output'];
  /** Resource for the action to show. */
  show?: Maybe<Scalars['String']['output']>;
  /** The text for the button in the alert. For example, _Edit variants_. */
  title: Scalars['String']['output'];
  /** The target URL that the button links to. */
  url: Scalars['Shopify_URL']['output'];
};

/** The available icons for resource alerts. */
export enum Shopify_ResourceAlertIcon {
  /** A checkmark inside a circle. */
  CheckmarkCircle = 'CHECKMARK_CIRCLE',
  /** A lowercase `i` inside a circle. */
  InformationCircle = 'INFORMATION_CIRCLE'
}

/** The possible severity levels for a resource alert. */
export enum Shopify_ResourceAlertSeverity {
  /** Indicates a critical alert. For example, a blocked app. */
  Critical = 'CRITICAL',
  /** Indicates a neutral alert. For example, an accepted dispute. */
  Default = 'DEFAULT',
  /** @deprecated `ERROR` severity is being deprecated in favour of `WARNING` or `CRITICAL` instead. */
  Error = 'ERROR',
  /** Indicates an informative alert. For example, an escalated dispute. */
  Info = 'INFO',
  /** Indicates a success alert. For example, a winning a dispute. */
  Success = 'SUCCESS',
  /** Indicates an informative alert. For example, a new dispute. */
  Warning = 'WARNING'
}

/** Represents feedback from apps about a resource, and the steps required to set up the apps on the shop. */
export type Shopify_ResourceFeedback = {
  __typename?: 'Shopify_ResourceFeedback';
  /**
   * Feedback from an app about the steps a merchant needs to take to set up the app on their store.
   * @deprecated Use `details` instead.
   */
  appFeedback: Array<Shopify_AppFeedback>;
  /** List of AppFeedback detailing issues regarding a resource. */
  details: Array<Shopify_AppFeedback>;
  /** Summary of resource feedback pertaining to the resource. */
  summary: Scalars['String']['output'];
};

/** Represents a merchandising background operation interface. */
export type Shopify_ResourceOperation = {
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The count of processed rows, summing imported, failed, and skipped rows. */
  processedRowCount?: Maybe<Scalars['Int']['output']>;
  /** Represents a rows objects within this background operation. */
  rowCount?: Maybe<Shopify_RowCount>;
  /** The status of this operation. */
  status: Shopify_ResourceOperationStatus;
};

/** Represents the state of this catalog operation. */
export enum Shopify_ResourceOperationStatus {
  /** Operation is currently running. */
  Active = 'ACTIVE',
  /** Operation is complete. */
  Complete = 'COMPLETE',
  /** Operation has been created. */
  Created = 'CREATED'
}

/**
 * A resource publication represents information about the publication of a resource.
 * An instance of `ResourcePublication`, unlike `ResourcePublicationV2`, can be neither published or scheduled to be published.
 *
 * See [ResourcePublicationV2](/api/admin-graphql/latest/objects/ResourcePublicationV2) for more context.
 */
export type Shopify_ResourcePublication = {
  __typename?: 'Shopify_ResourcePublication';
  /**
   * The channel the resource publication is published to.
   * @deprecated Use `publication` instead.
   */
  channel: Shopify_Channel;
  /**
   * Whether the resource publication is published. Also returns true if the resource publication is scheduled to be published.
   * If false, then the resource publication is neither published nor scheduled to be published.
   */
  isPublished: Scalars['Boolean']['output'];
  /** The publication the resource publication is published to. */
  publication: Shopify_Publication;
  /**
   * The date that the resource publication was or is going to be published to the publication.
   * If the product isn't published, then this field returns an epoch timestamp.
   */
  publishDate: Scalars['DateTime']['output'];
  /** The resource published to the publication. */
  publishable: Shopify_Publishable;
};

/** An auto-generated type for paginating through multiple ResourcePublications. */
export type Shopify_ResourcePublicationConnection = {
  __typename?: 'Shopify_ResourcePublicationConnection';
  /** A list of edges. */
  edges: Array<Shopify_ResourcePublicationEdge>;
  /** A list of the nodes contained in ResourcePublicationEdge. */
  nodes: Array<Shopify_ResourcePublication>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one ResourcePublication and a cursor during pagination. */
export type Shopify_ResourcePublicationEdge = {
  __typename?: 'Shopify_ResourcePublicationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of ResourcePublicationEdge. */
  node: Shopify_ResourcePublication;
};

/**
 * A resource publication represents information about the publication of a resource.
 * Unlike `ResourcePublication`, an instance of `ResourcePublicationV2` can't be unpublished. It must either be published or scheduled to be published.
 *
 * See [ResourcePublication](/api/admin-graphql/latest/objects/ResourcePublication) for more context.
 */
export type Shopify_ResourcePublicationV2 = {
  __typename?: 'Shopify_ResourcePublicationV2';
  /**
   * Whether the resource publication is published. If true, then the resource publication is published to the publication.
   * If false, then the resource publication is staged to be published to the publication.
   */
  isPublished: Scalars['Boolean']['output'];
  /** The publication the resource publication is published to. */
  publication: Shopify_Publication;
  /** The date that the resource publication was or is going to be published to the publication. */
  publishDate?: Maybe<Scalars['DateTime']['output']>;
  /** The resource published to the publication. */
  publishable: Shopify_Publishable;
};

/** An auto-generated type for paginating through multiple ResourcePublicationV2s. */
export type Shopify_ResourcePublicationV2Connection = {
  __typename?: 'Shopify_ResourcePublicationV2Connection';
  /** A list of edges. */
  edges: Array<Shopify_ResourcePublicationV2Edge>;
  /** A list of the nodes contained in ResourcePublicationV2Edge. */
  nodes: Array<Shopify_ResourcePublicationV2>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one ResourcePublicationV2 and a cursor during pagination. */
export type Shopify_ResourcePublicationV2Edge = {
  __typename?: 'Shopify_ResourcePublicationV2Edge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of ResourcePublicationV2Edge. */
  node: Shopify_ResourcePublicationV2;
};

/**
 * A restocking fee is a fee captured as part of a return to cover the costs of handling a return line item.
 * Typically, this would cover the costs of inspecting, repackaging, and restocking the item.
 */
export type Shopify_RestockingFee = Shopify_Fee & {
  __typename?: 'Shopify_RestockingFee';
  /** The amount of the restocking fee, in shop and presentment currencies. */
  amountSet: Shopify_MoneyBag;
  /** The unique ID for the Fee. */
  id: Scalars['ID']['output'];
  /** The value of the fee as a percentage. */
  percentage: Scalars['Float']['output'];
};

/** Represents a return. */
export type Shopify_Return = Shopify_Node & {
  __typename?: 'Shopify_Return';
  /** Additional information about the declined return. */
  decline?: Maybe<Shopify_ReturnDecline>;
  /** The exchange line items attached to the return. */
  exchangeLineItems: Shopify_ExchangeLineItemConnection;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The name of the return. */
  name: Scalars['String']['output'];
  /** The order that the return belongs to. */
  order: Shopify_Order;
  /** The list of refunds associated with the return. */
  refunds: Shopify_RefundConnection;
  /** The return line items attached to the return. */
  returnLineItems: Shopify_ReturnLineItemConnection;
  /** The return shipping fees for the return. */
  returnShippingFees: Array<Shopify_ReturnShippingFee>;
  /** The list of reverse fulfillment orders for the return. */
  reverseFulfillmentOrders: Shopify_ReverseFulfillmentOrderConnection;
  /** The status of the return. */
  status: Shopify_ReturnStatus;
  /** A suggested refund for the return. */
  suggestedRefund?: Maybe<Shopify_SuggestedReturnRefund>;
  /** The sum of all return line item quantities for the return. */
  totalQuantity: Scalars['Int']['output'];
};


/** Represents a return. */
export type Shopify_ReturnExchangeLineItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  includeRemovedItems?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a return. */
export type Shopify_ReturnRefundsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a return. */
export type Shopify_ReturnReturnLineItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a return. */
export type Shopify_ReturnReverseFulfillmentOrdersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a return. */
export type Shopify_ReturnSuggestedRefundArgs = {
  refundDuties?: InputMaybe<Array<Shopify_RefundDutyInput>>;
  refundShipping?: InputMaybe<Shopify_RefundShippingInput>;
  returnRefundLineItems: Array<Shopify_ReturnRefundLineItemInput>;
};

/** An agreement between the merchant and customer for a return. */
export type Shopify_ReturnAgreement = Shopify_SalesAgreement & {
  __typename?: 'Shopify_ReturnAgreement';
  /** The application that created the agreement. */
  app?: Maybe<Shopify_App>;
  /** The date and time at which the agreement occured. */
  happenedAt: Scalars['DateTime']['output'];
  /** The unique ID for the agreement. */
  id: Scalars['ID']['output'];
  /** The reason the agremeent was created. */
  reason: Shopify_OrderActionType;
  /** The return associated with the agreement. */
  return: Shopify_Return;
  /** The sales associated with the agreement. */
  sales: Shopify_SaleConnection;
  /** The staff member associated with the agreement. */
  user?: Maybe<Shopify_StaffMember>;
};


/** An agreement between the merchant and customer for a return. */
export type Shopify_ReturnAgreementSalesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** An auto-generated type for paginating through multiple Returns. */
export type Shopify_ReturnConnection = {
  __typename?: 'Shopify_ReturnConnection';
  /** A list of edges. */
  edges: Array<Shopify_ReturnEdge>;
  /** A list of the nodes contained in ReturnEdge. */
  nodes: Array<Shopify_Return>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** Additional information about why a merchant declined the customer's return request. */
export type Shopify_ReturnDecline = {
  __typename?: 'Shopify_ReturnDecline';
  /**
   * The notification message sent to the customer about their declined return request.
   * Maximum length: 500 characters.
   */
  note?: Maybe<Scalars['String']['output']>;
  /** The reason the customer's return request was declined. */
  reason: Shopify_ReturnDeclineReason;
};

/** The reason why the merchant declined a customer's return request. */
export enum Shopify_ReturnDeclineReason {
  /** The return contains final sale items. */
  FinalSale = 'FINAL_SALE',
  /** The return is declined for another reason. */
  Other = 'OTHER',
  /** The return period has ended. */
  ReturnPeriodEnded = 'RETURN_PERIOD_ENDED'
}

/** An auto-generated type which holds one Return and a cursor during pagination. */
export type Shopify_ReturnEdge = {
  __typename?: 'Shopify_ReturnEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of ReturnEdge. */
  node: Shopify_Return;
};

/** Possible error codes that can be returned by `ReturnUserError`. */
export enum Shopify_ReturnErrorCode {
  /** The requested resource already exists. */
  AlreadyExists = 'ALREADY_EXISTS',
  /** The input value is blank. */
  Blank = 'BLANK',
  /** A requested resource could not be created. */
  CreationFailed = 'CREATION_FAILED',
  /** The input value should be equal to the value allowed. */
  EqualTo = 'EQUAL_TO',
  /** A required feature is not enabled. */
  FeatureNotEnabled = 'FEATURE_NOT_ENABLED',
  /** The input value should be greater than the minimum allowed value. */
  GreaterThan = 'GREATER_THAN',
  /** The input value should be greater than or equal to the minimum value allowed. */
  GreaterThanOrEqualTo = 'GREATER_THAN_OR_EQUAL_TO',
  /** The input value isn't included in the list. */
  Inclusion = 'INCLUSION',
  /** Unexpected internal error happened. */
  InternalError = 'INTERNAL_ERROR',
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** A resource was not in the correct state for the operation to succeed. */
  InvalidState = 'INVALID_STATE',
  /** The input value should be less than the maximum value allowed. */
  LessThan = 'LESS_THAN',
  /** The input value should be less than or equal to the maximum value allowed. */
  LessThanOrEqualTo = 'LESS_THAN_OR_EQUAL_TO',
  /** A requested notification could not be sent. */
  NotificationFailed = 'NOTIFICATION_FAILED',
  /** The input value is not a number. */
  NotANumber = 'NOT_A_NUMBER',
  /** A requested item is not editable. */
  NotEditable = 'NOT_EDITABLE',
  /** A requested item could not be found. */
  NotFound = 'NOT_FOUND',
  /** The input value needs to be blank. */
  Present = 'PRESENT',
  /** The input value is already taken. */
  Taken = 'TAKEN',
  /** The input value is too big. */
  TooBig = 'TOO_BIG',
  /** The input value is too long. */
  TooLong = 'TOO_LONG',
  /** Too many arguments provided. */
  TooManyArguments = 'TOO_MANY_ARGUMENTS',
  /** The input value is too short. */
  TooShort = 'TOO_SHORT',
  /** The input value is the wrong length. */
  WrongLength = 'WRONG_LENGTH'
}

/** A return line item. */
export type Shopify_ReturnLineItem = Shopify_Node & {
  __typename?: 'Shopify_ReturnLineItem';
  /** A note from the customer that describes the item to be returned. Maximum length: 300 characters. */
  customerNote?: Maybe<Scalars['String']['output']>;
  /** The fulfillment line item from which items are returned. */
  fulfillmentLineItem: Shopify_FulfillmentLineItem;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The quantity being returned. */
  quantity: Scalars['Int']['output'];
  /** The quantity that can be refunded. */
  refundableQuantity: Scalars['Int']['output'];
  /** The quantity that was refunded. */
  refundedQuantity: Scalars['Int']['output'];
  /** The restocking fee for the return line item. */
  restockingFee?: Maybe<Shopify_RestockingFee>;
  /** The reason for returning the item. */
  returnReason: Shopify_ReturnReason;
  /** Additional information about the reason for the return. Maximum length: 255 characters. */
  returnReasonNote: Scalars['String']['output'];
  /** The total weight of the item. */
  totalWeight?: Maybe<Shopify_Weight>;
  /** The total line price after all discounts on the line item, including both line item level discounts and code-based line item discounts, are applied. */
  withCodeDiscountedTotalPriceSet: Shopify_MoneyBag;
};

/** An auto-generated type for paginating through multiple ReturnLineItems. */
export type Shopify_ReturnLineItemConnection = {
  __typename?: 'Shopify_ReturnLineItemConnection';
  /** A list of edges. */
  edges: Array<Shopify_ReturnLineItemEdge>;
  /** A list of the nodes contained in ReturnLineItemEdge. */
  nodes: Array<Shopify_ReturnLineItem>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one ReturnLineItem and a cursor during pagination. */
export type Shopify_ReturnLineItemEdge = {
  __typename?: 'Shopify_ReturnLineItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of ReturnLineItemEdge. */
  node: Shopify_ReturnLineItem;
};

/** The reason for returning the return line item. */
export enum Shopify_ReturnReason {
  /** The item is returned because the buyer did not like the color. */
  Color = 'COLOR',
  /** The item is returned because it is damaged or defective. */
  Defective = 'DEFECTIVE',
  /** The item is returned because it was not as described. */
  NotAsDescribed = 'NOT_AS_DESCRIBED',
  /** The item is returned for another reason. For this value, a return reason note is also provided. */
  Other = 'OTHER',
  /** The item is returned because the size was too large. */
  SizeTooLarge = 'SIZE_TOO_LARGE',
  /** The item is returned because the size was too small. */
  SizeTooSmall = 'SIZE_TOO_SMALL',
  /** The item is returned because the buyer did not like the style. */
  Style = 'STYLE',
  /** The item is returned because of an unknown reason. */
  Unknown = 'UNKNOWN',
  /** The item is returned because the customer changed their mind. */
  Unwanted = 'UNWANTED',
  /** The item is returned because the customer received the wrong one. */
  WrongItem = 'WRONG_ITEM'
}

/** The input fields for a return refund line item. */
export type Shopify_ReturnRefundLineItemInput = {
  /** The quantity of the return line item to be refunded. */
  quantity: Scalars['Int']['input'];
  /** The ID of the return line item to be refunded. */
  returnLineItemId: Scalars['ID']['input'];
};

/** A return shipping fee is a fee captured as part of a return to cover the costs of shipping the return. */
export type Shopify_ReturnShippingFee = Shopify_Fee & {
  __typename?: 'Shopify_ReturnShippingFee';
  /** The amount of the return shipping fee, in shop and presentment currencies. */
  amountSet: Shopify_MoneyBag;
  /** The unique ID for the Fee. */
  id: Scalars['ID']['output'];
};

/** The status of a return. */
export enum Shopify_ReturnStatus {
  /** The return has been canceled. */
  Canceled = 'CANCELED',
  /** The return has been completed. */
  Closed = 'CLOSED',
  /** The return was declined. */
  Declined = 'DECLINED',
  /** The return is in progress. */
  Open = 'OPEN',
  /** The return was requested. */
  Requested = 'REQUESTED'
}

/** An error that occurs during the execution of a return mutation. */
export type Shopify_ReturnUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_ReturnUserError';
  /** The error code. */
  code?: Maybe<Shopify_ReturnErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/**
 * A returnable fulfillment, which is an order that has been delivered
 * and is eligible to be returned to the merchant.
 */
export type Shopify_ReturnableFulfillment = Shopify_Node & {
  __typename?: 'Shopify_ReturnableFulfillment';
  /** The fulfillment that the returnable fulfillment refers to. */
  fulfillment: Shopify_Fulfillment;
  /** The unique ID of the Returnable Fulfillment. */
  id: Scalars['ID']['output'];
  /** The list of returnable fulfillment line items. */
  returnableFulfillmentLineItems: Shopify_ReturnableFulfillmentLineItemConnection;
};


/**
 * A returnable fulfillment, which is an order that has been delivered
 * and is eligible to be returned to the merchant.
 */
export type Shopify_ReturnableFulfillmentReturnableFulfillmentLineItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** A returnable fulfillment line item. */
export type Shopify_ReturnableFulfillmentLineItem = {
  __typename?: 'Shopify_ReturnableFulfillmentLineItem';
  /** The fulfillment line item that can be returned. */
  fulfillmentLineItem: Shopify_FulfillmentLineItem;
  /** The quantity available to be returned. */
  quantity: Scalars['Int']['output'];
};

/** An auto-generated type for paginating through multiple ReturnableFulfillmentLineItems. */
export type Shopify_ReturnableFulfillmentLineItemConnection = {
  __typename?: 'Shopify_ReturnableFulfillmentLineItemConnection';
  /** A list of edges. */
  edges: Array<Shopify_ReturnableFulfillmentLineItemEdge>;
  /** A list of the nodes contained in ReturnableFulfillmentLineItemEdge. */
  nodes: Array<Shopify_ReturnableFulfillmentLineItem>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one ReturnableFulfillmentLineItem and a cursor during pagination. */
export type Shopify_ReturnableFulfillmentLineItemEdge = {
  __typename?: 'Shopify_ReturnableFulfillmentLineItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of ReturnableFulfillmentLineItemEdge. */
  node: Shopify_ReturnableFulfillmentLineItem;
};

/**
 * A reverse delivery is a post-fulfillment object that represents a buyer sending a package to a merchant.
 * For example, a buyer requests a return, and a merchant sends the buyer a shipping label.
 * The reverse delivery contains the context of the items sent back, how they're being sent back
 * (for example, a shipping label), and the current state of the delivery (tracking information).
 */
export type Shopify_ReverseDelivery = Shopify_Node & {
  __typename?: 'Shopify_ReverseDelivery';
  /** The deliverable associated with the reverse delivery. */
  deliverable?: Maybe<Shopify_ReverseDeliveryDeliverable>;
  /** The ID of the reverse delivery. */
  id: Scalars['ID']['output'];
  /** The reverse delivery line items attached to the reverse delivery. */
  reverseDeliveryLineItems: Shopify_ReverseDeliveryLineItemConnection;
  /** The `ReverseFulfillmentOrder` associated with the reverse delivery. */
  reverseFulfillmentOrder: Shopify_ReverseFulfillmentOrder;
};


/**
 * A reverse delivery is a post-fulfillment object that represents a buyer sending a package to a merchant.
 * For example, a buyer requests a return, and a merchant sends the buyer a shipping label.
 * The reverse delivery contains the context of the items sent back, how they're being sent back
 * (for example, a shipping label), and the current state of the delivery (tracking information).
 */
export type Shopify_ReverseDeliveryReverseDeliveryLineItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** An auto-generated type for paginating through multiple ReverseDeliveries. */
export type Shopify_ReverseDeliveryConnection = {
  __typename?: 'Shopify_ReverseDeliveryConnection';
  /** A list of edges. */
  edges: Array<Shopify_ReverseDeliveryEdge>;
  /** A list of the nodes contained in ReverseDeliveryEdge. */
  nodes: Array<Shopify_ReverseDelivery>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** The delivery method and artifacts associated with a reverse delivery. */
export type Shopify_ReverseDeliveryDeliverable = Shopify_ReverseDeliveryShippingDeliverable;

/** An auto-generated type which holds one ReverseDelivery and a cursor during pagination. */
export type Shopify_ReverseDeliveryEdge = {
  __typename?: 'Shopify_ReverseDeliveryEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of ReverseDeliveryEdge. */
  node: Shopify_ReverseDelivery;
};

/** The return label file information for a reverse delivery. */
export type Shopify_ReverseDeliveryLabelV2 = {
  __typename?: 'Shopify_ReverseDeliveryLabelV2';
  /** The date and time when the reverse delivery label was created. */
  createdAt: Scalars['DateTime']['output'];
  /** A public link that can be used to download the label image. */
  publicFileUrl?: Maybe<Scalars['Shopify_URL']['output']>;
  /** The date and time when the reverse delivery label was updated. */
  updatedAt: Scalars['DateTime']['output'];
};

/** The details about a reverse delivery line item. */
export type Shopify_ReverseDeliveryLineItem = Shopify_Node & {
  __typename?: 'Shopify_ReverseDeliveryLineItem';
  /** The dispositions of the item. */
  dispositions: Array<Shopify_ReverseFulfillmentOrderDisposition>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The expected number of units. */
  quantity: Scalars['Int']['output'];
  /** The corresponding reverse fulfillment order line item. */
  reverseFulfillmentOrderLineItem: Shopify_ReverseFulfillmentOrderLineItem;
};

/** An auto-generated type for paginating through multiple ReverseDeliveryLineItems. */
export type Shopify_ReverseDeliveryLineItemConnection = {
  __typename?: 'Shopify_ReverseDeliveryLineItemConnection';
  /** A list of edges. */
  edges: Array<Shopify_ReverseDeliveryLineItemEdge>;
  /** A list of the nodes contained in ReverseDeliveryLineItemEdge. */
  nodes: Array<Shopify_ReverseDeliveryLineItem>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one ReverseDeliveryLineItem and a cursor during pagination. */
export type Shopify_ReverseDeliveryLineItemEdge = {
  __typename?: 'Shopify_ReverseDeliveryLineItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of ReverseDeliveryLineItemEdge. */
  node: Shopify_ReverseDeliveryLineItem;
};

/** A reverse shipping deliverable that may include a label and tracking information. */
export type Shopify_ReverseDeliveryShippingDeliverable = {
  __typename?: 'Shopify_ReverseDeliveryShippingDeliverable';
  /** The return label attached to the reverse delivery. */
  label?: Maybe<Shopify_ReverseDeliveryLabelV2>;
  /** The information to track the reverse delivery. */
  tracking?: Maybe<Shopify_ReverseDeliveryTrackingV2>;
};

/** Represents the information used to track a reverse delivery. */
export type Shopify_ReverseDeliveryTrackingV2 = {
  __typename?: 'Shopify_ReverseDeliveryTrackingV2';
  /** The provider of the tracking information, in a human-readable format for display purposes. */
  carrierName?: Maybe<Scalars['String']['output']>;
  /** The identifier used by the courier to identify the shipment. */
  number?: Maybe<Scalars['String']['output']>;
  /** The URL to track a shipment. */
  url?: Maybe<Scalars['Shopify_URL']['output']>;
};

/**
 * A group of one or more items in a return that will be processed at a fulfillment service.
 * There can be more than one reverse fulfillment order for a return at a given location.
 */
export type Shopify_ReverseFulfillmentOrder = Shopify_Node & {
  __typename?: 'Shopify_ReverseFulfillmentOrder';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The list of reverse fulfillment order line items for the reverse fulfillment order. */
  lineItems: Shopify_ReverseFulfillmentOrderLineItemConnection;
  /** The order associated with the reverse fulfillment order. */
  order: Shopify_Order;
  /** The list of reverse deliveries for the reverse fulfillment order. */
  reverseDeliveries: Shopify_ReverseDeliveryConnection;
  /** The status of the reverse fulfillment order. */
  status: Shopify_ReverseFulfillmentOrderStatus;
  /**
   * The current confirmation for the reverse fulfillment order from a third-party logistics service.
   * If no third-party service is involved, then this value is `nil`.
   */
  thirdPartyConfirmation?: Maybe<Shopify_ReverseFulfillmentOrderThirdPartyConfirmation>;
};


/**
 * A group of one or more items in a return that will be processed at a fulfillment service.
 * There can be more than one reverse fulfillment order for a return at a given location.
 */
export type Shopify_ReverseFulfillmentOrderLineItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * A group of one or more items in a return that will be processed at a fulfillment service.
 * There can be more than one reverse fulfillment order for a return at a given location.
 */
export type Shopify_ReverseFulfillmentOrderReverseDeliveriesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** An auto-generated type for paginating through multiple ReverseFulfillmentOrders. */
export type Shopify_ReverseFulfillmentOrderConnection = {
  __typename?: 'Shopify_ReverseFulfillmentOrderConnection';
  /** A list of edges. */
  edges: Array<Shopify_ReverseFulfillmentOrderEdge>;
  /** A list of the nodes contained in ReverseFulfillmentOrderEdge. */
  nodes: Array<Shopify_ReverseFulfillmentOrder>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** The details of the arrangement of an item. */
export type Shopify_ReverseFulfillmentOrderDisposition = Shopify_Node & {
  __typename?: 'Shopify_ReverseFulfillmentOrderDisposition';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The location where the disposition occurred. */
  location?: Maybe<Shopify_Location>;
  /** The number of disposed units. */
  quantity: Scalars['Int']['output'];
  /** The final arrangement of an item. */
  type: Shopify_ReverseFulfillmentOrderDispositionType;
};

/** The final arrangement of an item from a reverse fulfillment order. */
export enum Shopify_ReverseFulfillmentOrderDispositionType {
  /** An item that was expected but absent. */
  Missing = 'MISSING',
  /** An item that wasn't restocked. */
  NotRestocked = 'NOT_RESTOCKED',
  /** An item that requires further processing before being restocked or discarded. */
  ProcessingRequired = 'PROCESSING_REQUIRED',
  /** An item that was restocked. */
  Restocked = 'RESTOCKED'
}

/** An auto-generated type which holds one ReverseFulfillmentOrder and a cursor during pagination. */
export type Shopify_ReverseFulfillmentOrderEdge = {
  __typename?: 'Shopify_ReverseFulfillmentOrderEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of ReverseFulfillmentOrderEdge. */
  node: Shopify_ReverseFulfillmentOrder;
};

/** The details about a reverse fulfillment order line item. */
export type Shopify_ReverseFulfillmentOrderLineItem = Shopify_Node & {
  __typename?: 'Shopify_ReverseFulfillmentOrderLineItem';
  /** The dispositions of the item. */
  dispositions: Array<Shopify_ReverseFulfillmentOrderDisposition>;
  /** The corresponding fulfillment line item for a reverse fulfillment order line item. */
  fulfillmentLineItem: Shopify_FulfillmentLineItem;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The total number of units to be processed. */
  totalQuantity: Scalars['Int']['output'];
};

/** An auto-generated type for paginating through multiple ReverseFulfillmentOrderLineItems. */
export type Shopify_ReverseFulfillmentOrderLineItemConnection = {
  __typename?: 'Shopify_ReverseFulfillmentOrderLineItemConnection';
  /** A list of edges. */
  edges: Array<Shopify_ReverseFulfillmentOrderLineItemEdge>;
  /** A list of the nodes contained in ReverseFulfillmentOrderLineItemEdge. */
  nodes: Array<Shopify_ReverseFulfillmentOrderLineItem>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one ReverseFulfillmentOrderLineItem and a cursor during pagination. */
export type Shopify_ReverseFulfillmentOrderLineItemEdge = {
  __typename?: 'Shopify_ReverseFulfillmentOrderLineItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of ReverseFulfillmentOrderLineItemEdge. */
  node: Shopify_ReverseFulfillmentOrderLineItem;
};

/** The status of a reverse fulfillment order. */
export enum Shopify_ReverseFulfillmentOrderStatus {
  /** The reverse fulfillment order has been canceled. */
  Canceled = 'CANCELED',
  /** The reverse fulfillment order has been completed. */
  Closed = 'CLOSED',
  /** The reverse fulfillment order is in progress. */
  Open = 'OPEN'
}

/** The third-party confirmation of a reverse fulfillment order. */
export type Shopify_ReverseFulfillmentOrderThirdPartyConfirmation = {
  __typename?: 'Shopify_ReverseFulfillmentOrderThirdPartyConfirmation';
  /** The status of the reverse fulfillment order third-party confirmation. */
  status: Shopify_ReverseFulfillmentOrderThirdPartyConfirmationStatus;
};

/** The status of a reverse fulfillment order third-party confirmation. */
export enum Shopify_ReverseFulfillmentOrderThirdPartyConfirmationStatus {
  /** The reverse fulfillment order was accepted by the fulfillment service. */
  Accepted = 'ACCEPTED',
  /** The reverse fulfillment order cancelation was accepted by the fulfillment service. */
  CancelAccepted = 'CANCEL_ACCEPTED',
  /** The reverse fulfillment order cancelation was rejected by the fulfillment service. */
  CancelRejected = 'CANCEL_REJECTED',
  /** The reverse fulfillment order is awaiting acceptance by the fulfillment service. */
  PendingAcceptance = 'PENDING_ACCEPTANCE',
  /** The reverse fulfillment order is awaiting cancelation by the fulfillment service. */
  PendingCancelation = 'PENDING_CANCELATION',
  /** The reverse fulfillment order was rejected by the fulfillment service. */
  Rejected = 'REJECTED'
}

/** List of possible values for a RiskAssessment result. */
export enum Shopify_RiskAssessmentResult {
  /** Indicates a high likelihood that the order is fraudulent. */
  High = 'HIGH',
  /** Indicates a low likelihood that the order is fraudulent. */
  Low = 'LOW',
  /** Indicates a medium likelihood that the order is fraudulent. */
  Medium = 'MEDIUM',
  /** Indicates that the risk assessment will not provide a recommendation for the order. */
  None = 'NONE',
  /** Indicates that the risk assessment is still pending. */
  Pending = 'PENDING'
}

/** A risk fact belongs to a single risk assessment and serves to provide additional context for an assessment. Risk facts are not necessarily tied to the result of the recommendation. */
export type Shopify_RiskFact = {
  __typename?: 'Shopify_RiskFact';
  /** A description of the fact. */
  description: Scalars['String']['output'];
  /** Indicates whether the fact is a negative, neutral or positive contributor with regards to risk. */
  sentiment: Shopify_RiskFactSentiment;
};

/** List of possible values for a RiskFact sentiment. */
export enum Shopify_RiskFactSentiment {
  /** A negative contributor that increases the risk. */
  Negative = 'NEGATIVE',
  /** A neutral contributor with regards to risk. */
  Neutral = 'NEUTRAL',
  /** A positive contributor that lowers the risk. */
  Positive = 'POSITIVE'
}

/** A row count represents rows on background operation. */
export type Shopify_RowCount = {
  __typename?: 'Shopify_RowCount';
  /** Estimated number of rows contained within this background operation. */
  count: Scalars['Int']['output'];
  /** Whether the operation exceeds max number of reportable rows. */
  exceedsMax: Scalars['Boolean']['output'];
};

/** SEO information. */
export type Shopify_Seo = {
  __typename?: 'Shopify_SEO';
  /** SEO Description. */
  description?: Maybe<Scalars['String']['output']>;
  /** SEO Title. */
  title?: Maybe<Scalars['String']['output']>;
};

/** An individual sale record associated with a sales agreement. Every money value in an order's sales data is represented in the currency's smallest unit. When amounts are divided across multiple line items, such as taxes or order discounts, the amounts might not divide evenly across all of the line items on the order. To address this, the remaining currency units that couldn't be divided evenly are allocated one at a time, starting with the first line item, until they are all accounted for. In aggregate, the values sum up correctly. In isolation, one line item might have a different tax or discount amount than another line item of the same price, before taxes and discounts. This is because the amount could not be divided evenly across the items. The allocation of currency units across line items is immutable. After they are allocated, currency units are never reallocated or redistributed among the line items. */
export type Shopify_Sale = {
  /** The type of order action that the sale represents. */
  actionType: Shopify_SaleActionType;
  /** The unique ID for the sale. */
  id: Scalars['ID']['output'];
  /** The line type assocated with the sale. */
  lineType: Shopify_SaleLineType;
  /** The number of units either ordered or intended to be returned. */
  quantity?: Maybe<Scalars['Int']['output']>;
  /** All individual taxes associated with the sale. */
  taxes: Array<Shopify_SaleTax>;
  /** The total sale amount after taxes and discounts. */
  totalAmount: Shopify_MoneyBag;
  /** The total discounts allocated to the sale after taxes. */
  totalDiscountAmountAfterTaxes: Shopify_MoneyBag;
  /** The total discounts allocated to the sale before taxes. */
  totalDiscountAmountBeforeTaxes: Shopify_MoneyBag;
  /** The total amount of taxes for the sale. */
  totalTaxAmount: Shopify_MoneyBag;
};

/** The possible order action types for a sale. */
export enum Shopify_SaleActionType {
  /** A purchase or charge. */
  Order = 'ORDER',
  /** A removal or return. */
  Return = 'RETURN',
  /** An unknown order action. Represents new actions that may be added in future versions. */
  Unknown = 'UNKNOWN',
  /** A change to the price, taxes, or discounts for a prior purchase. */
  Update = 'UPDATE'
}

/** The additional fee details for a line item. */
export type Shopify_SaleAdditionalFee = Shopify_Node & {
  __typename?: 'Shopify_SaleAdditionalFee';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The name of the additional fee. */
  name: Scalars['String']['output'];
  /** The price of the additional fee. */
  price: Shopify_MoneyBag;
  /** A list of taxes charged on the additional fee. */
  taxLines: Array<Shopify_TaxLine>;
};

/** An auto-generated type for paginating through multiple Sales. */
export type Shopify_SaleConnection = {
  __typename?: 'Shopify_SaleConnection';
  /** A list of edges. */
  edges: Array<Shopify_SaleEdge>;
  /** A list of the nodes contained in SaleEdge. */
  nodes: Array<Shopify_Sale>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one Sale and a cursor during pagination. */
export type Shopify_SaleEdge = {
  __typename?: 'Shopify_SaleEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of SaleEdge. */
  node: Shopify_Sale;
};

/** The possible line types for a sale record. One of the possible order line types for a sale is an adjustment. Sales adjustments occur when a refund is issued for a line item that is either more or less than the total value of the line item. Examples are restocking fees and goodwill payments. When this happens, Shopify produces a sales agreement with sale records for each line item that is returned or refunded and an additional sale record for the adjustment (for example, a restocking fee). The sales records for the returned or refunded items represent the reversal of the original line item sale value. The additional adjustment sale record represents the difference between the original total value of all line items that were refunded, and the actual amount refunded. */
export enum Shopify_SaleLineType {
  /** An additional fee. */
  AdditionalFee = 'ADDITIONAL_FEE',
  /** A sale adjustment. */
  Adjustment = 'ADJUSTMENT',
  /** A duty charge. */
  Duty = 'DUTY',
  /** A fee charge. */
  Fee = 'FEE',
  /** A gift card. */
  GiftCard = 'GIFT_CARD',
  /** A product purchased, returned or exchanged. */
  Product = 'PRODUCT',
  /** A shipping cost. */
  Shipping = 'SHIPPING',
  /** A tip added by the customer. */
  Tip = 'TIP',
  /** An unknown sale line. Represents new types that may be added in future versions. */
  Unknown = 'UNKNOWN'
}

/** The tax allocated to a sale from a single tax line. */
export type Shopify_SaleTax = {
  __typename?: 'Shopify_SaleTax';
  /** The portion of the total tax amount on the related sale that comes from the associated tax line. */
  amount: Shopify_MoneyBag;
  /** The unique ID for the sale tax. */
  id: Scalars['ID']['output'];
  /** The tax line associated with the sale. */
  taxLine: Shopify_TaxLine;
};

/** A contract between a merchant and a customer to do business. Shopify creates a sales agreement whenever an order is placed, edited, or refunded. A sales agreement has one or more sales records, which provide itemized details about the initial agreement or subsequent changes made to the order. For example, when a customer places an order, Shopify creates the order, generates a sales agreement, and records a sale for each line item purchased in the order. A sale record is specific to a type of order line. Order lines can represent different things such as a purchased product, a tip added by a customer, shipping costs collected at checkout, and more. */
export type Shopify_SalesAgreement = {
  /** The application that created the agreement. */
  app?: Maybe<Shopify_App>;
  /** The date and time at which the agreement occured. */
  happenedAt: Scalars['DateTime']['output'];
  /** The unique ID for the agreement. */
  id: Scalars['ID']['output'];
  /** The reason the agremeent was created. */
  reason: Shopify_OrderActionType;
  /** The sales associated with the agreement. */
  sales: Shopify_SaleConnection;
  /** The staff member associated with the agreement. */
  user?: Maybe<Shopify_StaffMember>;
};


/** A contract between a merchant and a customer to do business. Shopify creates a sales agreement whenever an order is placed, edited, or refunded. A sales agreement has one or more sales records, which provide itemized details about the initial agreement or subsequent changes made to the order. For example, when a customer places an order, Shopify creates the order, generates a sales agreement, and records a sale for each line item purchased in the order. A sale record is specific to a type of order line. Order lines can represent different things such as a purchased product, a tip added by a customer, shipping costs collected at checkout, and more. */
export type Shopify_SalesAgreementSalesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** An auto-generated type for paginating through multiple SalesAgreements. */
export type Shopify_SalesAgreementConnection = {
  __typename?: 'Shopify_SalesAgreementConnection';
  /** A list of edges. */
  edges: Array<Shopify_SalesAgreementEdge>;
  /** A list of the nodes contained in SalesAgreementEdge. */
  nodes: Array<Shopify_SalesAgreement>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one SalesAgreement and a cursor during pagination. */
export type Shopify_SalesAgreementEdge = {
  __typename?: 'Shopify_SalesAgreementEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of SalesAgreementEdge. */
  node: Shopify_SalesAgreement;
};

/** A saved search is a representation of a search query saved in the admin. */
export type Shopify_SavedSearch = Shopify_LegacyInteroperability & Shopify_Node & {
  __typename?: 'Shopify_SavedSearch';
  /** The filters of a saved search. */
  filters: Array<Shopify_SearchFilter>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['Shopify_UnsignedInt64']['output'];
  /** The name of a saved search. */
  name: Scalars['String']['output'];
  /** The query string of a saved search. This includes search terms and filters. */
  query: Scalars['String']['output'];
  /** The type of resource this saved search is searching in. */
  resourceType: Shopify_SearchResultType;
  /** The search terms of a saved search. */
  searchTerms: Scalars['String']['output'];
};

/** An auto-generated type for paginating through multiple SavedSearches. */
export type Shopify_SavedSearchConnection = {
  __typename?: 'Shopify_SavedSearchConnection';
  /** A list of edges. */
  edges: Array<Shopify_SavedSearchEdge>;
  /** A list of the nodes contained in SavedSearchEdge. */
  nodes: Array<Shopify_SavedSearch>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one SavedSearch and a cursor during pagination. */
export type Shopify_SavedSearchEdge = {
  __typename?: 'Shopify_SavedSearchEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of SavedSearchEdge. */
  node: Shopify_SavedSearch;
};

/** The set of valid sort keys for the ScheduledChange query. */
export enum Shopify_ScheduledChangeSortKeys {
  /** Sort by the `expected_at` value. */
  ExpectedAt = 'EXPECTED_AT',
  /** Sort by the `id` value. */
  Id = 'ID',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE'
}

/**
 * Script discount applications capture the intentions of a discount that
 * was created by a Shopify Script for an order's line item or shipping line.
 *
 * Discount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
 */
export type Shopify_ScriptDiscountApplication = Shopify_DiscountApplication & {
  __typename?: 'Shopify_ScriptDiscountApplication';
  /** The method by which the discount's value is applied to its entitled items. */
  allocationMethod: Shopify_DiscountApplicationAllocationMethod;
  /**
   * The description of the application as defined by the Script.
   * @deprecated Use `title` instead.
   */
  description: Scalars['String']['output'];
  /**
   * An ordered index that can be used to identify the discount application and indicate the precedence
   * of the discount application for calculations.
   */
  index: Scalars['Int']['output'];
  /** How the discount amount is distributed on the discounted lines. */
  targetSelection: Shopify_DiscountApplicationTargetSelection;
  /** Whether the discount is applied on line items or shipping lines. */
  targetType: Shopify_DiscountApplicationTargetType;
  /** The title of the application as defined by the Script. */
  title: Scalars['String']['output'];
  /** The value of the discount application. */
  value: Shopify_PricingValue;
};

/**
 * <div class="note"><h4>Theme app extensions</h4>
 *   <p>Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>
 *
 * <div class="note"><h4>Script tag deprecation</h4>
 *   <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade to Checkout Extensibility</a> before this date. <a href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to work alongside Checkout Extensibility until August 28, 2025.</p></div>
 *
 *
 * A script tag represents remote JavaScript code that is loaded into the pages of a shop's storefront or the **Order status** page of checkout.
 */
export type Shopify_ScriptTag = Shopify_LegacyInteroperability & Shopify_Node & {
  __typename?: 'Shopify_ScriptTag';
  /**
   * Whether the Shopify CDN can cache and serve the script tag.
   * If `true`, then the script will be cached and served by the CDN.
   * The cache expires 15 minutes after the script tag is successfully returned.
   * If `false`, then the script will be served as is.
   */
  cache: Scalars['Boolean']['output'];
  /** The date and time when the script tag was created. */
  createdAt: Scalars['DateTime']['output'];
  /** The page or pages on the online store that the script should be included. */
  displayScope: Shopify_ScriptTagDisplayScope;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['Shopify_UnsignedInt64']['output'];
  /** The URL to the remote script. */
  src: Scalars['Shopify_URL']['output'];
  /** The date and time when the script tag was last updated. */
  updatedAt: Scalars['DateTime']['output'];
};

/** The page or pages on the online store where the script should be included. */
export enum Shopify_ScriptTagDisplayScope {
  /** Include the script on both the web storefront and the <b>Order status</b> page. */
  All = 'ALL',
  /** Include the script only on the web storefront. */
  OnlineStore = 'ONLINE_STORE',
  /** Include the script only on the <b>Order status</b> page. */
  OrderStatus = 'ORDER_STATUS'
}

/** A filter in a search query represented by a key value pair. */
export type Shopify_SearchFilter = {
  __typename?: 'Shopify_SearchFilter';
  /** The key of the search filter. */
  key: Scalars['String']['output'];
  /** The value of the search filter. */
  value: Scalars['String']['output'];
};

/** A list of search filters along with their specific options in value and label pair for filtering. */
export type Shopify_SearchFilterOptions = {
  __typename?: 'Shopify_SearchFilterOptions';
  /** A list of options that can be use to filter product availability. */
  productAvailability: Array<Shopify_FilterOption>;
};

/** Represents an individual result returned from a search. */
export type Shopify_SearchResult = {
  __typename?: 'Shopify_SearchResult';
  /** Returns the search result description text. */
  description?: Maybe<Scalars['String']['output']>;
  /** Returns the Image resource presented to accompany a search result. */
  image?: Maybe<Shopify_Image>;
  /** Returns the ID of the resource returned in the search result. */
  reference: Shopify_Node;
  /** Returns the resource title. */
  title: Scalars['String']['output'];
  /** Returns the absolute URL to the resource in the search result. */
  url: Scalars['Shopify_URL']['output'];
};

/** The connection type for SearchResult. */
export type Shopify_SearchResultConnection = {
  __typename?: 'Shopify_SearchResultConnection';
  /** A list of edges. */
  edges: Array<Shopify_SearchResultEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
  /**
   * Information to aid in pagination.
   * @deprecated The provided information is not accurate.
   */
  resultsAfterCount: Scalars['Int']['output'];
};

/** An auto-generated type which holds one SearchResult and a cursor during pagination. */
export type Shopify_SearchResultEdge = {
  __typename?: 'Shopify_SearchResultEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of SearchResultEdge. */
  node: Shopify_SearchResult;
};

/** Specifies the type of resources to be returned from a search. */
export enum Shopify_SearchResultType {
  /** A balance transaction. */
  BalanceTransaction = 'BALANCE_TRANSACTION',
  Collection = 'COLLECTION',
  Customer = 'CUSTOMER',
  /** A code discount redeem code. */
  DiscountRedeemCode = 'DISCOUNT_REDEEM_CODE',
  DraftOrder = 'DRAFT_ORDER',
  /** A file. */
  File = 'FILE',
  OnlineStoreArticle = 'ONLINE_STORE_ARTICLE',
  OnlineStoreBlog = 'ONLINE_STORE_BLOG',
  OnlineStorePage = 'ONLINE_STORE_PAGE',
  Order = 'ORDER',
  PriceRule = 'PRICE_RULE',
  Product = 'PRODUCT',
  /** A URL redirect. */
  UrlRedirect = 'URL_REDIRECT'
}

/** A dynamic collection of customers based on specific criteria. */
export type Shopify_Segment = Shopify_Node & {
  __typename?: 'Shopify_Segment';
  /** The date and time when the segment was added to the store. */
  creationDate: Scalars['DateTime']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The date and time when the segment was last updated. */
  lastEditDate: Scalars['DateTime']['output'];
  /** The name of the segment. */
  name: Scalars['String']['output'];
  /** A precise definition of the segment. The definition is composed of a combination of conditions on facts about customers. */
  query: Scalars['String']['output'];
};

/**
 * Properties used by customers to select a product variant.
 * Products can have multiple options, like different sizes or colors.
 */
export type Shopify_SelectedOption = {
  __typename?: 'Shopify_SelectedOption';
  /** The product option’s name. */
  name: Scalars['String']['output'];
  /** The product option’s value object. */
  optionValue: Shopify_ProductOptionValue;
  /** The product option’s value. */
  value: Scalars['String']['output'];
};

/**
 * Represents how a product can be sold and purchased. Selling plans and associated records (selling plan groups
 * and policies) are deleted 48 hours after a merchant uninstalls their subscriptions app. We recommend backing
 * up these records if you need to restore them later.
 *
 * For more information on selling plans, refer to
 * [*Creating and managing selling plans*](https://shopify.dev/docs/apps/selling-strategies/subscriptions/selling-plans).
 */
export type Shopify_SellingPlan = Shopify_HasPublishedTranslations & Shopify_Node & {
  __typename?: 'Shopify_SellingPlan';
  /** A selling plan policy which describes the recurring billing details. */
  billingPolicy: Shopify_SellingPlanBillingPolicy;
  /** The category used to classify the selling plan for reporting purposes. */
  category?: Maybe<Shopify_SellingPlanCategory>;
  /** The date and time when the selling plan was created. */
  createdAt: Scalars['DateTime']['output'];
  /** A selling plan policy which describes the delivery details. */
  deliveryPolicy: Shopify_SellingPlanDeliveryPolicy;
  /** Buyer facing string which describes the selling plan commitment. */
  description?: Maybe<Scalars['String']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** When to reserve inventory for a selling plan. */
  inventoryPolicy?: Maybe<Shopify_SellingPlanInventoryPolicy>;
  /**
   * A customer-facing description of the selling plan.
   *
   * If your store supports multiple currencies, then don't include country-specific pricing content, such as "Buy monthly, get 10$ CAD off". This field won't be converted to reflect different currencies.
   */
  name: Scalars['String']['output'];
  /** The values of all options available on the selling plan. Selling plans are grouped together in Liquid when they're created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values. */
  options: Array<Scalars['String']['output']>;
  /** Relative position of the selling plan for display. A lower position will be displayed before a higher position. */
  position?: Maybe<Scalars['Int']['output']>;
  /** Selling plan pricing details. */
  pricingPolicies: Array<Shopify_SellingPlanPricingPolicy>;
  /** The translations associated with the resource. */
  translations: Array<Shopify_Translation>;
};


/**
 * Represents how a product can be sold and purchased. Selling plans and associated records (selling plan groups
 * and policies) are deleted 48 hours after a merchant uninstalls their subscriptions app. We recommend backing
 * up these records if you need to restore them later.
 *
 * For more information on selling plans, refer to
 * [*Creating and managing selling plans*](https://shopify.dev/docs/apps/selling-strategies/subscriptions/selling-plans).
 */
export type Shopify_SellingPlanTranslationsArgs = {
  locale: Scalars['String']['input'];
  marketId?: InputMaybe<Scalars['ID']['input']>;
};

/** Represents a selling plan policy anchor. */
export type Shopify_SellingPlanAnchor = {
  __typename?: 'Shopify_SellingPlanAnchor';
  /**
   * The cutoff day for the anchor.
   *
   * If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
   * the days of the week according to ISO 8601, where 1 is Monday.
   *
   * If `type` is MONTHDAY, then the value must be between 1-31.
   *
   * If `type` is YEARDAY, then the value must be `null`.
   */
  cutoffDay?: Maybe<Scalars['Int']['output']>;
  /**
   * The day of the anchor.
   *
   * If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
   * the days of the week according to ISO 8601, where 1 is Monday.
   *
   * If `type` isn't WEEKDAY, then the value must be between 1-31.
   */
  day: Scalars['Int']['output'];
  /**
   * The month of the anchor. If type is different than YEARDAY, then the value must
   * be `null` or between 1-12.
   */
  month?: Maybe<Scalars['Int']['output']>;
  /** Represents the anchor type, it can be one one of WEEKDAY, MONTHDAY, YEARDAY. */
  type: Shopify_SellingPlanAnchorType;
};

/** Represents the anchor type. */
export enum Shopify_SellingPlanAnchorType {
  /** Which day of the month, between 1-31. */
  Monthday = 'MONTHDAY',
  /** Which day of the week, between 1-7. */
  Weekday = 'WEEKDAY',
  /** Which days of the month and year, month between 1-12, and day between 1-31. */
  Yearday = 'YEARDAY'
}

/**
 * Represents the billing frequency associated to the selling plan (for example, bill every week, or bill every
 * three months). The selling plan billing policy and associated records (selling plan groups, selling plans, pricing
 * policies, and delivery policy) are deleted 48 hours after a merchant uninstalls their subscriptions app.
 * We recommend backing up these records if you need to restore them later.
 */
export type Shopify_SellingPlanBillingPolicy = Shopify_SellingPlanFixedBillingPolicy | Shopify_SellingPlanRecurringBillingPolicy;

/**
 * The category of the selling plan. For the `OTHER` category,
 *          you must fill out our [request form](https://docs.google.com/forms/d/e/1FAIpQLSeU18Xmw0Q61V8wdH-dfGafFqIBfRchQKUO8WAF3yJTvgyyZQ/viewform),
 *          where we'll review your request for a new purchase option.
 */
export enum Shopify_SellingPlanCategory {
  /** The selling plan is for anything not in one of the other categories. */
  Other = 'OTHER',
  /** The selling plan is for pre-orders. */
  PreOrder = 'PRE_ORDER',
  /** The selling plan is for subscriptions. */
  Subscription = 'SUBSCRIPTION',
  /** The selling plan is for try before you buy purchases. */
  TryBeforeYouBuy = 'TRY_BEFORE_YOU_BUY'
}

/** The amount charged at checkout when the full amount isn't charged at checkout. */
export type Shopify_SellingPlanCheckoutCharge = {
  __typename?: 'Shopify_SellingPlanCheckoutCharge';
  /** The charge type for the checkout charge. */
  type: Shopify_SellingPlanCheckoutChargeType;
  /** The charge value for the checkout charge. */
  value: Shopify_SellingPlanCheckoutChargeValue;
};

/** The percentage value of the price used for checkout charge. */
export type Shopify_SellingPlanCheckoutChargePercentageValue = {
  __typename?: 'Shopify_SellingPlanCheckoutChargePercentageValue';
  /** The percentage value of the price used for checkout charge. */
  percentage: Scalars['Float']['output'];
};

/** The checkout charge when the full amount isn't charged at checkout. */
export enum Shopify_SellingPlanCheckoutChargeType {
  /** The checkout charge is a percentage of the product or variant price. */
  Percentage = 'PERCENTAGE',
  /** The checkout charge is a fixed price amount. */
  Price = 'PRICE'
}

/** The portion of the price to be charged at checkout. */
export type Shopify_SellingPlanCheckoutChargeValue = Shopify_MoneyV2 | Shopify_SellingPlanCheckoutChargePercentageValue;

/** An auto-generated type for paginating through multiple SellingPlans. */
export type Shopify_SellingPlanConnection = {
  __typename?: 'Shopify_SellingPlanConnection';
  /** A list of edges. */
  edges: Array<Shopify_SellingPlanEdge>;
  /** A list of the nodes contained in SellingPlanEdge. */
  nodes: Array<Shopify_SellingPlan>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/**
 * Represents the delivery frequency associated to the selling plan (for example, deliver every month, or deliver
 * every other week). The selling plan delivery policy and associated records (selling plan groups, selling plans,
 * pricing policies, and billing policy) are deleted 48 hours after a merchant uninstalls their subscriptions app.
 * We recommend backing up these records if you need to restore them later.
 */
export type Shopify_SellingPlanDeliveryPolicy = Shopify_SellingPlanFixedDeliveryPolicy | Shopify_SellingPlanRecurringDeliveryPolicy;

/** An auto-generated type which holds one SellingPlan and a cursor during pagination. */
export type Shopify_SellingPlanEdge = {
  __typename?: 'Shopify_SellingPlanEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of SellingPlanEdge. */
  node: Shopify_SellingPlan;
};

/**
 * The fixed selling plan billing policy defines how much of the price of the product will be billed to customer
 * at checkout. If there is an outstanding balance, it determines when it will be paid.
 */
export type Shopify_SellingPlanFixedBillingPolicy = {
  __typename?: 'Shopify_SellingPlanFixedBillingPolicy';
  /** The checkout charge when the full amount isn't charged at checkout. */
  checkoutCharge: Shopify_SellingPlanCheckoutCharge;
  /** The exact time when to capture the full payment. */
  remainingBalanceChargeExactTime?: Maybe<Scalars['DateTime']['output']>;
  /** The period after remaining_balance_charge_trigger, before capturing the full payment. Expressed as an ISO8601 duration. */
  remainingBalanceChargeTimeAfterCheckout?: Maybe<Scalars['String']['output']>;
  /** When to capture payment for amount due. */
  remainingBalanceChargeTrigger: Shopify_SellingPlanRemainingBalanceChargeTrigger;
};

/** Represents a fixed selling plan delivery policy. */
export type Shopify_SellingPlanFixedDeliveryPolicy = {
  __typename?: 'Shopify_SellingPlanFixedDeliveryPolicy';
  /** The specific anchor dates upon which the delivery interval calculations should be made. */
  anchors: Array<Shopify_SellingPlanAnchor>;
  /** A buffer period for orders to be included in next fulfillment anchor. */
  cutoff?: Maybe<Scalars['Int']['output']>;
  /** The date and time when the fulfillment should trigger. */
  fulfillmentExactTime?: Maybe<Scalars['DateTime']['output']>;
  /** What triggers the fulfillment. The value must be one of ANCHOR, ASAP, EXACT_TIME, or UNKNOWN. */
  fulfillmentTrigger: Shopify_SellingPlanFulfillmentTrigger;
  /**
   * Whether the delivery policy is merchant or buyer-centric.
   * Buyer-centric delivery policies state the time when the buyer will receive the goods.
   * Merchant-centric delivery policies state the time when the fulfillment should be started.
   * Currently, only merchant-centric delivery policies are supported.
   */
  intent: Shopify_SellingPlanFixedDeliveryPolicyIntent;
  /** The fulfillment or delivery behavior of the first fulfillment when the order is placed before the anchor. The default value for this field is `ASAP`. */
  preAnchorBehavior: Shopify_SellingPlanFixedDeliveryPolicyPreAnchorBehavior;
};

/** Possible intentions of a Delivery Policy. */
export enum Shopify_SellingPlanFixedDeliveryPolicyIntent {
  /** A merchant-centric delivery policy. Mark this delivery policy to define when the merchant should start fulfillment. */
  FulfillmentBegin = 'FULFILLMENT_BEGIN'
}

/** The fulfillment or delivery behavior of the first fulfillment when the orderis placed before the anchor. */
export enum Shopify_SellingPlanFixedDeliveryPolicyPreAnchorBehavior {
  /** Orders placed can be fulfilled / delivered immediately. Orders placed inside a cutoff can be fulfilled / delivered at the next anchor. */
  Asap = 'ASAP',
  /**
   * Orders placed can be fulfilled / delivered at the next anchor date.
   * Orders placed inside a cutoff will skip the next anchor and can be fulfilled /
   * delivered at the following anchor.
   */
  Next = 'NEXT'
}

/**
 * Represents the pricing policy of a subscription or deferred purchase option selling plan.
 * The selling plan fixed pricing policy works with the billing and delivery policy
 * to determine the final price. Discounts are divided among fulfillments.
 * For example, a subscription with a $10 discount and two deliveries will have a $5
 * discount applied to each delivery.
 */
export type Shopify_SellingPlanFixedPricingPolicy = Shopify_SellingPlanPricingPolicyBase & {
  __typename?: 'Shopify_SellingPlanFixedPricingPolicy';
  /** The price adjustment type. */
  adjustmentType: Shopify_SellingPlanPricingPolicyAdjustmentType;
  /** The price adjustment value. */
  adjustmentValue: Shopify_SellingPlanPricingPolicyAdjustmentValue;
  /** The date and time when the fixed selling plan pricing policy was created. */
  createdAt: Scalars['DateTime']['output'];
};

/** Describes what triggers fulfillment. */
export enum Shopify_SellingPlanFulfillmentTrigger {
  /** Use the anchor values to calculate fulfillment date. */
  Anchor = 'ANCHOR',
  /** As soon as possible. */
  Asap = 'ASAP',
  /** At an exact time defined by the fulfillment_exact_time field. */
  ExactTime = 'EXACT_TIME',
  /** Unknown. Usually to be determined in the future. */
  Unknown = 'UNKNOWN'
}

/**
 * Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
 * and associated records (selling plans and policies) are deleted 48 hours after a merchant
 * uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
 */
export type Shopify_SellingPlanGroup = Shopify_HasPublishedTranslations & Shopify_Node & {
  __typename?: 'Shopify_SellingPlanGroup';
  /** The ID for app, exposed in Liquid and product JSON. */
  appId?: Maybe<Scalars['String']['output']>;
  /** Whether the given product is directly associated to the selling plan group. */
  appliesToProduct: Scalars['Boolean']['output'];
  /** Whether the given product variant is directly associated to the selling plan group. */
  appliesToProductVariant: Scalars['Boolean']['output'];
  /** Whether any of the product variants of the given product are associated to the selling plan group. */
  appliesToProductVariants: Scalars['Boolean']['output'];
  /** The date and time when the selling plan group was created. */
  createdAt: Scalars['DateTime']['output'];
  /** The merchant-facing description of the selling plan group. */
  description?: Maybe<Scalars['String']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The merchant-facing label of the selling plan group. */
  merchantCode: Scalars['String']['output'];
  /** The buyer-facing label of the selling plan group. */
  name: Scalars['String']['output'];
  /** The values of all options available on the selling plan group. Selling plans are grouped together in Liquid when they're created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values. */
  options: Array<Scalars['String']['output']>;
  /** The relative position of the selling plan group for display. */
  position?: Maybe<Scalars['Int']['output']>;
  /** Product variants associated to the selling plan group. */
  productVariants: Shopify_ProductVariantConnection;
  /** A count of product variants associated to the selling plan group. */
  productVariantsCount?: Maybe<Shopify_Count>;
  /** Products associated to the selling plan group. */
  products: Shopify_ProductConnection;
  /** A count of products associated to the selling plan group. */
  productsCount?: Maybe<Shopify_Count>;
  /** Selling plans associated to the selling plan group. */
  sellingPlans: Shopify_SellingPlanConnection;
  /** A summary of the policies associated to the selling plan group. */
  summary?: Maybe<Scalars['String']['output']>;
  /** The translations associated with the resource. */
  translations: Array<Shopify_Translation>;
};


/**
 * Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
 * and associated records (selling plans and policies) are deleted 48 hours after a merchant
 * uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
 */
export type Shopify_SellingPlanGroupAppliesToProductArgs = {
  productId: Scalars['ID']['input'];
};


/**
 * Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
 * and associated records (selling plans and policies) are deleted 48 hours after a merchant
 * uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
 */
export type Shopify_SellingPlanGroupAppliesToProductVariantArgs = {
  productVariantId: Scalars['ID']['input'];
};


/**
 * Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
 * and associated records (selling plans and policies) are deleted 48 hours after a merchant
 * uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
 */
export type Shopify_SellingPlanGroupAppliesToProductVariantsArgs = {
  productId: Scalars['ID']['input'];
};


/**
 * Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
 * and associated records (selling plans and policies) are deleted 48 hours after a merchant
 * uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
 */
export type Shopify_SellingPlanGroupProductVariantsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  productId?: InputMaybe<Scalars['ID']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
 * and associated records (selling plans and policies) are deleted 48 hours after a merchant
 * uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
 */
export type Shopify_SellingPlanGroupProductVariantsCountArgs = {
  productId?: InputMaybe<Scalars['ID']['input']>;
};


/**
 * Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
 * and associated records (selling plans and policies) are deleted 48 hours after a merchant
 * uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
 */
export type Shopify_SellingPlanGroupProductsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
 * and associated records (selling plans and policies) are deleted 48 hours after a merchant
 * uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
 */
export type Shopify_SellingPlanGroupSellingPlansArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
 * and associated records (selling plans and policies) are deleted 48 hours after a merchant
 * uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
 */
export type Shopify_SellingPlanGroupTranslationsArgs = {
  locale: Scalars['String']['input'];
  marketId?: InputMaybe<Scalars['ID']['input']>;
};

/** An auto-generated type for paginating through multiple SellingPlanGroups. */
export type Shopify_SellingPlanGroupConnection = {
  __typename?: 'Shopify_SellingPlanGroupConnection';
  /** A list of edges. */
  edges: Array<Shopify_SellingPlanGroupEdge>;
  /** A list of the nodes contained in SellingPlanGroupEdge. */
  nodes: Array<Shopify_SellingPlanGroup>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one SellingPlanGroup and a cursor during pagination. */
export type Shopify_SellingPlanGroupEdge = {
  __typename?: 'Shopify_SellingPlanGroupEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of SellingPlanGroupEdge. */
  node: Shopify_SellingPlanGroup;
};

/** Represents a selling plan group custom error. */
export type Shopify_SellingPlanGroupUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_SellingPlanGroupUserError';
  /** The error code. */
  code?: Maybe<Shopify_SellingPlanGroupUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `SellingPlanGroupUserError`. */
export enum Shopify_SellingPlanGroupUserErrorCode {
  /** Billing and delivery policy types must be the same. */
  BillingAndDeliveryPolicyTypesMustBeTheSame = 'BILLING_AND_DELIVERY_POLICY_TYPES_MUST_BE_THE_SAME',
  /** Billing policy's interval is too large. */
  BillingPolicyIntervalTooLarge = 'BILLING_POLICY_INTERVAL_TOO_LARGE',
  /** The input value is blank. */
  Blank = 'BLANK',
  /** A fixed billing policy's checkout charge value and type must match. */
  CheckoutChargeValueAndTypeMustMatch = 'CHECKOUT_CHARGE_VALUE_AND_TYPE_MUST_MATCH',
  /** Delivery policy's interval is too large. */
  DeliveryPolicyIntervalTooLarge = 'DELIVERY_POLICY_INTERVAL_TOO_LARGE',
  /** The input value should be equal to the value allowed. */
  EqualTo = 'EQUAL_TO',
  /** Could not add the resource to the selling plan group. */
  ErrorAddingResourceToGroup = 'ERROR_ADDING_RESOURCE_TO_GROUP',
  /** A fixed billing policy's fulfillment_exact_time must not be present when the fulfillment_trigger isn't EXACT_TIME. */
  FulfillmentExactTimeNotAllowed = 'FULFILLMENT_EXACT_TIME_NOT_ALLOWED',
  /** A fixed billing policy's fulfillment_exact_time can't be blank when the fulfillment_trigger is EXACT_TIME. */
  FulfillmentExactTimeRequired = 'FULFILLMENT_EXACT_TIME_REQUIRED',
  /** The input value should be greater than the minimum allowed value. */
  GreaterThan = 'GREATER_THAN',
  /** The input value should be greater than or equal to the minimum value allowed. */
  GreaterThanOrEqualTo = 'GREATER_THAN_OR_EQUAL_TO',
  /** Selling plan group could not be deleted. */
  GroupCouldNotBeDeleted = 'GROUP_COULD_NOT_BE_DELETED',
  /** Selling plan group does not exist. */
  GroupDoesNotExist = 'GROUP_DOES_NOT_EXIST',
  /** The input value isn't included in the list. */
  Inclusion = 'INCLUSION',
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** The input value should be less than the maximum value allowed. */
  LessThan = 'LESS_THAN',
  /** The input value should be less than or equal to the maximum value allowed. */
  LessThanOrEqualTo = 'LESS_THAN_OR_EQUAL_TO',
  /** The input value is not a number. */
  NotANumber = 'NOT_A_NUMBER',
  /** The record with the ID used as the input value couldn't be found. */
  NotFound = 'NOT_FOUND',
  /** Only one billing policy type can be defined. */
  OnlyNeedOneBillingPolicyType = 'ONLY_NEED_ONE_BILLING_POLICY_TYPE',
  /** A fixed billing policy's checkout charge can have at most one value. */
  OnlyNeedOneCheckoutChargeValue = 'ONLY_NEED_ONE_CHECKOUT_CHARGE_VALUE',
  /** Only one delivery policy type can be defined. */
  OnlyNeedOneDeliveryPolicyType = 'ONLY_NEED_ONE_DELIVERY_POLICY_TYPE',
  /** Only one pricing policy type can be defined. */
  OnlyNeedOnePricingPolicyType = 'ONLY_NEED_ONE_PRICING_POLICY_TYPE',
  /** Only one pricing policy adjustment value type can be defined. */
  OnlyNeedOnePricingPolicyValue = 'ONLY_NEED_ONE_PRICING_POLICY_VALUE',
  /** A selling plan can't have both fixed and recurring billing policies. */
  OnlyOneOfFixedOrRecurringBilling = 'ONLY_ONE_OF_FIXED_OR_RECURRING_BILLING',
  /** A selling plan can't have both fixed and recurring delivery policies. */
  OnlyOneOfFixedOrRecurringDelivery = 'ONLY_ONE_OF_FIXED_OR_RECURRING_DELIVERY',
  /** Selling plan does not exist. */
  PlanDoesNotExist = 'PLAN_DOES_NOT_EXIST',
  /** Selling plan ID must be specified to update. */
  PlanIdMustBeSpecifiedToUpdate = 'PLAN_ID_MUST_BE_SPECIFIED_TO_UPDATE',
  /** The input value needs to be blank. */
  Present = 'PRESENT',
  /** Pricing policy's adjustment value and adjustment type must match. */
  PricingPolicyAdjustmentValueAndTypeMustMatch = 'PRICING_POLICY_ADJUSTMENT_VALUE_AND_TYPE_MUST_MATCH',
  /** Product does not exist. */
  ProductDoesNotExist = 'PRODUCT_DOES_NOT_EXIST',
  /** Product variant does not exist. */
  ProductVariantDoesNotExist = 'PRODUCT_VARIANT_DOES_NOT_EXIST',
  /** A fixed billing policy's remaining_balance_charge_exact_time must not be present when the remaining_balance_charge_trigger isn't EXACT_TIME. */
  RemainingBalanceChargeExactTimeNotAllowed = 'REMAINING_BALANCE_CHARGE_EXACT_TIME_NOT_ALLOWED',
  /** A fixed billing policy's remaining_balance_charge_exact_time can't be blank when the remaining_balance_charge_trigger is EXACT_TIME. */
  RemainingBalanceChargeExactTimeRequired = 'REMAINING_BALANCE_CHARGE_EXACT_TIME_REQUIRED',
  /** A fixed billing policy's remaining_balance_charge_time_after_checkout must be present and greater than zero when the remaining_balance_charge_trigger is TIME_AFTER_CHECKOUT. */
  RemainingBalanceChargeTimeAfterCheckoutMustBeGreaterThanZero = 'REMAINING_BALANCE_CHARGE_TIME_AFTER_CHECKOUT_MUST_BE_GREATER_THAN_ZERO',
  /** A fixed billing policy's remaining_balance_charge_trigger can't be NO_REMAINING_BALANCE when the checkout_charge_type is PERCENTAGE and checkout_charge_value is less than 100. */
  RemainingBalanceChargeTriggerNoRemainingBalanceOnPartialPercentageCheckoutCharge = 'REMAINING_BALANCE_CHARGE_TRIGGER_NO_REMAINING_BALANCE_ON_PARTIAL_PERCENTAGE_CHECKOUT_CHARGE',
  /** A fixed billing policy's remaining_balance_charge_trigger can't be NO_REMAINING_BALANCE when the checkout_charge_type is PRICE. */
  RemainingBalanceChargeTriggerNoRemainingBalanceOnPriceCheckoutCharge = 'REMAINING_BALANCE_CHARGE_TRIGGER_NO_REMAINING_BALANCE_ON_PRICE_CHECKOUT_CHARGE',
  /** A fixed billing policy's remaining_balance_charge_trigger must be NO_REMAINING_BALANCE when the checkout_charge_type is PERCENTAGE and checkout_charge_value is 100. */
  RemainingBalanceChargeTriggerOnFullCheckout = 'REMAINING_BALANCE_CHARGE_TRIGGER_ON_FULL_CHECKOUT',
  /** The selling plan list provided contains 1 or more invalid IDs. */
  ResourceListContainsInvalidIds = 'RESOURCE_LIST_CONTAINS_INVALID_IDS',
  /** A fixed delivery policy's anchors must not be present when the fulfillment_trigger isn't ANCHOR. */
  SellingPlanAnchorsNotAllowed = 'SELLING_PLAN_ANCHORS_NOT_ALLOWED',
  /** A fixed delivery policy's anchors must be present when the fulfillment_trigger is ANCHOR. */
  SellingPlanAnchorsRequired = 'SELLING_PLAN_ANCHORS_REQUIRED',
  /** Selling plan's billing and delivery policies anchors must be equal. */
  SellingPlanBillingAndDeliveryPolicyAnchorsMustBeEqual = 'SELLING_PLAN_BILLING_AND_DELIVERY_POLICY_ANCHORS_MUST_BE_EQUAL',
  /** Selling plan's billing cycle must be a multiple of delivery cycle. */
  SellingPlanBillingCycleMustBeAMultipleOfDeliveryCycle = 'SELLING_PLAN_BILLING_CYCLE_MUST_BE_A_MULTIPLE_OF_DELIVERY_CYCLE',
  /** Missing billing policy. */
  SellingPlanBillingPolicyMissing = 'SELLING_PLAN_BILLING_POLICY_MISSING',
  /** Must include at least one selling plan. */
  SellingPlanCountLowerBound = 'SELLING_PLAN_COUNT_LOWER_BOUND',
  /** Exceeded the selling plan limit (31). */
  SellingPlanCountUpperBound = 'SELLING_PLAN_COUNT_UPPER_BOUND',
  /** Missing delivery policy. */
  SellingPlanDeliveryPolicyMissing = 'SELLING_PLAN_DELIVERY_POLICY_MISSING',
  /** Cannot have multiple selling plans with the same name. */
  SellingPlanDuplicateName = 'SELLING_PLAN_DUPLICATE_NAME',
  /** Cannot have multiple selling plans with the same options. */
  SellingPlanDuplicateOptions = 'SELLING_PLAN_DUPLICATE_OPTIONS',
  /** A fixed selling plan can have at most one pricing policy. */
  SellingPlanFixedPricingPoliciesLimit = 'SELLING_PLAN_FIXED_PRICING_POLICIES_LIMIT',
  /** Selling plan's billing policy max cycles must be greater than min cycles. */
  SellingPlanMaxCyclesMustBeGreaterThanMinCycles = 'SELLING_PLAN_MAX_CYCLES_MUST_BE_GREATER_THAN_MIN_CYCLES',
  /** Cannot define option2 on this selling plan as there's no label on the parent selling plan group. */
  SellingPlanMissingOption2LabelOnParentGroup = 'SELLING_PLAN_MISSING_OPTION2_LABEL_ON_PARENT_GROUP',
  /** Cannot define option3 on this selling plan as there's no label on the parent selling plan group. */
  SellingPlanMissingOption3LabelOnParentGroup = 'SELLING_PLAN_MISSING_OPTION3_LABEL_ON_PARENT_GROUP',
  /** Selling plan's option2 is required because option2 exists. */
  SellingPlanOption2RequiredAsDefinedOnParentGroup = 'SELLING_PLAN_OPTION2_REQUIRED_AS_DEFINED_ON_PARENT_GROUP',
  /** Selling plan's option3 is required because option3 exists. */
  SellingPlanOption3RequiredAsDefinedOnParentGroup = 'SELLING_PLAN_OPTION3_REQUIRED_AS_DEFINED_ON_PARENT_GROUP',
  /** Selling plans can't have more than 2 pricing policies. */
  SellingPlanPricingPoliciesLimit = 'SELLING_PLAN_PRICING_POLICIES_LIMIT',
  /** Selling plan's pricing policies must contain one fixed pricing policy. */
  SellingPlanPricingPoliciesMustContainAFixedPricingPolicy = 'SELLING_PLAN_PRICING_POLICIES_MUST_CONTAIN_A_FIXED_PRICING_POLICY',
  /** The input value is already taken. */
  Taken = 'TAKEN',
  /** The input value is too big. */
  TooBig = 'TOO_BIG',
  /** The input value is too long. */
  TooLong = 'TOO_LONG',
  /** The input value is too short. */
  TooShort = 'TOO_SHORT',
  /** The input value is the wrong length. */
  WrongLength = 'WRONG_LENGTH'
}

/** Represents valid selling plan interval. */
export enum Shopify_SellingPlanInterval {
  /** Day interval. */
  Day = 'DAY',
  /** Month interval. */
  Month = 'MONTH',
  /** Week interval. */
  Week = 'WEEK',
  /** Year interval. */
  Year = 'YEAR'
}

/** The selling plan inventory policy. */
export type Shopify_SellingPlanInventoryPolicy = {
  __typename?: 'Shopify_SellingPlanInventoryPolicy';
  /** When to reserve inventory for the order. */
  reserve: Shopify_SellingPlanReserve;
};

/**
 * Represents the type of pricing associated to the selling plan (for example, a $10 or 20% discount that is set
 * for a limited period or that is fixed for the duration of the subscription). Selling plan pricing policies and
 * associated records (selling plan groups, selling plans, billing policy, and delivery policy) are deleted 48
 * hours after a merchant uninstalls their subscriptions app. We recommend backing up these records if you need
 * to restore them later.
 */
export type Shopify_SellingPlanPricingPolicy = Shopify_SellingPlanFixedPricingPolicy | Shopify_SellingPlanRecurringPricingPolicy;

/** Represents a selling plan pricing policy adjustment type. */
export enum Shopify_SellingPlanPricingPolicyAdjustmentType {
  /** Fixed amount off adjustment. */
  FixedAmount = 'FIXED_AMOUNT',
  /** Percentage off adjustment. */
  Percentage = 'PERCENTAGE',
  /** Price of the policy. */
  Price = 'PRICE'
}

/** Represents a selling plan pricing policy adjustment value type. */
export type Shopify_SellingPlanPricingPolicyAdjustmentValue = Shopify_MoneyV2 | Shopify_SellingPlanPricingPolicyPercentageValue;

/** Represents selling plan pricing policy common fields. */
export type Shopify_SellingPlanPricingPolicyBase = {
  /** The price adjustment type. */
  adjustmentType: Shopify_SellingPlanPricingPolicyAdjustmentType;
  /** The price adjustment value. */
  adjustmentValue: Shopify_SellingPlanPricingPolicyAdjustmentValue;
};

/** The percentage value of a selling plan pricing policy percentage type. */
export type Shopify_SellingPlanPricingPolicyPercentageValue = {
  __typename?: 'Shopify_SellingPlanPricingPolicyPercentageValue';
  /** The percentage value. */
  percentage: Scalars['Float']['output'];
};

/** Represents a recurring selling plan billing policy. */
export type Shopify_SellingPlanRecurringBillingPolicy = {
  __typename?: 'Shopify_SellingPlanRecurringBillingPolicy';
  /** Specific anchor dates upon which the billing interval calculations should be made. */
  anchors: Array<Shopify_SellingPlanAnchor>;
  /** The date and time when the selling plan billing policy was created. */
  createdAt: Scalars['DateTime']['output'];
  /** The billing frequency, it can be either: day, week, month or year. */
  interval: Shopify_SellingPlanInterval;
  /** The number of intervals between billings. */
  intervalCount: Scalars['Int']['output'];
  /** Maximum number of billing iterations. */
  maxCycles?: Maybe<Scalars['Int']['output']>;
  /** Minimum number of billing iterations. */
  minCycles?: Maybe<Scalars['Int']['output']>;
};

/** Represents a recurring selling plan delivery policy. */
export type Shopify_SellingPlanRecurringDeliveryPolicy = {
  __typename?: 'Shopify_SellingPlanRecurringDeliveryPolicy';
  /** The specific anchor dates upon which the delivery interval calculations should be made. */
  anchors: Array<Shopify_SellingPlanAnchor>;
  /** The date and time when the selling plan delivery policy was created. */
  createdAt: Scalars['DateTime']['output'];
  /** Number of days which represent a buffer period for orders to be included in a cycle. */
  cutoff?: Maybe<Scalars['Int']['output']>;
  /**
   * Whether the delivery policy is merchant or buyer-centric.
   * Buyer-centric delivery policies state the time when the buyer will receive the goods.
   * Merchant-centric delivery policies state the time when the fulfillment should be started.
   * Currently, only merchant-centric delivery policies are supported.
   */
  intent: Shopify_SellingPlanRecurringDeliveryPolicyIntent;
  /** The delivery frequency, it can be either: day, week, month or year. */
  interval: Shopify_SellingPlanInterval;
  /** The number of intervals between deliveries. */
  intervalCount: Scalars['Int']['output'];
  /** The fulfillment or delivery behavior of the first fulfillment when the order is placed before the anchor. The default value for this field is `ASAP`. */
  preAnchorBehavior: Shopify_SellingPlanRecurringDeliveryPolicyPreAnchorBehavior;
};

/** Whether the delivery policy is merchant or buyer-centric. */
export enum Shopify_SellingPlanRecurringDeliveryPolicyIntent {
  /** A merchant-centric delivery policy. Mark this delivery policy to define when the merchant should start fulfillment. */
  FulfillmentBegin = 'FULFILLMENT_BEGIN'
}

/** The fulfillment or delivery behaviors of the first fulfillment when the orderis placed before the anchor. */
export enum Shopify_SellingPlanRecurringDeliveryPolicyPreAnchorBehavior {
  /** The orders placed can be fulfilled or delivered immediately. The orders placed inside a cutoff can be fulfilled or delivered at the next anchor. */
  Asap = 'ASAP',
  /**
   * The orders placed can be fulfilled or delivered at the next anchor date.
   * The orders placed inside a cutoff will skip the next anchor and can be fulfilled or
   * delivered at the following anchor.
   */
  Next = 'NEXT'
}

/** Represents a recurring selling plan pricing policy. It applies after the fixed pricing policy. By using the afterCycle parameter, you can specify the cycle when the recurring pricing policy comes into effect. Recurring pricing policies are not available for deferred purchase options. */
export type Shopify_SellingPlanRecurringPricingPolicy = Shopify_SellingPlanPricingPolicyBase & {
  __typename?: 'Shopify_SellingPlanRecurringPricingPolicy';
  /** The price adjustment type. */
  adjustmentType: Shopify_SellingPlanPricingPolicyAdjustmentType;
  /** The price adjustment value. */
  adjustmentValue: Shopify_SellingPlanPricingPolicyAdjustmentValue;
  /** Cycle after which this pricing policy applies. */
  afterCycle?: Maybe<Scalars['Int']['output']>;
  /** The date and time when the recurring selling plan pricing policy was created. */
  createdAt: Scalars['DateTime']['output'];
};

/** When to capture the payment for the remaining amount due. */
export enum Shopify_SellingPlanRemainingBalanceChargeTrigger {
  /** At an exact time defined by the remaining_balance_charge_exact_time field. */
  ExactTime = 'EXACT_TIME',
  /** When there's no remaining balance to be charged after checkout. */
  NoRemainingBalance = 'NO_REMAINING_BALANCE',
  /** After the duration defined by the remaining_balance_charge_time_after_checkout field. */
  TimeAfterCheckout = 'TIME_AFTER_CHECKOUT'
}

/** When to reserve inventory for a selling plan. */
export enum Shopify_SellingPlanReserve {
  /** Reserve inventory when order is fulfilled. */
  OnFulfillment = 'ON_FULFILLMENT',
  /** Reserve inventory at time of sale. */
  OnSale = 'ON_SALE'
}

/** A server pixel stores configuration for streaming customer interactions to an EventBridge or PubSub endpoint. */
export type Shopify_ServerPixel = Shopify_Node & {
  __typename?: 'Shopify_ServerPixel';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The current state of this server pixel. */
  status?: Maybe<Shopify_ServerPixelStatus>;
  /** Address of the EventBridge or PubSub endpoint. */
  webhookEndpointAddress?: Maybe<Scalars['String']['output']>;
};

/** The current state of a server pixel. */
export enum Shopify_ServerPixelStatus {
  /** This server pixel is connected: it will stream customer events to the endpoint if it is configured properly. */
  Connected = 'CONNECTED',
  /** This server pixel is disconnected: it does not stream events to the endpoint and an endpoint address has been added to the server pixel. */
  DisconnectedConfigured = 'DISCONNECTED_CONFIGURED',
  /** This server pixel is disconnected and unconfigured: it does not stream events to the endpoint and no endpoint address had been added to the server pixel. */
  DisconnectedUnconfigured = 'DISCONNECTED_UNCONFIGURED'
}

/** The class of the discount for combining purposes. */
export enum Shopify_ShippingDiscountClass {
  /** Combined as a shipping discount. */
  Shipping = 'SHIPPING'
}

/** The optional shipping label for this fulfillment. */
export type Shopify_ShippingLabel = Shopify_Node & {
  __typename?: 'Shopify_ShippingLabel';
  /** Indicates whether the label is cancellable or not. */
  cancellable: Scalars['Boolean']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The location of the shipping origin. This will be null when the shipping origin is unknown. */
  location?: Maybe<Shopify_Location>;
  /** Indicates whether the label was printed or not. */
  printed: Scalars['Boolean']['output'];
};

/** Represents the shipping details that the customer chose for their order. */
export type Shopify_ShippingLine = {
  __typename?: 'Shopify_ShippingLine';
  /**
   * A reference to the carrier service that provided the rate.
   * Present when the rate was computed by a third-party carrier service.
   */
  carrierIdentifier?: Maybe<Scalars['String']['output']>;
  /** A reference to the shipping method. */
  code?: Maybe<Scalars['String']['output']>;
  /** Whether the shipping line is custom or not. */
  custom: Scalars['Boolean']['output'];
  /** The general classification of the delivery method. */
  deliveryCategory?: Maybe<Scalars['String']['output']>;
  /** The discounts that have been allocated to the shipping line. */
  discountAllocations: Array<Shopify_DiscountAllocation>;
  /**
   * The pre-tax shipping price with discounts applied.
   * @deprecated Use `discountedPriceSet` instead.
   */
  discountedPrice: Shopify_MoneyV2;
  /** The shipping price after applying discounts. If the parent order.taxesIncluded field is true, then this price includes taxes. If not, it's the pre-tax price. */
  discountedPriceSet: Shopify_MoneyBag;
  /** A globally-unique ID. */
  id?: Maybe<Scalars['ID']['output']>;
  /** Whether the shipping line has been removed. */
  isRemoved: Scalars['Boolean']['output'];
  /**
   * The pre-tax shipping price without any discounts applied.
   * @deprecated Use `originalPriceSet` instead.
   */
  originalPrice: Shopify_MoneyV2;
  /** The pre-tax shipping price without any discounts applied. */
  originalPriceSet: Shopify_MoneyBag;
  /** The phone number at the shipping address. */
  phone?: Maybe<Scalars['String']['output']>;
  /**
   * Returns the price of the shipping line.
   * @deprecated Use `originalPriceSet` instead.
   */
  price: Scalars['Shopify_Money']['output'];
  /**
   * The fulfillment service requested for the shipping method.
   * Present if the shipping method requires processing by a third party fulfillment service.
   */
  requestedFulfillmentService?: Maybe<Shopify_FulfillmentService>;
  /** A unique identifier for the shipping rate. The format can change without notice and isn't meant to be shown to users. */
  shippingRateHandle?: Maybe<Scalars['String']['output']>;
  /** Returns the rate source for the shipping line. */
  source?: Maybe<Scalars['String']['output']>;
  /** The TaxLine objects connected to this shipping line. */
  taxLines: Array<Shopify_TaxLine>;
  /** Returns the title of the shipping line. */
  title: Scalars['String']['output'];
};

/** An auto-generated type for paginating through multiple ShippingLines. */
export type Shopify_ShippingLineConnection = {
  __typename?: 'Shopify_ShippingLineConnection';
  /** A list of edges. */
  edges: Array<Shopify_ShippingLineEdge>;
  /** A list of the nodes contained in ShippingLineEdge. */
  nodes: Array<Shopify_ShippingLine>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one ShippingLine and a cursor during pagination. */
export type Shopify_ShippingLineEdge = {
  __typename?: 'Shopify_ShippingLineEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of ShippingLineEdge. */
  node: Shopify_ShippingLine;
};

/** A sale associated with a shipping charge. */
export type Shopify_ShippingLineSale = Shopify_Sale & {
  __typename?: 'Shopify_ShippingLineSale';
  /** The type of order action that the sale represents. */
  actionType: Shopify_SaleActionType;
  /** The unique ID for the sale. */
  id: Scalars['ID']['output'];
  /** The line type assocated with the sale. */
  lineType: Shopify_SaleLineType;
  /** The number of units either ordered or intended to be returned. */
  quantity?: Maybe<Scalars['Int']['output']>;
  /** The shipping line item for the associated sale. `shippingLine` is not available if the `SaleActionType` is a return. */
  shippingLine?: Maybe<Shopify_ShippingLine>;
  /** All individual taxes associated with the sale. */
  taxes: Array<Shopify_SaleTax>;
  /** The total sale amount after taxes and discounts. */
  totalAmount: Shopify_MoneyBag;
  /** The total discounts allocated to the sale after taxes. */
  totalDiscountAmountAfterTaxes: Shopify_MoneyBag;
  /** The total discounts allocated to the sale before taxes. */
  totalDiscountAmountBeforeTaxes: Shopify_MoneyBag;
  /** The total amount of taxes for the sale. */
  totalTaxAmount: Shopify_MoneyBag;
};

/** The shipping method for the delivery. Customers will see applicable shipping methods in the shipping section of checkout. */
export type Shopify_ShippingMethod = {
  __typename?: 'Shopify_ShippingMethod';
  /** A unique code associated with the rate. For example: `expedited_mail` */
  code: Scalars['String']['output'];
  /**
   * A description of the rate, which customers will see at checkout.
   * For example: `Local delivery`, `Free Express Worldwide`, `Includes tracking and insurance`.
   */
  label: Scalars['String']['output'];
};

/** Represents the shipping costs refunded on the Refund. */
export type Shopify_ShippingRefund = {
  __typename?: 'Shopify_ShippingRefund';
  /**
   * The monetary value of the shipping fees to be refunded.
   * @deprecated Use `amountSet` instead.
   */
  amount: Scalars['Shopify_Money']['output'];
  /** The monetary value of the shipping fees to be refunded in shop and presentment currencies. */
  amountSet: Shopify_MoneyBag;
  /**
   * The maximum amount of shipping fees currently refundable.
   * @deprecated Use `maximumRefundableSet` instead.
   */
  maximumRefundable: Scalars['Shopify_Money']['output'];
  /** The maximum amount of shipping fees currently refundable in shop and presentment currencies. */
  maximumRefundableSet: Shopify_MoneyBag;
  /**
   * The monetary value of the tax allocated to shipping fees to be refunded.
   * @deprecated Use `taxSet` instead.
   */
  tax: Scalars['Shopify_Money']['output'];
  /** The monetary value of the tax allocated to shipping fees to be refunded in shop and presentment currencies. */
  taxSet: Shopify_MoneyBag;
};

/** Represents a collection of general settings and information about the shop. */
export type Shopify_Shop = Shopify_HasMetafields & Shopify_HasPublishedTranslations & Shopify_Node & {
  __typename?: 'Shopify_Shop';
  /** A list of the shop's active alert messages that appear in the Shopify admin. */
  alerts: Array<Shopify_ShopAlert>;
  /** A list of the shop's product categories. Limit: 1000 product categories. */
  allProductCategories: Array<Shopify_ProductCategory>;
  /**
   * The token required to query the shop's reports or dashboards.
   * @deprecated Not supported anymore.
   */
  analyticsToken: Scalars['String']['output'];
  /**
   * The paginated list of fulfillment orders assigned to the shop locations owned by the app.
   *
   * Assigned fulfillment orders are fulfillment orders that are set to be fulfilled from locations
   * managed by
   * [fulfillment services](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)
   * that are registered by the app.
   * One app (api_client) can host multiple fulfillment services on a shop.
   * Each fulfillment service manages a dedicated location on a shop.
   * Assigned fulfillment orders can have associated
   * [fulfillment requests](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderRequestStatus),
   * or might currently not be requested to be fulfilled.
   *
   * The app must have `read_assigned_fulfillment_orders`
   * [access scope](https://shopify.dev/docs/api/usage/access-scopes)
   * to be able to retrieve fulfillment orders assigned to its locations.
   *
   * All assigned fulfillment orders (except those with the `CLOSED` status) will be returned by default.
   * Perform filtering with the `assignmentStatus` argument
   * to receive only fulfillment orders that have been requested to be fulfilled.
   */
  assignedFulfillmentOrders: Shopify_FulfillmentOrderConnection;
  /** The list of sales channels not currently installed on the shop. */
  availableChannelApps: Shopify_AppConnection;
  /** The shop's billing address information. */
  billingAddress: Shopify_ShopAddress;
  /** List of all channel definitions associated with a shop. */
  channelDefinitionsForInstalledChannels: Array<Shopify_AvailableChannelDefinitionsByChannel>;
  /**
   * List of the shop's active sales channels.
   * @deprecated Use `QueryRoot.channels` instead.
   */
  channels: Shopify_ChannelConnection;
  /** Specifies whether the shop supports checkouts via Checkout API. */
  checkoutApiSupported: Scalars['Boolean']['output'];
  /**
   * Return a collection by its handle.
   * @deprecated Use `QueryRoot.collectionByHandle` instead.
   */
  collectionByHandle?: Maybe<Shopify_Collection>;
  /**
   * List of the shop's collection saved searches.
   * @deprecated Use `QueryRoot.collectionSavedSearches` instead.
   */
  collectionSavedSearches: Shopify_SavedSearchConnection;
  /**
   * List of the shop's collections.
   * @deprecated Use `QueryRoot.collections` instead.
   */
  collections: Shopify_CollectionConnection;
  /**
   * The public-facing contact email address for the shop.
   * Customers will use this email to communicate with the shop owner.
   */
  contactEmail: Scalars['String']['output'];
  /** Countries that have been defined in shipping zones for the shop. */
  countriesInShippingZones: Shopify_CountriesInShippingZones;
  /** The date and time when the shop was created. */
  createdAt: Scalars['DateTime']['output'];
  /** The three letter code for the currency that the shop sells in. */
  currencyCode: Shopify_CurrencyCode;
  /** How currencies are displayed on your store. */
  currencyFormats: Shopify_CurrencyFormats;
  /** The presentment currency settings for the shop excluding the shop's own currency. */
  currencySettings: Shopify_CurrencySettingConnection;
  /** Whether customer accounts are required, optional, or disabled for the shop. */
  customerAccounts: Shopify_ShopCustomerAccountsSetting;
  /** Information about the shop's customer accounts. */
  customerAccountsV2: Shopify_CustomerAccountsV2;
  /**
   * List of the shop's customer saved searches.
   * @deprecated Use `QueryRoot.customerSavedSearches` instead.
   */
  customerSavedSearches: Shopify_SavedSearchConnection;
  /** A list of tags that have been added to customer accounts. */
  customerTags: Shopify_StringConnection;
  /**
   * Customer accounts associated to the shop.
   * @deprecated Use `QueryRoot.customers` instead.
   */
  customers: Shopify_CustomerConnection;
  /** The shop's meta description used in search engine results. */
  description?: Maybe<Scalars['String']['output']>;
  /**
   * The domains configured for the shop.
   * @deprecated Use `domainsPaginated` instead.
   */
  domains: Array<Shopify_Domain>;
  /**
   * List of the shop's draft order saved searches.
   * @deprecated Use `QueryRoot.draftOrderSavedSearches` instead.
   */
  draftOrderSavedSearches: Shopify_SavedSearchConnection;
  /** A list of tags that have been added to draft orders. */
  draftOrderTags: Shopify_StringConnection;
  /**
   * List of saved draft orders on the shop.
   * @deprecated Use `QueryRoot.draftOrders` instead.
   */
  draftOrders: Shopify_DraftOrderConnection;
  /**
   * The shop owner's email address.
   * Shopify will use this email address to communicate with the shop owner.
   */
  email: Scalars['String']['output'];
  /** The presentment currencies enabled for the shop. */
  enabledPresentmentCurrencies: Array<Shopify_CurrencyCode>;
  /** The set of features enabled for the shop. */
  features: Shopify_ShopFeatures;
  /**
   * The paginated list of merchant-managed and third-party fulfillment orders.
   * @deprecated Use `QueryRoot.fulfillmentOrders` instead.
   */
  fulfillmentOrders: Shopify_FulfillmentOrderConnection;
  /** List of the shop's installed fulfillment services. */
  fulfillmentServices: Array<Shopify_FulfillmentService>;
  /** The shop's time zone as defined by the IANA. */
  ianaTimezone: Scalars['String']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /**
   * List of the shop's inventory items.
   * @deprecated Use `QueryRoot.inventoryItems` instead.
   */
  inventoryItems: Shopify_InventoryItemConnection;
  /**
   * The number of pendings orders on the shop.
   * Limited to a maximum of 10000.
   * @deprecated Use `QueryRoot.pendingOrdersCount` instead.
   */
  limitedPendingOrderCount: Shopify_LimitedPendingOrderCount;
  /**
   * List of active locations of the shop.
   * @deprecated Use `QueryRoot.locations` instead.
   */
  locations: Shopify_LocationConnection;
  /**
   * List of a shop's marketing events.
   * @deprecated Use `QueryRoot.marketingEvents` instead.
   */
  marketingEvents: Shopify_MarketingEventConnection;
  /** Whether SMS marketing has been enabled on the shop's checkout configuration settings. */
  marketingSmsConsentEnabledAtCheckout: Scalars['Boolean']['output'];
  /** The approval signals for a shop to support onboarding to channel apps. */
  merchantApprovalSignals?: Maybe<Shopify_MerchantApprovalSignals>;
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /** The shop's .myshopify.com domain name. */
  myshopifyDomain: Scalars['String']['output'];
  /** The shop's name. */
  name: Scalars['String']['output'];
  /** The shop's settings related to navigation. */
  navigationSettings: Array<Shopify_NavigationItem>;
  /** The prefix that appears before order numbers. */
  orderNumberFormatPrefix: Scalars['String']['output'];
  /** The suffix that appears after order numbers. */
  orderNumberFormatSuffix: Scalars['String']['output'];
  /**
   * List of the shop's order saved searches.
   * @deprecated Use `QueryRoot.orderSavedSearches` instead.
   */
  orderSavedSearches: Shopify_SavedSearchConnection;
  /** A list of tags that have been added to orders. */
  orderTags: Shopify_StringConnection;
  /**
   * A list of the shop's orders.
   * @deprecated Use `QueryRoot.orders` instead.
   */
  orders: Shopify_OrderConnection;
  /** The shop's settings related to payments. */
  paymentSettings: Shopify_PaymentSettings;
  /** The shop's billing plan. */
  plan: Shopify_ShopPlan;
  /**
   * List of the shop's price rule saved searches.
   * @deprecated Use `QueryRoot.priceRuleSavedSearches` instead.
   */
  priceRuleSavedSearches: Shopify_SavedSearchConnection;
  /**
   * List of the shop’s price rules.
   * @deprecated Use `QueryRoot.priceRules` instead.
   */
  priceRules: Shopify_PriceRuleConnection;
  /** The primary domain of the shop's online store. */
  primaryDomain: Shopify_Domain;
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafields: Shopify_PrivateMetafieldConnection;
  /**
   * Return a product by its handle.
   * @deprecated Use `QueryRoot.productByHandle` instead.
   */
  productByHandle?: Maybe<Shopify_Product>;
  /**
   * The list of all images of all products for the shop.
   * @deprecated Use `files` instead. See [filesQuery](https://shopify.dev/docs/api/admin-graphql/latest/queries/files) and its [query](https://shopify.dev/docs/api/admin-graphql/2024-01/queries/files#argument-query) argument for more information.
   */
  productImages: Shopify_ImageConnection;
  /**
   * List of the shop's product saved searches.
   * @deprecated Use `QueryRoot.productSavedSearches` instead.
   */
  productSavedSearches: Shopify_SavedSearchConnection;
  /** A list of tags that have been added to products. */
  productTags: Shopify_StringConnection;
  /** The list of types added to products. */
  productTypes: Shopify_StringConnection;
  /**
   * List of the shop's product variants.
   * @deprecated Use `QueryRoot.productVariants` instead.
   */
  productVariants: Shopify_ProductVariantConnection;
  /** The list of vendors added to products. */
  productVendors: Shopify_StringConnection;
  /**
   * List of the shop's products.
   * @deprecated Use `QueryRoot.products`.
   */
  products: Shopify_ProductConnection;
  /**
   * The number of publications for the shop.
   * @deprecated Use `QueryRoot.publicationsCount` instead.
   */
  publicationCount: Scalars['Int']['output'];
  /** The shop's limits for specific resources. For example, the maximum number ofvariants allowed per product, or the maximum number of locations allowed. */
  resourceLimits: Shopify_ShopResourceLimits;
  /** The URL of the rich text editor that can be used for mobile devices. */
  richTextEditorUrl: Scalars['Shopify_URL']['output'];
  /** Fetches a list of admin search results by a specified query. */
  search: Shopify_SearchResultConnection;
  /** The list of search filter options for the shop. These can be used to filter productvisibility for the shop. */
  searchFilters: Shopify_SearchFilterOptions;
  /** Whether the shop has outstanding setup steps. */
  setupRequired: Scalars['Boolean']['output'];
  /** The list of countries that the shop ships to. */
  shipsToCountries: Array<Shopify_CountryCode>;
  /** The list of all legal policies associated with a shop. */
  shopPolicies: Array<Shopify_ShopPolicy>;
  /** The paginated list of the shop's staff members. */
  staffMembers: Shopify_StaffMemberConnection;
  /** The storefront access token of a private application. These are scoped per-application. */
  storefrontAccessTokens: Shopify_StorefrontAccessTokenConnection;
  /**
   * The URL of the shop's storefront.
   * @deprecated Use `url` instead.
   */
  storefrontUrl: Scalars['Shopify_URL']['output'];
  /** Whether the shop charges taxes for shipping. */
  taxShipping: Scalars['Boolean']['output'];
  /** Whether applicable taxes are included in the shop's product prices. */
  taxesIncluded: Scalars['Boolean']['output'];
  /** The shop's time zone abbreviation. */
  timezoneAbbreviation: Scalars['String']['output'];
  /** The shop's time zone offset. */
  timezoneOffset: Scalars['String']['output'];
  /** The shop's time zone offset expressed as a number of minutes. */
  timezoneOffsetMinutes: Scalars['Int']['output'];
  /** Whether transactional SMS sent by Shopify have been disabled for a shop. */
  transactionalSmsDisabled: Scalars['Boolean']['output'];
  /** The translations associated with the resource. */
  translations: Array<Shopify_Translation>;
  /** The shop's unit system for weights and measures. */
  unitSystem: Shopify_UnitSystem;
  /** The date and time when the shop was last updated. */
  updatedAt: Scalars['DateTime']['output'];
  /** Fetches a list of images uploaded to the shop by their IDs. */
  uploadedImagesByIds: Array<Shopify_Image>;
  /** The URL of the shop's online store. */
  url: Scalars['Shopify_URL']['output'];
  /** The shop's primary unit of weight for products and shipping. */
  weightUnit: Shopify_WeightUnit;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopAssignedFulfillmentOrdersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  assignmentStatus?: InputMaybe<Shopify_FulfillmentOrderAssignmentStatus>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locationIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_FulfillmentOrderSortKeys>;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopAvailableChannelAppsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopChannelsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopCollectionByHandleArgs = {
  handle: Scalars['String']['input'];
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopCollectionSavedSearchesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopCollectionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  savedSearchId?: InputMaybe<Scalars['ID']['input']>;
  sortKey?: InputMaybe<Shopify_CollectionSortKeys>;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopCurrencySettingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopCustomerSavedSearchesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_CustomerSavedSearchSortKeys>;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopCustomerTagsArgs = {
  first: Scalars['Int']['input'];
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopCustomersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_CustomerSortKeys>;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopDraftOrderSavedSearchesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopDraftOrderTagsArgs = {
  first: Scalars['Int']['input'];
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopDraftOrdersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_DraftOrderSortKeys>;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopFulfillmentOrdersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  includeClosed?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_FulfillmentOrderSortKeys>;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopInventoryItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopLocationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  includeInactive?: InputMaybe<Scalars['Boolean']['input']>;
  includeLegacy?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_LocationSortKeys>;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopMarketingEventsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_MarketingEventSortKeys>;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace?: InputMaybe<Scalars['String']['input']>;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopOrderSavedSearchesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopOrderTagsArgs = {
  first: Scalars['Int']['input'];
  sort?: InputMaybe<Shopify_ShopTagSort>;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopOrdersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_OrderSortKeys>;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopPriceRuleSavedSearchesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopPriceRulesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  savedSearchId?: InputMaybe<Scalars['ID']['input']>;
  sortKey?: InputMaybe<Shopify_PriceRuleSortKeys>;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace: Scalars['String']['input'];
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopPrivateMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopProductByHandleArgs = {
  handle: Scalars['String']['input'];
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopProductImagesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_ProductImageSortKeys>;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopProductSavedSearchesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopProductTagsArgs = {
  first: Scalars['Int']['input'];
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopProductTypesArgs = {
  first: Scalars['Int']['input'];
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopProductVariantsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_ProductVariantSortKeys>;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopProductVendorsArgs = {
  first: Scalars['Int']['input'];
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopProductsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  savedSearchId?: InputMaybe<Scalars['ID']['input']>;
  sortKey?: InputMaybe<Shopify_ProductSortKeys>;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopSearchArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
  query: Scalars['String']['input'];
  types?: InputMaybe<Array<Shopify_SearchResultType>>;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopStaffMembersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopStorefrontAccessTokensArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopTranslationsArgs = {
  locale: Scalars['String']['input'];
  marketId?: InputMaybe<Scalars['ID']['input']>;
};


/** Represents a collection of general settings and information about the shop. */
export type Shopify_ShopUploadedImagesByIdsArgs = {
  imageIds: Array<Scalars['ID']['input']>;
};

/** An address for a shop. */
export type Shopify_ShopAddress = Shopify_Node & {
  __typename?: 'Shopify_ShopAddress';
  /** The first line of the address. Typically the street address or PO Box number. */
  address1?: Maybe<Scalars['String']['output']>;
  /** The second line of the address. Typically the number of the apartment, suite, or unit. */
  address2?: Maybe<Scalars['String']['output']>;
  /** The name of the city, district, village, or town. */
  city?: Maybe<Scalars['String']['output']>;
  /** The name of the company or organization. */
  company?: Maybe<Scalars['String']['output']>;
  /** Whether the address coordinates are valid. */
  coordinatesValidated: Scalars['Boolean']['output'];
  /** The name of the country. */
  country?: Maybe<Scalars['String']['output']>;
  /**
   * The two-letter code for the country of the address.
   *
   * For example, US.
   * @deprecated Use `countryCodeV2` instead.
   */
  countryCode?: Maybe<Scalars['String']['output']>;
  /**
   * The two-letter code for the country of the address.
   *
   * For example, US.
   */
  countryCodeV2?: Maybe<Shopify_CountryCode>;
  /**
   * The first name.
   * @deprecated Always null in this context.
   */
  firstName?: Maybe<Scalars['String']['output']>;
  /** A formatted version of the address, customized by the provided arguments. */
  formatted: Array<Scalars['String']['output']>;
  /** A comma-separated list of the values for city, province, and country. */
  formattedArea?: Maybe<Scalars['String']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /**
   * The last name.
   * @deprecated Always null in this context.
   */
  lastName?: Maybe<Scalars['String']['output']>;
  /** The latitude coordinate of the address. */
  latitude?: Maybe<Scalars['Float']['output']>;
  /** The longitude coordinate of the address. */
  longitude?: Maybe<Scalars['Float']['output']>;
  /**
   * The full name, based on firstName and lastName.
   * @deprecated Always null in this context.
   */
  name?: Maybe<Scalars['String']['output']>;
  /**
   * A phone number associated with the address.
   *
   * Formatted using E.164 standard. For example, _+16135551111_.
   */
  phone?: Maybe<Scalars['String']['output']>;
  /** The region of the address, such as the province, state, or district. */
  province?: Maybe<Scalars['String']['output']>;
  /**
   * The two-letter code for the region.
   *
   * For example, ON.
   */
  provinceCode?: Maybe<Scalars['String']['output']>;
  /** The zip or postal code of the address. */
  zip?: Maybe<Scalars['String']['output']>;
};


/** An address for a shop. */
export type Shopify_ShopAddressFormattedArgs = {
  withCompany?: InputMaybe<Scalars['Boolean']['input']>;
};

/** An alert message that appears in the Shopify admin about a problem with a store setting, with an action to take. For example, you could show an alert to ask the merchant to enter their billing information to activate Shopify Plus. */
export type Shopify_ShopAlert = {
  __typename?: 'Shopify_ShopAlert';
  /** The text for the button in the alert that links to related information. For example, _Add credit card_. */
  action: Shopify_ShopAlertAction;
  /** A description of the alert and further information, such as whether the merchant will be charged. */
  description: Scalars['String']['output'];
};

/** An action associated to a shop alert, such as adding a credit card. */
export type Shopify_ShopAlertAction = {
  __typename?: 'Shopify_ShopAlertAction';
  /** The text for the button in the alert. For example, _Add credit card_. */
  title: Scalars['String']['output'];
  /** The target URL that the button links to. */
  url: Scalars['Shopify_URL']['output'];
};

/**
 * Possible branding of a shop.
 * Branding can be used to define the look of a shop including its styling and logo in the Shopify Admin.
 */
export enum Shopify_ShopBranding {
  /** Shop has Rogers branding. */
  Rogers = 'ROGERS',
  /** Shop has Shopify branding. */
  Shopify = 'SHOPIFY',
  /** Shop has Shopify Gold branding. */
  ShopifyGold = 'SHOPIFY_GOLD',
  /** Shop has Shopify Plus branding. */
  ShopifyPlus = 'SHOPIFY_PLUS'
}

/** Represents the shop's customer account requirement preference. */
export enum Shopify_ShopCustomerAccountsSetting {
  Disabled = 'DISABLED',
  Optional = 'OPTIONAL',
  Required = 'REQUIRED'
}

/**
 * Represents the feature set available to the shop.
 * Most fields specify whether a feature is enabled for a shop, and some fields return information
 * related to specific features.
 */
export type Shopify_ShopFeatures = {
  __typename?: 'Shopify_ShopFeatures';
  /** Whether a shop has access to Avalara AvaTax. */
  avalaraAvatax: Scalars['Boolean']['output'];
  /** The branding of the shop, which influences its look and feel in the Shopify admin. */
  branding: Shopify_ShopBranding;
  /** Represents the Bundles feature configuration for the shop. */
  bundles: Shopify_BundlesFeature;
  /** Whether a shop's online store can have CAPTCHA protection. */
  captcha: Scalars['Boolean']['output'];
  /** Whether a shop's online store can have CAPTCHA protection for domains not managed by Shopify. */
  captchaExternalDomains: Scalars['Boolean']['output'];
  /** Represents the cart transform feature configuration for the shop. */
  cartTransform: Shopify_CartTransformFeature;
  /**
   * Whether the delivery profiles functionality is enabled for this shop.
   * @deprecated Delivery profiles are now 100% enabled across Shopify.
   */
  deliveryProfiles: Scalars['Boolean']['output'];
  /** Whether a shop has access to the Google Analytics dynamic remarketing feature. */
  dynamicRemarketing: Scalars['Boolean']['output'];
  /** Whether a shop can be migrated to use Shopify subscriptions. */
  eligibleForSubscriptionMigration: Scalars['Boolean']['output'];
  /** Whether a shop is configured properly to sell subscriptions. */
  eligibleForSubscriptions: Scalars['Boolean']['output'];
  /** Whether a shop can create gift cards. */
  giftCards: Scalars['Boolean']['output'];
  /**
   * Whether a shop displays Harmonized System codes on products. This is used for customs when shipping
   * internationally.
   */
  harmonizedSystemCode: Scalars['Boolean']['output'];
  /**
   * Whether a shop can enable international domains.
   * @deprecated All shops have international domains through Shopify Markets.
   */
  internationalDomains: Scalars['Boolean']['output'];
  /** Whether a shop can enable international price overrides. */
  internationalPriceOverrides: Scalars['Boolean']['output'];
  /** Whether a shop can enable international price rules. */
  internationalPriceRules: Scalars['Boolean']['output'];
  /** Whether a shop has enabled a legacy subscription gateway to handle older subscriptions. */
  legacySubscriptionGatewayEnabled: Scalars['Boolean']['output'];
  /**
   * Whether to show the Live View metrics in the Shopify admin. Live view is hidden from merchants that are on a trial
   * or don't have a storefront.
   */
  liveView: Scalars['Boolean']['output'];
  /**
   * Whether a shop has multi-location functionality.
   * @deprecated All shops support multi-location inventory. Use `QueryRoot.locations` to determine whether shop has more than one location.
   *
   */
  multiLocation: Scalars['Boolean']['output'];
  /** Whether a shop has access to the onboarding visual. */
  onboardingVisual: Scalars['Boolean']['output'];
  /** Whether a shop is configured to sell subscriptions with PayPal Express. */
  paypalExpressSubscriptionGatewayStatus: Shopify_PaypalExpressSubscriptionsGatewayStatus;
  /** Whether a shop has access to all reporting features. */
  reports: Scalars['Boolean']['output'];
  /** Whether a shop has ever had subscription products. */
  sellsSubscriptions: Scalars['Boolean']['output'];
  /**
   * Whether the shop has a Shopify Plus subscription.
   * @deprecated Use Shop.plan.shopifyPlus instead.
   */
  shopifyPlus: Scalars['Boolean']['output'];
  /** Whether to show metrics in the Shopify admin. Metrics are hidden for new merchants until they become meaningful. */
  showMetrics: Scalars['Boolean']['output'];
  /** Whether a shop has an online store. */
  storefront: Scalars['Boolean']['output'];
  /** Whether a shop is using Shopify Balance. */
  usingShopifyBalance: Scalars['Boolean']['output'];
};

/** A locale that's been enabled on a shop. */
export type Shopify_ShopLocale = {
  __typename?: 'Shopify_ShopLocale';
  /** The locale ISO code. */
  locale: Scalars['String']['output'];
  /** The market web presences that use the locale. */
  marketWebPresences: Array<Shopify_MarketWebPresence>;
  /** The human-readable locale name. */
  name: Scalars['String']['output'];
  /** Whether the locale is the default locale for the shop. */
  primary: Scalars['Boolean']['output'];
  /** Whether the locale is visible to buyers. */
  published: Scalars['Boolean']['output'];
};

/** Shop Pay Installments payment details related to a transaction. */
export type Shopify_ShopPayInstallmentsPaymentDetails = Shopify_BasePaymentDetails & {
  __typename?: 'Shopify_ShopPayInstallmentsPaymentDetails';
  /** The name of payment method used by the buyer. */
  paymentMethodName?: Maybe<Scalars['String']['output']>;
};

/** The billing plan of the shop. */
export type Shopify_ShopPlan = {
  __typename?: 'Shopify_ShopPlan';
  /** The name of the shop's billing plan. */
  displayName: Scalars['String']['output'];
  /** Whether the shop is a partner development shop for testing purposes. */
  partnerDevelopment: Scalars['Boolean']['output'];
  /** Whether the shop has a Shopify Plus subscription. */
  shopifyPlus: Scalars['Boolean']['output'];
};

/** Policy that a merchant has configured for their store, such as their refund or privacy policy. */
export type Shopify_ShopPolicy = Shopify_HasPublishedTranslations & Shopify_Node & {
  __typename?: 'Shopify_ShopPolicy';
  /** The text of the policy. The maximum size is 512kb. */
  body: Scalars['Shopify_HTML']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The translations associated with the resource. */
  translations: Array<Shopify_Translation>;
  /** The shop policy type. */
  type: Shopify_ShopPolicyType;
  /** The public URL of the policy. */
  url: Scalars['Shopify_URL']['output'];
};


/** Policy that a merchant has configured for their store, such as their refund or privacy policy. */
export type Shopify_ShopPolicyTranslationsArgs = {
  locale: Scalars['String']['input'];
  marketId?: InputMaybe<Scalars['ID']['input']>;
};

/** Possible error codes that can be returned by `ShopPolicyUserError`. */
export enum Shopify_ShopPolicyErrorCode {
  /** The input value is too big. */
  TooBig = 'TOO_BIG'
}

/** Available shop policy types. */
export enum Shopify_ShopPolicyType {
  /** The contact information. */
  ContactInformation = 'CONTACT_INFORMATION',
  /** The legal notice. */
  LegalNotice = 'LEGAL_NOTICE',
  /** The privacy policy. */
  PrivacyPolicy = 'PRIVACY_POLICY',
  /** The refund policy. */
  RefundPolicy = 'REFUND_POLICY',
  /** The shipping policy. */
  ShippingPolicy = 'SHIPPING_POLICY',
  /** The purchase options cancellation policy. */
  SubscriptionPolicy = 'SUBSCRIPTION_POLICY',
  /** The terms of sale. */
  TermsOfSale = 'TERMS_OF_SALE',
  /** The terms of service. */
  TermsOfService = 'TERMS_OF_SERVICE'
}

/** An error that occurs during the execution of a shop policy mutation. */
export type Shopify_ShopPolicyUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_ShopPolicyUserError';
  /** The error code. */
  code?: Maybe<Shopify_ShopPolicyErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** An error that occurs during the execution of `ShopResourceFeedbackCreate`. */
export type Shopify_ShopResourceFeedbackCreateUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_ShopResourceFeedbackCreateUserError';
  /** The error code. */
  code?: Maybe<Shopify_ShopResourceFeedbackCreateUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `ShopResourceFeedbackCreateUserError`. */
export enum Shopify_ShopResourceFeedbackCreateUserErrorCode {
  /** The input value is blank. */
  Blank = 'BLANK',
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** The feedback for a later version of the resource was already accepted. */
  OutdatedFeedback = 'OUTDATED_FEEDBACK',
  /** The input value needs to be blank. */
  Present = 'PRESENT'
}

/** Resource limits of a shop. */
export type Shopify_ShopResourceLimits = {
  __typename?: 'Shopify_ShopResourceLimits';
  /** Maximum number of locations allowed. */
  locationLimit: Scalars['Int']['output'];
  /** Maximum number of product options allowed. */
  maxProductOptions: Scalars['Int']['output'];
  /** The maximum number of variants allowed per product. */
  maxProductVariants: Scalars['Int']['output'];
  /** Whether the shop has reached the limit of the number of URL redirects it can make for resources. */
  redirectLimitReached: Scalars['Boolean']['output'];
};

/** Possible sort of tags. */
export enum Shopify_ShopTagSort {
  /** Alphabetical sort. */
  Alphabetical = 'ALPHABETICAL',
  /** Popularity sort. */
  Popular = 'POPULAR'
}

/** A Shopify Function. */
export type Shopify_ShopifyFunction = {
  __typename?: 'Shopify_ShopifyFunction';
  /** The API type of the Shopify Function. */
  apiType: Scalars['String']['output'];
  /** The API version of the Shopify Function. */
  apiVersion: Scalars['String']['output'];
  /** The app that owns the Shopify Function. */
  app: Shopify_App;
  /** The App Bridge information for the Shopify Function. */
  appBridge: Shopify_FunctionsAppBridge;
  /** The client ID of the app that owns the Shopify Function. */
  appKey: Scalars['String']['output'];
  /** The description of the Shopify Function. */
  description?: Maybe<Scalars['String']['output']>;
  /** The ID of the Shopify Function. */
  id: Scalars['String']['output'];
  /** The input query of the Shopify Function. */
  inputQuery?: Maybe<Scalars['String']['output']>;
  /** The title of the Shopify Function. */
  title: Scalars['String']['output'];
  /** If the Shopify Function uses the creation UI in the Admin. */
  useCreationUi: Scalars['Boolean']['output'];
};

/**
 * Balance and payout information for a
 * [Shopify Payments](https://help.shopify.com/manual/payments/shopify-payments/getting-paid-with-shopify-payments)
 * account. Balance includes all balances for the currencies supported by the shop.
 * You can also query for a list of payouts, where each payout includes the corresponding currencyCode field.
 */
export type Shopify_ShopifyPaymentsAccount = Shopify_Node & {
  __typename?: 'Shopify_ShopifyPaymentsAccount';
  /** Whether the Shopify Payments setup is completed. */
  activated: Scalars['Boolean']['output'];
  /** Current balances in all currencies for the account. */
  balance: Array<Shopify_MoneyV2>;
  /** A list of balance transactions associated with the shop. */
  balanceTransactions: Shopify_ShopifyPaymentsBalanceTransactionConnection;
  /** All bank accounts configured for the Shopify Payments account. */
  bankAccounts: Shopify_ShopifyPaymentsBankAccountConnection;
  /**
   * The statement descriptor used for charges.
   *
   * The statement descriptor appears on a customer's credit card or bank statement when they make a purchase.
   * @deprecated Use `chargeStatementDescriptors` instead.
   */
  chargeStatementDescriptor?: Maybe<Scalars['String']['output']>;
  /**
   * The statement descriptors used for charges.
   *
   * These descriptors appear on a customer's credit card or bank statement when they make a purchase.
   */
  chargeStatementDescriptors?: Maybe<Shopify_ShopifyPaymentsChargeStatementDescriptor>;
  /** The Shopify Payments account country. */
  country: Scalars['String']['output'];
  /** The default payout currency for the Shopify Payments account. */
  defaultCurrency: Shopify_CurrencyCode;
  /** All disputes related to the Shopify Payments account. */
  disputes: Shopify_ShopifyPaymentsDisputeConnection;
  /** The fraud settings of the Shopify Payments account. */
  fraudSettings: Shopify_ShopifyPaymentsFraudSettings;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The notifications settings for the account. */
  notificationSettings: Shopify_ShopifyPaymentsNotificationSettings;
  /** Whether the Shopify Payments account can be onboarded. */
  onboardable: Scalars['Boolean']['output'];
  /** The payout schedule for the account. */
  payoutSchedule: Shopify_ShopifyPaymentsPayoutSchedule;
  /**
   * The descriptor used for payouts.
   *
   * The descriptor appears on a merchant's bank statement when they receive a payout.
   */
  payoutStatementDescriptor?: Maybe<Scalars['String']['output']>;
  /** All current and previous payouts made between the account and the bank account. */
  payouts: Shopify_ShopifyPaymentsPayoutConnection;
  /** The permitted documents for identity verification. */
  permittedVerificationDocuments: Array<Shopify_ShopifyPaymentsVerificationDocument>;
  /** The verifications necessary for this account. */
  verifications: Array<Shopify_ShopifyPaymentsVerification>;
};


/**
 * Balance and payout information for a
 * [Shopify Payments](https://help.shopify.com/manual/payments/shopify-payments/getting-paid-with-shopify-payments)
 * account. Balance includes all balances for the currencies supported by the shop.
 * You can also query for a list of payouts, where each payout includes the corresponding currencyCode field.
 */
export type Shopify_ShopifyPaymentsAccountBalanceTransactionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  hideTransfers?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  savedSearchId?: InputMaybe<Scalars['ID']['input']>;
  sortKey?: InputMaybe<Shopify_BalanceTransactionSortKeys>;
};


/**
 * Balance and payout information for a
 * [Shopify Payments](https://help.shopify.com/manual/payments/shopify-payments/getting-paid-with-shopify-payments)
 * account. Balance includes all balances for the currencies supported by the shop.
 * You can also query for a list of payouts, where each payout includes the corresponding currencyCode field.
 */
export type Shopify_ShopifyPaymentsAccountBankAccountsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Balance and payout information for a
 * [Shopify Payments](https://help.shopify.com/manual/payments/shopify-payments/getting-paid-with-shopify-payments)
 * account. Balance includes all balances for the currencies supported by the shop.
 * You can also query for a list of payouts, where each payout includes the corresponding currencyCode field.
 */
export type Shopify_ShopifyPaymentsAccountDisputesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Balance and payout information for a
 * [Shopify Payments](https://help.shopify.com/manual/payments/shopify-payments/getting-paid-with-shopify-payments)
 * account. Balance includes all balances for the currencies supported by the shop.
 * You can also query for a list of payouts, where each payout includes the corresponding currencyCode field.
 */
export type Shopify_ShopifyPaymentsAccountPayoutsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  transactionType?: InputMaybe<Shopify_ShopifyPaymentsPayoutTransactionType>;
};

/** The adjustment order object. */
export type Shopify_ShopifyPaymentsAdjustmentOrder = {
  __typename?: 'Shopify_ShopifyPaymentsAdjustmentOrder';
  /** The amount of the adjustment order. */
  amount: Shopify_MoneyV2;
  /** The link to the adjustment order. */
  link: Scalars['Shopify_URL']['output'];
  /** The name of the adjustment order. */
  name: Scalars['String']['output'];
};

/** A transaction that contributes to a Shopify Payments account balance. */
export type Shopify_ShopifyPaymentsBalanceTransaction = Shopify_Node & {
  __typename?: 'Shopify_ShopifyPaymentsBalanceTransaction';
  /** The adjustment orders associated to the transaction. */
  adjustmentsOrders: Array<Shopify_ShopifyPaymentsAdjustmentOrder>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The net amount contributing to the merchant's balance. */
  net: Shopify_MoneyV2;
  /** The date and time when the balance transaction was processed. */
  transactionDate: Scalars['DateTime']['output'];
};

/** An auto-generated type for paginating through multiple ShopifyPaymentsBalanceTransactions. */
export type Shopify_ShopifyPaymentsBalanceTransactionConnection = {
  __typename?: 'Shopify_ShopifyPaymentsBalanceTransactionConnection';
  /** A list of edges. */
  edges: Array<Shopify_ShopifyPaymentsBalanceTransactionEdge>;
  /** A list of the nodes contained in ShopifyPaymentsBalanceTransactionEdge. */
  nodes: Array<Shopify_ShopifyPaymentsBalanceTransaction>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one ShopifyPaymentsBalanceTransaction and a cursor during pagination. */
export type Shopify_ShopifyPaymentsBalanceTransactionEdge = {
  __typename?: 'Shopify_ShopifyPaymentsBalanceTransactionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of ShopifyPaymentsBalanceTransactionEdge. */
  node: Shopify_ShopifyPaymentsBalanceTransaction;
};

/** A bank account that can receive payouts. */
export type Shopify_ShopifyPaymentsBankAccount = Shopify_Node & {
  __typename?: 'Shopify_ShopifyPaymentsBankAccount';
  /** The account number of the bank account. */
  accountNumber: Scalars['String']['output'];
  /** The last digits of the account number (the rest is redacted). */
  accountNumberLastDigits: Scalars['String']['output'];
  /** The name of the bank. */
  bankName?: Maybe<Scalars['String']['output']>;
  /** The country of the bank. */
  country: Shopify_CountryCode;
  /** The date that the bank account was created. */
  createdAt: Scalars['DateTime']['output'];
  /** The currency of the bank account. */
  currency: Shopify_CurrencyCode;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** All current and previous payouts made between the account and the bank account. */
  payouts: Shopify_ShopifyPaymentsPayoutConnection;
  /** The routing number of the bank account. */
  routingNumber: Scalars['String']['output'];
  /** The status of the bank account. */
  status: Shopify_ShopifyPaymentsBankAccountStatus;
};


/** A bank account that can receive payouts. */
export type Shopify_ShopifyPaymentsBankAccountPayoutsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  transactionType?: InputMaybe<Shopify_ShopifyPaymentsPayoutTransactionType>;
};

/** An auto-generated type for paginating through multiple ShopifyPaymentsBankAccounts. */
export type Shopify_ShopifyPaymentsBankAccountConnection = {
  __typename?: 'Shopify_ShopifyPaymentsBankAccountConnection';
  /** A list of edges. */
  edges: Array<Shopify_ShopifyPaymentsBankAccountEdge>;
  /** A list of the nodes contained in ShopifyPaymentsBankAccountEdge. */
  nodes: Array<Shopify_ShopifyPaymentsBankAccount>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one ShopifyPaymentsBankAccount and a cursor during pagination. */
export type Shopify_ShopifyPaymentsBankAccountEdge = {
  __typename?: 'Shopify_ShopifyPaymentsBankAccountEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of ShopifyPaymentsBankAccountEdge. */
  node: Shopify_ShopifyPaymentsBankAccount;
};

/** The bank account status. */
export enum Shopify_ShopifyPaymentsBankAccountStatus {
  /** A payout to the bank account failed. */
  Errored = 'ERRORED',
  /** A bank account that hasn't had any activity and that's not validated. */
  New = 'NEW',
  /** It was determined that the bank account exists. */
  Validated = 'VALIDATED',
  /** Bank account validation was successful. */
  Verified = 'VERIFIED'
}

/** The charge descriptors for a payments account. */
export type Shopify_ShopifyPaymentsChargeStatementDescriptor = {
  /** The default charge statement descriptor. */
  default?: Maybe<Scalars['String']['output']>;
  /** The prefix of the statement descriptor. */
  prefix: Scalars['String']['output'];
};

/** The charge descriptors for a payments account. */
export type Shopify_ShopifyPaymentsDefaultChargeStatementDescriptor = Shopify_ShopifyPaymentsChargeStatementDescriptor & {
  __typename?: 'Shopify_ShopifyPaymentsDefaultChargeStatementDescriptor';
  /** The default charge statement descriptor. */
  default?: Maybe<Scalars['String']['output']>;
  /** The prefix of the statement descriptor. */
  prefix: Scalars['String']['output'];
};

/** A dispute occurs when a buyer questions the legitimacy of a charge with their financial institution. */
export type Shopify_ShopifyPaymentsDispute = Shopify_LegacyInteroperability & Shopify_Node & {
  __typename?: 'Shopify_ShopifyPaymentsDispute';
  /** The total amount disputed by the cardholder. */
  amount: Shopify_MoneyV2;
  /** The deadline for evidence submission. */
  evidenceDueBy?: Maybe<Scalars['Date']['output']>;
  /** The date when evidence was sent. Returns null if evidence hasn't yet been sent. */
  evidenceSentOn?: Maybe<Scalars['Date']['output']>;
  /** The date when this dispute was resolved. Returns null if the dispute isn't yet resolved. */
  finalizedOn?: Maybe<Scalars['Date']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The date when this dispute was initiated. */
  initiatedAt: Scalars['DateTime']['output'];
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['Shopify_UnsignedInt64']['output'];
  /** The order that contains the charge that's under dispute. */
  order?: Maybe<Shopify_Order>;
  /** The reason of the dispute. */
  reasonDetails: Shopify_ShopifyPaymentsDisputeReasonDetails;
  /** The current state of the dispute. */
  status: Shopify_DisputeStatus;
  /** Indicates if this dispute is still in the inquiry phase or has turned into a chargeback. */
  type: Shopify_DisputeType;
};

/** An auto-generated type for paginating through multiple ShopifyPaymentsDisputes. */
export type Shopify_ShopifyPaymentsDisputeConnection = {
  __typename?: 'Shopify_ShopifyPaymentsDisputeConnection';
  /** A list of edges. */
  edges: Array<Shopify_ShopifyPaymentsDisputeEdge>;
  /** A list of the nodes contained in ShopifyPaymentsDisputeEdge. */
  nodes: Array<Shopify_ShopifyPaymentsDispute>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one ShopifyPaymentsDispute and a cursor during pagination. */
export type Shopify_ShopifyPaymentsDisputeEdge = {
  __typename?: 'Shopify_ShopifyPaymentsDisputeEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of ShopifyPaymentsDisputeEdge. */
  node: Shopify_ShopifyPaymentsDispute;
};

/** The evidence associated with the dispute. */
export type Shopify_ShopifyPaymentsDisputeEvidence = Shopify_Node & {
  __typename?: 'Shopify_ShopifyPaymentsDisputeEvidence';
  /** The activity logs associated with the dispute evidence. */
  accessActivityLog?: Maybe<Scalars['String']['output']>;
  /** The billing address that's provided by the customer. */
  billingAddress?: Maybe<Shopify_MailingAddress>;
  /** The cancellation policy disclosure associated with the dispute evidence. */
  cancellationPolicyDisclosure?: Maybe<Scalars['String']['output']>;
  /** The cancellation policy file associated with the dispute evidence. */
  cancellationPolicyFile?: Maybe<Shopify_ShopifyPaymentsDisputeFileUpload>;
  /** The cancellation rebuttal associated with the dispute evidence. */
  cancellationRebuttal?: Maybe<Scalars['String']['output']>;
  /** The customer communication file associated with the dispute evidence. */
  customerCommunicationFile?: Maybe<Shopify_ShopifyPaymentsDisputeFileUpload>;
  /** The customer's email address. */
  customerEmailAddress?: Maybe<Scalars['String']['output']>;
  /** The customer's first name. */
  customerFirstName?: Maybe<Scalars['String']['output']>;
  /** The customer's last name. */
  customerLastName?: Maybe<Scalars['String']['output']>;
  /** The customer purchase ip for this dispute evidence. */
  customerPurchaseIp?: Maybe<Scalars['String']['output']>;
  /** The dispute associated with the evidence. */
  dispute: Shopify_ShopifyPaymentsDispute;
  /** The file uploads associated with the dispute evidence. */
  disputeFileUploads: Array<Shopify_ShopifyPaymentsDisputeFileUpload>;
  /** The fulfillments associated with the dispute evidence. */
  fulfillments: Array<Shopify_ShopifyPaymentsDisputeFulfillment>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The product description for this dispute evidence. */
  productDescription?: Maybe<Scalars['String']['output']>;
  /** The refund policy disclosure associated with the dispute evidence. */
  refundPolicyDisclosure?: Maybe<Scalars['String']['output']>;
  /** The refund policy file associated with the dispute evidence. */
  refundPolicyFile?: Maybe<Shopify_ShopifyPaymentsDisputeFileUpload>;
  /** The refund refusal explanation associated with dispute evidence. */
  refundRefusalExplanation?: Maybe<Scalars['String']['output']>;
  /** The service documentation file associated with the dispute evidence. */
  serviceDocumentationFile?: Maybe<Shopify_ShopifyPaymentsDisputeFileUpload>;
  /** The mailing address for shipping that's provided by the customer. */
  shippingAddress?: Maybe<Shopify_MailingAddress>;
  /** The shipping documentation file associated with the dispute evidence. */
  shippingDocumentationFile?: Maybe<Shopify_ShopifyPaymentsDisputeFileUpload>;
  /** Whether the dispute evidence is submitted. */
  submitted: Scalars['Boolean']['output'];
  /** The uncategorized file associated with the dispute evidence. */
  uncategorizedFile?: Maybe<Shopify_ShopifyPaymentsDisputeFileUpload>;
  /** The uncategorized text for the dispute evidence. */
  uncategorizedText?: Maybe<Scalars['String']['output']>;
};

/** The possible dispute evidence file types. */
export enum Shopify_ShopifyPaymentsDisputeEvidenceFileType {
  /** Cancellation Policy File. */
  CancellationPolicyFile = 'CANCELLATION_POLICY_FILE',
  /** Customer Communication File. */
  CustomerCommunicationFile = 'CUSTOMER_COMMUNICATION_FILE',
  /** Refund Policy File. */
  RefundPolicyFile = 'REFUND_POLICY_FILE',
  /** Service Documentation File. */
  ServiceDocumentationFile = 'SERVICE_DOCUMENTATION_FILE',
  /** Shipping Documentation File. */
  ShippingDocumentationFile = 'SHIPPING_DOCUMENTATION_FILE',
  /** Uncategorized File. */
  UncategorizedFile = 'UNCATEGORIZED_FILE'
}

/** The file upload associated with the dispute evidence. */
export type Shopify_ShopifyPaymentsDisputeFileUpload = Shopify_Node & {
  __typename?: 'Shopify_ShopifyPaymentsDisputeFileUpload';
  /** The type of the file for the dispute evidence. */
  disputeEvidenceType?: Maybe<Shopify_ShopifyPaymentsDisputeEvidenceFileType>;
  /** The file size. */
  fileSize: Scalars['Int']['output'];
  /** The file type. */
  fileType: Scalars['String']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The original file name. */
  originalFileName?: Maybe<Scalars['String']['output']>;
  /** The URL for accessing the file. */
  url: Scalars['Shopify_URL']['output'];
};

/** The fulfillment associated with dispute evidence. */
export type Shopify_ShopifyPaymentsDisputeFulfillment = Shopify_Node & {
  __typename?: 'Shopify_ShopifyPaymentsDisputeFulfillment';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The shipping carrier for this fulfillment. */
  shippingCarrier?: Maybe<Scalars['String']['output']>;
  /** The shipping date for this fulfillment. */
  shippingDate?: Maybe<Scalars['Date']['output']>;
  /** The shipping tracking number for this fulfillment. */
  shippingTrackingNumber?: Maybe<Scalars['String']['output']>;
};

/** The reason for the dispute provided by the cardholder's bank. */
export enum Shopify_ShopifyPaymentsDisputeReason {
  /** The customer's bank can't process the charge. */
  BankCannotProcess = 'BANK_CANNOT_PROCESS',
  /** The customer claims that the purchased product was returned or the transaction was otherwise canceled, but you haven't yet provided a refund or credit. */
  CreditNotProcessed = 'CREDIT_NOT_PROCESSED',
  /** The customer initiated the dispute. Contact the customer for additional details on why the payment was disputed. */
  CustomerInitiated = 'CUSTOMER_INITIATED',
  /** The customer's bank can't proceed with the debit since it hasn't been authorized. */
  DebitNotAuthorized = 'DEBIT_NOT_AUTHORIZED',
  /** The customer claims they were charged multiple times for the same product or service. */
  Duplicate = 'DUPLICATE',
  /** The cardholder claims that they didn’t authorize the payment. */
  Fraudulent = 'FRAUDULENT',
  /** The dispute is uncategorized, so you should contact the customer for additional details to find out why the payment was disputed. */
  General = 'GENERAL',
  /** The customer account associated with the purchase is incorrect. */
  IncorrectAccountDetails = 'INCORRECT_ACCOUNT_DETAILS',
  /** The customer's bank account has insufficient funds. */
  InsufficientFunds = 'INSUFFICIENT_FUNDS',
  /** The customer claims they did not receive the products or services purchased. */
  ProductNotReceived = 'PRODUCT_NOT_RECEIVED',
  /** The product or service was received but was defective, damaged, or not as described. */
  ProductUnacceptable = 'PRODUCT_UNACCEPTABLE',
  /** The customer claims that you continued to charge them after a subscription was canceled. */
  SubscriptionCancelled = 'SUBSCRIPTION_CANCELLED',
  /** The customer doesn’t recognize the payment appearing on their card statement. */
  Unrecognized = 'UNRECOGNIZED'
}

/** Details regarding a dispute reason. */
export type Shopify_ShopifyPaymentsDisputeReasonDetails = {
  __typename?: 'Shopify_ShopifyPaymentsDisputeReasonDetails';
  /** The raw code provided by the payment network. */
  networkReasonCode?: Maybe<Scalars['String']['output']>;
  /** The reason for the dispute provided by the cardholder's banks. */
  reason: Shopify_ShopifyPaymentsDisputeReason;
};

/** Presents all Shopify Payments information related to an extended authorization. */
export type Shopify_ShopifyPaymentsExtendedAuthorization = {
  __typename?: 'Shopify_ShopifyPaymentsExtendedAuthorization';
  /** The time after which the extended authorization expires. After the expiry, the merchant is unable to capture the payment. */
  extendedAuthorizationExpiresAt: Scalars['DateTime']['output'];
  /** The time after which capture will incur an additional fee. */
  standardAuthorizationExpiresAt: Scalars['DateTime']['output'];
};

/** The fraud settings of a payments account. */
export type Shopify_ShopifyPaymentsFraudSettings = {
  __typename?: 'Shopify_ShopifyPaymentsFraudSettings';
  /** Decline a charge if there's an AVS failure. */
  declineChargeOnAvsFailure: Scalars['Boolean']['output'];
  /** Decline a charge if there's an CVC failure. */
  declineChargeOnCvcFailure: Scalars['Boolean']['output'];
};

/** The charge descriptors for a Japanese payments account. */
export type Shopify_ShopifyPaymentsJpChargeStatementDescriptor = Shopify_ShopifyPaymentsChargeStatementDescriptor & {
  __typename?: 'Shopify_ShopifyPaymentsJpChargeStatementDescriptor';
  /** The default charge statement descriptor. */
  default?: Maybe<Scalars['String']['output']>;
  /** The charge statement descriptor in kana. */
  kana?: Maybe<Scalars['String']['output']>;
  /** The charge statement descriptor in kanji. */
  kanji?: Maybe<Scalars['String']['output']>;
  /** The prefix of the statement descriptor. */
  prefix: Scalars['String']['output'];
};

/** The notification settings for the account. */
export type Shopify_ShopifyPaymentsNotificationSettings = {
  __typename?: 'Shopify_ShopifyPaymentsNotificationSettings';
  /** Receive email notifications when new payouts are sent or payouts fail. */
  payouts: Scalars['Boolean']['output'];
};

/**
 * Payouts represent the movement of money between a merchant's Shopify
 * Payments balance and their bank account.
 */
export type Shopify_ShopifyPaymentsPayout = Shopify_LegacyInteroperability & Shopify_Node & {
  __typename?: 'Shopify_ShopifyPaymentsPayout';
  /** The bank account for the payout. */
  bankAccount?: Maybe<Shopify_ShopifyPaymentsBankAccount>;
  /**
   * The total amount and currency of the payout.
   * @deprecated Use `net` instead.
   */
  gross: Shopify_MoneyV2;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /**
   * The exact time when the payout was issued. The payout only contains
   * balance transactions that were available at this time.
   */
  issuedAt: Scalars['DateTime']['output'];
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['Shopify_UnsignedInt64']['output'];
  /** The total amount and currency of the payout. */
  net: Shopify_MoneyV2;
  /** The transfer status of the payout. */
  status: Shopify_ShopifyPaymentsPayoutStatus;
  /** The summary of the payout. */
  summary: Shopify_ShopifyPaymentsPayoutSummary;
  /** The direction of the payout. */
  transactionType: Shopify_ShopifyPaymentsPayoutTransactionType;
};

/** An auto-generated type for paginating through multiple ShopifyPaymentsPayouts. */
export type Shopify_ShopifyPaymentsPayoutConnection = {
  __typename?: 'Shopify_ShopifyPaymentsPayoutConnection';
  /** A list of edges. */
  edges: Array<Shopify_ShopifyPaymentsPayoutEdge>;
  /** A list of the nodes contained in ShopifyPaymentsPayoutEdge. */
  nodes: Array<Shopify_ShopifyPaymentsPayout>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one ShopifyPaymentsPayout and a cursor during pagination. */
export type Shopify_ShopifyPaymentsPayoutEdge = {
  __typename?: 'Shopify_ShopifyPaymentsPayoutEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of ShopifyPaymentsPayoutEdge. */
  node: Shopify_ShopifyPaymentsPayout;
};

/** The interval at which payouts are sent to the connected bank account. */
export enum Shopify_ShopifyPaymentsPayoutInterval {
  /** Each business day. */
  Daily = 'DAILY',
  /** Payouts will not be automatically made. */
  Manual = 'MANUAL',
  /** Each month, on the day of month specified by monthlyAnchor. */
  Monthly = 'MONTHLY',
  /** Each week, on the day of week specified by weeklyAnchor. */
  Weekly = 'WEEKLY'
}

/** The payment schedule for a payments account. */
export type Shopify_ShopifyPaymentsPayoutSchedule = {
  __typename?: 'Shopify_ShopifyPaymentsPayoutSchedule';
  /** The interval at which payouts are sent to the connected bank account. */
  interval: Shopify_ShopifyPaymentsPayoutInterval;
  /**
   * The day of the month funds will be paid out.
   *
   * The value can be any day of the month from the 1st to the 31st.
   * If the payment interval is set to monthly, this value will be used.
   * Payouts scheduled between 29-31st of the month are sent on the last day of shorter months.
   */
  monthlyAnchor?: Maybe<Scalars['Int']['output']>;
  /**
   * The day of the week funds will be paid out.
   *
   * The value can be any weekday from Monday to Friday.
   * If the payment interval is set to weekly, this value will be used.
   */
  weeklyAnchor?: Maybe<Shopify_DayOfTheWeek>;
};

/** The transfer status of the payout. */
export enum Shopify_ShopifyPaymentsPayoutStatus {
  /** The payout has been canceled by Shopify. */
  Canceled = 'CANCELED',
  /** The payout has been declined by the bank. */
  Failed = 'FAILED',
  /** The payout has been submitted to the bank. */
  InTransit = 'IN_TRANSIT',
  /** The payout has been successfully deposited into the bank. */
  Paid = 'PAID',
  /**
   * The payout has been created and had transactions assigned to it, but
   * it has not yet been submitted to the bank.
   */
  Scheduled = 'SCHEDULED'
}

/**
 * Breakdown of the total fees and gross of each of the different types of transactions associated
 * with the payout.
 */
export type Shopify_ShopifyPaymentsPayoutSummary = {
  __typename?: 'Shopify_ShopifyPaymentsPayoutSummary';
  /** Total fees for all adjustments including disputes. */
  adjustmentsFee: Shopify_MoneyV2;
  /** Total gross amount for all adjustments including disputes. */
  adjustmentsGross: Shopify_MoneyV2;
  /** Total fees for all charges. */
  chargesFee: Shopify_MoneyV2;
  /** Total gross amount for all charges. */
  chargesGross: Shopify_MoneyV2;
  /** Total fees for all refunds. */
  refundsFee: Shopify_MoneyV2;
  /** Total gross amount for all refunds. */
  refundsFeeGross: Shopify_MoneyV2;
  /** Total fees for all reserved funds. */
  reservedFundsFee: Shopify_MoneyV2;
  /** Total gross amount for all reserved funds. */
  reservedFundsGross: Shopify_MoneyV2;
  /** Total fees for all retried payouts. */
  retriedPayoutsFee: Shopify_MoneyV2;
  /** Total gross amount for all retried payouts. */
  retriedPayoutsGross: Shopify_MoneyV2;
};

/** The possible transaction types for a payout. */
export enum Shopify_ShopifyPaymentsPayoutTransactionType {
  /** The payout is a deposit. */
  Deposit = 'DEPOSIT',
  /** The payout is a withdrawal. */
  Withdrawal = 'WITHDRAWAL'
}

/** Presents all Shopify Payments specific information related to an order refund. */
export type Shopify_ShopifyPaymentsRefundSet = {
  __typename?: 'Shopify_ShopifyPaymentsRefundSet';
  /** The acquirer reference number (ARN) code generated for Visa/Mastercard transactions. */
  acquirerReferenceNumber?: Maybe<Scalars['String']['output']>;
};

/** Presents all Shopify Payments specific information related to an order transaction. */
export type Shopify_ShopifyPaymentsTransactionSet = {
  __typename?: 'Shopify_ShopifyPaymentsTransactionSet';
  /** Contains all fields related to an extended authorization. */
  extendedAuthorizationSet?: Maybe<Shopify_ShopifyPaymentsExtendedAuthorization>;
  /** Contains all fields related to a refund. */
  refundSet?: Maybe<Shopify_ShopifyPaymentsRefundSet>;
};

/**
 * Each subject (individual) of an account has a verification object giving
 *  information about the verification state.
 */
export type Shopify_ShopifyPaymentsVerification = Shopify_Node & {
  __typename?: 'Shopify_ShopifyPaymentsVerification';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The status of the verification. */
  status: Shopify_ShopifyPaymentsVerificationStatus;
  /** The subject/individual who has to be verified. */
  subject: Shopify_ShopifyPaymentsVerificationSubject;
};

/** A document which can be used to verify an individual. */
export type Shopify_ShopifyPaymentsVerificationDocument = {
  __typename?: 'Shopify_ShopifyPaymentsVerificationDocument';
  /** True if the back side of the document is required. */
  backRequired: Scalars['Boolean']['output'];
  /** True if the front side of the document is required. */
  frontRequired: Scalars['Boolean']['output'];
  /** The type of the document which can be used for verification. */
  type: Shopify_ShopifyPaymentsVerificationDocumentType;
};

/** The types of possible verification documents. */
export enum Shopify_ShopifyPaymentsVerificationDocumentType {
  /** The subject's driver's license. */
  DriversLicense = 'DRIVERS_LICENSE',
  /** A government's identification document of the subject. */
  GovernmentIdentification = 'GOVERNMENT_IDENTIFICATION',
  /** The subject's passport. */
  Passport = 'PASSPORT'
}

/** The status of a verification. */
export enum Shopify_ShopifyPaymentsVerificationStatus {
  /** The verification request has been submitted but a response has not yet been given. */
  Pending = 'PENDING',
  /** The verification has not yet been verified. */
  Unverified = 'UNVERIFIED',
  /** The verification has been verified. */
  Verified = 'VERIFIED'
}

/** The verification subject represents an individual that has to be verified. */
export type Shopify_ShopifyPaymentsVerificationSubject = {
  __typename?: 'Shopify_ShopifyPaymentsVerificationSubject';
  /** The family name of the individual to verify. */
  familyName: Scalars['String']['output'];
  /** The given name of the individual to verify. */
  givenName: Scalars['String']['output'];
};

/** The status of an order's eligibility for protection against fraudulent chargebacks by Shopify Protect. */
export enum Shopify_ShopifyProtectEligibilityStatus {
  /**
   * The order is eligible for protection against fraudulent chargebacks.
   * If an order is updated, the order's eligibility may change and protection could be removed.
   */
  Eligible = 'ELIGIBLE',
  /** The order isn't eligible for protection against fraudulent chargebacks. */
  NotEligible = 'NOT_ELIGIBLE',
  /** The eligibility of the order is pending and has not yet been determined. */
  Pending = 'PENDING'
}

/** The eligibility details of an order's protection against fraudulent chargebacks by Shopify Protect. */
export type Shopify_ShopifyProtectOrderEligibility = {
  __typename?: 'Shopify_ShopifyProtectOrderEligibility';
  /** The status of whether an order is eligible for protection against fraudulent chargebacks. */
  status: Shopify_ShopifyProtectEligibilityStatus;
};

/** A summary of Shopify Protect details for an order. */
export type Shopify_ShopifyProtectOrderSummary = {
  __typename?: 'Shopify_ShopifyProtectOrderSummary';
  /** The eligibility details of an order's protection against fraudulent chargebacks. */
  eligibility: Shopify_ShopifyProtectOrderEligibility;
  /** The status of the order's protection against fraudulent chargebacks. */
  status: Shopify_ShopifyProtectStatus;
};

/** The status of an order's protection with Shopify Protect. */
export enum Shopify_ShopifyProtectStatus {
  /**
   * The protection for the order is active and eligible for reimbursement against fraudulent chargebacks.
   * If an order is updated, the order's eligibility may change and protection could become inactive.
   */
  Active = 'ACTIVE',
  /** The protection for an order isn't active because the order didn't meet eligibility requirements. */
  Inactive = 'INACTIVE',
  /** The order received a chargeback but the order wasn't protected because it didn't meet coverage requirements. */
  NotProtected = 'NOT_PROTECTED',
  /** The protection for the order is pending and has not yet been determined. */
  Pending = 'PENDING',
  /** The order received a fraudulent chargeback and it was protected. */
  Protected = 'PROTECTED'
}

/** Represents the data about a staff member's Shopify account. Merchants can use staff member data to get more information about the staff members in their store. */
export type Shopify_StaffMember = Shopify_Node & {
  __typename?: 'Shopify_StaffMember';
  /** Whether the staff member is active. */
  active: Scalars['Boolean']['output'];
  /** The image used as the staff member's avatar in the Shopify admin. */
  avatar: Shopify_Image;
  /** The staff member's email address. */
  email: Scalars['String']['output'];
  /** Whether the staff member's account exists. */
  exists: Scalars['Boolean']['output'];
  /** The staff member's first name. */
  firstName?: Maybe<Scalars['String']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The staff member's initials, if available. */
  initials?: Maybe<Array<Scalars['String']['output']>>;
  /** Whether the staff member is the shop owner. */
  isShopOwner: Scalars['Boolean']['output'];
  /** The staff member's last name. */
  lastName?: Maybe<Scalars['String']['output']>;
  /** The staff member's preferred locale. Locale values use the format `language` or `language-COUNTRY`, where `language` is a two-letter language code, and `COUNTRY` is a two-letter country code. For example: `en` or `en-US` */
  locale: Scalars['String']['output'];
  /** The staff member's full name. */
  name: Scalars['String']['output'];
  /** The staff member's phone number. */
  phone?: Maybe<Scalars['String']['output']>;
  /** The data used to customize the Shopify admin experience for the staff member. */
  privateData: Shopify_StaffMemberPrivateData;
};


/** Represents the data about a staff member's Shopify account. Merchants can use staff member data to get more information about the staff members in their store. */
export type Shopify_StaffMemberAvatarArgs = {
  fallback?: InputMaybe<Shopify_StaffMemberDefaultImage>;
};

/** An auto-generated type for paginating through multiple StaffMembers. */
export type Shopify_StaffMemberConnection = {
  __typename?: 'Shopify_StaffMemberConnection';
  /** A list of edges. */
  edges: Array<Shopify_StaffMemberEdge>;
  /** A list of the nodes contained in StaffMemberEdge. */
  nodes: Array<Shopify_StaffMember>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** Represents the fallback avatar image for a staff member. This is used only if the staff member has no avatar image. */
export enum Shopify_StaffMemberDefaultImage {
  /** Returns a default avatar image for the staff member. */
  Default = 'DEFAULT',
  /** Returns a URL that returns a 404 error if the image is not present. */
  NotFound = 'NOT_FOUND',
  /** Returns a transparent avatar image for the staff member. */
  Transparent = 'TRANSPARENT'
}

/** An auto-generated type which holds one StaffMember and a cursor during pagination. */
export type Shopify_StaffMemberEdge = {
  __typename?: 'Shopify_StaffMemberEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of StaffMemberEdge. */
  node: Shopify_StaffMember;
};

/** Represents access permissions for a staff member. */
export enum Shopify_StaffMemberPermission {
  /** The staff member can manage and install apps and channels. */
  Applications = 'APPLICATIONS',
  /** The staff member can manage and install sales channels. */
  Channels = 'CHANNELS',
  /** The staff member can view, create, update, and delete customers, and respond to customer messages in the Shopify Messaging API. */
  Customers = 'CUSTOMERS',
  /** The staff member can view the Shopify Home page, which includes sales information and other shop data. */
  Dashboard = 'DASHBOARD',
  /** The staff member can view, buy, and manage domains. */
  Domains = 'DOMAINS',
  /** The staff member can create, update, and delete draft orders. */
  DraftOrders = 'DRAFT_ORDERS',
  /** The staff member can update orders. */
  EditOrders = 'EDIT_ORDERS',
  /**
   * The staff has the same permissions as the [store owner](https://shopify.dev/en/manual/your-account/staff-accounts/staff-permissions#store-owner-permissions) with some exceptions, such as modifying the account billing or deleting staff accounts.
   * @deprecated Use the list of the staff member's explicit permissions returned in the `StaffMember.permissions.userPermissions` field instead of `full` permission.
   */
  Full = 'FULL',
  /** The staff member can view, create, issue, and export gift cards to a CSV file. */
  GiftCards = 'GIFT_CARDS',
  /** The staff member can view and modify links and navigation menus. */
  Links = 'LINKS',
  /** The staff member can create, update, and delete locations where inventory is stocked or managed. */
  Locations = 'LOCATIONS',
  /** The staff member can view and create discount codes and automatic discounts, and export discounts to a CSV file. */
  Marketing = 'MARKETING',
  /** The staff member can view, create, and automate marketing campaigns. */
  MarketingSection = 'MARKETING_SECTION',
  /** The staff member can view, create, update, delete, and cancel orders, and receive order notifications. The staff member can still create draft orders without this permission. */
  Orders = 'ORDERS',
  /** The staff member can view the Overview and Live view pages, which include sales information, and other shop and sales channels data. */
  Overviews = 'OVERVIEWS',
  /** The staff member can view, create, update, publish, and delete blog posts and pages. */
  Pages = 'PAGES',
  /** The staff member can pay for an order by using a vaulted card. */
  PayOrdersByVaultedCard = 'PAY_ORDERS_BY_VAULTED_CARD',
  /** The staff member can view the preferences and configuration of a shop. */
  Preferences = 'PREFERENCES',
  /** The staff member can view, create, import, and update products, collections, and inventory. */
  Products = 'PRODUCTS',
  /** The staff member can view and create all reports, which includes sales information and other shop data. */
  Reports = 'REPORTS',
  /** The staff member can view, update, and publish themes. */
  Themes = 'THEMES',
  /**
   * The staff member can view and create translations.
   * @deprecated Unused.
   */
  Translations = 'TRANSLATIONS'
}

/** Represents the data used to customize the Shopify admin experience for a logged-in staff member. */
export type Shopify_StaffMemberPrivateData = {
  __typename?: 'Shopify_StaffMemberPrivateData';
  /** The URL to the staff member's account settings page. */
  accountSettingsUrl: Scalars['Shopify_URL']['output'];
  /** The date and time when the staff member was created. */
  createdAt: Scalars['DateTime']['output'];
  /**
   * Access permissions for the staff member.
   * @deprecated Use StaffMember.permissions.userPermissions instead
   */
  permissions: Array<Shopify_StaffMemberPermission>;
};

/** An error that occurs during the execution of `StandardMetafieldDefinitionEnable`. */
export type Shopify_StandardMetafieldDefinitionEnableUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_StandardMetafieldDefinitionEnableUserError';
  /** The error code. */
  code?: Maybe<Shopify_StandardMetafieldDefinitionEnableUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `StandardMetafieldDefinitionEnableUserError`. */
export enum Shopify_StandardMetafieldDefinitionEnableUserErrorCode {
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** The maximum number of definitions per owner type has been exceeded. */
  LimitExceeded = 'LIMIT_EXCEEDED',
  /** The input value is already taken. */
  Taken = 'TAKEN',
  /** The standard metafield definition template was not found. */
  TemplateNotFound = 'TEMPLATE_NOT_FOUND',
  /** The definition type is not eligible to be used as collection condition. */
  TypeNotAllowedForConditions = 'TYPE_NOT_ALLOWED_FOR_CONDITIONS',
  /** The namespace and key is already in use for a set of your metafields. */
  UnstructuredAlreadyExists = 'UNSTRUCTURED_ALREADY_EXISTS'
}

/**
 * Standard metafield definition templates provide preset configurations to create metafield definitions.
 * Each template has a specific namespace and key that we've reserved to have specific meanings for common use cases.
 *
 * Refer to the [list of standard metafield definitions](https://shopify.dev/apps/metafields/definitions/standard-definitions).
 */
export type Shopify_StandardMetafieldDefinitionTemplate = Shopify_Node & {
  __typename?: 'Shopify_StandardMetafieldDefinitionTemplate';
  /** The description of the standard metafield definition. */
  description?: Maybe<Scalars['String']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The key owned by the definition after the definition has been activated. */
  key: Scalars['String']['output'];
  /** The human-readable name for the standard metafield definition. */
  name: Scalars['String']['output'];
  /** The namespace owned by the definition after the definition has been activated. */
  namespace: Scalars['String']['output'];
  /** The list of resource types that the standard metafield definition can be applied to. */
  ownerTypes: Array<Shopify_MetafieldOwnerType>;
  /** The associated [metafield definition type](https://shopify.dev/apps/metafields/definitions/types) that the metafield stores. */
  type: Shopify_MetafieldDefinitionType;
  /** The configured validations for the standard metafield definition. */
  validations: Array<Shopify_MetafieldDefinitionValidation>;
  /** Whether metafields for the definition are by default visible using the Storefront API. */
  visibleToStorefrontApi: Scalars['Boolean']['output'];
};

/** Represents the details of a specific type of product within the [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt). */
export type Shopify_StandardizedProductType = {
  __typename?: 'Shopify_StandardizedProductType';
  /** The product taxonomy node associated with the standardized product type. */
  productTaxonomyNode?: Maybe<Shopify_ProductTaxonomyNode>;
};

/**
 * A token that's used to delegate unauthenticated access scopes to clients that need to access
 * the unauthenticated Storefront API. An app can have a maximum of 100 active storefront access
 * tokens for each shop.
 */
export type Shopify_StorefrontAccessToken = Shopify_Node & {
  __typename?: 'Shopify_StorefrontAccessToken';
  /** List of permissions associated with the token. */
  accessScopes: Array<Shopify_AccessScope>;
  /** The issued public access token. */
  accessToken: Scalars['String']['output'];
  /** The date and time when the public access token was created. */
  createdAt: Scalars['DateTime']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** An arbitrary title for each token determined by the developer, used for reference         purposes. */
  title: Scalars['String']['output'];
  /** The date and time when the storefront access token was updated. */
  updatedAt: Scalars['DateTime']['output'];
};

/** An auto-generated type for paginating through multiple StorefrontAccessTokens. */
export type Shopify_StorefrontAccessTokenConnection = {
  __typename?: 'Shopify_StorefrontAccessTokenConnection';
  /** A list of edges. */
  edges: Array<Shopify_StorefrontAccessTokenEdge>;
  /** A list of the nodes contained in StorefrontAccessTokenEdge. */
  nodes: Array<Shopify_StorefrontAccessToken>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one StorefrontAccessToken and a cursor during pagination. */
export type Shopify_StorefrontAccessTokenEdge = {
  __typename?: 'Shopify_StorefrontAccessTokenEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of StorefrontAccessTokenEdge. */
  node: Shopify_StorefrontAccessToken;
};

/** An auto-generated type for paginating through a list of Strings. */
export type Shopify_StringConnection = {
  __typename?: 'Shopify_StringConnection';
  /** A list of edges. */
  edges: Array<Shopify_StringEdge>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one String and a cursor during pagination. */
export type Shopify_StringEdge = {
  __typename?: 'Shopify_StringEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of StringEdge. */
  node: Scalars['String']['output'];
};

/** Represents an applied code discount. */
export type Shopify_SubscriptionAppliedCodeDiscount = {
  __typename?: 'Shopify_SubscriptionAppliedCodeDiscount';
  /** The unique ID. */
  id: Scalars['ID']['output'];
  /** The redeem code of the discount that applies on the subscription. */
  redeemCode: Scalars['String']['output'];
  /** The reason that the discount on the subscription draft is rejected. */
  rejectionReason?: Maybe<Shopify_SubscriptionDiscountRejectionReason>;
};

/**
 * A record of an execution of the subscription billing process. Billing attempts use
 * idempotency keys to avoid duplicate order creation. A successful billing attempt
 * will create an order.
 */
export type Shopify_SubscriptionBillingAttempt = Shopify_Node & {
  __typename?: 'Shopify_SubscriptionBillingAttempt';
  /** The date and time when the billing attempt was completed. */
  completedAt?: Maybe<Scalars['DateTime']['output']>;
  /** The date and time when the billing attempt was created. */
  createdAt: Scalars['DateTime']['output'];
  /** A code corresponding to a payment error during processing. */
  errorCode?: Maybe<Shopify_SubscriptionBillingAttemptErrorCode>;
  /** A message describing a payment error during processing. */
  errorMessage?: Maybe<Scalars['String']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** A unique key generated by the client to avoid duplicate payments. */
  idempotencyKey: Scalars['String']['output'];
  /** The URL where the customer needs to be redirected so they can complete the 3D Secure payment flow. */
  nextActionUrl?: Maybe<Scalars['Shopify_URL']['output']>;
  /** The result of this billing attempt if completed successfully. */
  order?: Maybe<Shopify_Order>;
  /**
   * The date and time used to calculate fulfillment intervals for a billing attempt that
   * successfully completed after the current anchor date. To prevent fulfillment from being
   * pushed to the next anchor date, this field can override the billing attempt date.
   */
  originTime?: Maybe<Scalars['DateTime']['output']>;
  /** Whether the billing attempt is still processing. */
  ready: Scalars['Boolean']['output'];
  /** The subscription contract. */
  subscriptionContract: Shopify_SubscriptionContract;
};

/** An auto-generated type for paginating through multiple SubscriptionBillingAttempts. */
export type Shopify_SubscriptionBillingAttemptConnection = {
  __typename?: 'Shopify_SubscriptionBillingAttemptConnection';
  /** A list of edges. */
  edges: Array<Shopify_SubscriptionBillingAttemptEdge>;
  /** A list of the nodes contained in SubscriptionBillingAttemptEdge. */
  nodes: Array<Shopify_SubscriptionBillingAttempt>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one SubscriptionBillingAttempt and a cursor during pagination. */
export type Shopify_SubscriptionBillingAttemptEdge = {
  __typename?: 'Shopify_SubscriptionBillingAttemptEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of SubscriptionBillingAttemptEdge. */
  node: Shopify_SubscriptionBillingAttempt;
};

/**
 * The possible error codes associated with making billing attempts. The error codes supplement the
 * `error_message` to provide consistent results and help with dunning management.
 */
export enum Shopify_SubscriptionBillingAttemptErrorCode {
  /** The amount is too small. */
  AmountTooSmall = 'AMOUNT_TOO_SMALL',
  /** There was an error during the authentication. */
  AuthenticationError = 'AUTHENTICATION_ERROR',
  /** Payment method was canceled by buyer. */
  BuyerCanceledPaymentMethod = 'BUYER_CANCELED_PAYMENT_METHOD',
  /** Card number was incorrect. */
  CardNumberIncorrect = 'CARD_NUMBER_INCORRECT',
  /** Customer is invalid. */
  CustomerInvalid = 'CUSTOMER_INVALID',
  /** Customer was not found. */
  CustomerNotFound = 'CUSTOMER_NOT_FOUND',
  /** Payment method is expired. */
  ExpiredPaymentMethod = 'EXPIRED_PAYMENT_METHOD',
  /** Fraud was suspected. */
  FraudSuspected = 'FRAUD_SUSPECTED',
  /** Insufficient funds. */
  InsufficientFunds = 'INSUFFICIENT_FUNDS',
  /** The billing agreement ID or the transaction ID for the customer's payment method is invalid. */
  InvalidCustomerBillingAgreement = 'INVALID_CUSTOMER_BILLING_AGREEMENT',
  /** Payment method is invalid. Please update or create a new payment method. */
  InvalidPaymentMethod = 'INVALID_PAYMENT_METHOD',
  /** The shipping address is either missing or invalid. */
  InvalidShippingAddress = 'INVALID_SHIPPING_ADDRESS',
  /** No inventory location found or enabled. */
  InventoryAllocationsNotFound = 'INVENTORY_ALLOCATIONS_NOT_FOUND',
  /** A payment has already been made for this invoice. */
  InvoiceAlreadyPaid = 'INVOICE_ALREADY_PAID',
  /** Payment method was declined by processor. */
  PaymentMethodDeclined = 'PAYMENT_METHOD_DECLINED',
  /** Payment method cannot be used with the current payment gateway test mode configuration. */
  PaymentMethodIncompatibleWithGatewayConfig = 'PAYMENT_METHOD_INCOMPATIBLE_WITH_GATEWAY_CONFIG',
  /** Payment method was not found. */
  PaymentMethodNotFound = 'PAYMENT_METHOD_NOT_FOUND',
  /** Payment provider is not enabled. */
  PaymentProviderIsNotEnabled = 'PAYMENT_PROVIDER_IS_NOT_ENABLED',
  /** Paypal Error General. */
  PaypalErrorGeneral = 'PAYPAL_ERROR_GENERAL',
  /** Purchase Type is not supported. */
  PurchaseTypeNotSupported = 'PURCHASE_TYPE_NOT_SUPPORTED',
  /** Gateway is in test mode and attempted to bill a live payment method. */
  TestMode = 'TEST_MODE',
  /** Transient error, try again later. */
  TransientError = 'TRANSIENT_ERROR',
  /** There was an unexpected error during the billing attempt. */
  UnexpectedError = 'UNEXPECTED_ERROR'
}

/** A subscription billing cycle. */
export type Shopify_SubscriptionBillingCycle = {
  __typename?: 'Shopify_SubscriptionBillingCycle';
  /** The date on which the billing attempt is expected to be made. */
  billingAttemptExpectedDate: Scalars['DateTime']['output'];
  /** The list of billing attempts associated with the billing cycle. */
  billingAttempts: Shopify_SubscriptionBillingAttemptConnection;
  /** The end date of the billing cycle. */
  cycleEndAt: Scalars['DateTime']['output'];
  /** The index of the billing cycle. */
  cycleIndex: Scalars['Int']['output'];
  /** The start date of the billing cycle. */
  cycleStartAt: Scalars['DateTime']['output'];
  /** Whether this billing cycle was edited. */
  edited: Scalars['Boolean']['output'];
  /** The active edited contract for the billing cycle. */
  editedContract?: Maybe<Shopify_SubscriptionBillingCycleEditedContract>;
  /** Whether this billing cycle was skipped. */
  skipped: Scalars['Boolean']['output'];
  /** The subscription contract that the billing cycle belongs to. */
  sourceContract: Shopify_SubscriptionContract;
  /** The status of the billing cycle. */
  status: Shopify_SubscriptionBillingCycleBillingCycleStatus;
};


/** A subscription billing cycle. */
export type Shopify_SubscriptionBillingCycleBillingAttemptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The possible status values of a subscription billing cycle. */
export enum Shopify_SubscriptionBillingCycleBillingCycleStatus {
  /** The billing cycle is billed. */
  Billed = 'BILLED',
  /** The billing cycle hasn't been billed. */
  Unbilled = 'UNBILLED'
}

/** An auto-generated type for paginating through multiple SubscriptionBillingCycles. */
export type Shopify_SubscriptionBillingCycleConnection = {
  __typename?: 'Shopify_SubscriptionBillingCycleConnection';
  /** A list of edges. */
  edges: Array<Shopify_SubscriptionBillingCycleEdge>;
  /** A list of the nodes contained in SubscriptionBillingCycleEdge. */
  nodes: Array<Shopify_SubscriptionBillingCycle>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one SubscriptionBillingCycle and a cursor during pagination. */
export type Shopify_SubscriptionBillingCycleEdge = {
  __typename?: 'Shopify_SubscriptionBillingCycleEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of SubscriptionBillingCycleEdge. */
  node: Shopify_SubscriptionBillingCycle;
};

/** Represents a subscription contract with billing cycles. */
export type Shopify_SubscriptionBillingCycleEditedContract = Shopify_SubscriptionContractBase & {
  __typename?: 'Shopify_SubscriptionBillingCycleEditedContract';
  /** The subscription app that the subscription contract is registered to. */
  app?: Maybe<Shopify_App>;
  /** The URL of the subscription contract page on the subscription app. */
  appAdminUrl?: Maybe<Scalars['Shopify_URL']['output']>;
  /** The billing cycles that the edited contract belongs to. */
  billingCycles: Shopify_SubscriptionBillingCycleConnection;
  /** The date and time when the subscription contract was created. */
  createdAt: Scalars['DateTime']['output'];
  /** The currency that's used for the subscription contract. */
  currencyCode: Shopify_CurrencyCode;
  /** A list of the custom attributes to be added to the generated orders. */
  customAttributes: Array<Shopify_Attribute>;
  /** The customer to whom the subscription contract belongs. */
  customer?: Maybe<Shopify_Customer>;
  /** The customer payment method that's used for the subscription contract. */
  customerPaymentMethod?: Maybe<Shopify_CustomerPaymentMethod>;
  /** The delivery method for each billing of the subscription contract. */
  deliveryMethod?: Maybe<Shopify_SubscriptionDeliveryMethod>;
  /** The delivery price for each billing of the subscription contract. */
  deliveryPrice: Shopify_MoneyV2;
  /** The list of subscription discounts associated with the subscription contract. */
  discounts: Shopify_SubscriptionManualDiscountConnection;
  /**
   * The number of lines associated with the subscription contract.
   * @deprecated Use `linesCount` instead.
   */
  lineCount: Scalars['Int']['output'];
  /** The list of subscription lines associated with the subscription contract. */
  lines: Shopify_SubscriptionLineConnection;
  /** The number of lines associated with the subscription contract. */
  linesCount?: Maybe<Shopify_Count>;
  /** The note field that will be applied to the generated orders. */
  note?: Maybe<Scalars['String']['output']>;
  /** A list of the subscription contract's orders. */
  orders: Shopify_OrderConnection;
  /** The date and time when the subscription contract was updated. */
  updatedAt: Scalars['DateTime']['output'];
};


/** Represents a subscription contract with billing cycles. */
export type Shopify_SubscriptionBillingCycleEditedContractBillingCyclesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_SubscriptionBillingCyclesSortKeys>;
};


/** Represents a subscription contract with billing cycles. */
export type Shopify_SubscriptionBillingCycleEditedContractCustomerPaymentMethodArgs = {
  showRevoked?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a subscription contract with billing cycles. */
export type Shopify_SubscriptionBillingCycleEditedContractDiscountsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a subscription contract with billing cycles. */
export type Shopify_SubscriptionBillingCycleEditedContractLinesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a subscription contract with billing cycles. */
export type Shopify_SubscriptionBillingCycleEditedContractOrdersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Possible error codes that can be returned by `SubscriptionBillingCycleUserError`. */
export enum Shopify_SubscriptionBillingCycleErrorCode {
  /** Billing date cannot be set on skipped billing cycle. */
  BillingDateSetOnSkipped = 'BILLING_DATE_SET_ON_SKIPPED',
  /** Billing cycle selector cannot select billing cycle outside of index range. */
  CycleIndexOutOfRange = 'CYCLE_INDEX_OUT_OF_RANGE',
  /** Can't find the billing cycle. */
  CycleNotFound = 'CYCLE_NOT_FOUND',
  /** Billing cycle selector cannot select billing cycle outside of start date range. */
  CycleStartDateOutOfRange = 'CYCLE_START_DATE_OUT_OF_RANGE',
  /** Billing cycle schedule edit input provided is empty. Must take in parameters to modify schedule. */
  EmptyBillingCycleEditScheduleInput = 'EMPTY_BILLING_CYCLE_EDIT_SCHEDULE_INPUT',
  /** Billing cycle has incomplete billing attempts in progress. */
  IncompleteBillingAttempts = 'INCOMPLETE_BILLING_ATTEMPTS',
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** The index selector is invalid. */
  InvalidCycleIndex = 'INVALID_CYCLE_INDEX',
  /** The date selector is invalid. */
  InvalidDate = 'INVALID_DATE',
  /** There's no contract or schedule edit associated with the targeted billing cycle(s). */
  NoCycleEdits = 'NO_CYCLE_EDITS',
  /** Billing date of a cycle cannot be set to a value outside of its billing date range. */
  OutOfBounds = 'OUT_OF_BOUNDS',
  /** Billing cycle selector cannot select upcoming billing cycle past limit. */
  UpcomingCycleLimitExceeded = 'UPCOMING_CYCLE_LIMIT_EXCEEDED'
}

/** An error that occurs during the execution of `SubscriptionBillingCycleSkip`. */
export type Shopify_SubscriptionBillingCycleSkipUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_SubscriptionBillingCycleSkipUserError';
  /** The error code. */
  code?: Maybe<Shopify_SubscriptionBillingCycleSkipUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `SubscriptionBillingCycleSkipUserError`. */
export enum Shopify_SubscriptionBillingCycleSkipUserErrorCode {
  /** The input value is invalid. */
  Invalid = 'INVALID'
}

/** An error that occurs during the execution of `SubscriptionBillingCycleUnskip`. */
export type Shopify_SubscriptionBillingCycleUnskipUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_SubscriptionBillingCycleUnskipUserError';
  /** The error code. */
  code?: Maybe<Shopify_SubscriptionBillingCycleUnskipUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `SubscriptionBillingCycleUnskipUserError`. */
export enum Shopify_SubscriptionBillingCycleUnskipUserErrorCode {
  /** The input value is invalid. */
  Invalid = 'INVALID'
}

/** The possible errors for a subscription billing cycle. */
export type Shopify_SubscriptionBillingCycleUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_SubscriptionBillingCycleUserError';
  /** The error code. */
  code?: Maybe<Shopify_SubscriptionBillingCycleErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** The set of valid sort keys for the SubscriptionBillingCycles query. */
export enum Shopify_SubscriptionBillingCyclesSortKeys {
  /** Sort by the `cycle_index` value. */
  CycleIndex = 'CYCLE_INDEX',
  /** Sort by the `id` value. */
  Id = 'ID',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE'
}

/** Represents a Subscription Billing Policy. */
export type Shopify_SubscriptionBillingPolicy = {
  __typename?: 'Shopify_SubscriptionBillingPolicy';
  /** Specific anchor dates upon which the billing interval calculations should be made. */
  anchors: Array<Shopify_SellingPlanAnchor>;
  /** The kind of interval that's associated with this schedule (e.g. Monthly, Weekly, etc). */
  interval: Shopify_SellingPlanInterval;
  /** The number of billing intervals between invoices. */
  intervalCount: Scalars['Int']['output'];
  /** Maximum amount of cycles after which the subscription ends. */
  maxCycles?: Maybe<Scalars['Int']['output']>;
  /** Minimum amount of cycles required in the subscription. */
  minCycles?: Maybe<Scalars['Int']['output']>;
};

/** Represents a Subscription Contract. */
export type Shopify_SubscriptionContract = Shopify_Node & Shopify_SubscriptionContractBase & {
  __typename?: 'Shopify_SubscriptionContract';
  /** The subscription app that the subscription contract is registered to. */
  app?: Maybe<Shopify_App>;
  /** The URL of the subscription contract page on the subscription app. */
  appAdminUrl?: Maybe<Scalars['Shopify_URL']['output']>;
  /** The list of billing attempts associated with the subscription contract. */
  billingAttempts: Shopify_SubscriptionBillingAttemptConnection;
  /** The billing policy associated with the subscription contract. */
  billingPolicy: Shopify_SubscriptionBillingPolicy;
  /** The date and time when the subscription contract was created. */
  createdAt: Scalars['DateTime']['output'];
  /** The currency that's used for the subscription contract. */
  currencyCode: Shopify_CurrencyCode;
  /** A list of the custom attributes to be added to the generated orders. */
  customAttributes: Array<Shopify_Attribute>;
  /** The customer to whom the subscription contract belongs. */
  customer?: Maybe<Shopify_Customer>;
  /** The customer payment method that's used for the subscription contract. */
  customerPaymentMethod?: Maybe<Shopify_CustomerPaymentMethod>;
  /** The delivery method for each billing of the subscription contract. */
  deliveryMethod?: Maybe<Shopify_SubscriptionDeliveryMethod>;
  /** The delivery policy associated with the subscription contract. */
  deliveryPolicy: Shopify_SubscriptionDeliveryPolicy;
  /** The delivery price for each billing of the subscription contract. */
  deliveryPrice: Shopify_MoneyV2;
  /** The list of subscription discounts associated with the subscription contract. */
  discounts: Shopify_SubscriptionManualDiscountConnection;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The current status of the last payment. */
  lastPaymentStatus?: Maybe<Shopify_SubscriptionContractLastPaymentStatus>;
  /**
   * The number of lines associated with the subscription contract.
   * @deprecated Use `linesCount` instead.
   */
  lineCount: Scalars['Int']['output'];
  /** The list of subscription lines associated with the subscription contract. */
  lines: Shopify_SubscriptionLineConnection;
  /** The number of lines associated with the subscription contract. */
  linesCount?: Maybe<Shopify_Count>;
  /**
   * The next billing date for the subscription contract. This field is managed by the apps.
   *         Alternatively you can utilize our
   *         [Billing Cycles APIs](https://shopify.dev/docs/apps/selling-strategies/subscriptions/billing-cycles),
   *         which provide auto-computed billing dates and additional functionalities.
   */
  nextBillingDate?: Maybe<Scalars['DateTime']['output']>;
  /** The note field that will be applied to the generated orders. */
  note?: Maybe<Scalars['String']['output']>;
  /** A list of the subscription contract's orders. */
  orders: Shopify_OrderConnection;
  /** The order from which this contract originated. */
  originOrder?: Maybe<Shopify_Order>;
  /** The revision id of the contract. */
  revisionId: Scalars['Shopify_UnsignedInt64']['output'];
  /** The current status of the subscription contract. */
  status: Shopify_SubscriptionContractSubscriptionStatus;
  /** The date and time when the subscription contract was updated. */
  updatedAt: Scalars['DateTime']['output'];
};


/** Represents a Subscription Contract. */
export type Shopify_SubscriptionContractBillingAttemptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a Subscription Contract. */
export type Shopify_SubscriptionContractCustomerPaymentMethodArgs = {
  showRevoked?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a Subscription Contract. */
export type Shopify_SubscriptionContractDiscountsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a Subscription Contract. */
export type Shopify_SubscriptionContractLinesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a Subscription Contract. */
export type Shopify_SubscriptionContractOrdersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Represents subscription contract common fields. */
export type Shopify_SubscriptionContractBase = {
  /** The subscription app that the subscription contract is registered to. */
  app?: Maybe<Shopify_App>;
  /** The URL of the subscription contract page on the subscription app. */
  appAdminUrl?: Maybe<Scalars['Shopify_URL']['output']>;
  /** The currency that's used for the subscription contract. */
  currencyCode: Shopify_CurrencyCode;
  /** A list of the custom attributes to be added to the generated orders. */
  customAttributes: Array<Shopify_Attribute>;
  /** The customer to whom the subscription contract belongs. */
  customer?: Maybe<Shopify_Customer>;
  /** The customer payment method that's used for the subscription contract. */
  customerPaymentMethod?: Maybe<Shopify_CustomerPaymentMethod>;
  /** The delivery method for each billing of the subscription contract. */
  deliveryMethod?: Maybe<Shopify_SubscriptionDeliveryMethod>;
  /** The delivery price for each billing of the subscription contract. */
  deliveryPrice: Shopify_MoneyV2;
  /** The list of subscription discounts associated with the subscription contract. */
  discounts: Shopify_SubscriptionManualDiscountConnection;
  /**
   * The number of lines associated with the subscription contract.
   * @deprecated Use `linesCount` instead.
   */
  lineCount: Scalars['Int']['output'];
  /** The list of subscription lines associated with the subscription contract. */
  lines: Shopify_SubscriptionLineConnection;
  /** The number of lines associated with the subscription contract. */
  linesCount?: Maybe<Shopify_Count>;
  /** The note field that will be applied to the generated orders. */
  note?: Maybe<Scalars['String']['output']>;
  /** A list of the subscription contract's orders. */
  orders: Shopify_OrderConnection;
  /** The date and time when the subscription contract was updated. */
  updatedAt: Scalars['DateTime']['output'];
};


/** Represents subscription contract common fields. */
export type Shopify_SubscriptionContractBaseCustomerPaymentMethodArgs = {
  showRevoked?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents subscription contract common fields. */
export type Shopify_SubscriptionContractBaseDiscountsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents subscription contract common fields. */
export type Shopify_SubscriptionContractBaseLinesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents subscription contract common fields. */
export type Shopify_SubscriptionContractBaseOrdersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** An auto-generated type for paginating through multiple SubscriptionContracts. */
export type Shopify_SubscriptionContractConnection = {
  __typename?: 'Shopify_SubscriptionContractConnection';
  /** A list of edges. */
  edges: Array<Shopify_SubscriptionContractEdge>;
  /** A list of the nodes contained in SubscriptionContractEdge. */
  nodes: Array<Shopify_SubscriptionContract>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one SubscriptionContract and a cursor during pagination. */
export type Shopify_SubscriptionContractEdge = {
  __typename?: 'Shopify_SubscriptionContractEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of SubscriptionContractEdge. */
  node: Shopify_SubscriptionContract;
};

/** Possible error codes that can be returned by `SubscriptionContractUserError`. */
export enum Shopify_SubscriptionContractErrorCode {
  /** The input value is invalid. */
  Invalid = 'INVALID'
}

/** The possible status values of the last payment on a subscription contract. */
export enum Shopify_SubscriptionContractLastPaymentStatus {
  /** Failed subscription billing attempt. */
  Failed = 'FAILED',
  /** Successful subscription billing attempt. */
  Succeeded = 'SUCCEEDED'
}

/** Possible error codes that can be returned by `SubscriptionContractStatusUpdateUserError`. */
export enum Shopify_SubscriptionContractStatusUpdateErrorCode {
  /** Subscription contract status cannot be changed once terminated. */
  ContractTerminated = 'CONTRACT_TERMINATED',
  /** The input value is invalid. */
  Invalid = 'INVALID'
}

/** Represents a subscription contract status update error. */
export type Shopify_SubscriptionContractStatusUpdateUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_SubscriptionContractStatusUpdateUserError';
  /** The error code. */
  code?: Maybe<Shopify_SubscriptionContractStatusUpdateErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** The possible status values of a subscription. */
export enum Shopify_SubscriptionContractSubscriptionStatus {
  /** The contract is active and continuing per its policies. */
  Active = 'ACTIVE',
  /** The contract was ended by an unplanned customer action. */
  Cancelled = 'CANCELLED',
  /** The contract has ended per the expected circumstances. All billing and deliverycycles of the subscriptions were executed. */
  Expired = 'EXPIRED',
  /** The contract ended because billing failed and no further billing attempts are expected. */
  Failed = 'FAILED',
  /** The contract is temporarily paused and is expected to resume in the future. */
  Paused = 'PAUSED'
}

/** Represents a Subscription Contract error. */
export type Shopify_SubscriptionContractUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_SubscriptionContractUserError';
  /** The error code. */
  code?: Maybe<Shopify_SubscriptionContractErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Represents a Subscription Line Pricing Cycle Adjustment. */
export type Shopify_SubscriptionCyclePriceAdjustment = {
  __typename?: 'Shopify_SubscriptionCyclePriceAdjustment';
  /** Price adjustment type. */
  adjustmentType: Shopify_SellingPlanPricingPolicyAdjustmentType;
  /** Price adjustment value. */
  adjustmentValue: Shopify_SellingPlanPricingPolicyAdjustmentValue;
  /** The number of cycles required before this pricing policy applies. */
  afterCycle: Scalars['Int']['output'];
  /** The computed price after the adjustments applied. */
  computedPrice: Shopify_MoneyV2;
};

/** Describes the delivery method to use to get the physical goods to the customer. */
export type Shopify_SubscriptionDeliveryMethod = Shopify_SubscriptionDeliveryMethodLocalDelivery | Shopify_SubscriptionDeliveryMethodPickup | Shopify_SubscriptionDeliveryMethodShipping;

/**
 * A subscription delivery method for local delivery.
 * The other subscription delivery methods can be found in the `SubscriptionDeliveryMethod` union type.
 */
export type Shopify_SubscriptionDeliveryMethodLocalDelivery = {
  __typename?: 'Shopify_SubscriptionDeliveryMethodLocalDelivery';
  /** The address to deliver to. */
  address: Shopify_SubscriptionMailingAddress;
  /** The details of the local delivery method to use. */
  localDeliveryOption: Shopify_SubscriptionDeliveryMethodLocalDeliveryOption;
};

/** The selected delivery option on a subscription contract. */
export type Shopify_SubscriptionDeliveryMethodLocalDeliveryOption = {
  __typename?: 'Shopify_SubscriptionDeliveryMethodLocalDeliveryOption';
  /** A custom reference to the delivery method for use with automations. */
  code?: Maybe<Scalars['String']['output']>;
  /** The details displayed to the customer to describe the local delivery option. */
  description?: Maybe<Scalars['String']['output']>;
  /** The delivery instructions that the customer can provide to the merchant. */
  instructions?: Maybe<Scalars['String']['output']>;
  /**
   * The phone number that the customer provided to the merchant.
   * Formatted using E.164 standard. For example, `+16135551111`.
   */
  phone: Scalars['String']['output'];
  /** The presentment title of the local delivery option. */
  presentmentTitle?: Maybe<Scalars['String']['output']>;
  /** The title of the local delivery option. */
  title?: Maybe<Scalars['String']['output']>;
};

/** A delivery method with a pickup option. */
export type Shopify_SubscriptionDeliveryMethodPickup = {
  __typename?: 'Shopify_SubscriptionDeliveryMethodPickup';
  /** The details of the pickup delivery method to use. */
  pickupOption: Shopify_SubscriptionDeliveryMethodPickupOption;
};

/** Represents the selected pickup option on a subscription contract. */
export type Shopify_SubscriptionDeliveryMethodPickupOption = {
  __typename?: 'Shopify_SubscriptionDeliveryMethodPickupOption';
  /** A custom reference to the delivery method for use with automations. */
  code?: Maybe<Scalars['String']['output']>;
  /** The details displayed to the customer to describe the pickup option. */
  description?: Maybe<Scalars['String']['output']>;
  /** The location where the customer will pickup the merchandise. */
  location: Shopify_Location;
  /** The presentment title of the pickup option. */
  presentmentTitle?: Maybe<Scalars['String']['output']>;
  /** The title of the pickup option. */
  title?: Maybe<Scalars['String']['output']>;
};

/** Represents a shipping delivery method: a mailing address and a shipping option. */
export type Shopify_SubscriptionDeliveryMethodShipping = {
  __typename?: 'Shopify_SubscriptionDeliveryMethodShipping';
  /** The address to ship to. */
  address: Shopify_SubscriptionMailingAddress;
  /** The details of the shipping method to use. */
  shippingOption: Shopify_SubscriptionDeliveryMethodShippingOption;
};

/** Represents the selected shipping option on a subscription contract. */
export type Shopify_SubscriptionDeliveryMethodShippingOption = {
  __typename?: 'Shopify_SubscriptionDeliveryMethodShippingOption';
  /**
   * The carrier service that's providing this shipping option.
   * This field isn't currently supported and returns null.
   * @deprecated This field has never been implemented.
   */
  carrierService?: Maybe<Shopify_DeliveryCarrierService>;
  /** The code of the shipping option. */
  code?: Maybe<Scalars['String']['output']>;
  /** The description of the shipping option. */
  description?: Maybe<Scalars['String']['output']>;
  /** The presentment title of the shipping option. */
  presentmentTitle?: Maybe<Scalars['String']['output']>;
  /** The title of the shipping option. */
  title?: Maybe<Scalars['String']['output']>;
};

/** The delivery option for a subscription contract. */
export type Shopify_SubscriptionDeliveryOption = Shopify_SubscriptionLocalDeliveryOption | Shopify_SubscriptionPickupOption | Shopify_SubscriptionShippingOption;

/** The result of the query to fetch delivery options for the subscription contract. */
export type Shopify_SubscriptionDeliveryOptionResult = Shopify_SubscriptionDeliveryOptionResultFailure | Shopify_SubscriptionDeliveryOptionResultSuccess;

/** A failure to find the available delivery options for a subscription contract. */
export type Shopify_SubscriptionDeliveryOptionResultFailure = {
  __typename?: 'Shopify_SubscriptionDeliveryOptionResultFailure';
  /** The reason for the failure. */
  message?: Maybe<Scalars['String']['output']>;
};

/** The delivery option for a subscription contract. */
export type Shopify_SubscriptionDeliveryOptionResultSuccess = {
  __typename?: 'Shopify_SubscriptionDeliveryOptionResultSuccess';
  /** The available delivery options. */
  deliveryOptions: Array<Shopify_SubscriptionDeliveryOption>;
};

/** Represents a Subscription Delivery Policy. */
export type Shopify_SubscriptionDeliveryPolicy = {
  __typename?: 'Shopify_SubscriptionDeliveryPolicy';
  /** The specific anchor dates upon which the delivery interval calculations should be made. */
  anchors: Array<Shopify_SellingPlanAnchor>;
  /** The kind of interval that's associated with this schedule (e.g. Monthly, Weekly, etc). */
  interval: Shopify_SellingPlanInterval;
  /** The number of delivery intervals between deliveries. */
  intervalCount: Scalars['Int']['output'];
};

/** Subscription draft discount types. */
export type Shopify_SubscriptionDiscount = Shopify_SubscriptionAppliedCodeDiscount | Shopify_SubscriptionManualDiscount;

/** Represents what a particular discount reduces from a line price. */
export type Shopify_SubscriptionDiscountAllocation = {
  __typename?: 'Shopify_SubscriptionDiscountAllocation';
  /** Allocation amount. */
  amount: Shopify_MoneyV2;
  /** Discount that created the allocation. */
  discount: Shopify_SubscriptionDiscount;
};

/** An auto-generated type for paginating through multiple SubscriptionDiscounts. */
export type Shopify_SubscriptionDiscountConnection = {
  __typename?: 'Shopify_SubscriptionDiscountConnection';
  /** A list of edges. */
  edges: Array<Shopify_SubscriptionDiscountEdge>;
  /** A list of the nodes contained in SubscriptionDiscountEdge. */
  nodes: Array<Shopify_SubscriptionDiscount>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one SubscriptionDiscount and a cursor during pagination. */
export type Shopify_SubscriptionDiscountEdge = {
  __typename?: 'Shopify_SubscriptionDiscountEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of SubscriptionDiscountEdge. */
  node: Shopify_SubscriptionDiscount;
};

/** Represents the subscription lines the discount applies on. */
export type Shopify_SubscriptionDiscountEntitledLines = {
  __typename?: 'Shopify_SubscriptionDiscountEntitledLines';
  /** Specify whether the subscription discount will apply on all subscription lines. */
  all: Scalars['Boolean']['output'];
  /** The list of subscription lines associated with the subscription discount. */
  lines: Shopify_SubscriptionLineConnection;
};


/** Represents the subscription lines the discount applies on. */
export type Shopify_SubscriptionDiscountEntitledLinesLinesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The value of the discount and how it will be applied. */
export type Shopify_SubscriptionDiscountFixedAmountValue = {
  __typename?: 'Shopify_SubscriptionDiscountFixedAmountValue';
  /** The fixed amount value of the discount. */
  amount: Shopify_MoneyV2;
  /** Whether the amount is applied per item. */
  appliesOnEachItem: Scalars['Boolean']['output'];
};

/** The percentage value of the discount. */
export type Shopify_SubscriptionDiscountPercentageValue = {
  __typename?: 'Shopify_SubscriptionDiscountPercentageValue';
  /** The percentage value of the discount. */
  percentage: Scalars['Int']['output'];
};

/** The reason a discount on a subscription draft was rejected. */
export enum Shopify_SubscriptionDiscountRejectionReason {
  /** Discount is inactive. */
  CurrentlyInactive = 'CURRENTLY_INACTIVE',
  /** Given customer does not qualify for the discount. */
  CustomerNotEligible = 'CUSTOMER_NOT_ELIGIBLE',
  /** Customer usage limit has been reached. */
  CustomerUsageLimitReached = 'CUSTOMER_USAGE_LIMIT_REACHED',
  /** Purchase type does not qualify for the discount. */
  IncompatiblePurchaseType = 'INCOMPATIBLE_PURCHASE_TYPE',
  /** Internal error during discount code validation. */
  InternalError = 'INTERNAL_ERROR',
  /** Discount code is not found. */
  NotFound = 'NOT_FOUND',
  /** Discount does not apply to any of the given line items. */
  NoEntitledLineItems = 'NO_ENTITLED_LINE_ITEMS',
  /** No applicable shipping lines. */
  NoEntitledShippingLines = 'NO_ENTITLED_SHIPPING_LINES',
  /** Purchase amount of items does not qualify for the discount. */
  PurchaseNotInRange = 'PURCHASE_NOT_IN_RANGE',
  /** Quantity of items does not qualify for the discount. */
  QuantityNotInRange = 'QUANTITY_NOT_IN_RANGE',
  /** Discount usage limit has been reached. */
  UsageLimitReached = 'USAGE_LIMIT_REACHED'
}

/** The value of the discount and how it will be applied. */
export type Shopify_SubscriptionDiscountValue = Shopify_SubscriptionDiscountFixedAmountValue | Shopify_SubscriptionDiscountPercentageValue;

/** Represents a Subscription Draft. */
export type Shopify_SubscriptionDraft = Shopify_Node & {
  __typename?: 'Shopify_SubscriptionDraft';
  /** The billing cycle that the subscription contract will be associated with. */
  billingCycle?: Maybe<Shopify_SubscriptionBillingCycle>;
  /** The billing policy for the subscription contract. */
  billingPolicy: Shopify_SubscriptionBillingPolicy;
  /** The billing cycles of the contracts that will be concatenated to the subscription contract. */
  concatenatedBillingCycles: Shopify_SubscriptionBillingCycleConnection;
  /** The currency used for the subscription contract. */
  currencyCode: Shopify_CurrencyCode;
  /** A list of the custom attributes to be added to the generated orders. */
  customAttributes: Array<Shopify_Attribute>;
  /** The customer to whom the subscription contract belongs. */
  customer: Shopify_Customer;
  /** The customer payment method used for the subscription contract. */
  customerPaymentMethod?: Maybe<Shopify_CustomerPaymentMethod>;
  /** The delivery method for each billing of the subscription contract. */
  deliveryMethod?: Maybe<Shopify_SubscriptionDeliveryMethod>;
  /** The available delivery options for a given delivery address. Returns `null` for pending requests. */
  deliveryOptions?: Maybe<Shopify_SubscriptionDeliveryOptionResult>;
  /** The delivery policy for the subscription contract. */
  deliveryPolicy: Shopify_SubscriptionDeliveryPolicy;
  /** The delivery price for each billing the subscription contract. */
  deliveryPrice?: Maybe<Shopify_MoneyV2>;
  /** The list of subscription discounts which will be associated with the subscription contract. */
  discounts: Shopify_SubscriptionDiscountConnection;
  /** The list of subscription discounts to be added to the subscription contract. */
  discountsAdded: Shopify_SubscriptionDiscountConnection;
  /** The list of subscription discounts to be removed from the subscription contract. */
  discountsRemoved: Shopify_SubscriptionDiscountConnection;
  /** The list of subscription discounts to be updated on the subscription contract. */
  discountsUpdated: Shopify_SubscriptionDiscountConnection;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The list of subscription lines which will be associated with the subscription contract. */
  lines: Shopify_SubscriptionLineConnection;
  /** The list of subscription lines to be added to the subscription contract. */
  linesAdded: Shopify_SubscriptionLineConnection;
  /** The list of subscription lines to be removed from the subscription contract. */
  linesRemoved: Shopify_SubscriptionLineConnection;
  /** The next billing date for the subscription contract. */
  nextBillingDate?: Maybe<Scalars['DateTime']['output']>;
  /** The note field that will be applied to the generated orders. */
  note?: Maybe<Scalars['String']['output']>;
  /** The original subscription contract. */
  originalContract?: Maybe<Shopify_SubscriptionContract>;
  /**
   * Available Shipping Options for a given delivery address. Returns NULL for pending requests.
   * @deprecated Use `deliveryOptions` instead.
   */
  shippingOptions?: Maybe<Shopify_SubscriptionShippingOptionResult>;
  /** The current status of the subscription contract. */
  status?: Maybe<Shopify_SubscriptionContractSubscriptionStatus>;
};


/** Represents a Subscription Draft. */
export type Shopify_SubscriptionDraftConcatenatedBillingCyclesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_SubscriptionBillingCyclesSortKeys>;
};


/** Represents a Subscription Draft. */
export type Shopify_SubscriptionDraftCustomerPaymentMethodArgs = {
  showRevoked?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a Subscription Draft. */
export type Shopify_SubscriptionDraftDeliveryOptionsArgs = {
  deliveryAddress?: InputMaybe<Shopify_MailingAddressInput>;
};


/** Represents a Subscription Draft. */
export type Shopify_SubscriptionDraftDiscountsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a Subscription Draft. */
export type Shopify_SubscriptionDraftDiscountsAddedArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a Subscription Draft. */
export type Shopify_SubscriptionDraftDiscountsRemovedArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a Subscription Draft. */
export type Shopify_SubscriptionDraftDiscountsUpdatedArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a Subscription Draft. */
export type Shopify_SubscriptionDraftLinesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a Subscription Draft. */
export type Shopify_SubscriptionDraftLinesAddedArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a Subscription Draft. */
export type Shopify_SubscriptionDraftLinesRemovedArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Represents a Subscription Draft. */
export type Shopify_SubscriptionDraftShippingOptionsArgs = {
  deliveryAddress?: InputMaybe<Shopify_MailingAddressInput>;
};

/** Possible error codes that can be returned by `SubscriptionDraftUserError`. */
export enum Shopify_SubscriptionDraftErrorCode {
  /** This line has already been removed. */
  AlreadyRemoved = 'ALREADY_REMOVED',
  /** Cannot commit a contract draft with this mutation. Please use SubscriptionDraftCommit. */
  BillingCycleAbsent = 'BILLING_CYCLE_ABSENT',
  /** Billing policy cannot be updated for billing cycle contract drafts. */
  BillingCycleContractDraftBillingPolicyInvalid = 'BILLING_CYCLE_CONTRACT_DRAFT_BILLING_POLICY_INVALID',
  /** Delivery policy cannot be updated for billing cycle contract drafts. */
  BillingCycleContractDraftDeliveryPolicyInvalid = 'BILLING_CYCLE_CONTRACT_DRAFT_DELIVERY_POLICY_INVALID',
  /** Cannot commit a billing cycle contract draft with this mutation. Please use SubscriptionBillingCycleContractDraftCommit. */
  BillingCyclePresent = 'BILLING_CYCLE_PRESENT',
  /** The input value is blank. */
  Blank = 'BLANK',
  /** Subscription draft has been already committed. */
  Committed = 'COMMITTED',
  /** Contract draft must be a billing cycle contract draft for contract concatenation. */
  ConcatenationBillingCycleContractDraftRequired = 'CONCATENATION_BILLING_CYCLE_CONTRACT_DRAFT_REQUIRED',
  /** Currency is not enabled. */
  CurrencyNotEnabled = 'CURRENCY_NOT_ENABLED',
  /** The customer doesn't exist. */
  CustomerDoesNotExist = 'CUSTOMER_DOES_NOT_EXIST',
  /** The payment method customer must be the same as the contract customer. */
  CustomerMismatch = 'CUSTOMER_MISMATCH',
  /** Customer is scheduled for redaction or has been redacted. */
  CustomerRedacted = 'CUSTOMER_REDACTED',
  /** The after cycle attribute must be unique between cycle discounts. */
  CycleDiscountsUniqueAfterCycle = 'CYCLE_DISCOUNTS_UNIQUE_AFTER_CYCLE',
  /** Billing cycle selector cannot select billing cycle outside of index range. */
  CycleIndexOutOfRange = 'CYCLE_INDEX_OUT_OF_RANGE',
  /** Billing cycle selector requires exactly one of index or date to be provided. */
  CycleSelectorValidateOneOf = 'CYCLE_SELECTOR_VALIDATE_ONE_OF',
  /** Billing cycle selector cannot select billing cycle outside of start date range. */
  CycleStartDateOutOfRange = 'CYCLE_START_DATE_OUT_OF_RANGE',
  /** The delivery method can't be blank if any lines require shipping. */
  DeliveryMethodRequired = 'DELIVERY_METHOD_REQUIRED',
  /** The delivery policy interval must be a multiple of the billing policy interval. */
  DeliveryMustBeMultipleOfBilling = 'DELIVERY_MUST_BE_MULTIPLE_OF_BILLING',
  /** Concatenated contracts cannot contain duplicate subscription contracts. */
  DuplicateConcatenatedContracts = 'DUPLICATE_CONCATENATED_CONTRACTS',
  /** Maximum number of concatenated contracts on a billing cycle contract draft exceeded. */
  ExceededMaxConcatenatedContracts = 'EXCEEDED_MAX_CONCATENATED_CONTRACTS',
  /** The input value should be greater than the minimum allowed value. */
  GreaterThan = 'GREATER_THAN',
  /** The input value should be greater than or equal to the minimum value allowed. */
  GreaterThanOrEqualTo = 'GREATER_THAN_OR_EQUAL_TO',
  /** Cannot update a subscription contract with a current or upcoming billing cycle contract edit. */
  HasFutureEdits = 'HAS_FUTURE_EDITS',
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** The adjustment value must the same type as the adjustment type. */
  InvalidAdjustmentType = 'INVALID_ADJUSTMENT_TYPE',
  /** The adjustment value must be either fixed_value or percentage. */
  InvalidAdjustmentValue = 'INVALID_ADJUSTMENT_VALUE',
  /** Next billing date is invalid. */
  InvalidBillingDate = 'INVALID_BILLING_DATE',
  /** Must have at least one line. */
  InvalidLines = 'INVALID_LINES',
  /** Note length is too long. */
  InvalidNoteLength = 'INVALID_NOTE_LENGTH',
  /** The input value should be less than the maximum value allowed. */
  LessThan = 'LESS_THAN',
  /** The input value should be less than or equal to the maximum value allowed. */
  LessThanOrEqualTo = 'LESS_THAN_OR_EQUAL_TO',
  /** The local delivery options must be set for local delivery. */
  MissingLocalDeliveryOptions = 'MISSING_LOCAL_DELIVERY_OPTIONS',
  /** The value is not an integer. */
  NotAnInteger = 'NOT_AN_INTEGER',
  /** Value is not in range. */
  NotInRange = 'NOT_IN_RANGE',
  /** Discount must have at least one entitled line. */
  NoEntitledLines = 'NO_ENTITLED_LINES',
  /** Input value is not present. */
  Presence = 'PRESENCE',
  /** The maximum number of cycles must be greater than the minimum. */
  SellingPlanMaxCyclesMustBeGreaterThanMinCycles = 'SELLING_PLAN_MAX_CYCLES_MUST_BE_GREATER_THAN_MIN_CYCLES',
  /** Another operation updated the contract concurrently as the commit was in progress. */
  StaleContract = 'STALE_CONTRACT',
  /** The input value is too long. */
  TooLong = 'TOO_LONG',
  /** The input value is too short. */
  TooShort = 'TOO_SHORT',
  /** Billing cycle selector cannot select upcoming billing cycle past limit. */
  UpcomingCycleLimitExceeded = 'UPCOMING_CYCLE_LIMIT_EXCEEDED'
}

/** Represents a Subscription Draft error. */
export type Shopify_SubscriptionDraftUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_SubscriptionDraftUserError';
  /** The error code. */
  code?: Maybe<Shopify_SubscriptionDraftErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Represents a Subscription Line. */
export type Shopify_SubscriptionLine = {
  __typename?: 'Shopify_SubscriptionLine';
  /** The price per unit for the subscription line in the contract's currency. */
  currentPrice: Shopify_MoneyV2;
  /** List of custom attributes associated to the line item. */
  customAttributes: Array<Shopify_Attribute>;
  /** Discount allocations. */
  discountAllocations: Array<Shopify_SubscriptionDiscountAllocation>;
  /** The unique ID. */
  id: Scalars['ID']['output'];
  /** Total line price including all discounts. */
  lineDiscountedPrice: Shopify_MoneyV2;
  /** Describe the price changes of the line over time. */
  pricingPolicy?: Maybe<Shopify_SubscriptionPricingPolicy>;
  /** The product ID associated with the subscription line. */
  productId?: Maybe<Scalars['ID']['output']>;
  /** The quantity of the unit selected for the subscription line. */
  quantity: Scalars['Int']['output'];
  /** Whether physical shipping is required for the variant. */
  requiresShipping: Scalars['Boolean']['output'];
  /**
   * The selling plan ID associated to the line.
   *
   * Indicates which selling plan was used to create this
   * contract line initially. The selling plan ID is also used to
   * find the associated delivery profile.
   *
   * The subscription contract, subscription line, or selling plan might have
   * changed. As a result, the selling plan's attributes might not
   * match the information on the contract.
   */
  sellingPlanId?: Maybe<Scalars['ID']['output']>;
  /**
   * The selling plan name associated to the line. This name describes
   * the order line items created from this subscription line
   * for both merchants and customers.
   *
   * The value can be different from the selling plan's name, because both
   * the selling plan's name and the subscription line's selling_plan_name
   * attribute can be updated independently.
   */
  sellingPlanName?: Maybe<Scalars['String']['output']>;
  /** Variant SKU number of the item associated with the subscription line. */
  sku?: Maybe<Scalars['String']['output']>;
  /** Whether the variant is taxable. */
  taxable: Scalars['Boolean']['output'];
  /** Product title of the item associated with the subscription line. */
  title: Scalars['String']['output'];
  /** The product variant ID associated with the subscription line. */
  variantId?: Maybe<Scalars['ID']['output']>;
  /** The image associated with the line item's variant or product. */
  variantImage?: Maybe<Shopify_Image>;
  /** Product variant title of the item associated with the subscription line. */
  variantTitle?: Maybe<Scalars['String']['output']>;
};

/** An auto-generated type for paginating through multiple SubscriptionLines. */
export type Shopify_SubscriptionLineConnection = {
  __typename?: 'Shopify_SubscriptionLineConnection';
  /** A list of edges. */
  edges: Array<Shopify_SubscriptionLineEdge>;
  /** A list of the nodes contained in SubscriptionLineEdge. */
  nodes: Array<Shopify_SubscriptionLine>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one SubscriptionLine and a cursor during pagination. */
export type Shopify_SubscriptionLineEdge = {
  __typename?: 'Shopify_SubscriptionLineEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of SubscriptionLineEdge. */
  node: Shopify_SubscriptionLine;
};

/** A local delivery option for a subscription contract. */
export type Shopify_SubscriptionLocalDeliveryOption = {
  __typename?: 'Shopify_SubscriptionLocalDeliveryOption';
  /** The code of the local delivery option. */
  code: Scalars['String']['output'];
  /** The description of the local delivery option. */
  description?: Maybe<Scalars['String']['output']>;
  /** Whether a phone number is required for the local delivery option. */
  phoneRequired: Scalars['Boolean']['output'];
  /** The presentment title of the local delivery option. */
  presentmentTitle?: Maybe<Scalars['String']['output']>;
  /** The price of the local delivery option. */
  price?: Maybe<Shopify_MoneyV2>;
  /** The title of the local delivery option. */
  title: Scalars['String']['output'];
};

/** Represents a Mailing Address on a Subscription. */
export type Shopify_SubscriptionMailingAddress = {
  __typename?: 'Shopify_SubscriptionMailingAddress';
  /** The first line of the address. Typically the street address or PO Box number. */
  address1?: Maybe<Scalars['String']['output']>;
  /** The second line of the address. Typically the number of the apartment, suite, or unit. */
  address2?: Maybe<Scalars['String']['output']>;
  /** The name of the city, district, village, or town. */
  city?: Maybe<Scalars['String']['output']>;
  /** The name of the customer's company or organization. */
  company?: Maybe<Scalars['String']['output']>;
  /** The name of the country. */
  country?: Maybe<Scalars['String']['output']>;
  /**
   * The two-letter code for the country of the address.
   *
   * For example, US.
   */
  countryCode?: Maybe<Shopify_CountryCode>;
  /** The first name of the customer. */
  firstName?: Maybe<Scalars['String']['output']>;
  /** The last name of the customer. */
  lastName?: Maybe<Scalars['String']['output']>;
  /** The full name of the customer, based on firstName and lastName. */
  name?: Maybe<Scalars['String']['output']>;
  /** A unique phone number for the customer. Formatted using E.164 standard. For example, _+16135551111_. */
  phone?: Maybe<Scalars['String']['output']>;
  /** The region of the address, such as the province, state, or district. */
  province?: Maybe<Scalars['String']['output']>;
  /**
   * The two-letter code for the region.
   *
   * For example, ON.
   */
  provinceCode?: Maybe<Scalars['String']['output']>;
  /** The zip or postal code of the address. */
  zip?: Maybe<Scalars['String']['output']>;
};

/** Custom subscription discount. */
export type Shopify_SubscriptionManualDiscount = {
  __typename?: 'Shopify_SubscriptionManualDiscount';
  /** Entitled line items used to apply the subscription discount on. */
  entitledLines: Shopify_SubscriptionDiscountEntitledLines;
  /** The unique ID. */
  id: Scalars['ID']['output'];
  /** The maximum number of times the subscription discount will be applied on orders. */
  recurringCycleLimit?: Maybe<Scalars['Int']['output']>;
  /** The reason that the discount on the subscription draft is rejected. */
  rejectionReason?: Maybe<Shopify_SubscriptionDiscountRejectionReason>;
  /** Type of line the discount applies on. */
  targetType: Shopify_DiscountTargetType;
  /** The title associated with the subscription discount. */
  title?: Maybe<Scalars['String']['output']>;
  /** The type of the subscription discount. */
  type: Shopify_DiscountType;
  /** The number of times the discount was applied. */
  usageCount: Scalars['Int']['output'];
  /** The value of the subscription discount. */
  value: Shopify_SubscriptionDiscountValue;
};

/** An auto-generated type for paginating through multiple SubscriptionManualDiscounts. */
export type Shopify_SubscriptionManualDiscountConnection = {
  __typename?: 'Shopify_SubscriptionManualDiscountConnection';
  /** A list of edges. */
  edges: Array<Shopify_SubscriptionManualDiscountEdge>;
  /** A list of the nodes contained in SubscriptionManualDiscountEdge. */
  nodes: Array<Shopify_SubscriptionManualDiscount>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one SubscriptionManualDiscount and a cursor during pagination. */
export type Shopify_SubscriptionManualDiscountEdge = {
  __typename?: 'Shopify_SubscriptionManualDiscountEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of SubscriptionManualDiscountEdge. */
  node: Shopify_SubscriptionManualDiscount;
};

/** A pickup option to deliver a subscription contract. */
export type Shopify_SubscriptionPickupOption = {
  __typename?: 'Shopify_SubscriptionPickupOption';
  /** The code of the pickup option. */
  code: Scalars['String']['output'];
  /** The description of the pickup option. */
  description?: Maybe<Scalars['String']['output']>;
  /** The pickup location. */
  location: Shopify_Location;
  /** Whether a phone number is required for the pickup option. */
  phoneRequired: Scalars['Boolean']['output'];
  /** The estimated amount of time it takes for the pickup to be ready. For example, "Usually ready in 24 hours".). */
  pickupTime: Scalars['String']['output'];
  /** The presentment title of the pickup option. */
  presentmentTitle?: Maybe<Scalars['String']['output']>;
  /** The price of the pickup option. */
  price?: Maybe<Shopify_MoneyV2>;
  /** The title of the pickup option. */
  title: Scalars['String']['output'];
};

/** Represents a Subscription Line Pricing Policy. */
export type Shopify_SubscriptionPricingPolicy = {
  __typename?: 'Shopify_SubscriptionPricingPolicy';
  /** The base price per unit for the subscription line in the contract's currency. */
  basePrice: Shopify_MoneyV2;
  /** The adjustments per cycle for the subscription line. */
  cycleDiscounts: Array<Shopify_SubscriptionCyclePriceAdjustment>;
};

/** A shipping option to deliver a subscription contract. */
export type Shopify_SubscriptionShippingOption = {
  __typename?: 'Shopify_SubscriptionShippingOption';
  /**
   * The carrier service that's providing this shipping option.
   * This field isn't currently supported and returns null.
   * @deprecated This field has never been implemented.
   */
  carrierService?: Maybe<Shopify_DeliveryCarrierService>;
  /** The code of the shipping option. */
  code: Scalars['String']['output'];
  /** The description of the shipping option. */
  description?: Maybe<Scalars['String']['output']>;
  /** If a phone number is required for the shipping option. */
  phoneRequired?: Maybe<Scalars['Boolean']['output']>;
  /** The presentment title of the shipping option. */
  presentmentTitle?: Maybe<Scalars['String']['output']>;
  /** The price of the shipping option. */
  price?: Maybe<Shopify_MoneyV2>;
  /** The title of the shipping option. */
  title: Scalars['String']['output'];
};

/** The result of the query to fetch shipping options for the subscription contract. */
export type Shopify_SubscriptionShippingOptionResult = Shopify_SubscriptionShippingOptionResultFailure | Shopify_SubscriptionShippingOptionResultSuccess;

/** Failure determining available shipping options for delivery of a subscription contract. */
export type Shopify_SubscriptionShippingOptionResultFailure = {
  __typename?: 'Shopify_SubscriptionShippingOptionResultFailure';
  /** Failure reason. */
  message?: Maybe<Scalars['String']['output']>;
};

/** A shipping option for delivery of a subscription contract. */
export type Shopify_SubscriptionShippingOptionResultSuccess = {
  __typename?: 'Shopify_SubscriptionShippingOptionResultSuccess';
  /** Available shipping options. */
  shippingOptions: Array<Shopify_SubscriptionShippingOption>;
};

/**
 * A suggested transaction. Suggested transaction are usually used in the context of refunds
 * and exchanges.
 */
export type Shopify_SuggestedOrderTransaction = {
  __typename?: 'Shopify_SuggestedOrderTransaction';
  /** The masked account number associated with the payment method. */
  accountNumber?: Maybe<Scalars['String']['output']>;
  /**
   * The amount of the transaction.
   * @deprecated Use `amountSet` instead.
   */
  amount: Scalars['Shopify_Money']['output'];
  /** The amount and currency of the suggested order transaction in shop and presentment currencies. */
  amountSet: Shopify_MoneyBag;
  /** The human-readable payment gateway name suggested to process the transaction. */
  formattedGateway?: Maybe<Scalars['String']['output']>;
  /** The suggested payment gateway used to process the transaction. */
  gateway?: Maybe<Scalars['String']['output']>;
  /** Specifies the kind of the suggested order transaction. */
  kind: Shopify_SuggestedOrderTransactionKind;
  /**
   * Specifies the available amount to refund on the gateway. Only available within SuggestedRefund.
   * @deprecated Use `maximumRefundableSet` instead.
   */
  maximumRefundable?: Maybe<Scalars['Shopify_Money']['output']>;
  /** Specifies the available amount to refund on the gateway in shop and presentment currencies. Only available within SuggestedRefund. */
  maximumRefundableSet?: Maybe<Shopify_MoneyBag>;
  /** The associated parent transaction, for example the authorization of a capture. */
  parentTransaction?: Maybe<Shopify_OrderTransaction>;
  /** The associated payment details related to the transaction. */
  paymentDetails?: Maybe<Shopify_PaymentDetails>;
};

/** Specifies the kind of the suggested order transaction. */
export enum Shopify_SuggestedOrderTransactionKind {
  /** A suggested refund transaction for an order. */
  SuggestedRefund = 'SUGGESTED_REFUND'
}

/** Represents a refund suggested by Shopify based on the items being reimbursed. You can then use the suggested refund object to generate an actual refund. */
export type Shopify_SuggestedRefund = {
  __typename?: 'Shopify_SuggestedRefund';
  /**
   * The total monetary value to be refunded.
   * @deprecated Use `amountSet` instead.
   */
  amount: Scalars['Shopify_Money']['output'];
  /** The total monetary value to be refunded in shop and presentment currencies. */
  amountSet: Shopify_MoneyBag;
  /** The sum of all the discounted prices of the line items being refunded. */
  discountedSubtotalSet: Shopify_MoneyBag;
  /**
   * The total monetary value available to refund.
   * @deprecated Use `maximumRefundableSet` instead.
   */
  maximumRefundable: Scalars['Shopify_Money']['output'];
  /** The total monetary value available to refund in shop and presentment currencies. */
  maximumRefundableSet: Shopify_MoneyBag;
  /** A list of duties to be refunded from the order. */
  refundDuties: Array<Shopify_RefundDuty>;
  /** A list of line items to be refunded, along with restock instructions. */
  refundLineItems: Array<Shopify_RefundLineItem>;
  /** The shipping costs to be refunded from the order. */
  shipping: Shopify_ShippingRefund;
  /**
   * The sum of all the prices of the line items being refunded.
   * @deprecated Use `subtotalSet` instead.
   */
  subtotal: Scalars['Shopify_Money']['output'];
  /** The sum of all the prices of the line items being refunded in shop and presentment currencies. */
  subtotalSet: Shopify_MoneyBag;
  /** A list of suggested order transactions. */
  suggestedTransactions: Array<Shopify_SuggestedOrderTransaction>;
  /** The total cart discount amount that was applied to all line items in this refund. */
  totalCartDiscountAmountSet: Shopify_MoneyBag;
  /** The sum of all the duties being refunded from the order in shop and presentment currencies. The value must be positive. */
  totalDutiesSet: Shopify_MoneyBag;
  /** The sum of the taxes being refunded from the order in shop and presentment currencies. The value must be positive. */
  totalTaxSet: Shopify_MoneyBag;
  /**
   * The sum of the taxes being refunded from the order. The value must be positive.
   * @deprecated Use `totalTaxSet` instead.
   */
  totalTaxes: Scalars['Shopify_Money']['output'];
};

/** Represents a return refund suggested by Shopify based on the items being reimbursed. You can then use the suggested refund object to generate an actual refund for the return. */
export type Shopify_SuggestedReturnRefund = {
  __typename?: 'Shopify_SuggestedReturnRefund';
  /** The total monetary value to be refunded in shop and presentment currencies. */
  amount: Shopify_MoneyBag;
  /** The sum of all the discounted prices of the line items being refunded. */
  discountedSubtotal: Shopify_MoneyBag;
  /** The total monetary value available to refund in shop and presentment currencies. */
  maximumRefundable: Shopify_MoneyBag;
  /** A list of duties to be refunded from the order. */
  refundDuties: Array<Shopify_RefundDuty>;
  /** The shipping costs to be refunded from the order. */
  shipping: Shopify_ShippingRefund;
  /** The sum of all the prices of the line items being refunded in shop and presentment currencies. */
  subtotal: Shopify_MoneyBag;
  /** A list of suggested order transactions. */
  suggestedTransactions: Array<Shopify_SuggestedOrderTransaction>;
  /** The total cart discount amount that was applied to all line items in this refund. */
  totalCartDiscountAmount: Shopify_MoneyBag;
  /** The sum of all the duties being refunded from the order in shop and presentment currencies. The value must be positive. */
  totalDuties: Shopify_MoneyBag;
  /** The sum of the taxes being refunded in shop and presentment currencies. The value must be positive. */
  totalTax: Shopify_MoneyBag;
};

/** An error that occurs during the execution of `TaxAppConfigure`. */
export type Shopify_TaxAppConfigureUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_TaxAppConfigureUserError';
  /** The error code. */
  code?: Maybe<Shopify_TaxAppConfigureUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `TaxAppConfigureUserError`. */
export enum Shopify_TaxAppConfigureUserErrorCode {
  /** Unable to update already active tax partner. */
  TaxPartnerAlreadyActive = 'TAX_PARTNER_ALREADY_ACTIVE',
  /** Unable to find the tax partner record. */
  TaxPartnerNotFound = 'TAX_PARTNER_NOT_FOUND',
  /** Unable to update tax partner state. */
  TaxPartnerStateUpdateFailed = 'TAX_PARTNER_STATE_UPDATE_FAILED'
}

/** Available customer tax exemptions. */
export enum Shopify_TaxExemption {
  /** This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in British Columbia. */
  CaBcCommercialFisheryExemption = 'CA_BC_COMMERCIAL_FISHERY_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid CONTRACTOR_EXEMPTION in British Columbia. */
  CaBcContractorExemption = 'CA_BC_CONTRACTOR_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid PRODUCTION_AND_MACHINERY_EXEMPTION in British Columbia. */
  CaBcProductionAndMachineryExemption = 'CA_BC_PRODUCTION_AND_MACHINERY_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in British Columbia. */
  CaBcResellerExemption = 'CA_BC_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid SUB_CONTRACTOR_EXEMPTION in British Columbia. */
  CaBcSubContractorExemption = 'CA_BC_SUB_CONTRACTOR_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid DIPLOMAT_EXEMPTION in Canada. */
  CaDiplomatExemption = 'CA_DIPLOMAT_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Manitoba. */
  CaMbCommercialFisheryExemption = 'CA_MB_COMMERCIAL_FISHERY_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Manitoba. */
  CaMbFarmerExemption = 'CA_MB_FARMER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Manitoba. */
  CaMbResellerExemption = 'CA_MB_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Nova Scotia. */
  CaNsCommercialFisheryExemption = 'CA_NS_COMMERCIAL_FISHERY_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Nova Scotia. */
  CaNsFarmerExemption = 'CA_NS_FARMER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid PURCHASE_EXEMPTION in Ontario. */
  CaOnPurchaseExemption = 'CA_ON_PURCHASE_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Prince Edward Island. */
  CaPeCommercialFisheryExemption = 'CA_PE_COMMERCIAL_FISHERY_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Saskatchewan. */
  CaSkCommercialFisheryExemption = 'CA_SK_COMMERCIAL_FISHERY_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid CONTRACTOR_EXEMPTION in Saskatchewan. */
  CaSkContractorExemption = 'CA_SK_CONTRACTOR_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Saskatchewan. */
  CaSkFarmerExemption = 'CA_SK_FARMER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid PRODUCTION_AND_MACHINERY_EXEMPTION in Saskatchewan. */
  CaSkProductionAndMachineryExemption = 'CA_SK_PRODUCTION_AND_MACHINERY_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Saskatchewan. */
  CaSkResellerExemption = 'CA_SK_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid SUB_CONTRACTOR_EXEMPTION in Saskatchewan. */
  CaSkSubContractorExemption = 'CA_SK_SUB_CONTRACTOR_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid STATUS_CARD_EXEMPTION in Canada. */
  CaStatusCardExemption = 'CA_STATUS_CARD_EXEMPTION',
  /** This customer is exempt from VAT for purchases within the EU that is shipping from outside of customer's country. */
  EuReverseChargeExemptionRule = 'EU_REVERSE_CHARGE_EXEMPTION_RULE',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Alaska. */
  UsAkResellerExemption = 'US_AK_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Alabama. */
  UsAlResellerExemption = 'US_AL_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Arkansas. */
  UsArResellerExemption = 'US_AR_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Arizona. */
  UsAzResellerExemption = 'US_AZ_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in California. */
  UsCaResellerExemption = 'US_CA_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Colorado. */
  UsCoResellerExemption = 'US_CO_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Connecticut. */
  UsCtResellerExemption = 'US_CT_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Washington DC. */
  UsDcResellerExemption = 'US_DC_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Delaware. */
  UsDeResellerExemption = 'US_DE_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Florida. */
  UsFlResellerExemption = 'US_FL_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Georgia. */
  UsGaResellerExemption = 'US_GA_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Hawaii. */
  UsHiResellerExemption = 'US_HI_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Iowa. */
  UsIaResellerExemption = 'US_IA_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Idaho. */
  UsIdResellerExemption = 'US_ID_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Illinois. */
  UsIlResellerExemption = 'US_IL_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Indiana. */
  UsInResellerExemption = 'US_IN_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Kansas. */
  UsKsResellerExemption = 'US_KS_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Kentucky. */
  UsKyResellerExemption = 'US_KY_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Louisiana. */
  UsLaResellerExemption = 'US_LA_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Massachusetts. */
  UsMaResellerExemption = 'US_MA_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Maryland. */
  UsMdResellerExemption = 'US_MD_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Maine. */
  UsMeResellerExemption = 'US_ME_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Michigan. */
  UsMiResellerExemption = 'US_MI_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Minnesota. */
  UsMnResellerExemption = 'US_MN_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Missouri. */
  UsMoResellerExemption = 'US_MO_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Mississippi. */
  UsMsResellerExemption = 'US_MS_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Montana. */
  UsMtResellerExemption = 'US_MT_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in North Carolina. */
  UsNcResellerExemption = 'US_NC_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in North Dakota. */
  UsNdResellerExemption = 'US_ND_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Nebraska. */
  UsNeResellerExemption = 'US_NE_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New Hampshire. */
  UsNhResellerExemption = 'US_NH_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New Jersey. */
  UsNjResellerExemption = 'US_NJ_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New Mexico. */
  UsNmResellerExemption = 'US_NM_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Nevada. */
  UsNvResellerExemption = 'US_NV_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New York. */
  UsNyResellerExemption = 'US_NY_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Ohio. */
  UsOhResellerExemption = 'US_OH_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Oklahoma. */
  UsOkResellerExemption = 'US_OK_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Oregon. */
  UsOrResellerExemption = 'US_OR_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Pennsylvania. */
  UsPaResellerExemption = 'US_PA_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Rhode Island. */
  UsRiResellerExemption = 'US_RI_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in South Carolina. */
  UsScResellerExemption = 'US_SC_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in South Dakota. */
  UsSdResellerExemption = 'US_SD_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Tennessee. */
  UsTnResellerExemption = 'US_TN_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Texas. */
  UsTxResellerExemption = 'US_TX_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Utah. */
  UsUtResellerExemption = 'US_UT_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Virginia. */
  UsVaResellerExemption = 'US_VA_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Vermont. */
  UsVtResellerExemption = 'US_VT_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Washington. */
  UsWaResellerExemption = 'US_WA_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Wisconsin. */
  UsWiResellerExemption = 'US_WI_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in West Virginia. */
  UsWvResellerExemption = 'US_WV_RESELLER_EXEMPTION',
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Wyoming. */
  UsWyResellerExemption = 'US_WY_RESELLER_EXEMPTION'
}

/** Represents a single tax applied to the associated line item. */
export type Shopify_TaxLine = {
  __typename?: 'Shopify_TaxLine';
  /** Whether the channel that submitted the tax line is liable for remitting. A value of null indicates unknown liability for this tax line. */
  channelLiable?: Maybe<Scalars['Boolean']['output']>;
  /**
   * The amount of tax, in shop currency, after discounts and before returns.
   * @deprecated Use `priceSet` instead.
   */
  price: Scalars['Shopify_Money']['output'];
  /** The amount of tax, in shop and presentment currencies, after discounts and before returns. */
  priceSet: Shopify_MoneyBag;
  /** The proportion of the line item price that the tax represents as a decimal. */
  rate?: Maybe<Scalars['Float']['output']>;
  /** The proportion of the line item price that the tax represents as a percentage. */
  ratePercentage?: Maybe<Scalars['Float']['output']>;
  /** The name of the tax. */
  title: Scalars['String']['output'];
};

/** A Shopify product taxonomy attribute. */
export type Shopify_TaxonomyAttribute = Shopify_Node & {
  __typename?: 'Shopify_TaxonomyAttribute';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
};

/** The details of a specific product category within the [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt). */
export type Shopify_TaxonomyCategory = Shopify_Node & {
  __typename?: 'Shopify_TaxonomyCategory';
  /** The IDs of the category's ancestor categories. */
  ancestorIds: Array<Scalars['ID']['output']>;
  /** The attributes of the taxonomy category. */
  attributes: Shopify_TaxonomyCategoryAttributeConnection;
  /** The IDs of the category's child categories. */
  childrenIds: Array<Scalars['ID']['output']>;
  /** The full name of the taxonomy category. For example,  Animals & Pet Supplies > Pet Supplies > Dog Supplies > Dog Beds. */
  fullName: Scalars['String']['output'];
  /** The unique ID of the TaxonomyCategory. */
  id: Scalars['ID']['output'];
  /** Whether the category is archived. */
  isArchived: Scalars['Boolean']['output'];
  /** Whether the category is a leaf category. */
  isLeaf: Scalars['Boolean']['output'];
  /** Whether the category is a root category. */
  isRoot: Scalars['Boolean']['output'];
  /** The level of the category in the taxonomy tree. */
  level: Scalars['Int']['output'];
  /** The name of the taxonomy category. For example, Dog Beds. */
  name: Scalars['String']['output'];
  /** The ID of the category's parent category. */
  parentId?: Maybe<Scalars['ID']['output']>;
};


/** The details of a specific product category within the [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt). */
export type Shopify_TaxonomyCategoryAttributesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** A product taxonomy attribute interface. */
export type Shopify_TaxonomyCategoryAttribute = Shopify_TaxonomyAttribute | Shopify_TaxonomyChoiceListAttribute | Shopify_TaxonomyMeasurementAttribute;

/** An auto-generated type for paginating through multiple TaxonomyCategoryAttributes. */
export type Shopify_TaxonomyCategoryAttributeConnection = {
  __typename?: 'Shopify_TaxonomyCategoryAttributeConnection';
  /** A list of edges. */
  edges: Array<Shopify_TaxonomyCategoryAttributeEdge>;
  /** A list of the nodes contained in TaxonomyCategoryAttributeEdge. */
  nodes: Array<Shopify_TaxonomyCategoryAttribute>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one TaxonomyCategoryAttribute and a cursor during pagination. */
export type Shopify_TaxonomyCategoryAttributeEdge = {
  __typename?: 'Shopify_TaxonomyCategoryAttributeEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of TaxonomyCategoryAttributeEdge. */
  node: Shopify_TaxonomyCategoryAttribute;
};

/** A Shopify product taxonomy choice list attribute. */
export type Shopify_TaxonomyChoiceListAttribute = Shopify_Node & {
  __typename?: 'Shopify_TaxonomyChoiceListAttribute';
  /** The unique ID of the TaxonomyAttribute. */
  id: Scalars['ID']['output'];
  /** The name of the product taxonomy attribute. For example, Color. */
  name: Scalars['String']['output'];
  /** A list of values on the choice list attribute. */
  values: Shopify_TaxonomyValueConnection;
};


/** A Shopify product taxonomy choice list attribute. */
export type Shopify_TaxonomyChoiceListAttributeValuesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** A Shopify product taxonomy measurement attribute. */
export type Shopify_TaxonomyMeasurementAttribute = Shopify_Node & {
  __typename?: 'Shopify_TaxonomyMeasurementAttribute';
  /** The unique ID of the TaxonomyAttribute. */
  id: Scalars['ID']['output'];
  /** The name of the product taxonomy attribute. For example, Color. */
  name: Scalars['String']['output'];
  /** The product taxonomy attribute options. */
  options: Array<Shopify_Attribute>;
};

/** Represents a Shopify product taxonomy value. */
export type Shopify_TaxonomyValue = Shopify_Node & {
  __typename?: 'Shopify_TaxonomyValue';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The name of the product taxonomy value. For example, Red. */
  name: Scalars['String']['output'];
};

/** An auto-generated type for paginating through multiple TaxonomyValues. */
export type Shopify_TaxonomyValueConnection = {
  __typename?: 'Shopify_TaxonomyValueConnection';
  /** A list of edges. */
  edges: Array<Shopify_TaxonomyValueEdge>;
  /** A list of the nodes contained in TaxonomyValueEdge. */
  nodes: Array<Shopify_TaxonomyValue>;
  /** Information to aid in pagination. */
  pageInfo: Shopify_PageInfo;
};

/** An auto-generated type which holds one TaxonomyValue and a cursor during pagination. */
export type Shopify_TaxonomyValueEdge = {
  __typename?: 'Shopify_TaxonomyValueEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of TaxonomyValueEdge. */
  node: Shopify_TaxonomyValue;
};

/**
 * A TenderTransaction represents a transaction with financial impact on a shop's balance sheet. A tender transaction always
 * represents actual money movement between a buyer and a shop. TenderTransactions can be used instead of OrderTransactions
 * for reconciling a shop's cash flow. A TenderTransaction is immutable once created.
 */
export type Shopify_TenderTransaction = Shopify_Node & {
  __typename?: 'Shopify_TenderTransaction';
  /** The amount and currency of the tender transaction. */
  amount: Shopify_MoneyV2;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** Information about the payment method used for the transaction. */
  paymentMethod?: Maybe<Scalars['String']['output']>;
  /** Date and time when the transaction was processed. */
  processedAt?: Maybe<Scalars['DateTime']['output']>;
  /** The remote gateway reference associated with the tender transaction. */
  remoteReference?: Maybe<Scalars['String']['output']>;
  /** Whether the transaction is a test transaction. */
  test: Scalars['Boolean']['output'];
  /** Information about the payment instrument used for the transaction. */
  transactionDetails?: Maybe<Shopify_TenderTransactionDetails>;
  /** The staff member who performed the transaction. */
  user?: Maybe<Shopify_StaffMember>;
};

/** Information about the credit card used for this transaction. */
export type Shopify_TenderTransactionCreditCardDetails = {
  __typename?: 'Shopify_TenderTransactionCreditCardDetails';
  /** The name of the company that issued the customer's credit card. Example: `Visa`. */
  creditCardCompany?: Maybe<Scalars['String']['output']>;
  /** The customer's credit card number, with all digits except the last 4 redacted. Example: `•••• •••• •••• 1234` */
  creditCardNumber?: Maybe<Scalars['String']['output']>;
};

/** Information about the payment instrument used for this transaction. */
export type Shopify_TenderTransactionDetails = Shopify_TenderTransactionCreditCardDetails;

/** A sale associated with a tip. */
export type Shopify_TipSale = Shopify_Sale & {
  __typename?: 'Shopify_TipSale';
  /** The type of order action that the sale represents. */
  actionType: Shopify_SaleActionType;
  /** The unique ID for the sale. */
  id: Scalars['ID']['output'];
  /** The line item for the associated sale. */
  lineItem: Shopify_LineItem;
  /** The line type assocated with the sale. */
  lineType: Shopify_SaleLineType;
  /** The number of units either ordered or intended to be returned. */
  quantity?: Maybe<Scalars['Int']['output']>;
  /** All individual taxes associated with the sale. */
  taxes: Array<Shopify_SaleTax>;
  /** The total sale amount after taxes and discounts. */
  totalAmount: Shopify_MoneyBag;
  /** The total discounts allocated to the sale after taxes. */
  totalDiscountAmountAfterTaxes: Shopify_MoneyBag;
  /** The total discounts allocated to the sale before taxes. */
  totalDiscountAmountBeforeTaxes: Shopify_MoneyBag;
  /** The total amount of taxes for the sale. */
  totalTaxAmount: Shopify_MoneyBag;
};

/** Transaction fee related to an order transaction. */
export type Shopify_TransactionFee = Shopify_Node & {
  __typename?: 'Shopify_TransactionFee';
  /** Amount of the fee. */
  amount: Shopify_MoneyV2;
  /** Flat rate charge for a transaction. */
  flatFee: Shopify_MoneyV2;
  /** Name of the credit card flat fee. */
  flatFeeName?: Maybe<Scalars['String']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** Percentage charge. */
  rate: Scalars['Shopify_Decimal']['output'];
  /** Name of the credit card rate. */
  rateName?: Maybe<Scalars['String']['output']>;
  /** Tax amount charged on the fee. */
  taxAmount: Shopify_MoneyV2;
  /** Name of the type of fee. */
  type: Scalars['String']['output'];
};

/** An error that occurs during the execution of `TransactionVoid`. */
export type Shopify_TransactionVoidUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_TransactionVoidUserError';
  /** The error code. */
  code?: Maybe<Shopify_TransactionVoidUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `TransactionVoidUserError`. */
export enum Shopify_TransactionVoidUserErrorCode {
  /** Transaction must be a successful authorization. */
  AuthNotSuccessful = 'AUTH_NOT_SUCCESSFUL',
  /** Transaction must be voidable. */
  AuthNotVoidable = 'AUTH_NOT_VOIDABLE',
  /** A generic error occurred while attempting to void the transaction. */
  GenericError = 'GENERIC_ERROR',
  /** Transaction does not exist. */
  TransactionNotFound = 'TRANSACTION_NOT_FOUND'
}

/** Translation of a field of a resource. */
export type Shopify_Translation = {
  __typename?: 'Shopify_Translation';
  /** On the resource that this translation belongs to, the reference to the value being translated. */
  key: Scalars['String']['output'];
  /** ISO code of the translation locale. */
  locale: Scalars['String']['output'];
  /** The market that the translation is specific to. Null value means the translation is available in all markets. */
  market?: Maybe<Shopify_Market>;
  /** Whether the original content has changed since this translation was updated. */
  outdated: Scalars['Boolean']['output'];
  /** The date and time when the translation was updated. */
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  /** Translation value. */
  value?: Maybe<Scalars['String']['output']>;
};

/** Possible error codes that can be returned by `TranslationUserError`. */
export enum Shopify_TranslationErrorCode {
  /** The input value is blank. */
  Blank = 'BLANK',
  /** Translation value is invalid. */
  FailsResourceValidation = 'FAILS_RESOURCE_VALIDATION',
  /** The input value is invalid. */
  Invalid = 'INVALID',
  /** Locale language code is invalid. */
  InvalidCode = 'INVALID_CODE',
  /** Locale code format is invalid. */
  InvalidFormat = 'INVALID_FORMAT',
  /** Translation key is invalid. */
  InvalidKeyForModel = 'INVALID_KEY_FOR_MODEL',
  /** The locale is missing on the market corresponding to the `marketId` argument. */
  InvalidLocaleForMarket = 'INVALID_LOCALE_FOR_MARKET',
  /** Locale is invalid for the shop. */
  InvalidLocaleForShop = 'INVALID_LOCALE_FOR_SHOP',
  /** Market localizable content is invalid. */
  InvalidMarketLocalizableContent = 'INVALID_MARKET_LOCALIZABLE_CONTENT',
  /** Translatable content is invalid. */
  InvalidTranslatableContent = 'INVALID_TRANSLATABLE_CONTENT',
  /** The handle is already taken for this resource. */
  InvalidValueForHandleTranslation = 'INVALID_VALUE_FOR_HANDLE_TRANSLATION',
  /** The shop isn't allowed to operate on market custom content. */
  MarketCustomContentNotAllowed = 'MARKET_CUSTOM_CONTENT_NOT_ALLOWED',
  /** The market corresponding to the `marketId` argument doesn't exist. */
  MarketDoesNotExist = 'MARKET_DOES_NOT_EXIST',
  /** The market override locale creation failed. */
  MarketLocaleCreationFailed = 'MARKET_LOCALE_CREATION_FAILED',
  /** Resource does not exist. */
  ResourceNotFound = 'RESOURCE_NOT_FOUND',
  /** The specified resource can't be customized for a market. */
  ResourceNotMarketCustomizable = 'RESOURCE_NOT_MARKET_CUSTOMIZABLE',
  /** Resource is not translatable. */
  ResourceNotTranslatable = 'RESOURCE_NOT_TRANSLATABLE',
  /** Too many translation keys for the resource. */
  TooManyKeysForResource = 'TOO_MANY_KEYS_FOR_RESOURCE'
}

/** Represents an error that happens during the execution of a translation mutation. */
export type Shopify_TranslationUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_TranslationUserError';
  /** The error code. */
  code?: Maybe<Shopify_TranslationErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Represents a typed custom attribute. */
export type Shopify_TypedAttribute = {
  __typename?: 'Shopify_TypedAttribute';
  /** Key or name of the attribute. */
  key: Scalars['String']['output'];
  /** Value of the attribute. */
  value: Scalars['String']['output'];
};

/** Represents a set of UTM parameters. */
export type Shopify_UtmParameters = {
  __typename?: 'Shopify_UTMParameters';
  /** The name of a marketing campaign. */
  campaign?: Maybe<Scalars['String']['output']>;
  /** Identifies specific content in a marketing campaign. Used to differentiate between similar content or links in a marketing campaign to determine which is the most effective. */
  content?: Maybe<Scalars['String']['output']>;
  /** The medium of a marketing campaign, such as a banner or email newsletter. */
  medium?: Maybe<Scalars['String']['output']>;
  /** The source of traffic to the merchant's store, such as Google or an email newsletter. */
  source?: Maybe<Scalars['String']['output']>;
  /** Paid search terms used by a marketing campaign. */
  term?: Maybe<Scalars['String']['output']>;
};

/** Systems of weights and measures. */
export enum Shopify_UnitSystem {
  /** Imperial system of weights and measures. */
  ImperialSystem = 'IMPERIAL_SYSTEM',
  /** Metric system of weights and measures. */
  MetricSystem = 'METRIC_SYSTEM'
}

/** This is represents new sale types that have been added in future API versions. You may update to a more recent API version to receive additional details about this sale. */
export type Shopify_UnknownSale = Shopify_Sale & {
  __typename?: 'Shopify_UnknownSale';
  /** The type of order action that the sale represents. */
  actionType: Shopify_SaleActionType;
  /** The unique ID for the sale. */
  id: Scalars['ID']['output'];
  /** The line type assocated with the sale. */
  lineType: Shopify_SaleLineType;
  /** The number of units either ordered or intended to be returned. */
  quantity?: Maybe<Scalars['Int']['output']>;
  /** All individual taxes associated with the sale. */
  taxes: Array<Shopify_SaleTax>;
  /** The total sale amount after taxes and discounts. */
  totalAmount: Shopify_MoneyBag;
  /** The total discounts allocated to the sale after taxes. */
  totalDiscountAmountAfterTaxes: Shopify_MoneyBag;
  /** The total discounts allocated to the sale before taxes. */
  totalDiscountAmountBeforeTaxes: Shopify_MoneyBag;
  /** The total amount of taxes for the sale. */
  totalTaxAmount: Shopify_MoneyBag;
};

/** The URL redirect for the online store. */
export type Shopify_UrlRedirect = Shopify_Node & {
  __typename?: 'Shopify_UrlRedirect';
  /** The ID of the URL redirect. */
  id: Scalars['ID']['output'];
  /** The old path to be redirected from. When the user visits this path, they will be redirected to the target location. */
  path: Scalars['String']['output'];
  /** The target location where the user will be redirected to. */
  target: Scalars['String']['output'];
};

/** An error that occurs during the execution of `UrlRedirectBulkDeleteByIds`. */
export type Shopify_UrlRedirectBulkDeleteByIdsUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_UrlRedirectBulkDeleteByIdsUserError';
  /** The error code. */
  code?: Maybe<Shopify_UrlRedirectBulkDeleteByIdsUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `UrlRedirectBulkDeleteByIdsUserError`. */
export enum Shopify_UrlRedirectBulkDeleteByIdsUserErrorCode {
  /**
   * You must pass one or more [`URLRedirect`](
   *             https://help.shopify.com/en/manual/online-store/menus-and-links/url-redirect
   *           ) object IDs.
   */
  IdsEmpty = 'IDS_EMPTY'
}

/** An error that occurs during the execution of `UrlRedirectBulkDeleteBySavedSearch`. */
export type Shopify_UrlRedirectBulkDeleteBySavedSearchUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_UrlRedirectBulkDeleteBySavedSearchUserError';
  /** The error code. */
  code?: Maybe<Shopify_UrlRedirectBulkDeleteBySavedSearchUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `UrlRedirectBulkDeleteBySavedSearchUserError`. */
export enum Shopify_UrlRedirectBulkDeleteBySavedSearchUserErrorCode {
  /** The saved search's query cannot match all entries or be empty. */
  InvalidSavedSearchQuery = 'INVALID_SAVED_SEARCH_QUERY',
  /** Saved search not found. */
  SavedSearchNotFound = 'SAVED_SEARCH_NOT_FOUND'
}

/** An error that occurs during the execution of `UrlRedirectBulkDeleteBySearch`. */
export type Shopify_UrlRedirectBulkDeleteBySearchUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_UrlRedirectBulkDeleteBySearchUserError';
  /** The error code. */
  code?: Maybe<Shopify_UrlRedirectBulkDeleteBySearchUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `UrlRedirectBulkDeleteBySearchUserError`. */
export enum Shopify_UrlRedirectBulkDeleteBySearchUserErrorCode {
  /** Invalid search string. */
  InvalidSearchArgument = 'INVALID_SEARCH_ARGUMENT'
}

/** Possible error codes that can be returned by `UrlRedirectUserError`. */
export enum Shopify_UrlRedirectErrorCode {
  /** Redirect could not be created. */
  CreateFailed = 'CREATE_FAILED',
  /** Redirect could not be deleted. */
  DeleteFailed = 'DELETE_FAILED',
  /** Redirect does not exist. */
  DoesNotExist = 'DOES_NOT_EXIST',
  /** Redirect could not be updated. */
  UpdateFailed = 'UPDATE_FAILED'
}

/**
 * A request to import a [`URLRedirect`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) object
 * into the Online Store channel. Apps can use this to query the state of an `UrlRedirectImport` request.
 *
 * For more information, see [`url-redirect`](https://help.shopify.com/en/manual/online-store/menus-and-links/url-redirect)s.
 */
export type Shopify_UrlRedirectImport = Shopify_Node & {
  __typename?: 'Shopify_UrlRedirectImport';
  /** The number of rows in the file. */
  count?: Maybe<Scalars['Int']['output']>;
  /** The number of redirects created from the import. */
  createdCount?: Maybe<Scalars['Int']['output']>;
  /** The number of redirects that failed to be imported. */
  failedCount?: Maybe<Scalars['Int']['output']>;
  /** Whether the import is finished. */
  finished: Scalars['Boolean']['output'];
  /** The date and time when the import finished. */
  finishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** The ID of the `UrlRedirectImport` object. */
  id: Scalars['ID']['output'];
  /** A list of up to three previews of the URL redirects to be imported. */
  previewRedirects: Array<Shopify_UrlRedirectImportPreview>;
  /** The number of redirects updated during the import. */
  updatedCount?: Maybe<Scalars['Int']['output']>;
};

/** Possible error codes that can be returned by `UrlRedirectImportUserError`. */
export enum Shopify_UrlRedirectImportErrorCode {
  /** The import has already completed. */
  AlreadyImported = 'ALREADY_IMPORTED',
  /**
   * CSV file does not exist at given URL.
   * @deprecated This error code is never returned
   */
  FileDoesNotExist = 'FILE_DOES_NOT_EXIST',
  /** The import is already in progress. */
  InProgress = 'IN_PROGRESS',
  /** URL redirect import not found. */
  NotFound = 'NOT_FOUND'
}

/** A preview of a URL redirect import row. */
export type Shopify_UrlRedirectImportPreview = {
  __typename?: 'Shopify_UrlRedirectImportPreview';
  /** The old path to be redirected from. When the user visits this path, they will be redirected to the target location. */
  path: Scalars['String']['output'];
  /** The target location where the user will be redirected to. */
  target: Scalars['String']['output'];
};

/** Represents an error that happens during execution of a redirect import mutation. */
export type Shopify_UrlRedirectImportUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_UrlRedirectImportUserError';
  /** The error code. */
  code?: Maybe<Shopify_UrlRedirectImportErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Represents an error that happens during execution of a redirect mutation. */
export type Shopify_UrlRedirectUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_UrlRedirectUserError';
  /** The error code. */
  code?: Maybe<Shopify_UrlRedirectErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Represents an error in the input of a mutation. */
export type Shopify_UserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_UserError';
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** A checkout server side validation installed on the shop. */
export type Shopify_Validation = Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_Node & {
  __typename?: 'Shopify_Validation';
  /** Whether the validation should block on failures other than expected violations. */
  blockOnFailure: Scalars['Boolean']['output'];
  /** Whether the validation is enabled on the merchant checkout. */
  enabled: Scalars['Boolean']['output'];
  /** The error history on the most recent version of the validation function. */
  errorHistory?: Maybe<Shopify_FunctionsErrorHistory>;
  /** Global ID for the validation. */
  id: Scalars['ID']['output'];
  /** Returns a metafield by namespace and key that belongs to the resource. */
  metafield?: Maybe<Shopify_Metafield>;
  /** List of metafield definitions. */
  metafieldDefinitions: Shopify_MetafieldDefinitionConnection;
  /** List of metafields that belong to the resource. */
  metafields: Shopify_MetafieldConnection;
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafield?: Maybe<Shopify_PrivateMetafield>;
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafields: Shopify_PrivateMetafieldConnection;
  /** The Shopify Function implementing the validation. */
  shopifyFunction: Shopify_ShopifyFunction;
  /** The merchant-facing validation name. */
  title: Scalars['String']['output'];
};


/** A checkout server side validation installed on the shop. */
export type Shopify_ValidationMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace?: InputMaybe<Scalars['String']['input']>;
};


/** A checkout server side validation installed on the shop. */
export type Shopify_ValidationMetafieldDefinitionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  pinnedStatus?: InputMaybe<Shopify_MetafieldDefinitionPinnedStatus>;
  query?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
  sortKey?: InputMaybe<Shopify_MetafieldDefinitionSortKeys>;
};


/** A checkout server side validation installed on the shop. */
export type Shopify_ValidationMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};


/** A checkout server side validation installed on the shop. */
export type Shopify_ValidationPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
  namespace: Scalars['String']['input'];
};


/** A checkout server side validation installed on the shop. */
export type Shopify_ValidationPrivateMetafieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  namespace?: InputMaybe<Scalars['String']['input']>;
  reverse?: InputMaybe<Scalars['Boolean']['input']>;
};

/** An error that occurs during the execution of a validation mutation. */
export type Shopify_ValidationUserError = Shopify_DisplayableError & {
  __typename?: 'Shopify_ValidationUserError';
  /** The error code. */
  code?: Maybe<Shopify_ValidationUserErrorCode>;
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars['String']['output']>>;
  /** The error message. */
  message: Scalars['String']['output'];
};

/** Possible error codes that can be returned by `ValidationUserError`. */
export enum Shopify_ValidationUserErrorCode {
  /** ApiPermission metafields can only be created or updated by the app owner. */
  AppNotAuthorized = 'APP_NOT_AUTHORIZED',
  /** The input value is blank. */
  Blank = 'BLANK',
  /** The metafield violates a capability restriction. */
  CapabilityViolation = 'CAPABILITY_VIOLATION',
  /** Shop must be on a Shopify Plus plan to activate functions from a custom app. */
  CustomAppFunctionNotEligible = 'CUSTOM_APP_FUNCTION_NOT_ELIGIBLE',
  /** Owner type can't be used in this mutation. */
  DisallowedOwnerType = 'DISALLOWED_OWNER_TYPE',
  /** Function does not implement the required interface for this cart & checkout validation. */
  FunctionDoesNotImplement = 'FUNCTION_DOES_NOT_IMPLEMENT',
  /** Function not found. */
  FunctionNotFound = 'FUNCTION_NOT_FOUND',
  /** Function is pending deletion. */
  FunctionPendingDeletion = 'FUNCTION_PENDING_DELETION',
  /** The input value isn't included in the list. */
  Inclusion = 'INCLUSION',
  /** The type is invalid. */
  InvalidType = 'INVALID_TYPE',
  /** The value is invalid for the metafield type or for the definition options. */
  InvalidValue = 'INVALID_VALUE',
  /** Validation not found. */
  NotFound = 'NOT_FOUND',
  /** The input value needs to be blank. */
  Present = 'PRESENT',
  /** Only unlisted apps can be used for this cart & checkout validation. */
  PublicAppNotAllowed = 'PUBLIC_APP_NOT_ALLOWED',
  /** The input value is already taken. */
  Taken = 'TAKEN',
  /** The input value is too long. */
  TooLong = 'TOO_LONG',
  /** The input value is too short. */
  TooShort = 'TOO_SHORT',
  /** Unstructured reserved namespace. */
  UnstructuredReservedNamespace = 'UNSTRUCTURED_RESERVED_NAMESPACE'
}

/** Represents a credit card payment instrument. */
export type Shopify_VaultCreditCard = {
  __typename?: 'Shopify_VaultCreditCard';
  /** The billing address of the card. */
  billingAddress?: Maybe<Shopify_CustomerCreditCardBillingAddress>;
  /** The brand for the card. */
  brand: Scalars['String']['output'];
  /** Whether the card has been expired. */
  expired: Scalars['Boolean']['output'];
  /** The expiry month of the card. */
  expiryMonth: Scalars['Int']['output'];
  /** The expiry year of the card. */
  expiryYear: Scalars['Int']['output'];
  /** The last four digits for the card. */
  lastDigits: Scalars['String']['output'];
  /** The name of the card holder. */
  name: Scalars['String']['output'];
};

/** Represents a paypal billing agreement payment instrument. */
export type Shopify_VaultPaypalBillingAgreement = {
  __typename?: 'Shopify_VaultPaypalBillingAgreement';
  /** Whether the paypal billing agreement is inactive. */
  inactive: Scalars['Boolean']['output'];
  /** The paypal account name. */
  name: Scalars['String']['output'];
  /** The paypal account email address. */
  paypalAccountEmail: Scalars['String']['output'];
};

/**
 * Representation of 3d vectors and points. It can represent
 * either the coordinates of a point in space, a direction, or
 * size. Presented as an object with three floating-point values.
 */
export type Shopify_Vector3 = {
  __typename?: 'Shopify_Vector3';
  /** The x coordinate of Vector3. */
  x: Scalars['Float']['output'];
  /** The y coordinate of Vector3. */
  y: Scalars['Float']['output'];
  /** The z coordinate of Vector3. */
  z: Scalars['Float']['output'];
};

/** Represents a Shopify hosted video. */
export type Shopify_Video = Shopify_File & Shopify_Media & Shopify_Node & {
  __typename?: 'Shopify_Video';
  /** A word or phrase to share the nature or contents of a media. */
  alt?: Maybe<Scalars['String']['output']>;
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created. */
  createdAt: Scalars['DateTime']['output'];
  /**
   * The video's duration in milliseconds. This value is `null` unless the video's status field is
   * [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).
   */
  duration?: Maybe<Scalars['Int']['output']>;
  /** Any errors that have occurred on the file. */
  fileErrors: Array<Shopify_FileError>;
  /** The status of the file. */
  fileStatus: Shopify_FileStatus;
  /** The video's filename. */
  filename: Scalars['String']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The media content type. */
  mediaContentType: Shopify_MediaContentType;
  /** Any errors which have occurred on the media. */
  mediaErrors: Array<Shopify_MediaError>;
  /** The warnings attached to the media. */
  mediaWarnings: Array<Shopify_MediaWarning>;
  /**
   * The video's original source. This value is `null` unless the video's status field is
   * [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).
   */
  originalSource?: Maybe<Shopify_VideoSource>;
  /** The preview image for the media. */
  preview?: Maybe<Shopify_MediaPreviewImage>;
  /**
   * The video's sources. This value is empty unless the video's status field is
   * [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).
   */
  sources: Array<Shopify_VideoSource>;
  /** Current status of the media. */
  status: Shopify_MediaStatus;
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated. */
  updatedAt: Scalars['DateTime']['output'];
};

/**
 * Represents a source for a Shopify hosted video.
 *
 * Types of sources include the original video, lower resolution versions of the original video,
 * and an m3u8 playlist file.
 *
 * Only [videos](https://shopify.dev/api/admin-graphql/latest/objects/video) with a status field
 * of [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready) have sources.
 */
export type Shopify_VideoSource = {
  __typename?: 'Shopify_VideoSource';
  /** The video source's file size in bytes. */
  fileSize?: Maybe<Scalars['Int']['output']>;
  /** The video source's file format extension. */
  format: Scalars['String']['output'];
  /** The video source's height. */
  height: Scalars['Int']['output'];
  /** The video source's MIME type. */
  mimeType: Scalars['String']['output'];
  /** The video source's URL. */
  url: Scalars['String']['output'];
  /** The video source's width. */
  width: Scalars['Int']['output'];
};

/** A web pixel settings. */
export type Shopify_WebPixel = Shopify_Node & {
  __typename?: 'Shopify_WebPixel';
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The settings JSON object for the web pixel. */
  settings: Scalars['Shopify_JSON']['output'];
};

/** An Amazon EventBridge partner event source to which webhook subscriptions publish events. */
export type Shopify_WebhookEventBridgeEndpoint = {
  __typename?: 'Shopify_WebhookEventBridgeEndpoint';
  /** The ARN of this EventBridge partner event source. */
  arn: Scalars['Shopify_ARN']['output'];
};

/** An HTTPS endpoint to which webhook subscriptions send POST requests. */
export type Shopify_WebhookHttpEndpoint = {
  __typename?: 'Shopify_WebhookHttpEndpoint';
  /** The URL to which the webhooks events are sent. */
  callbackUrl: Scalars['Shopify_URL']['output'];
};

/** A Google Cloud Pub/Sub topic to which webhook subscriptions publish events. */
export type Shopify_WebhookPubSubEndpoint = {
  __typename?: 'Shopify_WebhookPubSubEndpoint';
  /** The Google Cloud Pub/Sub project ID. */
  pubSubProject: Scalars['String']['output'];
  /** The Google Cloud Pub/Sub topic ID. */
  pubSubTopic: Scalars['String']['output'];
};

/**
 * A webhook subscription is a persisted data object created by an app using the REST Admin API or GraphQL Admin API.
 * It describes the topic that the app wants to receive, and a destination where Shopify should send webhooks of the specified topic.
 * When an event for a given topic occurs, the webhook subscription sends a relevant payload to the destination.
 * Learn more about the [webhooks system](https://shopify.dev/apps/webhooks).
 */
export type Shopify_WebhookSubscription = Shopify_LegacyInteroperability & Shopify_Node & {
  __typename?: 'Shopify_WebhookSubscription';
  /** The Admin API version that Shopify uses to serialize webhook events. This value is inherited from the app that created the webhook subscription. */
  apiVersion: Shopify_ApiVersion;
  /**
   * The destination URI to which the webhook subscription will send a message when an event occurs.
   * @deprecated Use `endpoint` instead.
   */
  callbackUrl: Scalars['Shopify_URL']['output'];
  /** The date and time when the webhook subscription was created. */
  createdAt: Scalars['DateTime']['output'];
  /** The endpoint to which the webhook subscription will send events. */
  endpoint: Shopify_WebhookSubscriptionEndpoint;
  /** The format in which the webhook subscription should send the data. */
  format: Shopify_WebhookSubscriptionFormat;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** An optional array of top-level resource fields that should be serialized and sent in the webhook message. If null, then all fields will be sent. */
  includeFields: Array<Scalars['String']['output']>;
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars['Shopify_UnsignedInt64']['output'];
  /** The list of namespaces for any metafields that should be included in the webhook subscription. */
  metafieldNamespaces: Array<Scalars['String']['output']>;
  /**
   * The list of namespaces for private metafields that should be included in the webhook subscription.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   *
   */
  privateMetafieldNamespaces: Array<Scalars['String']['output']>;
  /** An additional constraint to refine the type of event that triggers the webhook. Only supported on certain topics. See our guide to [sub-topics](https://shopify.dev/docs/apps/webhooks/sub-topics) for more. */
  subTopic?: Maybe<Scalars['String']['output']>;
  /** The type of event that triggers the webhook. The topic determines when the webhook subscription sends a webhook, as well as what class of data object that webhook contains. */
  topic: Shopify_WebhookSubscriptionTopic;
  /** The date and time when the webhook subscription was updated. */
  updatedAt: Scalars['DateTime']['output'];
};

/** An endpoint to which webhook subscriptions send webhooks events. */
export type Shopify_WebhookSubscriptionEndpoint = Shopify_WebhookEventBridgeEndpoint | Shopify_WebhookHttpEndpoint | Shopify_WebhookPubSubEndpoint;

/** The supported formats for webhook subscriptions. */
export enum Shopify_WebhookSubscriptionFormat {
  Json = 'JSON',
  Xml = 'XML'
}

/**
 * The supported topics for webhook subscriptions. You can use webhook subscriptions to receive
 * notifications about particular events in a shop.
 *
 * You create mandatory webhooks either via the
 * [Partner Dashboard](https://shopify.dev/apps/webhooks/configuration/mandatory-webhooks#subscribe-to-privacy-webhooks)
 * or by updating the
 * [app configuration TOML](https://shopify.dev/apps/tools/cli/configuration#app-configuration-file-example).
 */
export enum Shopify_WebhookSubscriptionTopic {
  /** The webhook topic for `app_purchases_one_time/update` events. Occurs whenever a one-time app charge is updated. */
  AppPurchasesOneTimeUpdate = 'APP_PURCHASES_ONE_TIME_UPDATE',
  /** The webhook topic for `app_subscriptions/approaching_capped_amount` events. Occurs when the balance used on an app subscription crosses 90% of the capped amount. */
  AppSubscriptionsApproachingCappedAmount = 'APP_SUBSCRIPTIONS_APPROACHING_CAPPED_AMOUNT',
  /** The webhook topic for `app_subscriptions/update` events. Occurs whenever an app subscription is updated. */
  AppSubscriptionsUpdate = 'APP_SUBSCRIPTIONS_UPDATE',
  /** The webhook topic for `app/uninstalled` events. Occurs whenever a shop has uninstalled the app. */
  AppUninstalled = 'APP_UNINSTALLED',
  /** The webhook topic for `attributed_sessions/first` events. Occurs whenever an order with a "first" attributed session is attributed. Requires the `read_marketing_events` scope. */
  AttributedSessionsFirst = 'ATTRIBUTED_SESSIONS_FIRST',
  /** The webhook topic for `attributed_sessions/last` events. Occurs whenever an order with a "last" attributed session is attributed. Requires the `read_marketing_events` scope. */
  AttributedSessionsLast = 'ATTRIBUTED_SESSIONS_LAST',
  /** The webhook topic for `audit_events/admin_api_activity` events. Triggers for each auditable Admin API request. This topic is limited to one active subscription per Plus store and requires the use of Google Cloud Pub/Sub or AWS EventBridge. Requires the `read_audit_events` scope. */
  AuditEventsAdminApiActivity = 'AUDIT_EVENTS_ADMIN_API_ACTIVITY',
  /** The webhook topic for `bulk_operations/finish` events. Notifies when a Bulk Operation finishes. */
  BulkOperationsFinish = 'BULK_OPERATIONS_FINISH',
  /** The webhook topic for `carts/create` events. Occurs when a cart is created in the online store. Other types of carts aren't supported. For example, the webhook doesn't support carts that are created in a custom storefront. Requires the `read_orders` scope. */
  CartsCreate = 'CARTS_CREATE',
  /** The webhook topic for `carts/update` events. Occurs when a cart is updated in the online store. Other types of carts aren't supported. For example, the webhook doesn't support carts that are updated in a custom storefront. Requires the `read_orders` scope. */
  CartsUpdate = 'CARTS_UPDATE',
  /** The webhook topic for `channels/delete` events. Occurs whenever a channel is deleted. Requires the `read_publications` scope. */
  ChannelsDelete = 'CHANNELS_DELETE',
  /** The webhook topic for `checkouts/create` events. Occurs whenever a checkout is created. Requires the `read_orders` scope. */
  CheckoutsCreate = 'CHECKOUTS_CREATE',
  /** The webhook topic for `checkouts/delete` events. Occurs whenever a checkout is deleted. Requires the `read_orders` scope. */
  CheckoutsDelete = 'CHECKOUTS_DELETE',
  /** The webhook topic for `checkouts/update` events. Occurs whenever a checkout is updated. Requires the `read_orders` scope. */
  CheckoutsUpdate = 'CHECKOUTS_UPDATE',
  /** The webhook topic for `collections/create` events. Occurs whenever a collection is created. Requires the `read_products` scope. */
  CollectionsCreate = 'COLLECTIONS_CREATE',
  /** The webhook topic for `collections/delete` events. Occurs whenever a collection is deleted. Requires the `read_products` scope. */
  CollectionsDelete = 'COLLECTIONS_DELETE',
  /** The webhook topic for `collections/update` events. Occurs whenever a collection is updated, including whenever products are added or removed from the collection. Occurs once if multiple products are added or removed from a collection at the same time. Requires the `read_products` scope. */
  CollectionsUpdate = 'COLLECTIONS_UPDATE',
  /** The webhook topic for `collection_listings/add` events. Occurs whenever a collection listing is added. Requires the `read_product_listings` scope. */
  CollectionListingsAdd = 'COLLECTION_LISTINGS_ADD',
  /** The webhook topic for `collection_listings/remove` events. Occurs whenever a collection listing is removed. Requires the `read_product_listings` scope. */
  CollectionListingsRemove = 'COLLECTION_LISTINGS_REMOVE',
  /** The webhook topic for `collection_listings/update` events. Occurs whenever a collection listing is updated. Requires the `read_product_listings` scope. */
  CollectionListingsUpdate = 'COLLECTION_LISTINGS_UPDATE',
  /** The webhook topic for `collection_publications/create` events. Occurs whenever a collection publication listing is created. Requires the `read_publications` scope. */
  CollectionPublicationsCreate = 'COLLECTION_PUBLICATIONS_CREATE',
  /** The webhook topic for `collection_publications/delete` events. Occurs whenever a collection publication listing is deleted. Requires the `read_publications` scope. */
  CollectionPublicationsDelete = 'COLLECTION_PUBLICATIONS_DELETE',
  /** The webhook topic for `collection_publications/update` events. Occurs whenever a collection publication listing is updated. Requires the `read_publications` scope. */
  CollectionPublicationsUpdate = 'COLLECTION_PUBLICATIONS_UPDATE',
  /** The webhook topic for `companies/create` events. Occurs whenever a company is created. Requires the `read_customers` scope. */
  CompaniesCreate = 'COMPANIES_CREATE',
  /** The webhook topic for `companies/delete` events. Occurs whenever a company is deleted. Requires the `read_customers` scope. */
  CompaniesDelete = 'COMPANIES_DELETE',
  /** The webhook topic for `companies/update` events. Occurs whenever a company is updated. Requires the `read_customers` scope. */
  CompaniesUpdate = 'COMPANIES_UPDATE',
  /** The webhook topic for `company_contacts/create` events. Occurs whenever a company contact is created. Requires the `read_customers` scope. */
  CompanyContactsCreate = 'COMPANY_CONTACTS_CREATE',
  /** The webhook topic for `company_contacts/delete` events. Occurs whenever a company contact is deleted. Requires the `read_customers` scope. */
  CompanyContactsDelete = 'COMPANY_CONTACTS_DELETE',
  /** The webhook topic for `company_contacts/update` events. Occurs whenever a company contact is updated. Requires the `read_customers` scope. */
  CompanyContactsUpdate = 'COMPANY_CONTACTS_UPDATE',
  /** The webhook topic for `company_contact_roles/assign` events. Occurs whenever a role is assigned to a contact at a location. Requires the `read_customers` scope. */
  CompanyContactRolesAssign = 'COMPANY_CONTACT_ROLES_ASSIGN',
  /** The webhook topic for `company_contact_roles/revoke` events. Occurs whenever a role is revoked from a contact at a location. Requires the `read_customers` scope. */
  CompanyContactRolesRevoke = 'COMPANY_CONTACT_ROLES_REVOKE',
  /** The webhook topic for `company_locations/create` events. Occurs whenever a company location is created. Requires the `read_customers` scope. */
  CompanyLocationsCreate = 'COMPANY_LOCATIONS_CREATE',
  /** The webhook topic for `company_locations/delete` events. Occurs whenever a company location is deleted. Requires the `read_customers` scope. */
  CompanyLocationsDelete = 'COMPANY_LOCATIONS_DELETE',
  /** The webhook topic for `company_locations/update` events. Occurs whenever a company location is updated. Requires the `read_customers` scope. */
  CompanyLocationsUpdate = 'COMPANY_LOCATIONS_UPDATE',
  /** The webhook topic for `customers/create` events. Occurs whenever a customer is created. Requires the `read_customers` scope. */
  CustomersCreate = 'CUSTOMERS_CREATE',
  /** The webhook topic for `customers/delete` events. Occurs whenever a customer is deleted. Requires the `read_customers` scope. */
  CustomersDelete = 'CUSTOMERS_DELETE',
  /** The webhook topic for `customers/disable` events. Occurs whenever a customer account is disabled. Requires the `read_customers` scope. */
  CustomersDisable = 'CUSTOMERS_DISABLE',
  /** The webhook topic for `customers_email_marketing_consent/update` events. Occurs whenever a customer's email marketing consent is updated. Requires the `read_customers` scope. */
  CustomersEmailMarketingConsentUpdate = 'CUSTOMERS_EMAIL_MARKETING_CONSENT_UPDATE',
  /** The webhook topic for `customers/enable` events. Occurs whenever a customer account is enabled. Requires the `read_customers` scope. */
  CustomersEnable = 'CUSTOMERS_ENABLE',
  /** The webhook topic for `customers_marketing_consent/update` events. Occurs whenever a customer's SMS marketing consent is updated. Requires the `read_customers` scope. */
  CustomersMarketingConsentUpdate = 'CUSTOMERS_MARKETING_CONSENT_UPDATE',
  /** The webhook topic for `customers/merge` events. Triggers when two customers are merged Requires the `read_customer_merge` scope. */
  CustomersMerge = 'CUSTOMERS_MERGE',
  /** The webhook topic for `customers/update` events. Occurs whenever a customer is updated. Requires the `read_customers` scope. */
  CustomersUpdate = 'CUSTOMERS_UPDATE',
  /** The webhook topic for `customer_groups/create` events. Occurs whenever a customer saved search is created. Requires the `read_customers` scope. */
  CustomerGroupsCreate = 'CUSTOMER_GROUPS_CREATE',
  /** The webhook topic for `customer_groups/delete` events. Occurs whenever a customer saved search is deleted. Requires the `read_customers` scope. */
  CustomerGroupsDelete = 'CUSTOMER_GROUPS_DELETE',
  /** The webhook topic for `customer_groups/update` events. Occurs whenever a customer saved search is updated. Requires the `read_customers` scope. */
  CustomerGroupsUpdate = 'CUSTOMER_GROUPS_UPDATE',
  /** The webhook topic for `customer_payment_methods/create` events. Occurs whenever a customer payment method is created. Requires the `read_customer_payment_methods` scope. */
  CustomerPaymentMethodsCreate = 'CUSTOMER_PAYMENT_METHODS_CREATE',
  /** The webhook topic for `customer_payment_methods/revoke` events. Occurs whenever a customer payment method is revoked. Requires the `read_customer_payment_methods` scope. */
  CustomerPaymentMethodsRevoke = 'CUSTOMER_PAYMENT_METHODS_REVOKE',
  /** The webhook topic for `customer_payment_methods/update` events. Occurs whenever a customer payment method is updated. Requires the `read_customer_payment_methods` scope. */
  CustomerPaymentMethodsUpdate = 'CUSTOMER_PAYMENT_METHODS_UPDATE',
  /** The webhook topic for `customer.tags_added` events. Triggers when tags are added to a customer. Requires the `read_customers` scope. */
  CustomerTagsAdded = 'CUSTOMER_TAGS_ADDED',
  /** The webhook topic for `customer.tags_removed` events. Triggers when tags are removed from a customer. Requires the `read_customers` scope. */
  CustomerTagsRemoved = 'CUSTOMER_TAGS_REMOVED',
  /** The webhook topic for `discounts/create` events. Occurs whenever a discount is created. Requires the `read_discounts` scope. */
  DiscountsCreate = 'DISCOUNTS_CREATE',
  /** The webhook topic for `discounts/delete` events. Occurs whenever a discount is deleted. Requires the `read_discounts` scope. */
  DiscountsDelete = 'DISCOUNTS_DELETE',
  /** The webhook topic for `discounts/redeemcode_added` events. Occurs whenever a redeem code is added to a code discount. Requires the `read_discounts` scope. */
  DiscountsRedeemcodeAdded = 'DISCOUNTS_REDEEMCODE_ADDED',
  /** The webhook topic for `discounts/redeemcode_removed` events. Occurs whenever a redeem code on a code discount is deleted. Requires the `read_discounts` scope. */
  DiscountsRedeemcodeRemoved = 'DISCOUNTS_REDEEMCODE_REMOVED',
  /** The webhook topic for `discounts/update` events. Occurs whenever a discount is updated. Requires the `read_discounts` scope. */
  DiscountsUpdate = 'DISCOUNTS_UPDATE',
  /** The webhook topic for `disputes/create` events. Occurs whenever a dispute is created. Requires the `read_shopify_payments_disputes` scope. */
  DisputesCreate = 'DISPUTES_CREATE',
  /** The webhook topic for `disputes/update` events. Occurs whenever a dispute is updated. Requires the `read_shopify_payments_disputes` scope. */
  DisputesUpdate = 'DISPUTES_UPDATE',
  /** The webhook topic for `domains/create` events. Occurs whenever a domain is created. */
  DomainsCreate = 'DOMAINS_CREATE',
  /** The webhook topic for `domains/destroy` events. Occurs whenever a domain is destroyed. */
  DomainsDestroy = 'DOMAINS_DESTROY',
  /** The webhook topic for `domains/update` events. Occurs whenever a domain is updated. */
  DomainsUpdate = 'DOMAINS_UPDATE',
  /** The webhook topic for `draft_orders/create` events. Occurs whenever a draft order is created. Requires the `read_draft_orders` scope. */
  DraftOrdersCreate = 'DRAFT_ORDERS_CREATE',
  /** The webhook topic for `draft_orders/delete` events. Occurs whenever a draft order is deleted. Requires the `read_draft_orders` scope. */
  DraftOrdersDelete = 'DRAFT_ORDERS_DELETE',
  /** The webhook topic for `draft_orders/update` events. Occurs whenever a draft order is updated. Requires the `read_draft_orders` scope. */
  DraftOrdersUpdate = 'DRAFT_ORDERS_UPDATE',
  /** The webhook topic for `fulfillments/create` events. Occurs whenever a fulfillment is created. Requires at least one of the following scopes: read_fulfillments, read_marketplace_orders. */
  FulfillmentsCreate = 'FULFILLMENTS_CREATE',
  /** The webhook topic for `fulfillments/update` events. Occurs whenever a fulfillment is updated. Requires at least one of the following scopes: read_fulfillments, read_marketplace_orders. */
  FulfillmentsUpdate = 'FULFILLMENTS_UPDATE',
  /** The webhook topic for `fulfillment_events/create` events. Occurs whenever a fulfillment event is created. Requires the `read_fulfillments` scope. */
  FulfillmentEventsCreate = 'FULFILLMENT_EVENTS_CREATE',
  /** The webhook topic for `fulfillment_events/delete` events. Occurs whenever a fulfillment event is deleted. Requires the `read_fulfillments` scope. */
  FulfillmentEventsDelete = 'FULFILLMENT_EVENTS_DELETE',
  /** The webhook topic for `fulfillment_orders/cancellation_request_accepted` events. Occurs when a 3PL accepts a fulfillment cancellation request, received from a merchant. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders. */
  FulfillmentOrdersCancellationRequestAccepted = 'FULFILLMENT_ORDERS_CANCELLATION_REQUEST_ACCEPTED',
  /** The webhook topic for `fulfillment_orders/cancellation_request_rejected` events. Occurs when a 3PL rejects a fulfillment cancellation request, received from a merchant. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders. */
  FulfillmentOrdersCancellationRequestRejected = 'FULFILLMENT_ORDERS_CANCELLATION_REQUEST_REJECTED',
  /** The webhook topic for `fulfillment_orders/cancellation_request_submitted` events. Occurs when a merchant requests a fulfillment request to be cancelled after that request was approved by a 3PL. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders. */
  FulfillmentOrdersCancellationRequestSubmitted = 'FULFILLMENT_ORDERS_CANCELLATION_REQUEST_SUBMITTED',
  /** The webhook topic for `fulfillment_orders/cancelled` events. Occurs when a fulfillment order is cancelled. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders. */
  FulfillmentOrdersCancelled = 'FULFILLMENT_ORDERS_CANCELLED',
  /** The webhook topic for `fulfillment_orders/fulfillment_request_accepted` events. Occurs when a fulfillment service accepts a request to fulfill a fulfillment order. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders. */
  FulfillmentOrdersFulfillmentRequestAccepted = 'FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_ACCEPTED',
  /** The webhook topic for `fulfillment_orders/fulfillment_request_rejected` events. Occurs when a 3PL rejects a fulfillment request that was sent by a merchant. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders. */
  FulfillmentOrdersFulfillmentRequestRejected = 'FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_REJECTED',
  /** The webhook topic for `fulfillment_orders/fulfillment_request_submitted` events. Occurs when a merchant submits a fulfillment request to a 3PL. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_buyer_membership_orders, read_marketplace_fulfillment_orders. */
  FulfillmentOrdersFulfillmentRequestSubmitted = 'FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_SUBMITTED',
  /** The webhook topic for `fulfillment_orders/fulfillment_service_failed_to_complete` events. Occurs when a fulfillment service intends to close an in_progress fulfillment order. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders. */
  FulfillmentOrdersFulfillmentServiceFailedToComplete = 'FULFILLMENT_ORDERS_FULFILLMENT_SERVICE_FAILED_TO_COMPLETE',
  /** The webhook topic for `fulfillment_orders/hold_released` events. Occurs whenever a fulfillment order hold is released. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders. */
  FulfillmentOrdersHoldReleased = 'FULFILLMENT_ORDERS_HOLD_RELEASED',
  /** The webhook topic for `fulfillment_orders/line_items_prepared_for_local_delivery` events. Occurs whenever a fulfillment order's line items are prepared for local delivery. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders. */
  FulfillmentOrdersLineItemsPreparedForLocalDelivery = 'FULFILLMENT_ORDERS_LINE_ITEMS_PREPARED_FOR_LOCAL_DELIVERY',
  /** The webhook topic for `fulfillment_orders/line_items_prepared_for_pickup` events. Triggers when one or more of the line items for a fulfillment order are prepared for pickup Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders. */
  FulfillmentOrdersLineItemsPreparedForPickup = 'FULFILLMENT_ORDERS_LINE_ITEMS_PREPARED_FOR_PICKUP',
  /** The webhook topic for `fulfillment_orders/merged` events. Occurs when multiple fulfillment orders are merged into a single fulfillment order. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders. */
  FulfillmentOrdersMerged = 'FULFILLMENT_ORDERS_MERGED',
  /**
   * The webhook topic for `fulfillment_orders/moved` events. Occurs whenever the location which is assigned to fulfill one or more fulfillment order line items is changed.
   *
   * * `original_fulfillment_order` - The final state of the original fulfillment order.
   * * `moved_fulfillment_order` - The fulfillment order which now contains the re-assigned line items.
   * * `source_location` - The original location which was assigned to fulfill the line items (available as of the `2023-04` API version).
   * * `destination_location_id` - The ID of the location which is now responsible for fulfilling the line items.
   *
   * **Note:** The [assignedLocation](https://shopify.dev/docs/api/admin-graphql/latest/objects/fulfillmentorder#field-fulfillmentorder-assignedlocation)
   * of the `original_fulfillment_order` might be changed by the move operation.
   * If you need to determine the originally assigned location, then you should refer to the `source_location`.
   *
   * [Learn more about moving line items](https://shopify.dev/docs/api/admin-graphql/latest/mutations/fulfillmentOrderMove).
   *  Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
   */
  FulfillmentOrdersMoved = 'FULFILLMENT_ORDERS_MOVED',
  /** The webhook topic for `fulfillment_orders/order_routing_complete` events. Occurs when an order has finished being routed and it's fulfillment orders assigned to a fulfillment service's location. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_buyer_membership_orders, read_marketplace_fulfillment_orders. */
  FulfillmentOrdersOrderRoutingComplete = 'FULFILLMENT_ORDERS_ORDER_ROUTING_COMPLETE',
  /** The webhook topic for `fulfillment_orders/placed_on_hold` events. Occurs when a fulfillment order is placed on hold. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders. */
  FulfillmentOrdersPlacedOnHold = 'FULFILLMENT_ORDERS_PLACED_ON_HOLD',
  /**
   * The webhook topic for `fulfillment_orders/rescheduled` events. Triggers when a fulfillment order is rescheduled.
   *
   * Fulfillment orders may be merged if they have the same `fulfillAt` datetime.
   * If the fulfillment order is merged then the resulting fulfillment order will be indicated in the webhook body.
   * Otherwise it will be the original fulfillment order with an updated `fulfill_at` datetime.
   *  Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
   */
  FulfillmentOrdersRescheduled = 'FULFILLMENT_ORDERS_RESCHEDULED',
  /** The webhook topic for `fulfillment_orders/scheduled_fulfillment_order_ready` events. Occurs whenever a fulfillment order which was scheduled becomes due. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders. */
  FulfillmentOrdersScheduledFulfillmentOrderReady = 'FULFILLMENT_ORDERS_SCHEDULED_FULFILLMENT_ORDER_READY',
  /** The webhook topic for `fulfillment_orders/split` events. Occurs when a fulfillment order is split into multiple fulfillment orders. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders. */
  FulfillmentOrdersSplit = 'FULFILLMENT_ORDERS_SPLIT',
  /** The webhook topic for `inventory_items/create` events. Occurs whenever an inventory item is created. Requires the `read_inventory` scope. */
  InventoryItemsCreate = 'INVENTORY_ITEMS_CREATE',
  /** The webhook topic for `inventory_items/delete` events. Occurs whenever an inventory item is deleted. Requires the `read_inventory` scope. */
  InventoryItemsDelete = 'INVENTORY_ITEMS_DELETE',
  /** The webhook topic for `inventory_items/update` events. Occurs whenever an inventory item is updated. Requires the `read_inventory` scope. */
  InventoryItemsUpdate = 'INVENTORY_ITEMS_UPDATE',
  /** The webhook topic for `inventory_levels/connect` events. Occurs whenever an inventory level is connected. Requires the `read_inventory` scope. */
  InventoryLevelsConnect = 'INVENTORY_LEVELS_CONNECT',
  /** The webhook topic for `inventory_levels/disconnect` events. Occurs whenever an inventory level is disconnected. Requires the `read_inventory` scope. */
  InventoryLevelsDisconnect = 'INVENTORY_LEVELS_DISCONNECT',
  /** The webhook topic for `inventory_levels/update` events. Occurs whenever an inventory level is updated. Requires the `read_inventory` scope. */
  InventoryLevelsUpdate = 'INVENTORY_LEVELS_UPDATE',
  /** The webhook topic for `locales/create` events. Occurs whenever a shop locale is created Requires the `read_locales` scope. */
  LocalesCreate = 'LOCALES_CREATE',
  /** The webhook topic for `locales/update` events. Occurs whenever a shop locale is updated, such as published or unpublished Requires the `read_locales` scope. */
  LocalesUpdate = 'LOCALES_UPDATE',
  /** The webhook topic for `locations/activate` events. Occurs whenever a deactivated location is re-activated. Requires the `read_locations` scope. */
  LocationsActivate = 'LOCATIONS_ACTIVATE',
  /** The webhook topic for `locations/create` events. Occurs whenever a location is created. Requires the `read_locations` scope. */
  LocationsCreate = 'LOCATIONS_CREATE',
  /** The webhook topic for `locations/deactivate` events. Occurs whenever a location is deactivated. Requires the `read_locations` scope. */
  LocationsDeactivate = 'LOCATIONS_DEACTIVATE',
  /** The webhook topic for `locations/delete` events. Occurs whenever a location is deleted. Requires the `read_locations` scope. */
  LocationsDelete = 'LOCATIONS_DELETE',
  /** The webhook topic for `locations/update` events. Occurs whenever a location is updated. Requires the `read_locations` scope. */
  LocationsUpdate = 'LOCATIONS_UPDATE',
  /** The webhook topic for `markets/create` events. Occurs when a new market is created. Requires the `read_markets` scope. */
  MarketsCreate = 'MARKETS_CREATE',
  /** The webhook topic for `markets/delete` events. Occurs when a market is deleted. Requires the `read_markets` scope. */
  MarketsDelete = 'MARKETS_DELETE',
  /** The webhook topic for `markets/update` events. Occurs when a market is updated. Requires the `read_markets` scope. */
  MarketsUpdate = 'MARKETS_UPDATE',
  /** The webhook topic for `metaobjects/create` events. Occurs when a metaobject is created. Requires the `read_metaobjects` scope. */
  MetaobjectsCreate = 'METAOBJECTS_CREATE',
  /** The webhook topic for `metaobjects/delete` events. Occurs when a metaobject is deleted. Requires the `read_metaobjects` scope. */
  MetaobjectsDelete = 'METAOBJECTS_DELETE',
  /** The webhook topic for `metaobjects/update` events. Occurs when a metaobject is updated. Requires the `read_metaobjects` scope. */
  MetaobjectsUpdate = 'METAOBJECTS_UPDATE',
  /** The webhook topic for `orders/cancelled` events. Occurs whenever an order is cancelled. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_buyer_membership_orders. */
  OrdersCancelled = 'ORDERS_CANCELLED',
  /** The webhook topic for `orders/create` events. Occurs whenever an order is created. Requires at least one of the following scopes: read_orders, read_marketplace_orders. */
  OrdersCreate = 'ORDERS_CREATE',
  /** The webhook topic for `orders/delete` events. Occurs whenever an order is deleted. Requires the `read_orders` scope. */
  OrdersDelete = 'ORDERS_DELETE',
  /** The webhook topic for `orders/edited` events. Occurs whenever an order is edited. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_buyer_membership_orders. */
  OrdersEdited = 'ORDERS_EDITED',
  /** The webhook topic for `orders/fulfilled` events. Occurs whenever an order is fulfilled. Requires at least one of the following scopes: read_orders, read_marketplace_orders. */
  OrdersFulfilled = 'ORDERS_FULFILLED',
  /** The webhook topic for `orders/paid` events. Occurs whenever an order is paid. Requires at least one of the following scopes: read_orders, read_marketplace_orders. */
  OrdersPaid = 'ORDERS_PAID',
  /** The webhook topic for `orders/partially_fulfilled` events. Occurs whenever an order is partially fulfilled. Requires at least one of the following scopes: read_orders, read_marketplace_orders. */
  OrdersPartiallyFulfilled = 'ORDERS_PARTIALLY_FULFILLED',
  /**
   * The webhook topic for `orders/risk_assessment_changed` events. Triggers when a new risk assessment is available on the order.
   * This can be the first or a subsequent risk assessment.
   * New risk assessments can be provided until the order is marked as fulfilled.
   * Includes the risk level, risk facts and the provider. Does not include the risk recommendation for the order.
   * The order and shop are identified in the headers.
   *  Requires the `read_orders` scope.
   */
  OrdersRiskAssessmentChanged = 'ORDERS_RISK_ASSESSMENT_CHANGED',
  /** The webhook topic for `orders/shopify_protect_eligibility_changed` events. Occurs whenever Shopify Protect's eligibility for an order is changed. Requires the `read_orders` scope. */
  OrdersShopifyProtectEligibilityChanged = 'ORDERS_SHOPIFY_PROTECT_ELIGIBILITY_CHANGED',
  /** The webhook topic for `orders/updated` events. Occurs whenever an order is updated. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_buyer_membership_orders. */
  OrdersUpdated = 'ORDERS_UPDATED',
  /** The webhook topic for `order_transactions/create` events. Occurs when a order transaction is created or when it's status is updated. Only occurs for transactions with a status of success, failure or error. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_buyer_membership_orders. */
  OrderTransactionsCreate = 'ORDER_TRANSACTIONS_CREATE',
  /** The webhook topic for `payment_schedules/due` events. Occurs whenever payment schedules are due. Requires the `read_payment_terms` scope. */
  PaymentSchedulesDue = 'PAYMENT_SCHEDULES_DUE',
  /** The webhook topic for `payment_terms/create` events. Occurs whenever payment terms are created. Requires the `read_payment_terms` scope. */
  PaymentTermsCreate = 'PAYMENT_TERMS_CREATE',
  /** The webhook topic for `payment_terms/delete` events. Occurs whenever payment terms are deleted. Requires the `read_payment_terms` scope. */
  PaymentTermsDelete = 'PAYMENT_TERMS_DELETE',
  /** The webhook topic for `payment_terms/update` events. Occurs whenever payment terms are updated. Requires the `read_payment_terms` scope. */
  PaymentTermsUpdate = 'PAYMENT_TERMS_UPDATE',
  /** The webhook topic for `products/create` events. Occurs whenever a product is created. Requires the `read_products` scope. */
  ProductsCreate = 'PRODUCTS_CREATE',
  /** The webhook topic for `products/delete` events. Occurs whenever a product is deleted. Requires the `read_products` scope. */
  ProductsDelete = 'PRODUCTS_DELETE',
  /** The webhook topic for `products/update` events. Occurs whenever a product is updated, or whenever a product is ordered, or whenever a variant is added, removed, or updated. Requires the `read_products` scope. */
  ProductsUpdate = 'PRODUCTS_UPDATE',
  /** The webhook topic for `product_feeds/create` events. Triggers when product feed is created Requires the `read_product_listings` scope. */
  ProductFeedsCreate = 'PRODUCT_FEEDS_CREATE',
  /** The webhook topic for `product_feeds/full_sync` events. Triggers when a full sync for a product feed is performed Requires the `read_product_listings` scope. */
  ProductFeedsFullSync = 'PRODUCT_FEEDS_FULL_SYNC',
  /** The webhook topic for `product_feeds/incremental_sync` events. Occurs whenever a product publication is created, updated or removed for a product feed Requires the `read_product_listings` scope. */
  ProductFeedsIncrementalSync = 'PRODUCT_FEEDS_INCREMENTAL_SYNC',
  /** The webhook topic for `product_feeds/update` events. Triggers when product feed is updated Requires the `read_product_listings` scope. */
  ProductFeedsUpdate = 'PRODUCT_FEEDS_UPDATE',
  /** The webhook topic for `product_listings/add` events. Occurs whenever an active product is listed on a channel. Requires the `read_product_listings` scope. */
  ProductListingsAdd = 'PRODUCT_LISTINGS_ADD',
  /** The webhook topic for `product_listings/remove` events. Occurs whenever a product listing is removed from the channel. Requires the `read_product_listings` scope. */
  ProductListingsRemove = 'PRODUCT_LISTINGS_REMOVE',
  /** The webhook topic for `product_listings/update` events. Occurs whenever a product publication is updated. Requires the `read_product_listings` scope. */
  ProductListingsUpdate = 'PRODUCT_LISTINGS_UPDATE',
  /** The webhook topic for `product_publications/create` events. Occurs whenever a product publication for an active product is created, or whenever an existing product publication is published. Requires the `read_publications` scope. */
  ProductPublicationsCreate = 'PRODUCT_PUBLICATIONS_CREATE',
  /** The webhook topic for `product_publications/delete` events. Occurs whenever a product publication for an active product is removed, or whenever an existing product publication is unpublished. Requires the `read_publications` scope. */
  ProductPublicationsDelete = 'PRODUCT_PUBLICATIONS_DELETE',
  /** The webhook topic for `product_publications/update` events. Occurs whenever a product publication is updated. Requires the `read_publications` scope. */
  ProductPublicationsUpdate = 'PRODUCT_PUBLICATIONS_UPDATE',
  /** The webhook topic for `profiles/create` events. Occurs whenever a delivery profile is created Requires at least one of the following scopes: read_shipping, read_assigned_shipping. */
  ProfilesCreate = 'PROFILES_CREATE',
  /** The webhook topic for `profiles/delete` events. Occurs whenever a delivery profile is deleted Requires at least one of the following scopes: read_shipping, read_assigned_shipping. */
  ProfilesDelete = 'PROFILES_DELETE',
  /** The webhook topic for `profiles/update` events. Occurs whenever a delivery profile is updated Requires at least one of the following scopes: read_shipping, read_assigned_shipping. */
  ProfilesUpdate = 'PROFILES_UPDATE',
  /** The webhook topic for `publications/delete` events. Occurs whenever a publication is deleted. Requires the `read_publications` scope. */
  PublicationsDelete = 'PUBLICATIONS_DELETE',
  /** The webhook topic for `refunds/create` events. Occurs whenever a new refund is created without errors on an order, independent from the movement of money. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_buyer_membership_orders. */
  RefundsCreate = 'REFUNDS_CREATE',
  /** The webhook topic for `returns/approve` events. Occurs whenever a return is approved. This means `Return.status` is `OPEN`. Requires at least one of the following scopes: read_returns, read_marketplace_returns, read_buyer_membership_orders. */
  ReturnsApprove = 'RETURNS_APPROVE',
  /** The webhook topic for `returns/cancel` events. Occurs whenever a return is canceled. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_returns, read_marketplace_returns, read_buyer_membership_orders. */
  ReturnsCancel = 'RETURNS_CANCEL',
  /** The webhook topic for `returns/close` events. Occurs whenever a return is closed. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_returns, read_marketplace_returns, read_buyer_membership_orders. */
  ReturnsClose = 'RETURNS_CLOSE',
  /** The webhook topic for `returns/decline` events. Occurs whenever a return is declined. This means `Return.status` is `DECLINED`. Requires at least one of the following scopes: read_returns, read_marketplace_returns, read_buyer_membership_orders. */
  ReturnsDecline = 'RETURNS_DECLINE',
  /** The webhook topic for `returns/reopen` events. Occurs whenever a closed return is reopened. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_returns, read_marketplace_returns, read_buyer_membership_orders. */
  ReturnsReopen = 'RETURNS_REOPEN',
  /** The webhook topic for `returns/request` events. Occurs whenever a return is requested. This means `Return.status` is `REQUESTED`. Requires at least one of the following scopes: read_returns, read_marketplace_returns, read_buyer_membership_orders. */
  ReturnsRequest = 'RETURNS_REQUEST',
  /** The webhook topic for `returns/update` events. Occurs whenever a return is updated. Requires at least one of the following scopes: read_returns, read_marketplace_returns, read_buyer_membership_orders. */
  ReturnsUpdate = 'RETURNS_UPDATE',
  /**
   * The webhook topic for `reverse_deliveries/attach_deliverable` events. Occurs whenever a deliverable is attached to a reverse delivery.
   * This occurs when a reverse delivery is created or updated with delivery metadata.
   * Metadata includes the delivery method, label, and tracking information associated with a reverse delivery.
   *  Requires at least one of the following scopes: read_returns, read_marketplace_returns.
   */
  ReverseDeliveriesAttachDeliverable = 'REVERSE_DELIVERIES_ATTACH_DELIVERABLE',
  /**
   * The webhook topic for `reverse_fulfillment_orders/dispose` events. Occurs whenever a disposition is made on a reverse fulfillment order.
   * This includes dispositions made on reverse deliveries that are associated with the reverse fulfillment order.
   *  Requires at least one of the following scopes: read_returns, read_marketplace_returns.
   */
  ReverseFulfillmentOrdersDispose = 'REVERSE_FULFILLMENT_ORDERS_DISPOSE',
  /** The webhook topic for `scheduled_product_listings/add` events. Occurs whenever a product is scheduled to be published. Requires the `read_product_listings` scope. */
  ScheduledProductListingsAdd = 'SCHEDULED_PRODUCT_LISTINGS_ADD',
  /** The webhook topic for `scheduled_product_listings/remove` events. Occurs whenever a product is no longer scheduled to be published. Requires the `read_product_listings` scope. */
  ScheduledProductListingsRemove = 'SCHEDULED_PRODUCT_LISTINGS_REMOVE',
  /** The webhook topic for `scheduled_product_listings/update` events. Occurs whenever a product's scheduled availability date changes. Requires the `read_product_listings` scope. */
  ScheduledProductListingsUpdate = 'SCHEDULED_PRODUCT_LISTINGS_UPDATE',
  /** The webhook topic for `segments/create` events. Occurs whenever a segment is created. Requires the `read_customers` scope. */
  SegmentsCreate = 'SEGMENTS_CREATE',
  /** The webhook topic for `segments/delete` events. Occurs whenever a segment is deleted. Requires the `read_customers` scope. */
  SegmentsDelete = 'SEGMENTS_DELETE',
  /** The webhook topic for `segments/update` events. Occurs whenever a segment is updated. Requires the `read_customers` scope. */
  SegmentsUpdate = 'SEGMENTS_UPDATE',
  /** The webhook topic for `selling_plan_groups/create` events. Notifies when a SellingPlanGroup is created. Requires the `read_products` scope. */
  SellingPlanGroupsCreate = 'SELLING_PLAN_GROUPS_CREATE',
  /** The webhook topic for `selling_plan_groups/delete` events. Notifies when a SellingPlanGroup is deleted. Requires the `read_products` scope. */
  SellingPlanGroupsDelete = 'SELLING_PLAN_GROUPS_DELETE',
  /** The webhook topic for `selling_plan_groups/update` events. Notifies when a SellingPlanGroup is updated. Requires the `read_products` scope. */
  SellingPlanGroupsUpdate = 'SELLING_PLAN_GROUPS_UPDATE',
  /** The webhook topic for `shipping_addresses/create` events. Occurs whenever a shipping address is created. Requires the `read_shipping` scope. */
  ShippingAddressesCreate = 'SHIPPING_ADDRESSES_CREATE',
  /** The webhook topic for `shipping_addresses/update` events. Occurs whenever a shipping address is updated. Requires the `read_shipping` scope. */
  ShippingAddressesUpdate = 'SHIPPING_ADDRESSES_UPDATE',
  /** The webhook topic for `shop/update` events. Occurs whenever a shop is updated. */
  ShopUpdate = 'SHOP_UPDATE',
  /** The webhook topic for `subscription_billing_attempts/challenged` events. Occurs when the financial instutition challenges the subscripttion billing attempt charge as per 3D Secure. Requires the `read_own_subscription_contracts` scope. */
  SubscriptionBillingAttemptsChallenged = 'SUBSCRIPTION_BILLING_ATTEMPTS_CHALLENGED',
  /** The webhook topic for `subscription_billing_attempts/failure` events. Occurs whenever a subscription billing attempt fails. Requires the `read_own_subscription_contracts` scope. */
  SubscriptionBillingAttemptsFailure = 'SUBSCRIPTION_BILLING_ATTEMPTS_FAILURE',
  /** The webhook topic for `subscription_billing_attempts/success` events. Occurs whenever a subscription billing attempt succeeds. Requires the `read_own_subscription_contracts` scope. */
  SubscriptionBillingAttemptsSuccess = 'SUBSCRIPTION_BILLING_ATTEMPTS_SUCCESS',
  /** The webhook topic for `subscription_billing_cycles/skip` events. Occurs whenever a subscription contract billing cycle is skipped. Requires the `read_own_subscription_contracts` scope. */
  SubscriptionBillingCyclesSkip = 'SUBSCRIPTION_BILLING_CYCLES_SKIP',
  /** The webhook topic for `subscription_billing_cycles/unskip` events. Occurs whenever a subscription contract billing cycle is unskipped. Requires the `read_own_subscription_contracts` scope. */
  SubscriptionBillingCyclesUnskip = 'SUBSCRIPTION_BILLING_CYCLES_UNSKIP',
  /** The webhook topic for `subscription_billing_cycle_edits/create` events. Occurs whenever a subscription contract billing cycle is edited. Requires the `read_own_subscription_contracts` scope. */
  SubscriptionBillingCycleEditsCreate = 'SUBSCRIPTION_BILLING_CYCLE_EDITS_CREATE',
  /** The webhook topic for `subscription_billing_cycle_edits/delete` events. Occurs whenever a subscription contract billing cycle edit is deleted. Requires the `read_own_subscription_contracts` scope. */
  SubscriptionBillingCycleEditsDelete = 'SUBSCRIPTION_BILLING_CYCLE_EDITS_DELETE',
  /** The webhook topic for `subscription_billing_cycle_edits/update` events. Occurs whenever a subscription contract billing cycle edit is updated. Requires the `read_own_subscription_contracts` scope. */
  SubscriptionBillingCycleEditsUpdate = 'SUBSCRIPTION_BILLING_CYCLE_EDITS_UPDATE',
  /** The webhook topic for `subscription_contracts/activate` events. Occurs when a subscription contract is activated. Requires the `read_own_subscription_contracts` scope. */
  SubscriptionContractsActivate = 'SUBSCRIPTION_CONTRACTS_ACTIVATE',
  /** The webhook topic for `subscription_contracts/cancel` events. Occurs when a subscription contract is canceled. Requires the `read_own_subscription_contracts` scope. */
  SubscriptionContractsCancel = 'SUBSCRIPTION_CONTRACTS_CANCEL',
  /** The webhook topic for `subscription_contracts/create` events. Occurs whenever a subscription contract is created. Requires the `read_own_subscription_contracts` scope. */
  SubscriptionContractsCreate = 'SUBSCRIPTION_CONTRACTS_CREATE',
  /** The webhook topic for `subscription_contracts/expire` events. Occurs when a subscription contract expires. Requires the `read_own_subscription_contracts` scope. */
  SubscriptionContractsExpire = 'SUBSCRIPTION_CONTRACTS_EXPIRE',
  /** The webhook topic for `subscription_contracts/fail` events. Occurs when a subscription contract is failed. Requires the `read_own_subscription_contracts` scope. */
  SubscriptionContractsFail = 'SUBSCRIPTION_CONTRACTS_FAIL',
  /** The webhook topic for `subscription_contracts/pause` events. Occurs when a subscription contract is paused. Requires the `read_own_subscription_contracts` scope. */
  SubscriptionContractsPause = 'SUBSCRIPTION_CONTRACTS_PAUSE',
  /** The webhook topic for `subscription_contracts/update` events. Occurs whenever a subscription contract is updated. Requires the `read_own_subscription_contracts` scope. */
  SubscriptionContractsUpdate = 'SUBSCRIPTION_CONTRACTS_UPDATE',
  /** The webhook topic for `tax_partners/update` events. Occurs whenever a tax partner is created or updated. Requires the `read_taxes` scope. */
  TaxPartnersUpdate = 'TAX_PARTNERS_UPDATE',
  /** The webhook topic for `tax_services/create` events. Occurs whenever a tax service is created. Requires the `read_taxes` scope. */
  TaxServicesCreate = 'TAX_SERVICES_CREATE',
  /** The webhook topic for `tax_services/update` events. Occurs whenver a tax service is updated. Requires the `read_taxes` scope. */
  TaxServicesUpdate = 'TAX_SERVICES_UPDATE',
  /** The webhook topic for `tender_transactions/create` events. Occurs when a tender transaction is created. Requires the `read_orders` scope. */
  TenderTransactionsCreate = 'TENDER_TRANSACTIONS_CREATE',
  /** The webhook topic for `themes/create` events. Occurs whenever a theme is created. Does not occur when theme files are created. Requires the `read_themes` scope. */
  ThemesCreate = 'THEMES_CREATE',
  /** The webhook topic for `themes/delete` events. Occurs whenever a theme is deleted. Does not occur when theme files are deleted. Requires the `read_themes` scope. */
  ThemesDelete = 'THEMES_DELETE',
  /** The webhook topic for `themes/publish` events. Occurs whenever a theme with the main or mobile (deprecated) role is published. Requires the `read_themes` scope. */
  ThemesPublish = 'THEMES_PUBLISH',
  /** The webhook topic for `themes/update` events. Occurs whenever a theme is updated. Does not occur when theme files are updated. Requires the `read_themes` scope. */
  ThemesUpdate = 'THEMES_UPDATE',
  /** The webhook topic for `variants/in_stock` events. Occurs whenever a variant becomes in stock. Requires the `read_products` scope. */
  VariantsInStock = 'VARIANTS_IN_STOCK',
  /** The webhook topic for `variants/out_of_stock` events. Occurs whenever a variant becomes out of stock. Requires the `read_products` scope. */
  VariantsOutOfStock = 'VARIANTS_OUT_OF_STOCK'
}

/** A weight, which includes a numeric value and a unit of measurement. */
export type Shopify_Weight = {
  __typename?: 'Shopify_Weight';
  /** The unit of measurement for `value`. */
  unit: Shopify_WeightUnit;
  /** The weight value using the unit system specified with `unit`. */
  value: Scalars['Float']['output'];
};

/** Units of measurement for weight. */
export enum Shopify_WeightUnit {
  /** Metric system unit of mass. */
  Grams = 'GRAMS',
  /** 1 kilogram equals 1000 grams. */
  Kilograms = 'KILOGRAMS',
  /** Imperial system unit of mass. */
  Ounces = 'OUNCES',
  /** 1 pound equals 16 ounces. */
  Pounds = 'POUNDS'
}

export enum Sizes {
  Default = 'default',
  Large = 'large',
  Medium = 'medium',
  None = 'none',
  Small = 'small'
}

/** Stage system enumeration */
export enum Stage {
  /** The Draft is the default stage for all your content. */
  Draft = 'DRAFT',
  /** The Published stage is where you can publish your content to. */
  Published = 'PUBLISHED'
}

export enum StaticNavigation {
  Footer = 'footer',
  Header = 'header'
}

/** Assign this as a static page. */
export enum StaticPage {
  Editorial = 'editorial',
  FrontPage = 'frontPage'
}

export enum SystemDateTimeFieldVariation {
  Base = 'BASE',
  Combined = 'COMBINED',
  Localization = 'LOCALIZATION'
}

export type Theme = Entity & Node & {
  __typename?: 'Theme';
  /** Background color for sections. */
  background?: Maybe<Color>;
  border?: Maybe<Color>;
  /** Background for Card elements */
  card?: Maybe<Color>;
  /** Text color for Cards */
  cardForeground?: Maybe<Color>;
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Used for error text and destructive actions */
  destructive?: Maybe<Color>;
  destructiveForeground?: Maybe<Color>;
  /** Get the document in other stages */
  documentInStages: Array<Theme>;
  /** Main text color for readability. */
  foreground?: Maybe<Color>;
  /** List of Theme versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  inputColor?: Maybe<Color>;
  /** used internally for identification purposes. */
  internalName?: Maybe<Scalars['String']['output']>;
  layout: Array<Layout>;
  /** Muted color for things like the skeleton element. */
  muted?: Maybe<Color>;
  mutedForeground?: Maybe<Color>;
  /** Primary colors for buttons and other attention-grabbing elements. */
  primary?: Maybe<Color>;
  primaryForeground?: Maybe<Color>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  /** Used for focus ring. */
  ring?: Maybe<Color>;
  scheduledIn: Array<ScheduledOperation>;
  /** Secondary brand color for complementary accents. */
  secondary?: Maybe<Color>;
  secondaryForeground?: Maybe<Color>;
  slug: Scalars['String']['output'];
  /** System stage field */
  stage: Stage;
  /** Use this field to assign this as the global theme to be used across the webshop */
  staticTheme?: Maybe<Global>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type ThemeCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ThemeDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type ThemeHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type ThemeLayoutArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<LayoutOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LayoutWhereInput>;
};


export type ThemePublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ThemeScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type ThemeUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ThemeConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ThemeWhereUniqueInput;
};

/** A connection to a list of items. */
export type ThemeConnection = {
  __typename?: 'ThemeConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ThemeEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ThemeCreateInput = {
  background?: InputMaybe<ColorInput>;
  border?: InputMaybe<ColorInput>;
  card?: InputMaybe<ColorInput>;
  cardForeground?: InputMaybe<ColorInput>;
  clv4vzx4z0bqk07n0b10phvj6?: InputMaybe<CustomizedSectionCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  destructive?: InputMaybe<ColorInput>;
  destructiveForeground?: InputMaybe<ColorInput>;
  foreground?: InputMaybe<ColorInput>;
  inputColor?: InputMaybe<ColorInput>;
  internalName?: InputMaybe<Scalars['String']['input']>;
  layout?: InputMaybe<LayoutCreateManyInlineInput>;
  muted?: InputMaybe<ColorInput>;
  mutedForeground?: InputMaybe<ColorInput>;
  primary?: InputMaybe<ColorInput>;
  primaryForeground?: InputMaybe<ColorInput>;
  ring?: InputMaybe<ColorInput>;
  secondary?: InputMaybe<ColorInput>;
  secondaryForeground?: InputMaybe<ColorInput>;
  setting?: InputMaybe<DisplayOptionCreateOneInlineInput>;
  slug: Scalars['String']['input'];
  staticTheme?: InputMaybe<Global>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type ThemeCreateManyInlineInput = {
  /** Connect multiple existing Theme documents */
  connect?: InputMaybe<Array<ThemeWhereUniqueInput>>;
  /** Create and connect multiple existing Theme documents */
  create?: InputMaybe<Array<ThemeCreateInput>>;
};

export type ThemeCreateOneInlineInput = {
  /** Connect one existing Theme document */
  connect?: InputMaybe<ThemeWhereUniqueInput>;
  /** Create and connect one Theme document */
  create?: InputMaybe<ThemeCreateInput>;
};

/** An edge in a connection. */
export type ThemeEdge = {
  __typename?: 'ThemeEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Theme;
};

/** Identifies documents */
export type ThemeManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ThemeWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ThemeWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ThemeWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ThemeWhereStageInput>;
  documentInStages_none?: InputMaybe<ThemeWhereStageInput>;
  documentInStages_some?: InputMaybe<ThemeWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  internalName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  internalName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  internalName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  internalName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  internalName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  internalName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  internalName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  internalName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  internalName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  internalName_starts_with?: InputMaybe<Scalars['String']['input']>;
  layout_every?: InputMaybe<LayoutWhereInput>;
  layout_none?: InputMaybe<LayoutWhereInput>;
  layout_some?: InputMaybe<LayoutWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  staticTheme?: InputMaybe<Global>;
  /** All values that are contained in given list. */
  staticTheme_in?: InputMaybe<Array<InputMaybe<Global>>>;
  /** Any other value that exists and is not equal to the given value. */
  staticTheme_not?: InputMaybe<Global>;
  /** All values that are not contained in given list. */
  staticTheme_not_in?: InputMaybe<Array<InputMaybe<Global>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ThemeOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  InternalNameAsc = 'internalName_ASC',
  InternalNameDesc = 'internalName_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  StaticThemeAsc = 'staticTheme_ASC',
  StaticThemeDesc = 'staticTheme_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type ThemeUpdateInput = {
  background?: InputMaybe<ColorInput>;
  border?: InputMaybe<ColorInput>;
  card?: InputMaybe<ColorInput>;
  cardForeground?: InputMaybe<ColorInput>;
  clv4vzx4z0bqk07n0b10phvj6?: InputMaybe<CustomizedSectionUpdateManyInlineInput>;
  destructive?: InputMaybe<ColorInput>;
  destructiveForeground?: InputMaybe<ColorInput>;
  foreground?: InputMaybe<ColorInput>;
  inputColor?: InputMaybe<ColorInput>;
  internalName?: InputMaybe<Scalars['String']['input']>;
  layout?: InputMaybe<LayoutUpdateManyInlineInput>;
  muted?: InputMaybe<ColorInput>;
  mutedForeground?: InputMaybe<ColorInput>;
  primary?: InputMaybe<ColorInput>;
  primaryForeground?: InputMaybe<ColorInput>;
  ring?: InputMaybe<ColorInput>;
  secondary?: InputMaybe<ColorInput>;
  secondaryForeground?: InputMaybe<ColorInput>;
  setting?: InputMaybe<DisplayOptionUpdateOneInlineInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  staticTheme?: InputMaybe<Global>;
};

export type ThemeUpdateManyInlineInput = {
  /** Connect multiple existing Theme documents */
  connect?: InputMaybe<Array<ThemeConnectInput>>;
  /** Create and connect multiple Theme documents */
  create?: InputMaybe<Array<ThemeCreateInput>>;
  /** Delete multiple Theme documents */
  delete?: InputMaybe<Array<ThemeWhereUniqueInput>>;
  /** Disconnect multiple Theme documents */
  disconnect?: InputMaybe<Array<ThemeWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Theme documents */
  set?: InputMaybe<Array<ThemeWhereUniqueInput>>;
  /** Update multiple Theme documents */
  update?: InputMaybe<Array<ThemeUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Theme documents */
  upsert?: InputMaybe<Array<ThemeUpsertWithNestedWhereUniqueInput>>;
};

export type ThemeUpdateManyInput = {
  background?: InputMaybe<ColorInput>;
  border?: InputMaybe<ColorInput>;
  card?: InputMaybe<ColorInput>;
  cardForeground?: InputMaybe<ColorInput>;
  destructive?: InputMaybe<ColorInput>;
  destructiveForeground?: InputMaybe<ColorInput>;
  foreground?: InputMaybe<ColorInput>;
  inputColor?: InputMaybe<ColorInput>;
  muted?: InputMaybe<ColorInput>;
  mutedForeground?: InputMaybe<ColorInput>;
  primary?: InputMaybe<ColorInput>;
  primaryForeground?: InputMaybe<ColorInput>;
  ring?: InputMaybe<ColorInput>;
  secondary?: InputMaybe<ColorInput>;
  secondaryForeground?: InputMaybe<ColorInput>;
};

export type ThemeUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ThemeUpdateManyInput;
  /** Document search */
  where: ThemeWhereInput;
};

export type ThemeUpdateOneInlineInput = {
  /** Connect existing Theme document */
  connect?: InputMaybe<ThemeWhereUniqueInput>;
  /** Create and connect one Theme document */
  create?: InputMaybe<ThemeCreateInput>;
  /** Delete currently connected Theme document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected Theme document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Theme document */
  update?: InputMaybe<ThemeUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Theme document */
  upsert?: InputMaybe<ThemeUpsertWithNestedWhereUniqueInput>;
};

export type ThemeUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ThemeUpdateInput;
  /** Unique document search */
  where: ThemeWhereUniqueInput;
};

export type ThemeUpsertInput = {
  /** Create document if it didn't exist */
  create: ThemeCreateInput;
  /** Update document if it exists */
  update: ThemeUpdateInput;
};

export type ThemeUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ThemeUpsertInput;
  /** Unique document search */
  where: ThemeWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type ThemeWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type ThemeWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ThemeWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ThemeWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ThemeWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ThemeWhereStageInput>;
  documentInStages_none?: InputMaybe<ThemeWhereStageInput>;
  documentInStages_some?: InputMaybe<ThemeWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  internalName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  internalName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  internalName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  internalName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  internalName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  internalName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  internalName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  internalName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  internalName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  internalName_starts_with?: InputMaybe<Scalars['String']['input']>;
  layout_every?: InputMaybe<LayoutWhereInput>;
  layout_none?: InputMaybe<LayoutWhereInput>;
  layout_some?: InputMaybe<LayoutWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  staticTheme?: InputMaybe<Global>;
  /** All values that are contained in given list. */
  staticTheme_in?: InputMaybe<Array<InputMaybe<Global>>>;
  /** Any other value that exists and is not equal to the given value. */
  staticTheme_not?: InputMaybe<Global>;
  /** All values that are not contained in given list. */
  staticTheme_not_in?: InputMaybe<Array<InputMaybe<Global>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type ThemeWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ThemeWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ThemeWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ThemeWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<ThemeWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Theme record uniquely */
export type ThemeWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  internalName?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  staticTheme?: InputMaybe<Global>;
};

export enum TypeFeed {
  Automated = 'automated',
  Manual = 'manual'
}

export type UnpublishLocaleInput = {
  /** Locales to unpublish */
  locale: Locale;
  /** Stages to unpublish selected locales from */
  stages: Array<Stage>;
};

/** User system model */
export type User = Entity & Node & {
  __typename?: 'User';
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** Get the document in other stages */
  documentInStages: Array<User>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  /** Flag to determine if user is active or not */
  isActive: Scalars['Boolean']['output'];
  /** User Kind. Can be either MEMBER, PAT or PUBLIC */
  kind: UserKind;
  /** The username */
  name: Scalars['String']['output'];
  /** Profile Picture url */
  picture?: Maybe<Scalars['String']['output']>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
};


/** User system model */
export type UserDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};

export type UserConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: UserWhereUniqueInput;
};

/** A connection to a list of items. */
export type UserConnection = {
  __typename?: 'UserConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<UserEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type UserCreateManyInlineInput = {
  /** Connect multiple existing User documents */
  connect?: InputMaybe<Array<UserWhereUniqueInput>>;
};

export type UserCreateOneInlineInput = {
  /** Connect one existing User document */
  connect?: InputMaybe<UserWhereUniqueInput>;
};

/** An edge in a connection. */
export type UserEdge = {
  __typename?: 'UserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: User;
};

/** System User Kind */
export enum UserKind {
  AppToken = 'APP_TOKEN',
  Member = 'MEMBER',
  Pat = 'PAT',
  Public = 'PUBLIC',
  Webhook = 'WEBHOOK'
}

/** Identifies documents */
export type UserManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UserWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UserWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UserWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  documentInStages_every?: InputMaybe<UserWhereStageInput>;
  documentInStages_none?: InputMaybe<UserWhereStageInput>;
  documentInStages_some?: InputMaybe<UserWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']['input']>;
  kind?: InputMaybe<UserKind>;
  /** All values that are contained in given list. */
  kind_in?: InputMaybe<Array<InputMaybe<UserKind>>>;
  /** Any other value that exists and is not equal to the given value. */
  kind_not?: InputMaybe<UserKind>;
  /** All values that are not contained in given list. */
  kind_not_in?: InputMaybe<Array<InputMaybe<UserKind>>>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  picture?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  picture_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  picture_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  picture_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  picture_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  picture_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  picture_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  picture_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  picture_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  picture_starts_with?: InputMaybe<Scalars['String']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
};

export enum UserOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsActiveAsc = 'isActive_ASC',
  IsActiveDesc = 'isActive_DESC',
  KindAsc = 'kind_ASC',
  KindDesc = 'kind_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PictureAsc = 'picture_ASC',
  PictureDesc = 'picture_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type UserUpdateManyInlineInput = {
  /** Connect multiple existing User documents */
  connect?: InputMaybe<Array<UserConnectInput>>;
  /** Disconnect multiple User documents */
  disconnect?: InputMaybe<Array<UserWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing User documents */
  set?: InputMaybe<Array<UserWhereUniqueInput>>;
};

export type UserUpdateOneInlineInput = {
  /** Connect existing User document */
  connect?: InputMaybe<UserWhereUniqueInput>;
  /** Disconnect currently connected User document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

/** This contains a set of filters that can be used to compare values internally */
export type UserWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type UserWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UserWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UserWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UserWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  documentInStages_every?: InputMaybe<UserWhereStageInput>;
  documentInStages_none?: InputMaybe<UserWhereStageInput>;
  documentInStages_some?: InputMaybe<UserWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']['input']>;
  kind?: InputMaybe<UserKind>;
  /** All values that are contained in given list. */
  kind_in?: InputMaybe<Array<InputMaybe<UserKind>>>;
  /** Any other value that exists and is not equal to the given value. */
  kind_not?: InputMaybe<UserKind>;
  /** All values that are not contained in given list. */
  kind_not_in?: InputMaybe<Array<InputMaybe<UserKind>>>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  picture?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  picture_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  picture_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  picture_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  picture_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  picture_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  picture_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  picture_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  picture_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  picture_starts_with?: InputMaybe<Scalars['String']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type UserWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UserWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UserWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UserWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<UserWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References User record uniquely */
export type UserWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Version = {
  __typename?: 'Version';
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['ID']['output'];
  revision: Scalars['Int']['output'];
  stage: Stage;
};

export type VersionWhereInput = {
  id: Scalars['ID']['input'];
  revision: Scalars['Int']['input'];
  stage: Stage;
};

export enum _FilterKind {
  And = 'AND',
  Not = 'NOT',
  Or = 'OR',
  Contains = 'contains',
  ContainsAll = 'contains_all',
  ContainsNone = 'contains_none',
  ContainsSome = 'contains_some',
  EndsWith = 'ends_with',
  Eq = 'eq',
  EqNot = 'eq_not',
  Gt = 'gt',
  Gte = 'gte',
  In = 'in',
  JsonPathExists = 'json_path_exists',
  JsonValueRecursive = 'json_value_recursive',
  Lt = 'lt',
  Lte = 'lte',
  NotContains = 'not_contains',
  NotEndsWith = 'not_ends_with',
  NotIn = 'not_in',
  NotStartsWith = 'not_starts_with',
  RelationalEvery = 'relational_every',
  RelationalNone = 'relational_none',
  RelationalSingle = 'relational_single',
  RelationalSome = 'relational_some',
  Search = 'search',
  StartsWith = 'starts_with',
  UnionEmpty = 'union_empty',
  UnionEvery = 'union_every',
  UnionNone = 'union_none',
  UnionSingle = 'union_single',
  UnionSome = 'union_some'
}

export enum _MutationInputFieldKind {
  Enum = 'enum',
  Relation = 'relation',
  RichText = 'richText',
  RichTextWithEmbeds = 'richTextWithEmbeds',
  Scalar = 'scalar',
  Union = 'union',
  Virtual = 'virtual'
}

export enum _MutationKind {
  Create = 'create',
  Delete = 'delete',
  DeleteMany = 'deleteMany',
  Publish = 'publish',
  PublishMany = 'publishMany',
  SchedulePublish = 'schedulePublish',
  ScheduleUnpublish = 'scheduleUnpublish',
  Unpublish = 'unpublish',
  UnpublishMany = 'unpublishMany',
  Update = 'update',
  UpdateMany = 'updateMany',
  Upsert = 'upsert'
}

export enum _OrderDirection {
  Asc = 'asc',
  Desc = 'desc'
}

export enum _RelationInputCardinality {
  Many = 'many',
  One = 'one'
}

export enum _RelationInputKind {
  Create = 'create',
  Update = 'update'
}

export enum _RelationKind {
  Regular = 'regular',
  Union = 'union'
}

export enum _SystemDateTimeFieldVariation {
  Base = 'base',
  Combined = 'combined',
  Localization = 'localization'
}

export type ArchiveEntries = Editorial;

export type ArchiveEntriesConnectInput = {
  Editorial?: InputMaybe<EditorialConnectInput>;
};

export type ArchiveEntriesCreateInput = {
  Editorial?: InputMaybe<EditorialCreateInput>;
};

export type ArchiveEntriesCreateManyInlineInput = {
  /** Connect multiple existing archiveEntries documents */
  connect?: InputMaybe<Array<ArchiveEntriesWhereUniqueInput>>;
  /** Create and connect multiple existing archiveEntries documents */
  create?: InputMaybe<Array<ArchiveEntriesCreateInput>>;
};

export type ArchiveEntriesCreateOneInlineInput = {
  /** Connect one existing archiveEntries document */
  connect?: InputMaybe<ArchiveEntriesWhereUniqueInput>;
  /** Create and connect one archiveEntries document */
  create?: InputMaybe<ArchiveEntriesCreateInput>;
};

export type ArchiveEntriesUpdateInput = {
  Editorial?: InputMaybe<EditorialUpdateInput>;
};

export type ArchiveEntriesUpdateManyInlineInput = {
  /** Connect multiple existing archiveEntries documents */
  connect?: InputMaybe<Array<ArchiveEntriesConnectInput>>;
  /** Create and connect multiple archiveEntries documents */
  create?: InputMaybe<Array<ArchiveEntriesCreateInput>>;
  /** Delete multiple archiveEntries documents */
  delete?: InputMaybe<Array<ArchiveEntriesWhereUniqueInput>>;
  /** Disconnect multiple archiveEntries documents */
  disconnect?: InputMaybe<Array<ArchiveEntriesWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing archiveEntries documents */
  set?: InputMaybe<Array<ArchiveEntriesWhereUniqueInput>>;
  /** Update multiple archiveEntries documents */
  update?: InputMaybe<Array<ArchiveEntriesUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple archiveEntries documents */
  upsert?: InputMaybe<Array<ArchiveEntriesUpsertWithNestedWhereUniqueInput>>;
};

export type ArchiveEntriesUpdateManyWithNestedWhereInput = {
  Editorial?: InputMaybe<EditorialUpdateManyWithNestedWhereInput>;
};

export type ArchiveEntriesUpdateOneInlineInput = {
  /** Connect existing archiveEntries document */
  connect?: InputMaybe<ArchiveEntriesWhereUniqueInput>;
  /** Create and connect one archiveEntries document */
  create?: InputMaybe<ArchiveEntriesCreateInput>;
  /** Delete currently connected archiveEntries document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected archiveEntries document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single archiveEntries document */
  update?: InputMaybe<ArchiveEntriesUpdateWithNestedWhereUniqueInput>;
  /** Upsert single archiveEntries document */
  upsert?: InputMaybe<ArchiveEntriesUpsertWithNestedWhereUniqueInput>;
};

export type ArchiveEntriesUpdateWithNestedWhereUniqueInput = {
  Editorial?: InputMaybe<EditorialUpdateWithNestedWhereUniqueInput>;
};

export type ArchiveEntriesUpsertWithNestedWhereUniqueInput = {
  Editorial?: InputMaybe<EditorialUpsertWithNestedWhereUniqueInput>;
};

export type ArchiveEntriesWhereInput = {
  Editorial?: InputMaybe<EditorialWhereInput>;
};

export type ArchiveEntriesWhereUniqueInput = {
  Editorial?: InputMaybe<EditorialWhereUniqueInput>;
};

export type ContentContent = Form | Gallery | Grid | Lock | MixedMedia;

export type ContentContentConnectInput = {
  Form?: InputMaybe<FormConnectInput>;
  Gallery?: InputMaybe<GalleryConnectInput>;
  Grid?: InputMaybe<GridConnectInput>;
  Lock?: InputMaybe<LockConnectInput>;
  MixedMedia?: InputMaybe<MixedMediaConnectInput>;
};

export type ContentContentCreateInput = {
  Form?: InputMaybe<FormCreateInput>;
  Gallery?: InputMaybe<GalleryCreateInput>;
  Grid?: InputMaybe<GridCreateInput>;
  Lock?: InputMaybe<LockCreateInput>;
  MixedMedia?: InputMaybe<MixedMediaCreateInput>;
};

export type ContentContentCreateManyInlineInput = {
  /** Connect multiple existing contentContent documents */
  connect?: InputMaybe<Array<ContentContentWhereUniqueInput>>;
  /** Create and connect multiple existing contentContent documents */
  create?: InputMaybe<Array<ContentContentCreateInput>>;
};

export type ContentContentCreateOneInlineInput = {
  /** Connect one existing contentContent document */
  connect?: InputMaybe<ContentContentWhereUniqueInput>;
  /** Create and connect one contentContent document */
  create?: InputMaybe<ContentContentCreateInput>;
};

export type ContentContentUpdateInput = {
  Form?: InputMaybe<FormUpdateInput>;
  Gallery?: InputMaybe<GalleryUpdateInput>;
  Grid?: InputMaybe<GridUpdateInput>;
  Lock?: InputMaybe<LockUpdateInput>;
  MixedMedia?: InputMaybe<MixedMediaUpdateInput>;
};

export type ContentContentUpdateManyInlineInput = {
  /** Connect multiple existing contentContent documents */
  connect?: InputMaybe<Array<ContentContentConnectInput>>;
  /** Create and connect multiple contentContent documents */
  create?: InputMaybe<Array<ContentContentCreateInput>>;
  /** Delete multiple contentContent documents */
  delete?: InputMaybe<Array<ContentContentWhereUniqueInput>>;
  /** Disconnect multiple contentContent documents */
  disconnect?: InputMaybe<Array<ContentContentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing contentContent documents */
  set?: InputMaybe<Array<ContentContentWhereUniqueInput>>;
  /** Update multiple contentContent documents */
  update?: InputMaybe<Array<ContentContentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple contentContent documents */
  upsert?: InputMaybe<Array<ContentContentUpsertWithNestedWhereUniqueInput>>;
};

export type ContentContentUpdateManyWithNestedWhereInput = {
  Form?: InputMaybe<FormUpdateManyWithNestedWhereInput>;
  Gallery?: InputMaybe<GalleryUpdateManyWithNestedWhereInput>;
  Grid?: InputMaybe<GridUpdateManyWithNestedWhereInput>;
  Lock?: InputMaybe<LockUpdateManyWithNestedWhereInput>;
  MixedMedia?: InputMaybe<MixedMediaUpdateManyWithNestedWhereInput>;
};

export type ContentContentUpdateOneInlineInput = {
  /** Connect existing contentContent document */
  connect?: InputMaybe<ContentContentWhereUniqueInput>;
  /** Create and connect one contentContent document */
  create?: InputMaybe<ContentContentCreateInput>;
  /** Delete currently connected contentContent document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected contentContent document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single contentContent document */
  update?: InputMaybe<ContentContentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single contentContent document */
  upsert?: InputMaybe<ContentContentUpsertWithNestedWhereUniqueInput>;
};

export type ContentContentUpdateWithNestedWhereUniqueInput = {
  Form?: InputMaybe<FormUpdateWithNestedWhereUniqueInput>;
  Gallery?: InputMaybe<GalleryUpdateWithNestedWhereUniqueInput>;
  Grid?: InputMaybe<GridUpdateWithNestedWhereUniqueInput>;
  Lock?: InputMaybe<LockUpdateWithNestedWhereUniqueInput>;
  MixedMedia?: InputMaybe<MixedMediaUpdateWithNestedWhereUniqueInput>;
};

export type ContentContentUpsertWithNestedWhereUniqueInput = {
  Form?: InputMaybe<FormUpsertWithNestedWhereUniqueInput>;
  Gallery?: InputMaybe<GalleryUpsertWithNestedWhereUniqueInput>;
  Grid?: InputMaybe<GridUpsertWithNestedWhereUniqueInput>;
  Lock?: InputMaybe<LockUpsertWithNestedWhereUniqueInput>;
  MixedMedia?: InputMaybe<MixedMediaUpsertWithNestedWhereUniqueInput>;
};

export type ContentContentWhereInput = {
  Form?: InputMaybe<FormWhereInput>;
  Gallery?: InputMaybe<GalleryWhereInput>;
  Grid?: InputMaybe<GridWhereInput>;
  Lock?: InputMaybe<LockWhereInput>;
  MixedMedia?: InputMaybe<MixedMediaWhereInput>;
};

export type ContentContentWhereUniqueInput = {
  Form?: InputMaybe<FormWhereUniqueInput>;
  Gallery?: InputMaybe<GalleryWhereUniqueInput>;
  Grid?: InputMaybe<GridWhereUniqueInput>;
  Lock?: InputMaybe<LockWhereUniqueInput>;
  MixedMedia?: InputMaybe<MixedMediaWhereUniqueInput>;
};

export type CountdownConfigurationPreview = Layout | Page;

export type CountdownConfigurationPreviewConnectInput = {
  Layout?: InputMaybe<LayoutConnectInput>;
  Page?: InputMaybe<PageConnectInput>;
};

export type CountdownConfigurationPreviewCreateInput = {
  Layout?: InputMaybe<LayoutCreateInput>;
  Page?: InputMaybe<PageCreateInput>;
};

export type CountdownConfigurationPreviewCreateManyInlineInput = {
  /** Connect multiple existing countdownConfigurationPreview documents */
  connect?: InputMaybe<Array<CountdownConfigurationPreviewWhereUniqueInput>>;
  /** Create and connect multiple existing countdownConfigurationPreview documents */
  create?: InputMaybe<Array<CountdownConfigurationPreviewCreateInput>>;
};

export type CountdownConfigurationPreviewCreateOneInlineInput = {
  /** Connect one existing countdownConfigurationPreview document */
  connect?: InputMaybe<CountdownConfigurationPreviewWhereUniqueInput>;
  /** Create and connect one countdownConfigurationPreview document */
  create?: InputMaybe<CountdownConfigurationPreviewCreateInput>;
};

export type CountdownConfigurationPreviewUpdateInput = {
  Layout?: InputMaybe<LayoutUpdateInput>;
  Page?: InputMaybe<PageUpdateInput>;
};

export type CountdownConfigurationPreviewUpdateManyInlineInput = {
  /** Connect multiple existing countdownConfigurationPreview documents */
  connect?: InputMaybe<Array<CountdownConfigurationPreviewConnectInput>>;
  /** Create and connect multiple countdownConfigurationPreview documents */
  create?: InputMaybe<Array<CountdownConfigurationPreviewCreateInput>>;
  /** Delete multiple countdownConfigurationPreview documents */
  delete?: InputMaybe<Array<CountdownConfigurationPreviewWhereUniqueInput>>;
  /** Disconnect multiple countdownConfigurationPreview documents */
  disconnect?: InputMaybe<Array<CountdownConfigurationPreviewWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing countdownConfigurationPreview documents */
  set?: InputMaybe<Array<CountdownConfigurationPreviewWhereUniqueInput>>;
  /** Update multiple countdownConfigurationPreview documents */
  update?: InputMaybe<Array<CountdownConfigurationPreviewUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple countdownConfigurationPreview documents */
  upsert?: InputMaybe<Array<CountdownConfigurationPreviewUpsertWithNestedWhereUniqueInput>>;
};

export type CountdownConfigurationPreviewUpdateManyWithNestedWhereInput = {
  Layout?: InputMaybe<LayoutUpdateManyWithNestedWhereInput>;
  Page?: InputMaybe<PageUpdateManyWithNestedWhereInput>;
};

export type CountdownConfigurationPreviewUpdateOneInlineInput = {
  /** Connect existing countdownConfigurationPreview document */
  connect?: InputMaybe<CountdownConfigurationPreviewWhereUniqueInput>;
  /** Create and connect one countdownConfigurationPreview document */
  create?: InputMaybe<CountdownConfigurationPreviewCreateInput>;
  /** Delete currently connected countdownConfigurationPreview document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected countdownConfigurationPreview document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single countdownConfigurationPreview document */
  update?: InputMaybe<CountdownConfigurationPreviewUpdateWithNestedWhereUniqueInput>;
  /** Upsert single countdownConfigurationPreview document */
  upsert?: InputMaybe<CountdownConfigurationPreviewUpsertWithNestedWhereUniqueInput>;
};

export type CountdownConfigurationPreviewUpdateWithNestedWhereUniqueInput = {
  Layout?: InputMaybe<LayoutUpdateWithNestedWhereUniqueInput>;
  Page?: InputMaybe<PageUpdateWithNestedWhereUniqueInput>;
};

export type CountdownConfigurationPreviewUpsertWithNestedWhereUniqueInput = {
  Layout?: InputMaybe<LayoutUpsertWithNestedWhereUniqueInput>;
  Page?: InputMaybe<PageUpsertWithNestedWhereUniqueInput>;
};

export type CountdownConfigurationPreviewWhereInput = {
  Layout?: InputMaybe<LayoutWhereInput>;
  Page?: InputMaybe<PageWhereInput>;
};

export type CountdownConfigurationPreviewWhereUniqueInput = {
  Layout?: InputMaybe<LayoutWhereUniqueInput>;
  Page?: InputMaybe<PageWhereUniqueInput>;
};

export type CustomSectionSection = Collection;

export type CustomSectionSectionConnectInput = {
  Collection?: InputMaybe<CollectionConnectInput>;
};

export type CustomSectionSectionCreateInput = {
  Collection?: InputMaybe<CollectionCreateInput>;
};

export type CustomSectionSectionCreateManyInlineInput = {
  /** Connect multiple existing customSectionSection documents */
  connect?: InputMaybe<Array<CustomSectionSectionWhereUniqueInput>>;
  /** Create and connect multiple existing customSectionSection documents */
  create?: InputMaybe<Array<CustomSectionSectionCreateInput>>;
};

export type CustomSectionSectionCreateOneInlineInput = {
  /** Connect one existing customSectionSection document */
  connect?: InputMaybe<CustomSectionSectionWhereUniqueInput>;
  /** Create and connect one customSectionSection document */
  create?: InputMaybe<CustomSectionSectionCreateInput>;
};

export type CustomSectionSectionUpdateInput = {
  Collection?: InputMaybe<CollectionUpdateInput>;
};

export type CustomSectionSectionUpdateManyInlineInput = {
  /** Connect multiple existing customSectionSection documents */
  connect?: InputMaybe<Array<CustomSectionSectionConnectInput>>;
  /** Create and connect multiple customSectionSection documents */
  create?: InputMaybe<Array<CustomSectionSectionCreateInput>>;
  /** Delete multiple customSectionSection documents */
  delete?: InputMaybe<Array<CustomSectionSectionWhereUniqueInput>>;
  /** Disconnect multiple customSectionSection documents */
  disconnect?: InputMaybe<Array<CustomSectionSectionWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing customSectionSection documents */
  set?: InputMaybe<Array<CustomSectionSectionWhereUniqueInput>>;
  /** Update multiple customSectionSection documents */
  update?: InputMaybe<Array<CustomSectionSectionUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple customSectionSection documents */
  upsert?: InputMaybe<Array<CustomSectionSectionUpsertWithNestedWhereUniqueInput>>;
};

export type CustomSectionSectionUpdateManyWithNestedWhereInput = {
  Collection?: InputMaybe<CollectionUpdateManyWithNestedWhereInput>;
};

export type CustomSectionSectionUpdateOneInlineInput = {
  /** Connect existing customSectionSection document */
  connect?: InputMaybe<CustomSectionSectionWhereUniqueInput>;
  /** Create and connect one customSectionSection document */
  create?: InputMaybe<CustomSectionSectionCreateInput>;
  /** Delete currently connected customSectionSection document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected customSectionSection document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single customSectionSection document */
  update?: InputMaybe<CustomSectionSectionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single customSectionSection document */
  upsert?: InputMaybe<CustomSectionSectionUpsertWithNestedWhereUniqueInput>;
};

export type CustomSectionSectionUpdateWithNestedWhereUniqueInput = {
  Collection?: InputMaybe<CollectionUpdateWithNestedWhereUniqueInput>;
};

export type CustomSectionSectionUpsertWithNestedWhereUniqueInput = {
  Collection?: InputMaybe<CollectionUpsertWithNestedWhereUniqueInput>;
};

export type CustomSectionSectionWhereInput = {
  Collection?: InputMaybe<CollectionWhereInput>;
};

export type CustomSectionSectionWhereUniqueInput = {
  Collection?: InputMaybe<CollectionWhereUniqueInput>;
};

export type EventProducts = CombinedListing | Product;

export type EventProductsConnectInput = {
  CombinedListing?: InputMaybe<CombinedListingConnectInput>;
  Product?: InputMaybe<ProductConnectInput>;
};

export type EventProductsCreateInput = {
  CombinedListing?: InputMaybe<CombinedListingCreateInput>;
  Product?: InputMaybe<ProductCreateInput>;
};

export type EventProductsCreateManyInlineInput = {
  /** Connect multiple existing eventProducts documents */
  connect?: InputMaybe<Array<EventProductsWhereUniqueInput>>;
  /** Create and connect multiple existing eventProducts documents */
  create?: InputMaybe<Array<EventProductsCreateInput>>;
};

export type EventProductsCreateOneInlineInput = {
  /** Connect one existing eventProducts document */
  connect?: InputMaybe<EventProductsWhereUniqueInput>;
  /** Create and connect one eventProducts document */
  create?: InputMaybe<EventProductsCreateInput>;
};

export type EventProductsUpdateInput = {
  CombinedListing?: InputMaybe<CombinedListingUpdateInput>;
  Product?: InputMaybe<ProductUpdateInput>;
};

export type EventProductsUpdateManyInlineInput = {
  /** Connect multiple existing eventProducts documents */
  connect?: InputMaybe<Array<EventProductsConnectInput>>;
  /** Create and connect multiple eventProducts documents */
  create?: InputMaybe<Array<EventProductsCreateInput>>;
  /** Delete multiple eventProducts documents */
  delete?: InputMaybe<Array<EventProductsWhereUniqueInput>>;
  /** Disconnect multiple eventProducts documents */
  disconnect?: InputMaybe<Array<EventProductsWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing eventProducts documents */
  set?: InputMaybe<Array<EventProductsWhereUniqueInput>>;
  /** Update multiple eventProducts documents */
  update?: InputMaybe<Array<EventProductsUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple eventProducts documents */
  upsert?: InputMaybe<Array<EventProductsUpsertWithNestedWhereUniqueInput>>;
};

export type EventProductsUpdateManyWithNestedWhereInput = {
  CombinedListing?: InputMaybe<CombinedListingUpdateManyWithNestedWhereInput>;
  Product?: InputMaybe<ProductUpdateManyWithNestedWhereInput>;
};

export type EventProductsUpdateOneInlineInput = {
  /** Connect existing eventProducts document */
  connect?: InputMaybe<EventProductsWhereUniqueInput>;
  /** Create and connect one eventProducts document */
  create?: InputMaybe<EventProductsCreateInput>;
  /** Delete currently connected eventProducts document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected eventProducts document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single eventProducts document */
  update?: InputMaybe<EventProductsUpdateWithNestedWhereUniqueInput>;
  /** Upsert single eventProducts document */
  upsert?: InputMaybe<EventProductsUpsertWithNestedWhereUniqueInput>;
};

export type EventProductsUpdateWithNestedWhereUniqueInput = {
  CombinedListing?: InputMaybe<CombinedListingUpdateWithNestedWhereUniqueInput>;
  Product?: InputMaybe<ProductUpdateWithNestedWhereUniqueInput>;
};

export type EventProductsUpsertWithNestedWhereUniqueInput = {
  CombinedListing?: InputMaybe<CombinedListingUpsertWithNestedWhereUniqueInput>;
  Product?: InputMaybe<ProductUpsertWithNestedWhereUniqueInput>;
};

export type EventProductsWhereInput = {
  CombinedListing?: InputMaybe<CombinedListingWhereInput>;
  Product?: InputMaybe<ProductWhereInput>;
};

export type EventProductsWhereUniqueInput = {
  CombinedListing?: InputMaybe<CombinedListingWhereUniqueInput>;
  Product?: InputMaybe<ProductWhereUniqueInput>;
};

export type LockExemptionExemptions = Collection | Editorial | Page | Product;

export type LockExemptionExemptionsConnectInput = {
  Collection?: InputMaybe<CollectionConnectInput>;
  Editorial?: InputMaybe<EditorialConnectInput>;
  Page?: InputMaybe<PageConnectInput>;
  Product?: InputMaybe<ProductConnectInput>;
};

export type LockExemptionExemptionsCreateInput = {
  Collection?: InputMaybe<CollectionCreateInput>;
  Editorial?: InputMaybe<EditorialCreateInput>;
  Page?: InputMaybe<PageCreateInput>;
  Product?: InputMaybe<ProductCreateInput>;
};

export type LockExemptionExemptionsCreateManyInlineInput = {
  /** Connect multiple existing lockExemptionExemptions documents */
  connect?: InputMaybe<Array<LockExemptionExemptionsWhereUniqueInput>>;
  /** Create and connect multiple existing lockExemptionExemptions documents */
  create?: InputMaybe<Array<LockExemptionExemptionsCreateInput>>;
};

export type LockExemptionExemptionsCreateOneInlineInput = {
  /** Connect one existing lockExemptionExemptions document */
  connect?: InputMaybe<LockExemptionExemptionsWhereUniqueInput>;
  /** Create and connect one lockExemptionExemptions document */
  create?: InputMaybe<LockExemptionExemptionsCreateInput>;
};

export type LockExemptionExemptionsUpdateInput = {
  Collection?: InputMaybe<CollectionUpdateInput>;
  Editorial?: InputMaybe<EditorialUpdateInput>;
  Page?: InputMaybe<PageUpdateInput>;
  Product?: InputMaybe<ProductUpdateInput>;
};

export type LockExemptionExemptionsUpdateManyInlineInput = {
  /** Connect multiple existing lockExemptionExemptions documents */
  connect?: InputMaybe<Array<LockExemptionExemptionsConnectInput>>;
  /** Create and connect multiple lockExemptionExemptions documents */
  create?: InputMaybe<Array<LockExemptionExemptionsCreateInput>>;
  /** Delete multiple lockExemptionExemptions documents */
  delete?: InputMaybe<Array<LockExemptionExemptionsWhereUniqueInput>>;
  /** Disconnect multiple lockExemptionExemptions documents */
  disconnect?: InputMaybe<Array<LockExemptionExemptionsWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing lockExemptionExemptions documents */
  set?: InputMaybe<Array<LockExemptionExemptionsWhereUniqueInput>>;
  /** Update multiple lockExemptionExemptions documents */
  update?: InputMaybe<Array<LockExemptionExemptionsUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple lockExemptionExemptions documents */
  upsert?: InputMaybe<Array<LockExemptionExemptionsUpsertWithNestedWhereUniqueInput>>;
};

export type LockExemptionExemptionsUpdateManyWithNestedWhereInput = {
  Collection?: InputMaybe<CollectionUpdateManyWithNestedWhereInput>;
  Editorial?: InputMaybe<EditorialUpdateManyWithNestedWhereInput>;
  Page?: InputMaybe<PageUpdateManyWithNestedWhereInput>;
  Product?: InputMaybe<ProductUpdateManyWithNestedWhereInput>;
};

export type LockExemptionExemptionsUpdateOneInlineInput = {
  /** Connect existing lockExemptionExemptions document */
  connect?: InputMaybe<LockExemptionExemptionsWhereUniqueInput>;
  /** Create and connect one lockExemptionExemptions document */
  create?: InputMaybe<LockExemptionExemptionsCreateInput>;
  /** Delete currently connected lockExemptionExemptions document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected lockExemptionExemptions document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single lockExemptionExemptions document */
  update?: InputMaybe<LockExemptionExemptionsUpdateWithNestedWhereUniqueInput>;
  /** Upsert single lockExemptionExemptions document */
  upsert?: InputMaybe<LockExemptionExemptionsUpsertWithNestedWhereUniqueInput>;
};

export type LockExemptionExemptionsUpdateWithNestedWhereUniqueInput = {
  Collection?: InputMaybe<CollectionUpdateWithNestedWhereUniqueInput>;
  Editorial?: InputMaybe<EditorialUpdateWithNestedWhereUniqueInput>;
  Page?: InputMaybe<PageUpdateWithNestedWhereUniqueInput>;
  Product?: InputMaybe<ProductUpdateWithNestedWhereUniqueInput>;
};

export type LockExemptionExemptionsUpsertWithNestedWhereUniqueInput = {
  Collection?: InputMaybe<CollectionUpsertWithNestedWhereUniqueInput>;
  Editorial?: InputMaybe<EditorialUpsertWithNestedWhereUniqueInput>;
  Page?: InputMaybe<PageUpsertWithNestedWhereUniqueInput>;
  Product?: InputMaybe<ProductUpsertWithNestedWhereUniqueInput>;
};

export type LockExemptionExemptionsWhereInput = {
  Collection?: InputMaybe<CollectionWhereInput>;
  Editorial?: InputMaybe<EditorialWhereInput>;
  Page?: InputMaybe<PageWhereInput>;
  Product?: InputMaybe<ProductWhereInput>;
};

export type LockExemptionExemptionsWhereUniqueInput = {
  Collection?: InputMaybe<CollectionWhereUniqueInput>;
  Editorial?: InputMaybe<EditorialWhereUniqueInput>;
  Page?: InputMaybe<PageWhereUniqueInput>;
  Product?: InputMaybe<ProductWhereUniqueInput>;
};

export type LockPageLocks = Collection | Editorial | Page | Product;

export type LockPageLocksConnectInput = {
  Collection?: InputMaybe<CollectionConnectInput>;
  Editorial?: InputMaybe<EditorialConnectInput>;
  Page?: InputMaybe<PageConnectInput>;
  Product?: InputMaybe<ProductConnectInput>;
};

export type LockPageLocksCreateInput = {
  Collection?: InputMaybe<CollectionCreateInput>;
  Editorial?: InputMaybe<EditorialCreateInput>;
  Page?: InputMaybe<PageCreateInput>;
  Product?: InputMaybe<ProductCreateInput>;
};

export type LockPageLocksCreateManyInlineInput = {
  /** Connect multiple existing lockPageLocks documents */
  connect?: InputMaybe<Array<LockPageLocksWhereUniqueInput>>;
  /** Create and connect multiple existing lockPageLocks documents */
  create?: InputMaybe<Array<LockPageLocksCreateInput>>;
};

export type LockPageLocksCreateOneInlineInput = {
  /** Connect one existing lockPageLocks document */
  connect?: InputMaybe<LockPageLocksWhereUniqueInput>;
  /** Create and connect one lockPageLocks document */
  create?: InputMaybe<LockPageLocksCreateInput>;
};

export type LockPageLocksUpdateInput = {
  Collection?: InputMaybe<CollectionUpdateInput>;
  Editorial?: InputMaybe<EditorialUpdateInput>;
  Page?: InputMaybe<PageUpdateInput>;
  Product?: InputMaybe<ProductUpdateInput>;
};

export type LockPageLocksUpdateManyInlineInput = {
  /** Connect multiple existing lockPageLocks documents */
  connect?: InputMaybe<Array<LockPageLocksConnectInput>>;
  /** Create and connect multiple lockPageLocks documents */
  create?: InputMaybe<Array<LockPageLocksCreateInput>>;
  /** Delete multiple lockPageLocks documents */
  delete?: InputMaybe<Array<LockPageLocksWhereUniqueInput>>;
  /** Disconnect multiple lockPageLocks documents */
  disconnect?: InputMaybe<Array<LockPageLocksWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing lockPageLocks documents */
  set?: InputMaybe<Array<LockPageLocksWhereUniqueInput>>;
  /** Update multiple lockPageLocks documents */
  update?: InputMaybe<Array<LockPageLocksUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple lockPageLocks documents */
  upsert?: InputMaybe<Array<LockPageLocksUpsertWithNestedWhereUniqueInput>>;
};

export type LockPageLocksUpdateManyWithNestedWhereInput = {
  Collection?: InputMaybe<CollectionUpdateManyWithNestedWhereInput>;
  Editorial?: InputMaybe<EditorialUpdateManyWithNestedWhereInput>;
  Page?: InputMaybe<PageUpdateManyWithNestedWhereInput>;
  Product?: InputMaybe<ProductUpdateManyWithNestedWhereInput>;
};

export type LockPageLocksUpdateOneInlineInput = {
  /** Connect existing lockPageLocks document */
  connect?: InputMaybe<LockPageLocksWhereUniqueInput>;
  /** Create and connect one lockPageLocks document */
  create?: InputMaybe<LockPageLocksCreateInput>;
  /** Delete currently connected lockPageLocks document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected lockPageLocks document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single lockPageLocks document */
  update?: InputMaybe<LockPageLocksUpdateWithNestedWhereUniqueInput>;
  /** Upsert single lockPageLocks document */
  upsert?: InputMaybe<LockPageLocksUpsertWithNestedWhereUniqueInput>;
};

export type LockPageLocksUpdateWithNestedWhereUniqueInput = {
  Collection?: InputMaybe<CollectionUpdateWithNestedWhereUniqueInput>;
  Editorial?: InputMaybe<EditorialUpdateWithNestedWhereUniqueInput>;
  Page?: InputMaybe<PageUpdateWithNestedWhereUniqueInput>;
  Product?: InputMaybe<ProductUpdateWithNestedWhereUniqueInput>;
};

export type LockPageLocksUpsertWithNestedWhereUniqueInput = {
  Collection?: InputMaybe<CollectionUpsertWithNestedWhereUniqueInput>;
  Editorial?: InputMaybe<EditorialUpsertWithNestedWhereUniqueInput>;
  Page?: InputMaybe<PageUpsertWithNestedWhereUniqueInput>;
  Product?: InputMaybe<ProductUpsertWithNestedWhereUniqueInput>;
};

export type LockPageLocksWhereInput = {
  Collection?: InputMaybe<CollectionWhereInput>;
  Editorial?: InputMaybe<EditorialWhereInput>;
  Page?: InputMaybe<PageWhereInput>;
  Product?: InputMaybe<ProductWhereInput>;
};

export type LockPageLocksWhereUniqueInput = {
  Collection?: InputMaybe<CollectionWhereUniqueInput>;
  Editorial?: InputMaybe<EditorialWhereUniqueInput>;
  Page?: InputMaybe<PageWhereUniqueInput>;
  Product?: InputMaybe<ProductWhereUniqueInput>;
};


      export interface PossibleTypesResultData {
        possibleTypes: {
          [key: string]: string[]
        }
      }
      const result: PossibleTypesResultData = {
  "possibleTypes": {
    "BlockParent": [
      "LockedSection"
    ],
    "DisplayOptionParent": [
      "Block"
    ],
    "EditorialArtistStatementRichTextEmbeddedTypes": [
      "Asset",
      "Gallery"
    ],
    "EditorialMainContentRichTextEmbeddedTypes": [
      "Archive",
      "Asset"
    ],
    "Entity": [
      "Archive",
      "Asset",
      "Block",
      "Collection",
      "CombinedListing",
      "CountdownComponent",
      "CustomizedSection",
      "DisplayOption",
      "Editorial",
      "Event",
      "Form",
      "Gallery",
      "Grid",
      "Layout",
      "Link",
      "Lock",
      "LockedSection",
      "MixedMedia",
      "Navigation",
      "Page",
      "Person",
      "Product",
      "ScheduledOperation",
      "ScheduledRelease",
      "Seo",
      "Theme",
      "User"
    ],
    "LayoutHero": [
      "Collection",
      "Editorial",
      "Event",
      "MixedMedia",
      "Product"
    ],
    "LayoutSections": [
      "Archive",
      "Collection",
      "CustomizedSection",
      "Event",
      "Form",
      "Lock",
      "MixedMedia",
      "Product"
    ],
    "LinkInternalTarget": [
      "Collection",
      "Editorial",
      "Page",
      "Product"
    ],
    "LinkParent": [
      "MixedMedia",
      "Navigation"
    ],
    "MixedMediaBodyRichTextEmbeddedTypes": [
      "Asset",
      "Form",
      "Lock",
      "Page"
    ],
    "Node": [
      "Archive",
      "Asset",
      "Collection",
      "CombinedListing",
      "CustomizedSection",
      "Editorial",
      "Event",
      "Form",
      "Gallery",
      "Grid",
      "Layout",
      "Lock",
      "MixedMedia",
      "Navigation",
      "Page",
      "Person",
      "Product",
      "ScheduledOperation",
      "ScheduledRelease",
      "Seo",
      "Theme",
      "User"
    ],
    "ScheduledOperationAffectedDocument": [
      "Archive",
      "Asset",
      "Collection",
      "CombinedListing",
      "CustomizedSection",
      "Editorial",
      "Event",
      "Form",
      "Gallery",
      "Grid",
      "Layout",
      "Lock",
      "MixedMedia",
      "Navigation",
      "Page",
      "Person",
      "Product",
      "Seo",
      "Theme"
    ],
    "Shopify_AppPricingDetails": [
      "Shopify_AppRecurringPricing",
      "Shopify_AppUsagePricing"
    ],
    "Shopify_AppPurchase": [
      "Shopify_AppPurchaseOneTime"
    ],
    "Shopify_AppSubscriptionDiscountValue": [
      "Shopify_AppSubscriptionDiscountAmount",
      "Shopify_AppSubscriptionDiscountPercentage"
    ],
    "Shopify_BasePaymentDetails": [
      "Shopify_CardPaymentDetails",
      "Shopify_ShopPayInstallmentsPaymentDetails"
    ],
    "Shopify_CalculatedDiscountApplication": [
      "Shopify_CalculatedAutomaticDiscountApplication",
      "Shopify_CalculatedDiscountCodeApplication",
      "Shopify_CalculatedManualDiscountApplication",
      "Shopify_CalculatedScriptDiscountApplication"
    ],
    "Shopify_Catalog": [
      "Shopify_AppCatalog",
      "Shopify_CompanyLocationCatalog",
      "Shopify_MarketCatalog"
    ],
    "Shopify_CollectionRuleConditionObject": [
      "Shopify_CollectionRuleMetafieldCondition",
      "Shopify_CollectionRuleProductCategoryCondition",
      "Shopify_CollectionRuleTextCondition"
    ],
    "Shopify_CommentEventEmbed": [
      "Shopify_Customer",
      "Shopify_DraftOrder",
      "Shopify_Order",
      "Shopify_Product",
      "Shopify_ProductVariant"
    ],
    "Shopify_CommentEventSubject": [
      "Shopify_Company",
      "Shopify_CompanyLocation",
      "Shopify_Customer",
      "Shopify_DraftOrder",
      "Shopify_Order",
      "Shopify_PriceRule"
    ],
    "Shopify_CustomerMoment": [
      "Shopify_CustomerVisit"
    ],
    "Shopify_CustomerPaymentInstrument": [
      "Shopify_CustomerCreditCard",
      "Shopify_CustomerPaypalBillingAgreement",
      "Shopify_CustomerShopPayAgreement"
    ],
    "Shopify_DeliveryConditionCriteria": [
      "Shopify_MoneyV2",
      "Shopify_Weight"
    ],
    "Shopify_DeliveryRateProvider": [
      "Shopify_DeliveryParticipant",
      "Shopify_DeliveryRateDefinition"
    ],
    "Shopify_Discount": [
      "Shopify_DiscountAutomaticApp",
      "Shopify_DiscountAutomaticBasic",
      "Shopify_DiscountAutomaticBxgy",
      "Shopify_DiscountAutomaticFreeShipping",
      "Shopify_DiscountCodeApp",
      "Shopify_DiscountCodeBasic",
      "Shopify_DiscountCodeBxgy",
      "Shopify_DiscountCodeFreeShipping"
    ],
    "Shopify_DiscountApplication": [
      "Shopify_AutomaticDiscountApplication",
      "Shopify_DiscountCodeApplication",
      "Shopify_ManualDiscountApplication",
      "Shopify_ScriptDiscountApplication"
    ],
    "Shopify_DiscountAutomatic": [
      "Shopify_DiscountAutomaticApp",
      "Shopify_DiscountAutomaticBasic",
      "Shopify_DiscountAutomaticBxgy",
      "Shopify_DiscountAutomaticFreeShipping"
    ],
    "Shopify_DiscountCode": [
      "Shopify_DiscountCodeApp",
      "Shopify_DiscountCodeBasic",
      "Shopify_DiscountCodeBxgy",
      "Shopify_DiscountCodeFreeShipping"
    ],
    "Shopify_DiscountCustomerBuysValue": [
      "Shopify_DiscountPurchaseAmount",
      "Shopify_DiscountQuantity"
    ],
    "Shopify_DiscountCustomerGetsValue": [
      "Shopify_DiscountAmount",
      "Shopify_DiscountOnQuantity",
      "Shopify_DiscountPercentage"
    ],
    "Shopify_DiscountCustomerSelection": [
      "Shopify_DiscountCustomerAll",
      "Shopify_DiscountCustomerSegments",
      "Shopify_DiscountCustomers"
    ],
    "Shopify_DiscountEffect": [
      "Shopify_DiscountAmount",
      "Shopify_DiscountPercentage"
    ],
    "Shopify_DiscountItems": [
      "Shopify_AllDiscountItems",
      "Shopify_DiscountCollections",
      "Shopify_DiscountProducts"
    ],
    "Shopify_DiscountMinimumRequirement": [
      "Shopify_DiscountMinimumQuantity",
      "Shopify_DiscountMinimumSubtotal"
    ],
    "Shopify_DiscountShippingDestinationSelection": [
      "Shopify_DiscountCountries",
      "Shopify_DiscountCountryAll"
    ],
    "Shopify_DisplayableError": [
      "Shopify_AbandonmentEmailStateUpdateUserError",
      "Shopify_AbandonmentUpdateActivitiesDeliveryStatusesUserError",
      "Shopify_AppSubscriptionTrialExtendUserError",
      "Shopify_BillingAttemptUserError",
      "Shopify_BulkMutationUserError",
      "Shopify_BulkProductResourceFeedbackCreateUserError",
      "Shopify_BusinessCustomerUserError",
      "Shopify_CartTransformCreateUserError",
      "Shopify_CartTransformDeleteUserError",
      "Shopify_CatalogUserError",
      "Shopify_CheckoutBrandingUpsertUserError",
      "Shopify_CollectionAddProductsV2UserError",
      "Shopify_CustomerCancelDataErasureUserError",
      "Shopify_CustomerEmailMarketingConsentUpdateUserError",
      "Shopify_CustomerMergeUserError",
      "Shopify_CustomerPaymentMethodCreateFromDuplicationDataUserError",
      "Shopify_CustomerPaymentMethodGetDuplicationDataUserError",
      "Shopify_CustomerPaymentMethodGetUpdateUrlUserError",
      "Shopify_CustomerPaymentMethodRemoteUserError",
      "Shopify_CustomerPaymentMethodUserError",
      "Shopify_CustomerRequestDataErasureUserError",
      "Shopify_CustomerSegmentMembersQueryUserError",
      "Shopify_CustomerSmsMarketingConsentError",
      "Shopify_DelegateAccessTokenCreateUserError",
      "Shopify_DelegateAccessTokenDestroyUserError",
      "Shopify_DeliveryCustomizationError",
      "Shopify_DeliveryLocationLocalPickupSettingsError",
      "Shopify_DiscountUserError",
      "Shopify_DisputeEvidenceUpdateUserError",
      "Shopify_ErrorsServerPixelUserError",
      "Shopify_ErrorsWebPixelUserError",
      "Shopify_FilesUserError",
      "Shopify_FulfillmentConstraintRuleCreateUserError",
      "Shopify_FulfillmentConstraintRuleDeleteUserError",
      "Shopify_FulfillmentOrderHoldUserError",
      "Shopify_FulfillmentOrderLineItemsPreparedForPickupUserError",
      "Shopify_FulfillmentOrderMergeUserError",
      "Shopify_FulfillmentOrderReleaseHoldUserError",
      "Shopify_FulfillmentOrderRescheduleUserError",
      "Shopify_FulfillmentOrderSplitUserError",
      "Shopify_FulfillmentOrdersReleaseHoldsUserError",
      "Shopify_FulfillmentOrdersSetFulfillmentDeadlineUserError",
      "Shopify_GiftCardUserError",
      "Shopify_InventoryAdjustQuantitiesUserError",
      "Shopify_InventoryBulkToggleActivationUserError",
      "Shopify_InventoryMoveQuantitiesUserError",
      "Shopify_InventorySetOnHandQuantitiesUserError",
      "Shopify_InventorySetScheduledChangesUserError",
      "Shopify_LocationActivateUserError",
      "Shopify_LocationAddUserError",
      "Shopify_LocationDeactivateUserError",
      "Shopify_LocationDeleteUserError",
      "Shopify_LocationEditUserError",
      "Shopify_MarketCurrencySettingsUserError",
      "Shopify_MarketUserError",
      "Shopify_MarketingActivityUserError",
      "Shopify_MediaUserError",
      "Shopify_MetafieldDefinitionCreateUserError",
      "Shopify_MetafieldDefinitionDeleteUserError",
      "Shopify_MetafieldDefinitionPinUserError",
      "Shopify_MetafieldDefinitionUnpinUserError",
      "Shopify_MetafieldDefinitionUpdateUserError",
      "Shopify_MetafieldsSetUserError",
      "Shopify_MetaobjectUserError",
      "Shopify_OrderCancelUserError",
      "Shopify_OrderCreateMandatePaymentUserError",
      "Shopify_OrderEditAddShippingLineUserError",
      "Shopify_OrderEditRemoveDiscountUserError",
      "Shopify_OrderEditRemoveShippingLineUserError",
      "Shopify_OrderEditUpdateDiscountUserError",
      "Shopify_OrderEditUpdateShippingLineUserError",
      "Shopify_OrderInvoiceSendUserError",
      "Shopify_OrderRiskAssessmentCreateUserError",
      "Shopify_PaymentCustomizationError",
      "Shopify_PaymentReminderSendUserError",
      "Shopify_PaymentTermsCreateUserError",
      "Shopify_PaymentTermsDeleteUserError",
      "Shopify_PaymentTermsUpdateUserError",
      "Shopify_PriceListFixedPricesByProductBulkUpdateUserError",
      "Shopify_PriceListPriceUserError",
      "Shopify_PriceListUserError",
      "Shopify_PriceRuleUserError",
      "Shopify_ProductChangeStatusUserError",
      "Shopify_ProductDeleteUserError",
      "Shopify_ProductDuplicateUserError",
      "Shopify_ProductFeedCreateUserError",
      "Shopify_ProductFeedDeleteUserError",
      "Shopify_ProductFullSyncUserError",
      "Shopify_ProductOptionUpdateUserError",
      "Shopify_ProductOptionsCreateUserError",
      "Shopify_ProductOptionsDeleteUserError",
      "Shopify_ProductOptionsReorderUserError",
      "Shopify_ProductSetUserError",
      "Shopify_ProductVariantRelationshipBulkUpdateUserError",
      "Shopify_ProductVariantsBulkCreateUserError",
      "Shopify_ProductVariantsBulkDeleteUserError",
      "Shopify_ProductVariantsBulkReorderUserError",
      "Shopify_ProductVariantsBulkUpdateUserError",
      "Shopify_PubSubWebhookSubscriptionCreateUserError",
      "Shopify_PubSubWebhookSubscriptionUpdateUserError",
      "Shopify_PublicationUserError",
      "Shopify_QuantityPricingByVariantUserError",
      "Shopify_QuantityRuleUserError",
      "Shopify_ReturnUserError",
      "Shopify_SellingPlanGroupUserError",
      "Shopify_ShopPolicyUserError",
      "Shopify_ShopResourceFeedbackCreateUserError",
      "Shopify_StandardMetafieldDefinitionEnableUserError",
      "Shopify_SubscriptionBillingCycleSkipUserError",
      "Shopify_SubscriptionBillingCycleUnskipUserError",
      "Shopify_SubscriptionBillingCycleUserError",
      "Shopify_SubscriptionContractStatusUpdateUserError",
      "Shopify_SubscriptionContractUserError",
      "Shopify_SubscriptionDraftUserError",
      "Shopify_TaxAppConfigureUserError",
      "Shopify_TransactionVoidUserError",
      "Shopify_TranslationUserError",
      "Shopify_UrlRedirectBulkDeleteByIdsUserError",
      "Shopify_UrlRedirectBulkDeleteBySavedSearchUserError",
      "Shopify_UrlRedirectBulkDeleteBySearchUserError",
      "Shopify_UrlRedirectImportUserError",
      "Shopify_UrlRedirectUserError",
      "Shopify_UserError",
      "Shopify_ValidationUserError"
    ],
    "Shopify_Event": [
      "Shopify_BasicEvent",
      "Shopify_CommentEvent"
    ],
    "Shopify_Fee": [
      "Shopify_RestockingFee",
      "Shopify_ReturnShippingFee"
    ],
    "Shopify_File": [
      "Shopify_GenericFile",
      "Shopify_MediaImage",
      "Shopify_Video"
    ],
    "Shopify_HasEvents": [
      "Shopify_Company",
      "Shopify_CompanyLocation",
      "Shopify_Customer",
      "Shopify_DiscountAutomaticBxgy",
      "Shopify_DiscountAutomaticNode",
      "Shopify_DiscountCodeNode",
      "Shopify_DiscountNode",
      "Shopify_DraftOrder",
      "Shopify_Order",
      "Shopify_PriceRule"
    ],
    "Shopify_HasLocalizationExtensions": [
      "Shopify_DraftOrder",
      "Shopify_Order"
    ],
    "Shopify_HasMetafieldDefinitions": [
      "Shopify_Collection",
      "Shopify_Company",
      "Shopify_CompanyLocation",
      "Shopify_Customer",
      "Shopify_DeliveryCustomization",
      "Shopify_DiscountAutomaticNode",
      "Shopify_DiscountCodeNode",
      "Shopify_DiscountNode",
      "Shopify_Location",
      "Shopify_Market",
      "Shopify_Order",
      "Shopify_PaymentCustomization",
      "Shopify_Product",
      "Shopify_ProductVariant",
      "Shopify_Validation"
    ],
    "Shopify_HasMetafields": [
      "Shopify_AppInstallation",
      "Shopify_CartTransform",
      "Shopify_Collection",
      "Shopify_Company",
      "Shopify_CompanyLocation",
      "Shopify_Customer",
      "Shopify_CustomerSegmentMember",
      "Shopify_DeliveryCustomization",
      "Shopify_DiscountAutomaticNode",
      "Shopify_DiscountCodeNode",
      "Shopify_DiscountNode",
      "Shopify_DraftOrder",
      "Shopify_FulfillmentConstraintRule",
      "Shopify_Image",
      "Shopify_Location",
      "Shopify_Market",
      "Shopify_MediaImage",
      "Shopify_Order",
      "Shopify_PaymentCustomization",
      "Shopify_Product",
      "Shopify_ProductVariant",
      "Shopify_Shop",
      "Shopify_Validation"
    ],
    "Shopify_HasPublishedTranslations": [
      "Shopify_Collection",
      "Shopify_Link",
      "Shopify_OnlineStoreArticle",
      "Shopify_OnlineStoreBlog",
      "Shopify_OnlineStorePage",
      "Shopify_Product",
      "Shopify_ProductOption",
      "Shopify_ProductOptionValue",
      "Shopify_ProductVariant",
      "Shopify_SellingPlan",
      "Shopify_SellingPlanGroup",
      "Shopify_Shop",
      "Shopify_ShopPolicy"
    ],
    "Shopify_JobResult": [
      "Shopify_CustomerSegmentMembersQuery"
    ],
    "Shopify_LegacyInteroperability": [
      "Shopify_Customer",
      "Shopify_DraftOrder",
      "Shopify_Fulfillment",
      "Shopify_InventoryItem",
      "Shopify_Location",
      "Shopify_MarketingEvent",
      "Shopify_Metafield",
      "Shopify_MetafieldStorefrontVisibility",
      "Shopify_Order",
      "Shopify_PriceRule",
      "Shopify_Product",
      "Shopify_ProductVariant",
      "Shopify_Refund",
      "Shopify_SavedSearch",
      "Shopify_ScriptTag",
      "Shopify_ShopifyPaymentsDispute",
      "Shopify_ShopifyPaymentsPayout",
      "Shopify_WebhookSubscription"
    ],
    "Shopify_MarketRegion": [
      "Shopify_MarketRegionCountry"
    ],
    "Shopify_Media": [
      "Shopify_ExternalVideo",
      "Shopify_MediaImage",
      "Shopify_Model3d",
      "Shopify_Video"
    ],
    "Shopify_MetafieldReference": [
      "Shopify_Collection",
      "Shopify_GenericFile",
      "Shopify_MediaImage",
      "Shopify_Metaobject",
      "Shopify_Model3d",
      "Shopify_OnlineStorePage",
      "Shopify_Product",
      "Shopify_ProductVariant",
      "Shopify_Video"
    ],
    "Shopify_MetafieldReferencer": [
      "Shopify_AppInstallation",
      "Shopify_Collection",
      "Shopify_Company",
      "Shopify_CompanyLocation",
      "Shopify_Customer",
      "Shopify_DeliveryCustomization",
      "Shopify_DiscountAutomaticNode",
      "Shopify_DiscountCodeNode",
      "Shopify_DiscountNode",
      "Shopify_DraftOrder",
      "Shopify_FulfillmentOrder",
      "Shopify_Location",
      "Shopify_Market",
      "Shopify_Metaobject",
      "Shopify_OnlineStoreArticle",
      "Shopify_OnlineStoreBlog",
      "Shopify_OnlineStorePage",
      "Shopify_Order",
      "Shopify_PaymentCustomization",
      "Shopify_Product",
      "Shopify_ProductVariant",
      "Shopify_Shop"
    ],
    "Shopify_Navigable": [
      "Shopify_AbandonedCheckout",
      "Shopify_Company",
      "Shopify_CompanyLocation",
      "Shopify_DraftOrder",
      "Shopify_OnlineStoreArticle",
      "Shopify_OnlineStorePage",
      "Shopify_Product",
      "Shopify_ProductVariant"
    ],
    "Shopify_Node": [
      "Shopify_AbandonedCheckout",
      "Shopify_AbandonedCheckoutLineItem",
      "Shopify_Abandonment",
      "Shopify_AddAllProductsOperation",
      "Shopify_AdditionalFee",
      "Shopify_App",
      "Shopify_AppCatalog",
      "Shopify_AppCredit",
      "Shopify_AppInstallation",
      "Shopify_AppPurchaseOneTime",
      "Shopify_AppRevenueAttributionRecord",
      "Shopify_AppSubscription",
      "Shopify_AppUsageRecord",
      "Shopify_BasicEvent",
      "Shopify_BulkOperation",
      "Shopify_CalculatedOrder",
      "Shopify_CartTransform",
      "Shopify_CashTrackingAdjustment",
      "Shopify_CashTrackingSession",
      "Shopify_CatalogCsvOperation",
      "Shopify_Channel",
      "Shopify_ChannelDefinition",
      "Shopify_ChannelInformation",
      "Shopify_CheckoutProfile",
      "Shopify_Collection",
      "Shopify_CommentEvent",
      "Shopify_Company",
      "Shopify_CompanyAddress",
      "Shopify_CompanyContact",
      "Shopify_CompanyContactRole",
      "Shopify_CompanyContactRoleAssignment",
      "Shopify_CompanyLocation",
      "Shopify_CompanyLocationCatalog",
      "Shopify_Customer",
      "Shopify_CustomerPaymentMethod",
      "Shopify_CustomerSegmentMembersQuery",
      "Shopify_CustomerVisit",
      "Shopify_DeliveryCarrierService",
      "Shopify_DeliveryCondition",
      "Shopify_DeliveryCountry",
      "Shopify_DeliveryCustomization",
      "Shopify_DeliveryLocationGroup",
      "Shopify_DeliveryMethod",
      "Shopify_DeliveryMethodDefinition",
      "Shopify_DeliveryParticipant",
      "Shopify_DeliveryProfile",
      "Shopify_DeliveryProfileItem",
      "Shopify_DeliveryProvince",
      "Shopify_DeliveryRateDefinition",
      "Shopify_DeliveryZone",
      "Shopify_DiscountAutomaticBxgy",
      "Shopify_DiscountAutomaticNode",
      "Shopify_DiscountCodeNode",
      "Shopify_DiscountNode",
      "Shopify_DiscountRedeemCodeBulkCreation",
      "Shopify_Domain",
      "Shopify_DraftOrder",
      "Shopify_DraftOrderLineItem",
      "Shopify_DraftOrderTag",
      "Shopify_Duty",
      "Shopify_ExchangeLineItem",
      "Shopify_ExchangeV2",
      "Shopify_ExternalVideo",
      "Shopify_Fulfillment",
      "Shopify_FulfillmentConstraintRule",
      "Shopify_FulfillmentEvent",
      "Shopify_FulfillmentLineItem",
      "Shopify_FulfillmentOrder",
      "Shopify_FulfillmentOrderDestination",
      "Shopify_FulfillmentOrderLineItem",
      "Shopify_FulfillmentOrderMerchantRequest",
      "Shopify_GenericFile",
      "Shopify_GiftCard",
      "Shopify_InventoryAdjustmentGroup",
      "Shopify_InventoryItem",
      "Shopify_InventoryItemMeasurement",
      "Shopify_InventoryLevel",
      "Shopify_InventoryQuantity",
      "Shopify_LineItem",
      "Shopify_LineItemMutable",
      "Shopify_Location",
      "Shopify_MailingAddress",
      "Shopify_Market",
      "Shopify_MarketCatalog",
      "Shopify_MarketRegionCountry",
      "Shopify_MarketWebPresence",
      "Shopify_MarketingActivity",
      "Shopify_MarketingEvent",
      "Shopify_MediaImage",
      "Shopify_Metafield",
      "Shopify_MetafieldDefinition",
      "Shopify_MetafieldStorefrontVisibility",
      "Shopify_Metaobject",
      "Shopify_MetaobjectDefinition",
      "Shopify_Model3d",
      "Shopify_OnlineStoreArticle",
      "Shopify_OnlineStoreBlog",
      "Shopify_OnlineStorePage",
      "Shopify_Order",
      "Shopify_OrderDisputeSummary",
      "Shopify_OrderTransaction",
      "Shopify_PaymentCustomization",
      "Shopify_PaymentMandate",
      "Shopify_PaymentSchedule",
      "Shopify_PaymentTerms",
      "Shopify_PaymentTermsTemplate",
      "Shopify_PriceList",
      "Shopify_PriceRule",
      "Shopify_PriceRuleDiscountCode",
      "Shopify_PrivateMetafield",
      "Shopify_Product",
      "Shopify_ProductFeed",
      "Shopify_ProductOption",
      "Shopify_ProductOptionValue",
      "Shopify_ProductSetOperation",
      "Shopify_ProductTaxonomyNode",
      "Shopify_ProductVariant",
      "Shopify_ProductVariantComponent",
      "Shopify_Publication",
      "Shopify_PublicationResourceOperation",
      "Shopify_QuantityPriceBreak",
      "Shopify_Refund",
      "Shopify_RefundShippingLine",
      "Shopify_Return",
      "Shopify_ReturnLineItem",
      "Shopify_ReturnableFulfillment",
      "Shopify_ReverseDelivery",
      "Shopify_ReverseDeliveryLineItem",
      "Shopify_ReverseFulfillmentOrder",
      "Shopify_ReverseFulfillmentOrderDisposition",
      "Shopify_ReverseFulfillmentOrderLineItem",
      "Shopify_SaleAdditionalFee",
      "Shopify_SavedSearch",
      "Shopify_ScriptTag",
      "Shopify_Segment",
      "Shopify_SellingPlan",
      "Shopify_SellingPlanGroup",
      "Shopify_ServerPixel",
      "Shopify_ShippingLabel",
      "Shopify_Shop",
      "Shopify_ShopAddress",
      "Shopify_ShopPolicy",
      "Shopify_ShopifyPaymentsAccount",
      "Shopify_ShopifyPaymentsBalanceTransaction",
      "Shopify_ShopifyPaymentsBankAccount",
      "Shopify_ShopifyPaymentsDispute",
      "Shopify_ShopifyPaymentsDisputeEvidence",
      "Shopify_ShopifyPaymentsDisputeFileUpload",
      "Shopify_ShopifyPaymentsDisputeFulfillment",
      "Shopify_ShopifyPaymentsPayout",
      "Shopify_ShopifyPaymentsVerification",
      "Shopify_StaffMember",
      "Shopify_StandardMetafieldDefinitionTemplate",
      "Shopify_StorefrontAccessToken",
      "Shopify_SubscriptionBillingAttempt",
      "Shopify_SubscriptionContract",
      "Shopify_SubscriptionDraft",
      "Shopify_TaxonomyAttribute",
      "Shopify_TaxonomyCategory",
      "Shopify_TaxonomyChoiceListAttribute",
      "Shopify_TaxonomyMeasurementAttribute",
      "Shopify_TaxonomyValue",
      "Shopify_TenderTransaction",
      "Shopify_TransactionFee",
      "Shopify_UrlRedirect",
      "Shopify_UrlRedirectImport",
      "Shopify_Validation",
      "Shopify_Video",
      "Shopify_WebPixel",
      "Shopify_WebhookSubscription"
    ],
    "Shopify_OnlineStorePreviewable": [
      "Shopify_Product"
    ],
    "Shopify_OrderStagedChange": [
      "Shopify_OrderStagedChangeAddCustomItem",
      "Shopify_OrderStagedChangeAddLineItemDiscount",
      "Shopify_OrderStagedChangeAddShippingLine",
      "Shopify_OrderStagedChangeAddVariant",
      "Shopify_OrderStagedChangeDecrementItem",
      "Shopify_OrderStagedChangeIncrementItem",
      "Shopify_OrderStagedChangeRemoveShippingLine"
    ],
    "Shopify_PaymentDetails": [
      "Shopify_CardPaymentDetails",
      "Shopify_ShopPayInstallmentsPaymentDetails"
    ],
    "Shopify_PaymentInstrument": [
      "Shopify_VaultCreditCard",
      "Shopify_VaultPaypalBillingAgreement"
    ],
    "Shopify_PriceRuleValue": [
      "Shopify_PriceRuleFixedAmountValue",
      "Shopify_PriceRulePercentValue"
    ],
    "Shopify_PricingValue": [
      "Shopify_MoneyV2",
      "Shopify_PricingPercentageValue"
    ],
    "Shopify_ProductOperation": [
      "Shopify_ProductSetOperation"
    ],
    "Shopify_PublicationOperation": [
      "Shopify_AddAllProductsOperation",
      "Shopify_CatalogCsvOperation",
      "Shopify_PublicationResourceOperation"
    ],
    "Shopify_Publishable": [
      "Shopify_Collection",
      "Shopify_Product"
    ],
    "Shopify_PurchasingEntity": [
      "Shopify_Customer",
      "Shopify_PurchasingCompany"
    ],
    "Shopify_ResourceOperation": [
      "Shopify_AddAllProductsOperation",
      "Shopify_CatalogCsvOperation",
      "Shopify_PublicationResourceOperation"
    ],
    "Shopify_ReverseDeliveryDeliverable": [
      "Shopify_ReverseDeliveryShippingDeliverable"
    ],
    "Shopify_Sale": [
      "Shopify_AdditionalFeeSale",
      "Shopify_AdjustmentSale",
      "Shopify_DutySale",
      "Shopify_FeeSale",
      "Shopify_GiftCardSale",
      "Shopify_ProductSale",
      "Shopify_ShippingLineSale",
      "Shopify_TipSale",
      "Shopify_UnknownSale"
    ],
    "Shopify_SalesAgreement": [
      "Shopify_OrderAgreement",
      "Shopify_OrderEditAgreement",
      "Shopify_RefundAgreement",
      "Shopify_ReturnAgreement"
    ],
    "Shopify_SellingPlanBillingPolicy": [
      "Shopify_SellingPlanFixedBillingPolicy",
      "Shopify_SellingPlanRecurringBillingPolicy"
    ],
    "Shopify_SellingPlanCheckoutChargeValue": [
      "Shopify_MoneyV2",
      "Shopify_SellingPlanCheckoutChargePercentageValue"
    ],
    "Shopify_SellingPlanDeliveryPolicy": [
      "Shopify_SellingPlanFixedDeliveryPolicy",
      "Shopify_SellingPlanRecurringDeliveryPolicy"
    ],
    "Shopify_SellingPlanPricingPolicy": [
      "Shopify_SellingPlanFixedPricingPolicy",
      "Shopify_SellingPlanRecurringPricingPolicy"
    ],
    "Shopify_SellingPlanPricingPolicyAdjustmentValue": [
      "Shopify_MoneyV2",
      "Shopify_SellingPlanPricingPolicyPercentageValue"
    ],
    "Shopify_SellingPlanPricingPolicyBase": [
      "Shopify_SellingPlanFixedPricingPolicy",
      "Shopify_SellingPlanRecurringPricingPolicy"
    ],
    "Shopify_ShopifyPaymentsChargeStatementDescriptor": [
      "Shopify_ShopifyPaymentsDefaultChargeStatementDescriptor",
      "Shopify_ShopifyPaymentsJpChargeStatementDescriptor"
    ],
    "Shopify_SubscriptionContractBase": [
      "Shopify_SubscriptionBillingCycleEditedContract",
      "Shopify_SubscriptionContract"
    ],
    "Shopify_SubscriptionDeliveryMethod": [
      "Shopify_SubscriptionDeliveryMethodLocalDelivery",
      "Shopify_SubscriptionDeliveryMethodPickup",
      "Shopify_SubscriptionDeliveryMethodShipping"
    ],
    "Shopify_SubscriptionDeliveryOption": [
      "Shopify_SubscriptionLocalDeliveryOption",
      "Shopify_SubscriptionPickupOption",
      "Shopify_SubscriptionShippingOption"
    ],
    "Shopify_SubscriptionDeliveryOptionResult": [
      "Shopify_SubscriptionDeliveryOptionResultFailure",
      "Shopify_SubscriptionDeliveryOptionResultSuccess"
    ],
    "Shopify_SubscriptionDiscount": [
      "Shopify_SubscriptionAppliedCodeDiscount",
      "Shopify_SubscriptionManualDiscount"
    ],
    "Shopify_SubscriptionDiscountValue": [
      "Shopify_SubscriptionDiscountFixedAmountValue",
      "Shopify_SubscriptionDiscountPercentageValue"
    ],
    "Shopify_SubscriptionShippingOptionResult": [
      "Shopify_SubscriptionShippingOptionResultFailure",
      "Shopify_SubscriptionShippingOptionResultSuccess"
    ],
    "Shopify_TaxonomyCategoryAttribute": [
      "Shopify_TaxonomyAttribute",
      "Shopify_TaxonomyChoiceListAttribute",
      "Shopify_TaxonomyMeasurementAttribute"
    ],
    "Shopify_TenderTransactionDetails": [
      "Shopify_TenderTransactionCreditCardDetails"
    ],
    "Shopify_WebhookSubscriptionEndpoint": [
      "Shopify_WebhookEventBridgeEndpoint",
      "Shopify_WebhookHttpEndpoint",
      "Shopify_WebhookPubSubEndpoint"
    ],
    "archiveEntries": [
      "Editorial"
    ],
    "contentContent": [
      "Form",
      "Gallery",
      "Grid",
      "Lock",
      "MixedMedia"
    ],
    "countdownConfigurationPreview": [
      "Layout",
      "Page"
    ],
    "customSectionSection": [
      "Collection"
    ],
    "eventProducts": [
      "CombinedListing",
      "Product"
    ],
    "lockExemptionExemptions": [
      "Collection",
      "Editorial",
      "Page",
      "Product"
    ],
    "lockPageLocks": [
      "Collection",
      "Editorial",
      "Page",
      "Product"
    ]
  }
};
      export default result;
    
export type CreateCollectionMutationVariables = Exact<{
  data: CollectionCreateInput;
}>;


export type CreateCollectionMutation = { __typename?: 'Mutation', createCollection?: { __typename?: 'Collection', id: string, gid: string, slug: string, title: string, legacyResourceId: string } | null };

export type UpdateCollectionMutationVariables = Exact<{
  where: CollectionWhereUniqueInput;
  data: CollectionUpdateInput;
}>;


export type UpdateCollectionMutation = { __typename?: 'Mutation', updateCollection?: { __typename?: 'Collection', slug: string, title: string } | null };

export type DeleteCollectionMutationVariables = Exact<{
  where: CollectionWhereUniqueInput;
}>;


export type DeleteCollectionMutation = { __typename?: 'Mutation', deleteCollection?: { __typename?: 'Collection', gid: string } | null };

export type UpsertCollectionMutationVariables = Exact<{
  where: CollectionWhereUniqueInput;
  upsert: CollectionUpsertInput;
}>;


export type UpsertCollectionMutation = { __typename?: 'Mutation', upsertCollection?: { __typename?: 'Collection', id: string } | null, publishCollection?: { __typename?: 'Collection', id: string } | null };

export type GetHygraphCollectionsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetHygraphCollectionsQuery = { __typename?: 'Query', collections: Array<{ __typename?: 'Collection', id: string, gid: string }> };

export type GetHygraphProductsQueryVariables = Exact<{
  after?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetHygraphProductsQuery = { __typename?: 'Query', productsConnection: { __typename?: 'ProductConnection', edges: Array<{ __typename?: 'ProductEdge', node: { __typename?: 'Product', id: string, gid: string } }>, pageInfo: { __typename?: 'PageInfo', hasNextPage: boolean, endCursor?: string | null } } };

export type GetProductQueryVariables = Exact<{
  where: ProductWhereUniqueInput;
}>;


export type GetProductQuery = { __typename?: 'Query', product?: { __typename?: 'Product', slug: string } | null };

export type CreateProductMutationVariables = Exact<{
  data: ProductCreateInput;
}>;


export type CreateProductMutation = { __typename?: 'Mutation', createProduct?: { __typename?: 'Product', id: string, gid: string, slug: string, title?: string | null, legacyResourceId: string } | null };

export type UpdateProductMutationVariables = Exact<{
  where: ProductWhereUniqueInput;
  data: ProductUpdateInput;
}>;


export type UpdateProductMutation = { __typename?: 'Mutation', updateProduct?: { __typename?: 'Product', slug: string, title?: string | null } | null };

export type DeleteProductMutationVariables = Exact<{
  where: ProductWhereUniqueInput;
}>;


export type DeleteProductMutation = { __typename?: 'Mutation', deleteProduct?: { __typename?: 'Product', gid: string } | null };

export type UpsertProductMutationVariables = Exact<{
  where: ProductWhereUniqueInput;
  upsert: ProductUpsertInput;
}>;


export type UpsertProductMutation = { __typename?: 'Mutation', upsertProduct?: { __typename?: 'Product', id: string } | null, publishProduct?: { __typename?: 'Product', id: string } | null };

export type PublishManyMutationVariables = Exact<{
  where: ProductManyWhereInput;
}>;


export type PublishManyMutation = { __typename?: 'Mutation', publishManyProductsConnection: { __typename?: 'ProductConnection', edges: Array<{ __typename?: 'ProductEdge', node: { __typename?: 'Product', id: string } }> } };


export const CreateCollectionDocument = gql`
    mutation CreateCollection($data: CollectionCreateInput!) {
  createCollection(data: $data) {
    id
    gid
    slug
    title
    legacyResourceId
  }
}
    `;
export const UpdateCollectionDocument = gql`
    mutation UpdateCollection($where: CollectionWhereUniqueInput!, $data: CollectionUpdateInput!) {
  updateCollection(where: $where, data: $data) {
    slug
    title
  }
}
    `;
export const DeleteCollectionDocument = gql`
    mutation DeleteCollection($where: CollectionWhereUniqueInput!) {
  deleteCollection(where: $where) {
    gid
  }
}
    `;
export const UpsertCollectionDocument = gql`
    mutation UpsertCollection($where: CollectionWhereUniqueInput!, $upsert: CollectionUpsertInput!) {
  upsertCollection(where: $where, upsert: $upsert) {
    id
  }
  publishCollection(where: $where) {
    id
  }
}
    `;
export const GetHygraphCollectionsDocument = gql`
    query GetHygraphCollections {
  collections {
    id
    gid
  }
}
    `;
export const GetHygraphProductsDocument = gql`
    query GetHygraphProducts($after: String) {
  productsConnection(first: 100, after: $after) {
    edges {
      node {
        id
        gid
      }
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;
export const GetProductDocument = gql`
    query GetProduct($where: ProductWhereUniqueInput!) {
  product(where: $where) {
    slug
  }
}
    `;
export const CreateProductDocument = gql`
    mutation CreateProduct($data: ProductCreateInput!) {
  createProduct(data: $data) {
    id
    gid
    slug
    title
    legacyResourceId
  }
}
    `;
export const UpdateProductDocument = gql`
    mutation UpdateProduct($where: ProductWhereUniqueInput!, $data: ProductUpdateInput!) {
  updateProduct(where: $where, data: $data) {
    slug
    title
  }
}
    `;
export const DeleteProductDocument = gql`
    mutation DeleteProduct($where: ProductWhereUniqueInput!) {
  deleteProduct(where: $where) {
    gid
  }
}
    `;
export const UpsertProductDocument = gql`
    mutation UpsertProduct($where: ProductWhereUniqueInput!, $upsert: ProductUpsertInput!) {
  upsertProduct(where: $where, upsert: $upsert) {
    id
  }
  publishProduct(where: $where, to: PUBLISHED) {
    id
  }
}
    `;
export const PublishManyDocument = gql`
    mutation PublishMany($where: ProductManyWhereInput!) {
  publishManyProductsConnection(where: $where, to: PUBLISHED) {
    edges {
      node {
        id
      }
    }
  }
}
    `;

export type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string, operationType?: string, variables?: any) => Promise<T>;


const defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType, _variables) => action();

export function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {
  return {
    CreateCollection(variables: CreateCollectionMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<CreateCollectionMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<CreateCollectionMutation>(CreateCollectionDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'CreateCollection', 'mutation', variables);
    },
    UpdateCollection(variables: UpdateCollectionMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<UpdateCollectionMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<UpdateCollectionMutation>(UpdateCollectionDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'UpdateCollection', 'mutation', variables);
    },
    DeleteCollection(variables: DeleteCollectionMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<DeleteCollectionMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<DeleteCollectionMutation>(DeleteCollectionDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'DeleteCollection', 'mutation', variables);
    },
    UpsertCollection(variables: UpsertCollectionMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<UpsertCollectionMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<UpsertCollectionMutation>(UpsertCollectionDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'UpsertCollection', 'mutation', variables);
    },
    GetHygraphCollections(variables?: GetHygraphCollectionsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetHygraphCollectionsQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<GetHygraphCollectionsQuery>(GetHygraphCollectionsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetHygraphCollections', 'query', variables);
    },
    GetHygraphProducts(variables?: GetHygraphProductsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetHygraphProductsQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<GetHygraphProductsQuery>(GetHygraphProductsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetHygraphProducts', 'query', variables);
    },
    GetProduct(variables: GetProductQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetProductQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<GetProductQuery>(GetProductDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetProduct', 'query', variables);
    },
    CreateProduct(variables: CreateProductMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<CreateProductMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<CreateProductMutation>(CreateProductDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'CreateProduct', 'mutation', variables);
    },
    UpdateProduct(variables: UpdateProductMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<UpdateProductMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<UpdateProductMutation>(UpdateProductDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'UpdateProduct', 'mutation', variables);
    },
    DeleteProduct(variables: DeleteProductMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<DeleteProductMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<DeleteProductMutation>(DeleteProductDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'DeleteProduct', 'mutation', variables);
    },
    UpsertProduct(variables: UpsertProductMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<UpsertProductMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<UpsertProductMutation>(UpsertProductDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'UpsertProduct', 'mutation', variables);
    },
    PublishMany(variables: PublishManyMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<PublishManyMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<PublishManyMutation>(PublishManyDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'PublishMany', 'mutation', variables);
    }
  };
}
export type Sdk = ReturnType<typeof getSdk>;